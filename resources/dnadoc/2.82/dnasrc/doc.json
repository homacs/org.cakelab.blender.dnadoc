{
  "module": "DNA", 
  "source": "Blender Source Code", 
  "structs": {
    "AnimData": {
      "doc": "<p>{@link AnimData}  -------------------------------<mdash/><mdash/>  Animation data for some {@link ID}  block (adt)</p><p> This block of data is used to provide all of the necessary animation data for a data-block. Currently, this data will not be reusable, as there shouldn't be any need to do so.</p><p> This information should be made available for most if not all ID-blocks, which should enable all of its settings to be animatable locally. Animation from 'higher-up' ID-AnimData blocks may override local settings.</p><p> This data-block should be placed immediately after the {@link ID}  block where it is used, so that the code which retrieves this data can do so in an easier manner. See blenkernel/intern/anim_sys.c for details. </p>", 
      "fields": {
        "act_blendmode": "<p> settings for active action evaluation (based on NLA strip settings) Accumulation mode for active action. </p>", 
        "act_extendmode": "<p> Extrapolation mode for active action. </p>", 
        "act_influence": "<p> Influence for active action. </p>", 
        "act_track": "<p> Active NLA-track (only set/used during tweaking, so no need to worry about dangling pointers). </p>", 
        "action": "<p> active action - acts as the 'tweaking track' for the NLA </p>", 
        "actstrip": "<p> Active NLA-strip (only set/used during tweaking, so no need to worry about dangling pointers). </p>", 
        "driver_array": "<p> Runtime data, for depsgraph evaluation. </p>", 
        "drivers": "<p> 'drivers' for this ID-block's settings - FCurves, but are completely separate from those for animation dataStandard user-created Drivers/Expressions (used as part of a rig). </p>", 
        "flag": "<p> settings for animation evaluation User-defined settings. </p>", 
        "nla_tracks": "<p> nla-tracks </p>", 
        "overrides": "<p> Temp storage ({@link AnimOverride} ) of values for settings that are animated (but the value hasn't been keyframed). </p>", 
        "tmpact": "<p> temp-storage for the 'real' active action (i.e. the one used before the tweaking-action took over to be edited in the Animation Editors) </p>"
      }
    }, 
    "AnimOverride": {
      "doc": "<p><hr/> \n Animation Data {@link AnimOverride}  -------------------------------<mdash/><mdash/>  Animation Override (aor)</p><p> This is used to as temporary storage of values which have been changed by the user, but not yet keyframed (thus, would get overwritten by the animation system before the user had a chance to see the changes that were made).</p><p> It is probably not needed for overriding keyframed values in most cases, as those will only get evaluated on frame-change now. That situation may change in future. </p>", 
      "fields": {
        "array_index": "<p> If applicable, the index of the RNA-array item to get. </p>", 
        "rna_path": "<p> RNA-path to use to resolve data-access. </p>", 
        "value": "<p> Value to override setting with. </p>"
      }
    }, 
    "ARegion": {
      "fields": {
        "alignment": "<p> How it should split. </p>", 
        "do_draw": "<p> Private, cached notifier events. </p>", 
        "do_draw_overlay": "<p> Private, cached notifier events. </p>", 
        "drawrct": "<p> Runtime for partial redraw, same or smaller than winrct. </p>", 
        "flag": "<p> Hide, .... </p>", 
        "flagfullscreen": "<p> Temporary copy of flag settings for clean fullscreen. </p>", 
        "gizmo_map": "<p> Gizmo-map of this region. </p>", 
        "handlers": "<p> #wmEventHandler. </p>", 
        "headerstr": "<p> Use this string to draw info. </p>", 
        "overlap": "<p> Private, set for indicate drawing overlapped. </p>", 
        "panels": "<p>{@link Panel} . </p>", 
        "panels_category": "<p>{@link Panel}  categories runtime. </p>", 
        "panels_category_active": "<p> Stack of panel categories. </p>", 
        "regiondata": "<p> XXX 2.50, need spacedata equivalent?. </p>", 
        "regiontimer": "<p> Blend in/out. </p>", 
        "regiontype": "<p> Window, header, etc. identifier for drawing. </p>", 
        "sizex": "<p><code></code> . </p>", 
        "type": "<p> Callbacks for this region type. </p>", 
        "ui_lists": "<p>{@link uiList} . </p>", 
        "ui_previews": "<p>{@link uiPreview} . </p>", 
        "uiblocks": "<p> #uiBlock. </p>", 
        "v2d": "<p> 2D-View scrolling/zoom info (most regions are 2d anyways). </p>", 
        "visible": "<p> Region is currently visible on screen. </p>", 
        "winrct": "<p> Coordinates of region. </p>", 
        "winx": "<p> Size. </p>"
      }
    }, 
    "ARegion_Runtime": {
      "fields": {
        "category": "<p>{@link Panel}  category to use between 'layout' and 'draw'. </p>", 
        "offset_x": "<p> The offset needed to not overlap with window scrollbars. Only used by HUD regions for now. </p>", 
        "visible_rect": "<p> The visible part of the region, use with region overlap not to draw on top of the overlapping regions.</p><p> Lazy initialize, zero'd when unset, relative to {@link ARegion.winrct}  x/y min. </p>"
      }
    }, 
    "ArmatureGpencilModifierData": {
      "fields": {
        "deformflag": "<p> Deformflag replaces armature->deformflag. </p>", 
        "prevCos": "<p> Stored input of previous modifier, for vertexgroup blending. </p>", 
        "vgname": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "ArmatureModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "deformflag": "<p> Deformflag replaces armature->deformflag. </p>", 
        "prevCos": "<p> Stored input of previous modifier, for vertexgroup blending. </p>"
      }
    }, 
    "ArrayGpencilModifierData": {
      "fields": {
        "count": "<p> Number of elements in array. </p>", 
        "flag": "<p> Several flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "mat_rpl": "<p>{@link Material}  replace (0 keep default). </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "offset": "<p> Location increments. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "rnd": "<p> (first element is the index) random values. </p>", 
        "rnd_rot": "<p> Random size factor. </p>", 
        "rnd_size": "<p> Random size factor. </p>", 
        "rot": "<p> Rotation changes. </p>", 
        "scale": "<p> Scale changes. </p>", 
        "shift": "<p> Shift increment. </p>"
      }
    }, 
    "ArrayModifierData": {
      "fields": {
        "count": "<p> the number of duplicates to generate for MOD_ARR_FIXEDCOUNT </p>", 
        "curve_ob": "<p> the curve object to use for MOD_ARR_FITCURVE </p>", 
        "end_cap": "<p> the object with which to cap the end of the array </p>", 
        "fit_type": "<p> determines how duplicate count is calculated; one of:<ul><li><p> MOD_ARR_FIXEDCOUNT -> fixed</p></li><li><p> MOD_ARR_FITLENGTH -> calculated to fit a set length</p></li><li><p> MOD_ARR_FITCURVE -> calculated to fit the length of a {@link Curve}  object </p></li></ul> \nMOD_ARR_FIXEDCOUNT -> fixedMOD_ARR_FITLENGTH -> calculated to fit a set lengthMOD_ARR_FITCURVE -> calculated to fit the length of a Curve object \n</p>", 
        "flags": "<p> general flags: MOD_ARR_MERGE -> merge vertices in adjacent duplicates </p>", 
        "length": "<p> the length over which to distribute the duplicates </p>", 
        "merge_dist": "<p> the limit below which to merge vertices in adjacent duplicates </p>", 
        "offset": "<p> a constant duplicate offset; 1 means the duplicates are 1 unit apart </p>", 
        "offset_ob": "<p> the object to use for object offset </p>", 
        "offset_type": "<p> flags specifying how total offset is calculated; binary OR of:<ul><li><p> MOD_ARR_OFF_CONST -> total offset += offset</p></li><li><p> MOD_ARR_OFF_RELATIVE -> total offset += relative * object width</p></li><li><p> MOD_ARR_OFF_OBJ -> total offset += offset_ob's matrix total offset is the sum of the individual enabled offsets </p></li></ul> \nMOD_ARR_OFF_CONST -> total offset += offsetMOD_ARR_OFF_RELATIVE -> total offset += relative * object widthMOD_ARR_OFF_OBJ -> total offset += offset_ob's matrix total offset is the sum of the individual enabled offsets \n</p>", 
        "scale": "<p> a scaled factor for duplicate offsets; 1 means the duplicates are 1 object-width apart </p>", 
        "start_cap": "<p> the object with which to cap the start of the array </p>"
      }
    }, 
    "AssetUUID": {
      "doc": "<p> Used to communicate with asset engines outside of 'import' context. </p>"
    }, 
    "AudioData": {
      "doc": "<p><hr/> \n Audio </p>"
    }, 
    "AviCodecData": {
      "doc": "<p><hr/> \n {@link Scene}  Data ************************************************************* Output Format Data </p>", 
      "fields": {
        "cbFormat": "<p> Size of lpFormat buffer. </p>", 
        "cbParms": "<p> Size of lpParms buffer. </p>", 
        "dwBytesPerSecond": "<p> Bytes per second. </p>", 
        "dwFlags": "<p> Flags... see below. </p>", 
        "dwInterleaveEvery": "<p> For non-video streams only. </p>", 
        "dwKeyFrameEvery": "<p> Keyframe rate. </p>", 
        "dwQuality": "<p> Compress quality 0-10,000. </p>", 
        "fccHandler": "<p> Compressor. </p>", 
        "fccType": "<p> Stream type, for consistency. </p>", 
        "lpFormat": "<p> Save format. </p>", 
        "lpParms": "<p> Compressor options. </p>"
      }
    }, 
    "bAction": {
      "doc": "<p> Actions --------------------------------<mdash/><mdash/>  Action - reusable F-Curve 'bag' (act)</p><p> This contains F-Curves that may affect settings from more than one {@link ID}  blocktype and/or datablock (i.e. sub-data linked/used directly to the {@link ID}  block that the animation data is linked to), but with the restriction that the other unrelated data (i.e. data that is not directly used or linked to by the source {@link ID}  block).</p><p> It serves as a 'unit' of reusable animation information (i.e. keyframes/motion data), that affects a group of related settings (as defined by the user). </p>", 
      "fields": {
        "active_marker": "<p> Index of the active marker. </p>", 
        "chanbase": "<p> Legacy data - Action Channels ({@link bActionChannel} ) in pre-2.5 animation system. \n@deprecated\n Deprecated</p>", 
        "curves": "<p> Function-curves ({@link FCurve} ). </p>", 
        "flag": "<p> Settings for this action. </p>", 
        "groups": "<p> Groups of function-curves ({@link bActionGroup} ). </p>", 
        "id": "<p> -serialisation for relinking. </p>", 
        "idroot": "<p> Type of ID-blocks that action can be assigned to (if 0, will be set to whatever {@link ID}  first evaluates it). </p>", 
        "markers": "<p> Markers local to the Action (used to provide Pose-Libraries). </p>"
      }
    }, 
    "bActionChannel": {
      "doc": "<p><hr/> \n Legacy Data WARNING: Action Channels are now deprecated... they were part of the old animation system! (ONLY USED FOR DO_VERSIONS...)</p><p> Action Channels belong to Actions. They are linked with an IPO block, and can also own Constraint Channels in certain situations.</p><p> Action-Channels can only belong to one group at a time, but they still live the Action's list of achans (to preserve backwards compatibility, and also minimize the code that would need to be recoded). Grouped achans are stored at the start of the list, according to the position of the group in the list, and their position within the group. </p>", 
      "fields": {
        "constraintChannels": "<p> Constraint Channels (when Action Channel represents an {@link Object}  or {@link Bone} ). </p>", 
        "flag": "<p> Settings accessed via bitmapping. </p>", 
        "grp": "<p> Action Group this Action Channel belongs to. </p>", 
        "ipo": "<p> IPO block this action channel references. </p>", 
        "name": "<p> Channel name, MAX_NAME. </p>", 
        "temp": "<p> Temporary setting - may be used to indicate group that channel belongs to during syncing. </p>"
      }
    }, 
    "bActionConstraint": {
      "doc": "<p> Action Constraint </p>", 
      "fields": {
        "local": "<p> Was used in versions prior to the Constraints recode. </p>", 
        "subtarget": "<p> MAX_ID_NAME-2. </p>", 
        "type": "<p> What transform 'channel' drives the result. </p>"
      }
    }, 
    "bActionGroup": {
      "doc": "<p><hr/> \n Action Groups --------------------------------<mdash/><mdash/>  Action-Channel Group (agrp)</p><p> These are stored as a list per-Action, and are only used to group that Action's channels in an Animation Editor.</p><p> Even though all FCurves live in a big list per Action, each group they are in also holds references to the achans within that list which belong to it. Care must be taken to ensure that action-groups never end up being the sole 'owner' of a channel.</p><p> This is also exploited for bone-groups. Bone-Groups are stored per {@link bPose} , and are used primarily to color bones in the 3d-view. There are other benefits too, but those are mostly related to Action-Groups.</p><p> Note that these two uses each have their own RNA 'ActionGroup' and 'BoneGroup'. </p>", 
      "fields": {
        "channels": "<p> Note: this must not be touched by standard listbase functions which would clear links to other channels. </p>", 
        "cs": "<p> Color set to use when customCol == -1. </p>", 
        "customCol": "<p> Index of custom color set to use when used for bones (0=default - used for all old files, -1=custom set). </p>", 
        "flag": "<p> Settings for this action-group. </p>", 
        "name": "<p> Name of the group. </p>"
      }
    }, 
    "bActionModifier": {
      "doc": "<p> simple uniform modifier structure, assumed it can hold all type info </p>", 
      "fields": {
        "no_rot_axis": "<p> path deform modifier </p>", 
        "noisesize": "<p> noise modifier </p>"
      }
    }, 
    "bActionStrip": {
      "doc": "<p> #define ACTSTRIP_MOD_DEFORM 0 #define ACTSTRIP_MOD_NOISE 1 </p><p> NLA-Modifier Types (UNUSED) </p>", 
      "fields": {
        "act": "<p> The action referenced by this strip. </p>", 
        "actoffs": "<p> Offset within action, for cycles and striding. </p>", 
        "actstart": "<p> The range of frames taken from the action. </p>", 
        "blendin": "<p> The number of frames on either end of the strip's length to fade in/out. </p>", 
        "curmod": "<p> Current modifier for buttons. </p>", 
        "ipo": "<p> Blending ipo - was used for some old NAN era experiments. Non-functional currently. </p>", 
        "modifiers": "<p> Modifier stack. </p>", 
        "object": "<p> For groups, the actual object being nla'ed. </p>", 
        "offs_bone": "<p> If repeat, use this bone/channel for defining offset. </p>", 
        "repeat": "<p> The number of times to repeat the action range. </p>", 
        "scale": "<p> The amount the action range is scaled by. </p>", 
        "start": "<p> The range of frames covered by this strip. </p>", 
        "stride_axis": "<p> Axis 0=x, 1=y, 2=z. </p>", 
        "stridechannel": "<p> Instead of stridelen, it uses an action channel. </p>", 
        "stridelen": "<p> The stridelength (considered when flag & ACT_USESTRIDE). </p>"
      }
    }, 
    "bAddon": {
      "fields": {
        "prop": "<p> User-Defined Properties on this Addon (for storing preferences). </p>"
      }
    }, 
    "BakeData": {
      "fields": {
        "filepath": "<p> FILE_MAX. </p>"
      }
    }, 
    "bAnimVizSettings": {
      "doc": "<p> Visualization General ------------------<mdash/><mdash/><mdash/>  for Objects or Poses (but NOT PoseChannels) Animation Visualization Settings (avs) </p>", 
      "fields": {
        "path_bakeflag": "<p>{@link eMotionPaths_BakeFlag} . </p>", 
        "path_bc": "<p> Number of frames before/after current frame to show. </p>", 
        "path_sf": "<p> Start and end frames of path-calculation range. </p>", 
        "path_step": "<p> Number of frames between points indicated on the paths. </p>", 
        "path_type": "<p> Motion {@link Path}  Settings -------------<mdash/><mdash/>  {@link eMotionPath_Types} . </p>", 
        "path_viewflag": "<p>{@link eMotionPaths_ViewFlag} . </p>", 
        "recalc": "<p> General Settings ------------------<mdash/><mdash/>  {@link eAnimViz_RecalcFlags} . </p>"
      }
    }, 
    "bArmature": {
      "fields": {
        "act_bone": "<p> active bones should work like active object where possible<ul><li><p> active and selection are unrelated</p></li><li><p> active & hidden is not allowed</p></li><li><p> from the user perspective active == last selected</p></li><li><p> active should be ignored when not visible (hidden layer) Active bone. </p></li></ul> \nactive and selection are unrelatedactive & hidden is not allowedfrom the user perspective active == last selectedactive should be ignored when not visible (hidden layer) Active bone. \n</p>", 
        "act_edbone": "<p> Active editbone (in editmode). </p>", 
        "bonehash": "<p> Ghash for quicker lookups of bones by name. </p>", 
        "edbo": "<p> Editbone listbase, we use pointer so we can check state. </p>", 
        "layer": "<p> For buttons to work, both variables in this order together. </p>", 
        "layer_used": "<p> For UI, to show which layers are there. </p>", 
        "needs_flush_to_id": "<p>{@link ID}  data is older than edit-mode data (TODO: move to edit-mode struct). </p>"
      }
    }, 
    "bArmatureConstraint": {
      "doc": "<p> Armature Constraint </p>", 
      "fields": {
        "flag": "<p> General settings/state indicators accessed by bitmapping. </p>", 
        "targets": "<p> A list of targets that this constraint has (bConstraintTarget-s). </p>"
      }
    }, 
    "Base": {
      "fields": {
        "base_orig": "<p> Pointer to an original base. Is initialized for evaluated view layer. NOTE: Only allowed to be accessed from within active dependency graph. </p>", 
        "flag": "<p> Final flags, including both accumulated collection flags and object's restriction flags. </p>", 
        "flag_from_collection": "<p> Flags which are based on the collections flags evaluation, does not include flags from object's restrictions. </p>", 
        "lay": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "bCameraSolverConstraint": {
      "doc": "<p>{@link Camera}  Solver constraints </p>"
    }, 
    "bChildOfConstraint": {
      "doc": "<p> Child Of Constraint </p>", 
      "fields": {
        "flag": "<p> Settings. </p>", 
        "invmat": "<p> Parent-inverse matrix to use. </p>", 
        "subtarget": "<p> String to specify a subobject target, MAX_ID_NAME-2. </p>", 
        "tar": "<p>{@link Object}  which will act as parent (or target comes from). </p>"
      }
    }, 
    "bClampToConstraint": {
      "doc": "<p> Clamp-To Constraint </p>", 
      "fields": {
        "flag": "<p> Which axis/plane to compare owner's location on . </p>", 
        "flag2": "<p> For legacy reasons, this is flag2. used for any extra settings. </p>", 
        "tar": "<p> 'target' must be a curve. </p>"
      }
    }, 
    "bConstraint": {
      "doc": "<p> A Constraint </p>", 
      "fields": {
        "data": "<p> Constraint data (a valid constraint type). </p>", 
        "enforce": "<p> Amount of influence exherted by constraint (0.0-1.0). </p>", 
        "flag": "<p> Flag - General Settings. </p>", 
        "headtail": "<p> Point along subtarget bone where the actual target is. 0=head (default for all), 1=tail. </p>", 
        "ipo": "<p> old animation system, deprecated for 2.5. Local influence ipo or driver \n@deprecated\n Deprecated</p>", 
        "lin_error": "<p> below are readonly fields that are set at runtime by the solver for use in the GE (only IK atm) Residual error on constraint expressed in blender unit. </p>", 
        "name": "<p> Constraint name, MAX_NAME. </p>", 
        "ownspace": "<p> Space that owner should be evaluated in. </p>", 
        "rot_error": "<p> Residual error on constraint expressed in radiant. </p>", 
        "tarspace": "<p> Space that target should be evaluated in (only used if 1 target). </p>", 
        "type": "<p> Constraint type. </p>"
      }
    }, 
    "bConstraintChannel": {
      "doc": "<p> XXX deprecated... old AnimSys. </p><p> channels reside in {@link Object}  or Action ({@link ListBase} ) constraintChannels </p>"
    }, 
    "bConstraintTarget": {
      "doc": "<p> Multiple-target constraints ---------------<mdash/><mdash/>  This struct defines a constraint target. It is used during constraint solving regardless of how many targets the constraint has. </p>", 
      "fields": {
        "flag": "<p> Runtime settings (for editor, etc.). </p>", 
        "matrix": "<p> Matrix used during constraint solving - should be cleared before each use. </p>", 
        "rotOrder": "<p> Rotation order for target (as defined in BLI_math.h). </p>", 
        "space": "<p> Space that target should be evaluated in (overrides bConstraint->tarspace). </p>", 
        "subtarget": "<p> Subtarget - pchan or vgroup name, MAX_ID_NAME-2. </p>", 
        "tar": "<p>{@link Object}  to use as target. </p>", 
        "type": "<p> Type of target (eConstraintObType). </p>", 
        "weight": "<p> Weight for armature deform. </p>"
      }
    }, 
    "bDampTrackConstraint": {
      "doc": "<p> Damped Tracking constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bDeformGroup": {
      "doc": "<p> Vertex Groups - Name Info </p>", 
      "fields": {
        "flag": "<p> need this flag for locking weights </p>", 
        "name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "bDistLimitConstraint": {
      "doc": "<p> Limit Distance Constraint </p>", 
      "fields": {
        "dist": "<p> Distance (radius of clamping sphere) from target. </p>", 
        "flag": "<p> Settings. </p>", 
        "mode": "<p> How to limit in relation to clamping sphere. </p>", 
        "soft": "<p> Distance from clamping-sphere to start applying 'fade'. </p>", 
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bDopeSheet": {
      "doc": "<p><hr/> \n Action/Dopesheet Editor Storage for Dopesheet/Grease-Pencil Editor data </p>", 
      "fields": {
        "chanbase": "<p> XXX not used! </p><p> Cache for channels (only initialized when pinned). </p>", 
        "filter_grp": "<p>{@link Object}  group for option to only include objects that belong to this {@link Collection} . </p>", 
        "filterflag": "<p> Flags to use for filtering data. </p>", 
        "flag": "<p> Standard flags. </p>", 
        "renameIndex": "<p><code></code>  of channel to rename - only gets set by renaming operator. </p>", 
        "searchstr": "<p> String to search for in displayed names of F-Curves, or NlaTracks/GP Layers/etc. </p>", 
        "source": "<p> Currently ID_SCE (for Dopesheet), and ID_SC (for Grease Pencil). </p>"
      }
    }, 
    "BevelModifierData": {
      "fields": {
        "bevel_angle": "<p> if the MOD_BEVEL_ANGLE is set, this will be how \"sharp\" an edge must be before it gets beveled </p>", 
        "custom_profile": "<p>{@link Curve}  info for the custom profile </p>", 
        "defgrp_name": "<p> if the MOD_BEVEL_VWEIGHT option is set, this will be the name of the vert group, MAX_VGROUP_NAME </p>", 
        "e_flags": "<p> Flags to direct how edge weights are applied to verts. </p>", 
        "flags": "<p> General option flags. </p>", 
        "lim_flags": "<p> Flags to tell the tool how to limit the bevel. </p>", 
        "mat": "<p>{@link Material}  index if >= 0, else material inherited from surrounding faces. </p>", 
        "miter_inner": "<p> Patterns to use for mitering non-reflex and reflex miter edges </p>", 
        "profile": "<p> Controls profile shape (0->1, .5 is round). </p>", 
        "res": "<p> The resolution (as originally coded, it is the number of recursive bevels). </p>", 
        "val_flags": "<p> Used to interpret the bevel value. </p>", 
        "value": "<p> The \"raw\" bevel value (distance/amount to bevel). </p>", 
        "vmesh_method": "<p> The method to use for creating >2-way intersections </p>"
      }
    }, 
    "BevList": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "BevPoint": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "dir": "<p> 3D Only. </p>", 
        "sina": "<p> 2D Only. </p>"
      }
    }, 
    "BezTriple": {
      "doc": "<p> Keyframes on F-Curves (allows code reuse of Bezier eval code) and Points on Bezier Curves/Paths are generally BezTriples.</p><p><h2>Note</h2><p>{@link BezTriple.tilt}  location in struct is abused by {@link Key}  system.</p> BezTriple.tilt location in struct is abused by Key system.\n<h2>Note</h2><p> vec in {@link BezTriple}  looks like this:<ul><li><p> vec[0][0] = x location of handle 1</p></li><li><p> vec[0][1] = y location of handle 1</p></li><li><p> vec[0][2] = z location of handle 1 (not used for {@link FCurve}  Points(2d))</p></li><li><p> vec[1][0] = x location of control point</p></li><li><p> vec[1][1] = y location of control point</p></li><li><p> vec[1][2] = z location of control point</p></li><li><p> vec[2][0] = x location of handle 2</p></li><li><p> vec[2][1] = y location of handle 2</p></li><li><p> vec[2][2] = z location of handle 2 (not used for {@link FCurve}  Points(2d)) </p></li></ul> \nvec[0][0] = x location of handle 1vec[0][1] = y location of handle 1vec[0][2] = z location of handle 1 (not used for FCurve Points(2d))vec[1][0] = x location of control pointvec[1][1] = y location of control pointvec[1][2] = z location of control pointvec[2][0] = x location of handle 2vec[2][1] = y location of handle 2vec[2][2] = z location of handle 2 (not used for FCurve Points(2d)) \n</p> vec in BezTriple looks like this:\nvec[0][0] = x location of handle 1vec[0][1] = y location of handle 1vec[0][2] = z location of handle 1 (not used for FCurve Points(2d))vec[1][0] = x location of control pointvec[1][1] = y location of control pointvec[1][2] = z location of control pointvec[2][0] = x location of handle 2vec[2][1] = y location of handle 2vec[2][2] = z location of handle 2 (not used for FCurve Points(2d)) \n\n</p>", 
      "fields": {
        "amplitude": "<p> BEZT_IPO_ELASTIC. </p>", 
        "back": "<p> BEZT_IPO_BACK. </p>", 
        "easing": "<p> Easing: easing type for interpolation mode (eBezTriple_Easing). </p>", 
        "f1": "<p> F1, f2, f3: used for selection status. </p>", 
        "f5": "<p> F5: used for auto handle to distinguish between normal handle and exception (extrema). </p>", 
        "h1": "<p> H1, h2: the handle type of the two handles. </p>", 
        "hide": "<p> Hide: used to indicate whether {@link BezTriple}  is hidden (3D), type of keyframe (eBezTriple_KeyframeType). </p>", 
        "ipo": "<p>{@link Ipo} : interpolation mode for segment from this {@link BezTriple}  to the next. </p>", 
        "radius": "<p> For bevel tapering & modifiers. </p>", 
        "tilt": "<p> Tilt in 3D View. </p>", 
        "weight": "<p> Used for softbody goal weight. </p>"
      }
    }, 
    "bFaceMap": {
      "doc": "<p> Face Maps </p>", 
      "fields": {
        "name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "bFollowPathConstraint": {
      "doc": "<p> Follow {@link Path}  constraints </p>", 
      "fields": {
        "offset": "<p> Offset in time on the path (in frames), when NOT using 'fixed position'. </p>", 
        "offset_fac": "<p> Parametric offset factor defining position along path, when using 'fixed position'. </p>", 
        "tar": "<p> Must be path object. </p>"
      }
    }, 
    "bFollowTrackConstraint": {
      "doc": "<p> Follow Track constraints </p>", 
      "fields": {
        "object": "<p> MAX_NAME. </p>", 
        "track": "<p> MAX_NAME. </p>"
      }
    }, 
    "bGPdata": {
      "doc": "<p> Grease-Pencil Annotations - 'DataBlock' </p>", 
      "fields": {
        "adt": "<p> Animation data - for animating draw settings. </p>", 
        "draw_mode": "<p> Draw mode for strokes (eGP_DrawMode). </p>", 
        "flag": "<p> Settings for this data-block. </p>", 
        "gcolor_next": "<p> Optional color for ghosts after the active frame. </p>", 
        "gcolor_prev": "<p> Optional color for ghosts before the active frame. </p>", 
        "gstep": "<p> Ghosts Before: max number of ghost frames to show between active frame and the one before it (0 = only the ghost itself). </p>", 
        "gstep_next": "<p> Ghosts After: max number of ghost frames to show after active frame and the following it (0 = only the ghost itself). </p>", 
        "id": "<p> Grease Pencil data is a data-block. </p>", 
        "layers": "<p> Grease-Pencil data BGPDlayers. </p>", 
        "line_color": "<p> Color for edit line. </p>", 
        "mat": "<p> Materials array. </p>", 
        "onion_factor": "<p> Onion skinning Onion alpha factor change. </p>", 
        "onion_flag": "<p> Onion skinning flags (eGPD_OnionFlag). </p>", 
        "onion_keytype": "<p> Keyframe type for onion filter (eBezTriple_KeyframeType plus All option) </p>", 
        "onion_mode": "<p> Onion skinning range (eGP_OnionModes). </p>", 
        "palettes": "<p> Palettes List of {@link bGPDpalette} 's - Deprecated (2.78 - 2.79 only). \n@deprecated\n Deprecated</p>", 
        "pixfactor": "<p> 3D Viewport/Appearance Settings Factor to define pixel size conversion. </p>", 
        "totcol": "<p> Total materials. </p>", 
        "totlayer": "<p> stats </p>", 
        "zdepth_offset": "<p> Offset for drawing over surfaces to keep strokes on top. </p>"
      }
    }, 
    "bGPdata_Runtime": {
      "doc": "<p><hr/> \n GP Datablock Runtime temp data for {@link bGPdata}  </p>", 
      "fields": {
        "ar": "<p> Last region where drawing was originated. </p>", 
        "bfill_style": "<p> Buffer style for filling areas (used to select shader type). </p>", 
        "bstroke_style": "<p> Buffer style for drawing strokes (used to select shader type). </p>", 
        "cp_points": "<p> Array of control-points for stroke. </p>", 
        "mode": "<p> Settings for color. </p>", 
        "sbuffer": "<p> Stroke buffer. </p>", 
        "sbuffer_sflag": "<p> Stroke Buffer data (only used during paint-session)<ul><li><p> buffer must be initialized before use, but freed after whole paint operation is overFlags for stroke that cache represents. </p></li></ul> \nbuffer must be initialized before use, but freed after whole paint operation is overFlags for stroke that cache represents. \n</p>", 
        "sbuffer_size": "<p> Number of total elements available in cache. </p>", 
        "sbuffer_used": "<p> Number of elements currently used in cache. </p>", 
        "scolor": "<p> GP {@link Object}  drawing Buffer stroke color. </p>", 
        "sfill": "<p> Buffer fill color. </p>", 
        "tot_cp_points": "<p> Number of control-points for stroke. </p>"
      }
    }, 
    "bGPDcontrolpoint": {
      "doc": "<p><hr/> \n GP Stroke Points 'Control Point' data for primitives and curves </p>", 
      "fields": {
        "color": "<p> Point color. </p>", 
        "size": "<p> Radius. </p>", 
        "x": "<p> X and y coordinates of control point. </p>"
      }
    }, 
    "bGPDframe": {
      "doc": "<p> Grease-Pencil Annotations - 'Frame' -> Acts as storage for the 'image' formed by strokes </p>", 
      "fields": {
        "flag": "<p> Temp settings. </p>", 
        "framenum": "<p> Frame number of this frame. </p>", 
        "key_type": "<p> Keyframe type (eBezTriple_KeyframeType). </p>", 
        "strokes": "<p> List of the simplified 'strokes' that make up the frame's data. </p>"
      }
    }, 
    "bGPDframe_Runtime": {
      "doc": "<p><hr/> \n GP Frame Runtime temp data for {@link bGPDframe}  </p>", 
      "fields": {
        "parent_obmat": "<p> Parent matrix for drawing. </p>"
      }
    }, 
    "bGPDlayer": {
      "doc": "<p> Grease-Pencil Annotations - 'Layer' </p>", 
      "fields": {
        "actframe": "<p> Active frame (should be the frame that is currently being displayed). </p>", 
        "blend_mode": "<p> Blend modes. </p>", 
        "color": "<p> Color for strokes in layers. Used for annotations, and for ruler (which uses GPencil internally). </p>", 
        "fill": "<p> Fill color for strokes in layers. Not used anymore (was only for). </p>", 
        "flag": "<p> Settings for layer. </p>", 
        "frames": "<p> List of annotations to display for frames ({@link bGPDframe}  list). </p>", 
        "gcolor_next": "<p> Color for ghosts after the active frame. </p>", 
        "gcolor_prev": "<p> Color for ghosts before the active frame. </p>", 
        "gstep": "<p> annotation onion skin Ghosts Before: max number of ghost frames to show between active frame and the one before it (0 = only the ghost itself). </p>", 
        "gstep_next": "<p> Ghosts After: max number of ghost frames to show after active frame and the following it (0 = only the ghost itself). </p>", 
        "info": "<p> Name/reference info for this layer (i.e. \"director's comments, 12/.3\") needs to be kept unique, as it's used as the layer identifier </p>", 
        "inverse": "<p> Inverse matrix (only used if parented). </p>", 
        "line_change": "<p> Thickness adjustment. </p>", 
        "onion_flag": "<p> Per-layer onion-skinning flags (eGPDlayer_OnionFlag). </p>", 
        "opacity": "<p> Opacity of the layer. </p>", 
        "parent": "<p> Parent object. </p>", 
        "parsubstr": "<p> String describing subobject info, MAX_ID_NAME-2. </p>", 
        "pass_index": "<p> Used to filter groups of layers in modifiers. </p>", 
        "thickness": "<p> Thickness to apply to strokes (Annotations). </p>", 
        "tintcolor": "<p> Color used to tint layer, alpha value is used as factor. </p>", 
        "viewlayername": "<p> Name of the layer used to filter render output. </p>"
      }
    }, 
    "bGPDlayer_Runtime": {
      "doc": "<p><hr/> \n GP Layer Runtime temp data for {@link bGPDlayer}  </p>", 
      "fields": {
        "icon_id": "<p> Id for dynamic icon used to show annotation color preview for layer. </p>"
      }
    }, 
    "bGPDpalette": {
      "doc": "<p> palette of colors </p>", 
      "fields": {
        "colors": "<p> Pointer to individual colors. </p>", 
        "info": "<p>{@link Palette}  name. Must be unique. </p>"
      }
    }, 
    "bGPDpalettecolor": {
      "doc": "<p><hr/> \n <hr/> \n GP Palettes (Deprecated - 2.78 - 2.79 only) color of palettes </p>", 
      "fields": {
        "_pad": "<p> Padding for compiler alignment error. </p>", 
        "fill": "<p> Color that should be used for drawing \"fills\" for strokes. </p>", 
        "flag": "<p> Settings for palette color. </p>", 
        "info": "<p> Color name. Must be unique. </p>"
      }
    }, 
    "bGPDspoint": {
      "doc": "<p> Grease-Pencil Annotations - 'Stroke Point' -> Coordinates may either be 2d or 3d depending on settings at the time -> Coordinates of point on stroke, in proportions of window size This assumes that the bottom-left corner is (0,0) </p>", 
      "fields": {
        "_pad2": "<p> Runtime data </p>", 
        "flag": "<p> Additional options. </p>", 
        "pressure": "<p> Pressure of input device (from 0 to 1) at this point. </p>", 
        "strength": "<p> Color strength (used for alpha factor). </p>", 
        "time": "<p> Seconds since start of stroke. </p>", 
        "uv_fac": "<p> Factor of uv along the stroke. </p>", 
        "uv_rot": "<p> Uv rotation for dot mode. </p>", 
        "x": "<p> Co-ordinates of point (usually 2d, but can be 3d as well). </p>"
      }
    }, 
    "bGPDspoint_Runtime": {
      "fields": {
        "idx_orig": "<p> Original index array position </p>", 
        "pt_orig": "<p> Original point (used to dereference evaluated data) </p>"
      }
    }, 
    "bGPDstroke": {
      "doc": "<p> Grease-Pencil Annotations - 'Stroke' -> A stroke represents a (simplified version) of the curve drawn by the user in one 'mouse-down'->'mouse-up' operation </p>", 
      "fields": {
        "caps": "<p> Caps mode for each stroke extreme </p>", 
        "colorname": "<p> Color name. \n@deprecated\n Deprecated</p>", 
        "dvert": "<p> Vertex weight data. </p>", 
        "flag": "<p> Various settings about this stroke. </p>", 
        "gradient_f": "<p> gradient control along y for color </p>", 
        "gradient_s": "<p> factor xy of shape for dots gradients </p>", 
        "inittime": "<p> Init time of stroke. </p>", 
        "mat_nr": "<p>{@link Material}  index. </p>", 
        "points": "<p> Array of data-points for stroke. </p>", 
        "thickness": "<p> Thickness of stroke. </p>", 
        "tot_triangles": "<p> Number of triangles in array. </p>", 
        "totpoints": "<p> Number of data-points in array. </p>", 
        "triangles": "<p> Tessellated triangles for GP Fill. </p>"
      }
    }, 
    "bGPDstroke_Runtime": {
      "doc": "<p><hr/> \n GP Strokes Runtime temp data for {@link bGPDstroke}  </p>", 
      "fields": {
        "gps_orig": "<p> Original stroke (used to dereference evaluated data) </p>", 
        "multi_frame_falloff": "<p> Runtime falloff factor (only for transform). </p>", 
        "tmp_fill_rgba": "<p> runtime final fill colors (result of original colors and modifiers) </p>", 
        "tmp_layerinfo": "<p> temporary layer name only used during copy/paste to put the stroke in the original layer </p>", 
        "tmp_stroke_rgba": "<p> runtime final colors (result of original colors and modifiers) </p>"
      }
    }, 
    "bGPDtriangle": {
      "doc": "<p><hr/> \n GP Fill - Triangle Tessellation Data Grease-Pencil Annotations - 'Triangle' -> A triangle contains the index of three vertices for filling the stroke This is only used if high quality fill is enabled </p>", 
      "fields": {
        "uv": "<p> texture coordinates for verts </p>", 
        "verts": "<p> indices for tessellated triangle used for GP Fill </p>"
      }
    }, 
    "bGPgrid": {
      "doc": "<p> grid configuration </p>"
    }, 
    "bIKParam": {
      "doc": "<p> header for all bPose->ikparam structures </p>"
    }, 
    "bItasc": {
      "doc": "<p> bPose->ikparam when bPose->iksolver=1 </p>", 
      "fields": {
        "dampeps": "<p> Threshold of singular value from which the damping start progressively. </p>", 
        "dampmax": "<p> Maximum damping for DLS solver. </p>", 
        "maxvel": "<p> Max velocity to SDLS solver. </p>"
      }
    }, 
    "bKinematicConstraint": {
      "doc": "<p> Inverse-Kinematics (IK) constraint This constraint supports a variety of mode determine by the type field according to eConstraint_IK_Type. Some fields are used by all types, some are specific to some types This is indicated in the comments for each field </p>", 
      "fields": {
        "dist": "<p> Distance: distance (radius of clamping sphere) from target. </p>", 
        "flag": "<p> All & CopyPose: some options Like CONSTRAINT_IK_TIP. </p>", 
        "grabtarget": "<p> CopyPose: for target-less IK. </p>", 
        "iterations": "<p> All: Maximum number of iterations to try. </p>", 
        "max_rootbone": "<p> CopyPose: for auto-ik, maximum length of chain. </p>", 
        "mode": "<p> Distance: how to limit in relation to clamping sphere: LIMITDIST_... </p>", 
        "orientweight": "<p> CopyPose: Amount of rotation a target applies on chain. </p>", 
        "poleangle": "<p> All: Pole vector rest angle. </p>", 
        "polesubtarget": "<p> All: Pole vector sub-object target, MAX_ID_NAME-2. </p>", 
        "poletar": "<p> All: Pole vector target. </p>", 
        "rootbone": "<p> All: index to rootbone, if zero go all the way to mother bone. </p>", 
        "subtarget": "<p> All: String to specify sub-object target, MAX_ID_NAME-2. </p>", 
        "tar": "<p> All: target object in case constraint needs a target. </p>", 
        "type": "<p> Subtype of IK constraint: eConstraint_IK_Type. </p>", 
        "weight": "<p> All: Weight of constraint in IK tree. </p>"
      }
    }, 
    "bLocateLikeConstraint": {
      "doc": "<p> Copy Location Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bLockTrackConstraint": {
      "doc": "<p> Locked Axis Tracking constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bLocLimitConstraint": {
      "doc": "<p> transform limiting constraints - zero target ----------------------<mdash/><mdash/>  Limit Location Constraint </p>"
    }, 
    "BlurShaderFxData": {
      "fields": {
        "blur": "<p> Not visible in rna. </p>", 
        "coc": "<p> Circle of confusion. </p>", 
        "flag": "<p> Flags. </p>", 
        "samples": "<p> Number of samples. </p>"
      }
    }, 
    "bMinMaxConstraint": {
      "doc": "<p> Floor Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bMotionPath": {
      "doc": "<p> ........ Motion {@link Path}  data cache (mpath)<ul><li><p> for elements providing transforms (i.e. Objects or PoseChannels) </p></li></ul> \nfor elements providing transforms (i.e. Objects or PoseChannels) \n</p>", 
      "fields": {
        "color": "<p> Optional custom color. </p>", 
        "end_frame": "<p> For drawing paths, the end frame number. </p>", 
        "flag": "<p> Baking settings - eMotionPath_Flag. </p>", 
        "length": "<p> The number of cached verts. </p>", 
        "line_thickness": "<p> Line thickness. </p>", 
        "points": "<p>{@link Path}  samples. </p>", 
        "points_vbo": "<p> Used for drawing. </p>", 
        "start_frame": "<p> For drawing paths, the start frame number. </p>"
      }
    }, 
    "bMotionPathVert": {
      "doc": "<p><hr/> \n Visualization Motion Paths ---------------------------<mdash/><mdash/><mdash/>  (used for Pose Channels and Objects) Data point for motion path (mpv) </p>", 
      "fields": {
        "co": "<p> Coordinates of point in 3D-space. </p>", 
        "flag": "<p> Quick settings. </p>"
      }
    }, 
    "bNode": {
      "doc": "<p> limit data in {@link bNode}  to what we want to see saved? </p>", 
      "fields": {
        "anim_init_locx": "<p> Initial locx for insert offset animation. </p>", 
        "anim_ofsx": "<p> Offset that will be added to locx for insert offset animation. </p>", 
        "block": "<p> Runtime during drawing. </p>", 
        "branch_tag": "<p> Used at runtime to tag derivatives branches. EEVEE only. </p>", 
        "butr": "<p> Optional buttons area. </p>", 
        "color": "<p> Custom user-defined color. </p>", 
        "custom1": "<p> To be abused for buttons. </p>", 
        "done": "<p> Both for dependency and sorting. </p>", 
        "id": "<p> Optional link to libdata. </p>", 
        "idname": "<p> Runtime type identifier. </p>", 
        "internal_links": "<p> List of cached internal links (input to output), for muted nodes and operators. </p>", 
        "iter_flag": "<p> Used at runtime when iterating over node branches. </p>", 
        "label": "<p> Custom user-defined label, MAX_NAME. </p>", 
        "lasty": "<p> Lasty: check preview render status, menunr: browse {@link ID}  blocks. </p>", 
        "locx": "<p> Root offset for drawing (parent space). </p>", 
        "miniwidth": "<p> Node width if hidden. </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "need_exec": "<p> Need_exec is set as UI execution event, exec is flag during exec. </p>", 
        "nr": "<p> Number of this node in list, used for UI exec events. </p>", 
        "offsetx": "<p> Additional offset from loc. </p>", 
        "original": "<p> The original node in the tree (for localized tree). </p>", 
        "parent": "<p> Parent node. </p>", 
        "preview_xsize": "<p> XXX TODO Node totr size depends on the prvr size, which in turn is determined from preview size. In earlier versions {@link bNodePreview}  was stored directly in nodes, but since now there can be multiple instances using different preview images it is possible that required node size varies between instances. preview_xsize, preview_ysize defines a common reserved size for preview rect for now, could be replaced by more accurate node instance drawing, but that requires removing totr from DNA and replacing all uses with per-instance data.Reserved size of the preview rect. </p>", 
        "prop": "<p> User-defined properties. </p>", 
        "prvr": "<p> Optional preview area. </p>", 
        "ssr_id": "<p> XXX: eevee only, id of screen space reflection layer, needs to be a float to feed GPU_uniform. </p>", 
        "sss_id": "<p> XXX: eevee only, id of screen subsurface scatter layer, needs to be a float to feed GPU_uniform. </p>", 
        "stack_index": "<p> For groupnode, offset in global caller stack. </p>", 
        "storage": "<p> Custom data, must be struct, for storage in file. </p>", 
        "threaddata": "<p> Optional extra storage for use in thread (read only then!). </p>", 
        "tmp_flag": "<p> Used at runtime when going through the tree. Initialize before use. </p>", 
        "totr": "<p> Entire boundbox (worldspace). </p>", 
        "typeinfo": "<p> Runtime type information. </p>", 
        "update": "<p> Update flags. </p>", 
        "width": "<p> Node custom width and height. </p>"
      }
    }, 
    "bNodeInstanceHashEntry": {
      "doc": "<p>{@link Base}  struct for entries in node instance hash. WARNING: pointers are cast to this struct internally, it must be first member in hash entry structs! </p>", 
      "fields": {
        "tag": "<p> tags for cleaning the cache </p>"
      }
    }, 
    "bNodeInstanceKey": {
      "doc": "<p> Unique hash key for identifying node instances Defined as a struct because DNA does not support other typedefs. </p>"
    }, 
    "bNodePreview": {
      "fields": {
        "hash_entry": "<p> Must be first. </p>"
      }
    }, 
    "bNodeSocket": {
      "fields": {
        "cache": "<p> Cached data from execution. </p>", 
        "default_value": "<p> Default input value used for unlinked sockets. </p>", 
        "groupsock": "<p> XXX deprecated, still forward compatible since verification restores pointer from matching own_index. \n@deprecated\n Deprecated</p>", 
        "identifier": "<p> Unique identifier for mapping. </p>", 
        "idname": "<p> Runtime type identifier. </p>", 
        "in_out": "<p> Input/output type. </p>", 
        "limit": "<p> Max. number of links. </p>", 
        "link": "<p> A link pointer, set in ntreeUpdateTree. </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "ns": "<p> XXX deprecated, socket input values are stored in default_value now. kept for forward compatibility Custom data for inputs, only UI writes in this. \n@deprecated\n Deprecated</p>", 
        "own_index": "<p> internal data to retrieve relations and groups DEPRECATED, now uses the generic identifier string insteadGroup socket identifiers, to find matching pairs after reading files. \n@deprecated\n Deprecated</p>", 
        "prop": "<p> User-defined properties. </p>", 
        "stack_index": "<p> execution data Local stack index. </p>", 
        "stack_type": "<p> XXX deprecated, kept for forward compatibility \n@deprecated\n Deprecated</p>", 
        "storage": "<p> XXX deprecated, only used for the {@link Image}  and OutputFile nodes, should be removed at some point.Custom storage. </p>", 
        "to_index": "<p> XXX deprecated, only used for restoring old group node links \n@deprecated\n Deprecated</p>", 
        "typeinfo": "<p> Runtime type information. </p>"
      }
    }, 
    "bNodeSocketValueFloat": {
      "fields": {
        "subtype": "<p> RNA subtype. </p>"
      }
    }, 
    "bNodeSocketValueInt": {
      "doc": "<p> socket value structs for input buttons DEPRECATED now using {@link ID}  properties </p>", 
      "fields": {
        "subtype": "<p> RNA subtype. </p>"
      }
    }, 
    "bNodeSocketValueString": {
      "fields": {
        "value": "<p> 1024 = FILEMAX. </p>"
      }
    }, 
    "bNodeSocketValueVector": {
      "fields": {
        "subtype": "<p> RNA subtype. </p>"
      }
    }, 
    "bNodeStack": {
      "fields": {
        "datatype": "<p> Type of data pointer. </p>", 
        "external": "<p> Data is used by external nodes (no freeing). </p>", 
        "hasinput": "<p> When input has link, tagged before executing. </p>", 
        "hasoutput": "<p> When output is linked, tagged before executing. </p>", 
        "is_copy": "<p> Data is a copy of external data (no freeing). </p>", 
        "sockettype": "<p> Type of socket stack comes from, to remap linking different sockets. </p>"
      }
    }, 
    "bNodeTree": {
      "doc": "<p> the basis for a Node tree, all links and nodes reside internal here only re-usable node trees are in the library though, materials and textures allocate own tree struct </p>", 
      "fields": {
        "active_viewer_key": "<p> Defines the node tree instance to use for the \"active\" context, in case multiple different editors are used and make context ambiguous. </p>", 
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "chunksize": "<p> Tile size for compositor engine. </p>", 
        "cur_index": "<p> Sockets in groups have unique identifiers, adding new sockets always will increase this counter. </p>", 
        "done": "<p> Generic temporary flag for recursion check (DFS/BFS). </p>", 
        "edit_quality": "<p> Quality setting when editing. </p>", 
        "execdata": "<p> Execution data.</p><p> XXX It would be preferable to completely move this data out of the underlying node tree, so node tree execution could finally run independent of the tree itself. This would allow node trees to be merely linked by other data (materials, textures, etc.), as {@link ID}  data is supposed to. Execution data is generated from the tree once at execution start and can then be used as long as necessary, even while the tree is being modified. </p>", 
        "gpd": "<p> Grease pencil data. </p>", 
        "idname": "<p> Runtime type identifier. </p>", 
        "inputs": "<p> Lists of {@link bNodeSocket}  to hold default values and own_index. Warning! Don't make links to these sockets, input/output nodes are used for that. These sockets are used only for generating external interfaces. </p>", 
        "interface_type": "<p> Runtime RNA type of the group interface. </p>", 
        "is_updating": "<p> Flag to prevent re-entrant update calls. </p>", 
        "nodetype": "<p> Specific node type this tree is used for. \n@deprecated\n Deprecated</p>", 
        "previews": "<p> Node preview hash table Only available in base node trees (e.g. scene->node_tree) </p>", 
        "progress": "<p> callbacks </p>", 
        "render_quality": "<p> Quality setting when rendering. </p>", 
        "stats_draw": "<p><h2>Warning</h2><p> may be called by different threads </p> may be called by different threads \n</p>", 
        "type": "<p> Set init on fileread. </p>", 
        "typeinfo": "<p> Runtime type information. </p>", 
        "update": "<p> Update flags. </p>", 
        "view_center": "<p> Node tree stores own offset for consistent editor view. </p>"
      }
    }, 
    "bNodeTreePath": {
      "fields": {
        "node_name": "<p> MAX_NAME. </p>", 
        "parent_key": "<p>{@link Base}  key for nodes in this tree instance. </p>", 
        "view_center": "<p> V2d center point, so node trees can have different offsets in editors. </p>"
      }
    }, 
    "bObjectSolverConstraint": {
      "doc": "<p>{@link Camera}  Solver constraints </p>", 
      "fields": {
        "invmat": "<p> Parent-inverse matrix to use. </p>", 
        "object": "<p> MAX_NAME. </p>"
      }
    }, 
    "BoidRuleGoalAvoid": {
      "fields": {
        "signal_id": "<p> signals </p>"
      }
    }, 
    "BoidSettings": {
      "doc": "<p> planned for near future typedef struct BoidSignal { struct BoidSignal *next, *prev; float loc[3]; float volume, falloff; int id; } BoidSignal; typedef struct BoidSignalDefine { struct BoidSignalDefine *next, *prev; int id, rt; char name[32]; } BoidSignalDefine; </p><p> typedef struct BoidSimulationData { {@link ListBase}  signal_defines;// list of defined signals  {@link ListBase}  signals[20]; // gathers signals from all channels  struct KDTree_3d *signaltrees[20]; char channel_names[20][32]; int last_signal_id; // used for incrementing signal ids  int flag; // switches for drawing stuff  } BoidSimulationData; </p>", 
      "fields": {
        "air_min_speed": "<p> flying related </p>", 
        "land_jump_speed": "<p> walk/run related </p>"
      }
    }, 
    "BoidState": {
      "fields": {
        "ruleset_type": "<p> rules </p>", 
        "signal_id": "<p> signal </p>"
      }
    }, 
    "Bone": {
      "doc": "<p> this system works on different transformation space levels;</p><p> 1) {@link Bone}  Space; with each {@link Bone}  having own (0,0,0) origin 2) Armature Space; the rest position, in {@link Object}  space, Bones Spaces are applied hierarchical 3) Pose Space; the animation position, in {@link Object}  space 4) {@link World}  Space; {@link Object}  matrix applied to Pose or Armature space </p>", 
      "fields": {
        "arm_mat": "<p> matrix: (bonemat(b)+head(b))*arm_mat(b-1), rest po.s </p>", 
        "arm_roll": "<p> Roll in Armature Space (rest pos). </p>", 
        "arm_tail": "<p> head/tail in Armature Space (rest pos). </p>", 
        "bbone_prev": "<p> Next/prev bones to use as handle references when calculating bbones (optional). </p>", 
        "bbone_prev_type": "<p> Type of next/prev bone handles. </p>", 
        "bone_mat": "<p> rotation derived from head/tail/roll. </p>", 
        "childbase": "<p> Children . </p>", 
        "dist": "<p> dist, weight: for non-deformgroup deforms. </p>", 
        "ease1": "<p> Length of bezier handles. </p>", 
        "layer": "<p> Layers that bone appears on. </p>", 
        "name": "<p> Name of the bone - must be unique within the armature, MAXBONENAME. </p>", 
        "next": "<p> Next/prev elements within this list. </p>", 
        "parent": "<p> Parent (ik parent if appropriate flag is set. </p>", 
        "prop": "<p> User-Defined Properties on this {@link Bone} . </p>", 
        "rad_head": "<p> Radius for head/tail sphere, defining deform as well, parent->rad_tip overrides rad_head. </p>", 
        "roll": "<p> roll is input for editmode, length calculated. </p>", 
        "roll1": "<p> Curved bones settings - these define the \"restpose\" for a curved bone. </p>", 
        "segments": "<p> for B-bones. </p>", 
        "size": "<p> patch for upward compat, UNUSED!. </p>", 
        "tail": "<p> head/tail and roll in {@link Bone}  Space . </p>", 
        "xwidth": "<p> width: for block bones. keep in this order, transform!. </p>"
      }
    }, 
    "BoundBox": {
      "doc": "<p> The following illustrates the orientation of the bounding box in local space</p><p><pre></pre></p><p><pre> Z  Y\n| /\n|/\n.--<mdash/> X\n    2-------<mdash/> 6\n   /|         /|\n  / |        / |\n 1-------<mdash/> 5  |\n |  |       |  |\n |  3----<mdash/> |<ndash/> 7\n | /        | /\n |/         |/\n 0-------<mdash/></pre>  </p>"
    }, 
    "bPathCompare": {
      "fields": {
        "path": "<p> FILE_MAXDIR. </p>"
      }
    }, 
    "bPivotConstraint": {
      "doc": "<p> Pivot Constraint </p>", 
      "fields": {
        "flag": "<p> General flags {@link ePivotConstraint_Flag} . </p>", 
        "offset": "<p> Offset from the target to use, regardless of whether it exists. </p>", 
        "rotAxis": "<p> Rotation-driven activation: This option provides easier one-stop setups for footrollsRotation axes to consider for this ({@link ePivotConstraint_Axis} ). </p>", 
        "subtarget": "<p> Subtarget name (optional), MAX_ID_NAME-2. </p>", 
        "tar": "<p> Pivot Point: Either target object + offset, or just offset is usedTarget object (optional). </p>"
      }
    }, 
    "BPoint": {
      "doc": "<p><h2>Note</h2><p>{@link BPoint.tilt}  location in struct is abused by {@link Key}  system. </p> BPoint.tilt location in struct is abused by Key system. \n</p>", 
      "fields": {
        "f1": "<p> F1: selection status, hide: is point hidden or not. </p>", 
        "radius": "<p> User-set radius per point for beveling etc. </p>", 
        "tilt": "<p> Tilt in 3D View. </p>", 
        "weight": "<p> Used for softbody goal weight. </p>"
      }
    }, 
    "bPose": {
      "doc": "<p> Pose ------------------------------<mdash/><mdash/>  Pose-Object.</p><p> It is only found under ob->pose. It is not library data, even though there is a define for it (hack for the outliner). </p>", 
      "fields": {
        "active_group": "<p> Index of active group (starts from 1). </p>", 
        "agroups": "<p> List of bActionGroups. </p>", 
        "avs": "<p> Settings for visualization of bone animation. </p>", 
        "chan_array": "<p> Flat array of pose channels. It references pointers from chanbase. Used for quick pose channel lookup from an index. </p>", 
        "chanbase": "<p> List of pose channels, PoseBones in RNA. </p>", 
        "chanhash": "<p> Ghash for quicker string lookups. </p>", 
        "ctime": "<p> Local action time of this pose. </p>", 
        "cyclic_offset": "<p> Result of match and cycles, applied in BKE_pose_where_is(). </p>", 
        "ikdata": "<p> Temporary IK data, depends on the IK solver. Not saved in file. </p>", 
        "ikparam": "<p> IK solver parameters, structure depends on iksolver. </p>", 
        "iksolver": "<p> Ik solver to use, see ePose_IKSolverType. </p>", 
        "proxy_act_bone": "<p> Proxy active bone name, MAXBONENAME. </p>", 
        "proxy_layer": "<p> Proxy layer: copy from armature, gets synced. </p>", 
        "stride_offset": "<p> Applied to object. </p>"
      }
    }, 
    "bPoseChannel": {
      "doc": "<p><hr/> \n Poses PoseChannel ------------------------------<mdash/><mdash/>  PoseChannel</p><p> A PoseChannel stores the results of Actions and transform information with respect to the restposition of Armature bones </p>", 
      "fields": {
        "agrp_index": "<p> Index of action-group this bone belongs to (0 = default/no group). </p>", 
        "bbone_prev": "<p> B-Bone custom handles; set on read file or rebuild pose based on pchan->bone data. </p>", 
        "bboneflag": "<p>\n@deprecated\n Deprecated</p>", 
        "bone": "<p> Set on read file or rebuild pose. </p>", 
        "chan_mat": "<p> Matrix result of loc/quat/size, and where we put deform in, see next line </p>", 
        "child": "<p> Set on read file or rebuild pose, the 'ik' child, for b-bones. </p>", 
        "constflag": "<p> For quick detecting which constraints affect this channel. </p>", 
        "constinv": "<p> Inverse result of constraints. doesn't include effect of restposition, parent, and local transform. </p>", 
        "constraints": "<p> Constraints that act on this PoseChannel. </p>", 
        "custom": "<p> Draws custom object instead of default bone shape. </p>", 
        "custom_tx": "<p> Odd feature, display with another bones transform. needed in rare cases for advanced rigs, since the alternative is highly complicated - campbell </p>", 
        "disp_mat": "<p> For display, pose_mat with bone length applied. </p>", 
        "disp_tail_mat": "<p> For display, pose_mat with bone length applied and translated to tai.l </p>", 
        "draw_data": "<p> Runtime data for color and bbone segment matrix. </p>", 
        "eul": "<p> Rotations - written in by actions or transform (but only one representation gets used at any time)Euler rotation. </p>", 
        "flag": "<p> Dynamic, for detecting transform changes. </p>", 
        "ikflag": "<p> Settings for IK bones. </p>", 
        "iklinweight": "<p> Weight of joint stretch constraint. </p>", 
        "ikrotweight": "<p> Weight of joint rotation constraint. </p>", 
        "iktree": "<p> \"IK trees\" - only while evaluating pose. </p>", 
        "limitmin": "<p> DOF constraint, note! - these are stored in degrees, not radians. </p>", 
        "loc": "<p> Transforms - written in by actions or transform. </p>", 
        "mpath": "<p> Motion path cache for this bone. </p>", 
        "name": "<p> Need to match bone name length: MAXBONENAME. </p>", 
        "orig_pchan": "<p> Points to an original pose channel. </p>", 
        "parent": "<p> Set on read file or rebuild pose. </p>", 
        "pose_head": "<p> Actually pose_mat[3]. </p>", 
        "pose_mat": "<p> Constraints accumulate here. in the end, pose_mat = bone->arm_mat * chan_mat this matrix is object space. </p>", 
        "pose_tail": "<p> Also used for drawing help lines. </p>", 
        "prop": "<p> User-Defined Properties on this PoseChannel. </p>", 
        "protectflag": "<p> Protect channels from being transformed. </p>", 
        "quat": "<p> Quaternion rotation. </p>", 
        "roll1": "<p> Curved bones settings - these are for animating, and are applied on top of the copies in pchan->bone </p>", 
        "rotAxis": "<p> Axis-angle rotation. </p>", 
        "rotmode": "<p>{@link eRotationModes}  - rotation representation to use. </p>", 
        "runtime": "<p> Runtime data (keep last). </p>", 
        "selectflag": "<p> Copy of bone flag, so you can work with library armatures, not for runtime use. </p>", 
        "siktree": "<p> Spline-IK \"trees\" - only while evaluating pose. </p>", 
        "stiffness": "<p> DOF stiffness. </p>", 
        "temp": "<p> Use for outliner. </p>"
      }
    }, 
    "bPoseChannel_Runtime": {
      "fields": {
        "bbone_deform_mats": "<p> Delta from rest to pose in matrix and {@link DualQuat}  form. </p>", 
        "bbone_rest_mats": "<p> Rest and posed matrices for segments. </p>", 
        "bbone_segments": "<p> B-Bone shape data: copy of the segment count for validation. </p>", 
        "deform_dual_quat": "<p> Cached dual quaternion for deformation. </p>"
      }
    }, 
    "bPoseChannelDrawData": {
      "doc": "<p> runtime </p>", 
      "fields": {
        "bbone_matrix": "<p> keep last </p>"
      }
    }, 
    "bPythonConstraint": {
      "doc": "<p> Python {@link Script}  Constraint </p>", 
      "fields": {
        "flag": "<p> General settings/state indicators accessed by bitmapping. </p>", 
        "prop": "<p> 'id-properties' used to store custom properties for constraint. </p>", 
        "subtarget": "<p> Subtarget from previous implementation (version-patch sets this to \"\" on file-load), MAX_ID_NAME-2. </p>", 
        "tar": "<p> Target from previous implementation (version-patch sets this to NULL on file-load). </p>", 
        "targets": "<p> A list of targets that this constraint has (bConstraintTarget-s). </p>", 
        "tarnum": "<p> Number of targets - usually only 1-3 are needed. </p>", 
        "text": "<p> Text-buffer (containing script) to execute. </p>"
      }
    }, 
    "bRigidBodyJointConstraint": {
      "doc": "<p> Rigid Body constraint </p>"
    }, 
    "bRotateLikeConstraint": {
      "doc": "<p> Copy Rotation Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bRotLimitConstraint": {
      "doc": "<p> Limit Rotation Constraint </p>"
    }, 
    "Brush": {
      "fields": {
        "alpha": "<p> Opacity. </p>", 
        "blend": "<p> Blend mode. </p>", 
        "curve": "<p> Falloff curve. </p>", 
        "dash_ratio": "<p> Rate </p>", 
        "falloff_shape": "<p> Projection shape (sphere, circle). </p>", 
        "fill_threshold": "<p> fill tool </p>", 
        "flag": "<p> General purpose flags. </p>", 
        "gpencil_tool": "<p> Active grease pencil tool. </p>", 
        "gradient": "<p> Color gradient. </p>", 
        "gradient_fill_mode": "<p> Source for fill tool color gradient application. </p>", 
        "gradient_stroke_mode": "<p> Source for stroke color gradient application. </p>", 
        "height": "<p> Affectable height of brush (layer height for layer tool, i.e.). </p>", 
        "icon_filepath": "<p> 1024 = FILE_MAX. </p>", 
        "imagepaint_tool": "<p> Active image paint tool. </p>", 
        "jitter": "<p> Jitter the position of the brush. </p>", 
        "jitter_absolute": "<p> Absolute jitter in pixels. </p>", 
        "mask_pressure": "<p> Pressure influence for mask. </p>", 
        "mask_tool": "<p> Enum eBrushMaskTool, only used if sculpt_tool is SCULPT_TOOL_MASK. </p>", 
        "multiplane_scrape_angle": "<p> multiplane scrape </p>", 
        "ob_mode": "<p>{@link eObjectMode} : to see if the brush is compatible, use for display only. </p>", 
        "plane_offset": "<p> Offset for plane brushes (clay, flatten, fill, scrape). </p>", 
        "pose_offset": "<p> pose </p>", 
        "rake_factor": "<p> Rake actual data (not texture), used for sculpt. </p>", 
        "rate": "<p>{@link Paint}  operations / second (airbrush). </p>", 
        "rgb": "<p> Color. </p>", 
        "sculpt_plane": "<p> The direction of movement for sculpt vertices. </p>", 
        "sculpt_tool": "<p> Active sculpt tool. </p>", 
        "secondary_rgb": "<p> Background color. </p>", 
        "sharp_threshold": "<p> soften/sharpen </p>", 
        "size": "<p>{@link Brush}  diameter. </p>", 
        "smooth_stroke_factor": "<p> Higher values limit fast changes in the stroke direction. </p>", 
        "smooth_stroke_radius": "<p> Turning radius (in pixels) for smooth stroke. </p>", 
        "spacing": "<p> Spacing of paint operations. </p>", 
        "texture_overlay_alpha": "<p> overlay </p>", 
        "uv_sculpt_tool": "<p> Active sculpt tool. </p>", 
        "vertexpaint_tool": "<p> Active vertex paint. </p>", 
        "weight": "<p>{@link Brush}  weight. </p>", 
        "weightpaint_tool": "<p> Active weight paint. </p>"
      }
    }, 
    "BrushClone": {
      "fields": {
        "alpha": "<p> Transparency for drawing of clone image. </p>", 
        "image": "<p>{@link Image}  for clone tool. </p>", 
        "offset": "<p> Offset of clone image from canvas. </p>"
      }
    }, 
    "BrushGpencilSettings": {
      "fields": {
        "active_smooth": "<p> Smooth while drawing factor. </p>", 
        "brush_type": "<p> Moved to '{@link Brush.gpencil_tool} '. \n@deprecated\n Deprecated</p>", 
        "draw_angle": "<p> Angle when the brush has full thickness. </p>", 
        "draw_angle_factor": "<p> Factor to apply when angle change (only 90 degrees). </p>", 
        "draw_jitter": "<p> Amount of jitter to apply to newly created strokes. </p>", 
        "draw_random_press": "<p> Factor of randomness for pressure. </p>", 
        "draw_random_strength": "<p> Factor of strength for strength. </p>", 
        "draw_random_sub": "<p> Factor of randomness for subdivision. </p>", 
        "draw_sensitivity": "<p> Amount of sensitivity to apply to newly created strokes. </p>", 
        "draw_smoothfac": "<p> Amount of smoothing to apply to newly created strokes. </p>", 
        "draw_smoothlvl": "<p> Number of times to apply smooth factor to new strokes. </p>", 
        "draw_strength": "<p> Amount of alpha strength to apply to newly created strokes. </p>", 
        "draw_subdivide": "<p> Number of times to subdivide new strokes. </p>", 
        "era_strength_f": "<p> Factor to apply to strength for soft eraser. </p>", 
        "era_thickness_f": "<p> Factor to apply to thickness for soft eraser. </p>", 
        "eraser_mode": "<p> Soft, hard or stroke. </p>", 
        "fill_draw_mode": "<p> Type of control lines drawing mode. </p>", 
        "fill_factor": "<p> Fill zoom factor </p>", 
        "fill_leak": "<p> Number of pixel to consider the leak is too small (x 2). </p>", 
        "fill_simplylvl": "<p> Number of simplify steps. </p>", 
        "fill_threshold": "<p> Factor for transparency. </p>", 
        "flag": "<p> Internal grease pencil drawing flags. </p>", 
        "gradient_f": "<p> gradient control along y for color </p>", 
        "gradient_s": "<p> factor xy of shape for dots gradients </p>", 
        "icon_id": "<p> Icon identifier. </p>", 
        "input_samples": "<p> Maximum distance before generate new point for very fast mouse movements. </p>", 
        "material": "<p> optional link of material to replace default in context {@link Material} . </p>", 
        "simplify_f": "<p> Simplify adaptive factor </p>", 
        "thick_smoothfac": "<p> Amount of thickness smoothing to apply to newly created strokes. </p>", 
        "thick_smoothlvl": "<p> Number of times to apply thickness smooth factor to new strokes. </p>", 
        "uv_random": "<p> Random factor for UV rotation. </p>"
      }
    }, 
    "bSameVolumeConstraint": {
      "doc": "<p> Maintain Volume Constraint </p>"
    }, 
    "bScreen": {
      "fields": {
        "active_region": "<p> Active region that has mouse focus. </p>", 
        "animtimer": "<p> If set, screen has timer handler added in window. </p>", 
        "context": "<p> Context callback. </p>", 
        "do_draw": "<p> Notifier for drawing edges. </p>", 
        "do_draw_drag": "<p> Notifier for dragging draw. </p>", 
        "do_draw_gesture": "<p> Notifier for gesture draw. </p>", 
        "do_draw_paintcursor": "<p> Notifier for paint cursor draw. </p>", 
        "do_refresh": "<p> Notifier for scale screen, changed screen, etc. </p>", 
        "flag": "<p> General flags. </p>", 
        "redraws_flag": "<p> User-setting for which editors get redrawn during anim playback. </p>", 
        "regionbase": "<p> Screen level regions (menus), runtime only. </p>", 
        "scene": "<p>\n@deprecated\n Deprecated</p>", 
        "scrubbing": "<p> Set when scrubbing to avoid some costly updates. </p>", 
        "skip_handling": "<p> Set to delay screen handling after switching back from maximized area. </p>", 
        "state": "<p> Temp screen for image render display or fileselect. </p>", 
        "temp": "<p> Temp screen in a temp window, don't save (like user prefs). </p>", 
        "tool_tip": "<p> Runtime. </p>", 
        "vertbase": "<p> TODO Should become {@link ScrAreaMap}  now. ** NOTE: KEEP ORDER IN SYNC WITH ScrAreaMap! (see AREAMAP_FROM_SCREEN macro above) ** Screens have vertices/edges to define areas. </p>", 
        "winid": "<p> Winid from WM, starts with 1. </p>"
      }
    }, 
    "bShrinkwrapConstraint": {
      "doc": "<p> ShrinkWrap Constraint </p>", 
      "fields": {
        "dist": "<p> Distance to kept from target. </p>", 
        "flag": "<p> Options. </p>", 
        "projAxis": "<p> Axis to project/constrain. </p>", 
        "projAxisSpace": "<p> Space to project axis in. </p>", 
        "projLimit": "<p> Distance to search. </p>", 
        "shrinkMode": "<p> Inside/outside/on surface (see MOD shrinkwrap). </p>", 
        "shrinkType": "<p> Shrink type (look on MOD shrinkwrap for values). </p>", 
        "trackAxis": "<p> Axis to align to normal. </p>"
      }
    }, 
    "bSizeLikeConstraint": {
      "doc": "<p> Copy Scale Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bSizeLimitConstraint": {
      "doc": "<p> Limit Scale Constraint </p>"
    }, 
    "bSound": {
      "fields": {
        "cache": "<p> unused currently int type; struct {@link bSound}  *child_sound; The audaspace handle for cache. </p>", 
        "handle": "<p> The handle for audaspace. </p>", 
        "name": "<p> The path to the sound file.1024 = FILE_MAX. </p>", 
        "newpackedfile": "<p> Deprecated; used for loading pre 2.5 files. </p>", 
        "packedfile": "<p> The packed file. </p>", 
        "playback_handle": "<p> The audaspace handle that should actually be played back. Should be cache if cache != NULL; otherwise it's handle </p>", 
        "spinlock": "<p> Spin-lock for asynchronous loading of sounds. </p>", 
        "tags": "<p> Runtime only, always reset in readfile. </p>", 
        "waveform": "<p> Waveform display data. </p>"
      }
    }, 
    "bSplineIKConstraint": {
      "doc": "<p> Spline IK Constraint Aligns 'n' bones to the curvature defined by the curve, with the chain ending on the bone that owns this constraint, and starting on the nth parent. </p>", 
      "fields": {
        "bulge": "<p> volume preservation settings </p>", 
        "chainlen": "<p> Number of bones ('n') that are in the chain. </p>", 
        "flag": "<p> settings General settings for constraint. </p>", 
        "numpoints": "<p> Number of points to bound in points array. </p>", 
        "points": "<p> binding details Array of numpoints items, denoting parametric positions along curve that joints should follow. </p>", 
        "tar": "<p> target(s) {@link Curve}  object (with follow path enabled) which drives the bone chain. </p>", 
        "xzScaleMode": "<p> Method used for determining the x & z scaling of the bones. </p>", 
        "yScaleMode": "<p> Method used for determining the y scaling of the bones. </p>"
      }
    }, 
    "bStretchToConstraint": {
      "doc": "<p> Stretch to constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bTheme": {
      "doc": "<p> A theme.</p><p><h2>Note</h2><p> Currently only a single theme is ever used at once. Different theme presets are stored as external files now. </p> Currently only a single theme is ever used at once. Different theme presets are stored as external files now. \n</p>", 
      "fields": {
        "active_theme_area": "<p>{@link ThemeWireColor}  tobj[20]; </p>", 
        "space_properties": "<p> Individual Spacetypes: <h2>Note</h2><p> Ensure #UI_THEMESPACE_END is updated when adding. </p> Ensure #UI_THEMESPACE_END is updated when adding. \n</p>", 
        "tarm": "<p> 20 sets of bone colors for this theme </p>"
      }
    }, 
    "bToolRef": {
      "doc": "<p> Stored per mode. </p>", 
      "fields": {
        "idname_fallback": "<p> Optionally use these when not interacting directly with the primary tools gizmo. </p>", 
        "mode": "<p> Value depends on the 'space_type', object mode for 3D view, image editor has own mode too. RNA needs to handle using item function. </p>", 
        "properties": "<p> Use for tool options, each group's name must match a tool name:</p><p> {\"Tool Name\": {\"SOME_OT_operator\": {...}, ..}, ..}</p><p> This is done since different tools may call the same operators with their own options. </p>", 
        "runtime": "<p> Variables needed to operate the tool. </p>", 
        "space_type": "<p> #bToolKey (spacetype, mode), used in 'WM_api.h' </p>", 
        "tag": "<p> Use to avoid initializing the same tool multiple times. </p>"
      }
    }, 
    "bToolRef_Runtime": {
      "fields": {
        "index": "<p> Index when a tool is a member of a group. </p>", 
        "keymap": "<p> One of these 3 must be defined. </p>", 
        "keymap_fallback": "<p> Keymap for {@link bToolRef.idname_fallback} , if set. </p>", 
        "op": "<p> Use to infer primary operator to use when setting accelerator keys. </p>"
      }
    }, 
    "bTrackToConstraint": {
      "doc": "<p> Single-target subobject constraints ---------------<mdash/><mdash/>  Track To Constraint </p>", 
      "fields": {
        "reserved1": "<p> I'll be using reserved1 and reserved2 as Track and Up flags, not sure if that's what they were intended for anyway. Not sure either if it would create backward incompatibility if I were to rename them.<ul><li><p> theeth </p></li></ul> \ntheeth \n</p>", 
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "bTransformCacheConstraint": {
      "doc": "<p> Transform matrix cache constraint </p>", 
      "fields": {
        "object_path": "<p> FILE_MAX. </p>", 
        "reader": "<p> Runtime. </p>"
      }
    }, 
    "bTransformConstraint": {
      "doc": "<p> Generic Transform->Transform Constraint </p>", 
      "fields": {
        "expo": "<p> Extrapolate motion? if 0, confine to ranges. </p>", 
        "from": "<p> Can be loc(0), rot(1) or size(2). </p>", 
        "from_max": "<p> To map on to to_min/max range. </p>", 
        "from_max_rot": "<p> To map on to to_min/max range. </p>", 
        "from_max_scale": "<p> To map on to to_min/max range. </p>", 
        "from_min": "<p> From_min/max defines range of target transform. </p>", 
        "from_min_rot": "<p> From_min/max defines range of target transform. </p>", 
        "from_min_scale": "<p> From_min/max defines range of target transform. </p>", 
        "from_rotation_mode": "<p> Input rotation type - uses the same values as driver targets. </p>", 
        "map": "<p> Defines which target-axis deform is copied by each owner-axis. </p>", 
        "mix_mode_loc": "<p> Mixing modes for location, rotation, and scale. </p>", 
        "subtarget": "<p> MAX_ID_NAME-2. </p>", 
        "tar": "<p> Target (i.e. 'driver' object/bone). </p>", 
        "to_euler_order": "<p> Output euler order override. </p>", 
        "to_min": "<p> Range of motion on owner caused by target . </p>", 
        "to_min_rot": "<p> Range of motion on owner caused by target . </p>", 
        "to_min_scale": "<p> Range of motion on owner caused by target . </p>"
      }
    }, 
    "bTransLikeConstraint": {
      "doc": "<p> Copy Transform Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2. </p>"
      }
    }, 
    "BuildGpencilModifierData": {
      "fields": {
        "flag": "<p> (eGpencilBuild_Flag) Options for controlling modifier behavior. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> If set, restrict modifier to operating on this layer. </p>", 
        "length": "<p> For each pair of gp keys, number of frames that build effect must be completed within. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "mode": "<p> (eGpencilBuild_Mode) How are strokes ordered. </p>", 
        "start_delay": "<p> For each pair of gp keys, number of frames before strokes start appearing. </p>", 
        "start_frame": "<p> If GP_BUILD_RESTRICT_TIME is set, the defines the frame range where GP frames are considered. </p>", 
        "time_alignment": "<p> (eGpencilBuild_TimeAlignment) For the \"Concurrent\" mode, when should \"shorter\" strips start/end. </p>", 
        "transition": "<p> (eGpencilBuild_Transition) In what order do stroke points appear/disappear. </p>"
      }
    }, 
    "BuildModifierData": {
      "fields": {
        "randomize": "<p> (bool) whether order of vertices is randomized - legacy files (for readfile conversion). </p>", 
        "seed": "<p> (int) random seed. </p>"
      }
    }, 
    "bUserMenu": {
      "fields": {
        "items": "<p>{@link bUserMenuItem}  </p>"
      }
    }, 
    "bUserMenuItem": {
      "doc": "<p> May be part of {@link bUserMenu}  or other list. </p>"
    }, 
    "CacheFile": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX. </p>", 
        "flag": "<p> Animation flag. </p>", 
        "frame": "<p> The frame/time to lookup in the cache file. </p>", 
        "frame_offset": "<p> The frame offset to subtract. </p>", 
        "handle": "<p> Runtime </p>", 
        "object_paths": "<p> Paths of the objects inside of the Alembic archive referenced by this {@link CacheFile} . </p>"
      }
    }, 
    "Camera": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "bg_images": "<p>{@link CameraBGImage}  reference images </p>", 
        "dof_distance": "<p>\n@deprecated\n Deprecated</p>", 
        "dof_ob": "<p>\n@deprecated\n Deprecated</p>", 
        "dtx": "<p> Draw type extra. </p>", 
        "gpu_dof": "<p>\n@deprecated\n Deprecated</p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "runtime": "<p> Runtime data (keep last). </p>", 
        "stereo": "<p> Stereo settings </p>", 
        "type": "<p> CAM_PERSP, CAM_ORTHO or CAM_PANO. </p>"
      }
    }, 
    "Camera_Runtime": {
      "fields": {
        "drw_corners": "<p> For draw manager. </p>"
      }
    }, 
    "CameraBGImage": {
      "doc": "<p> Background Picture </p>"
    }, 
    "CameraDOFSettings": {
      "doc": "<p> Properties for dof effect. </p>", 
      "fields": {
        "focus_object": "<p> Focal distance for depth of field. </p>"
      }
    }, 
    "CameraStereoSettings": {
      "doc": "<p><hr/> \n Stereo Settings </p>", 
      "fields": {
        "pole_merge_angle_from": "<p> Cut-off angle at which interocular distance start to fade down. </p>", 
        "pole_merge_angle_to": "<p> Cut-off angle at which interocular distance stops to fade down. </p>"
      }
    }, 
    "CastModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "ChannelDriver": {
      "doc": "<p><hr/> \n</p><p> Channel Driver (i.e. Drivers / Expressions) (driver)</p><p> Channel Drivers are part of the dependency system, and are executed in addition to normal user-defined animation. They take the animation result of some channel(s), and use that (optionally combined with its own F-Curve for modification of results) to define the value of some setting semi-procedurally.</p><p> Drivers are stored as part of F-Curve data, so that the F-Curve's RNA-path settings (for storing what setting the driver will affect). The order in which they are stored defines the order that they're evaluated in. This order is set by the Depsgraph's sorting stuff. </p>", 
      "fields": {
        "curval": "<p> Result of previous evaluation. </p>", 
        "expr_comp": "<p> PyObject - compiled expression, don't save this. </p>", 
        "expr_simple": "<p> Compiled simple arithmetic expression. </p>", 
        "expression": "<p> python expression to execute (may call functions defined in an accessory file) which relates the target 'variables' in some way to yield a single usable valueExpression to compile for evaluation. </p>", 
        "flag": "<p> Settings of driver. </p>", 
        "influence": "<p> XXX to be implemented... this is like the constraint influence setting. </p><p> Influence of driver on result. </p>", 
        "type": "<p> general settings Type of driver. </p>", 
        "variables": "<p> Targets for this driver (i.e. list of {@link DriverVar} ). </p>"
      }
    }, 
    "CharInfo": {
      "fields": {
        "mat_nr": "<p> Index start at 1, unlike mesh & nurbs. </p>"
      }
    }, 
    "ChildParticle": {
      "doc": "<p> Child particles are created around or between parent particles </p>", 
      "fields": {
        "fuv": "<p> Face vertex weights and offset. </p>", 
        "num": "<p> Num is face index on the final derived mesh. </p>", 
        "pa": "<p> Nearest particles to the child, used for the interpolation. </p>", 
        "w": "<p> Interpolation weights for the above particles. </p>"
      }
    }, 
    "ClothCollSettings": {
      "fields": {
        "clamp": "<p> Impulse clamp for object collisions. </p>", 
        "collision_list": "<p> E.g. pointer to temp memory for collisions. </p>", 
        "damping": "<p> Collision restitution on contact with other object. </p>", 
        "distance_repel": "<p>\n@deprecated\n Deprecated</p>", 
        "epsilon": "<p> Min distance for collisions. </p>", 
        "flags": "<p> Collision flags defined in BKE_cloth.h. </p>", 
        "friction": "<p> Friction/damping applied on contact with other object. </p>", 
        "group": "<p> Only use colliders from this group of objects. </p>", 
        "loop_count": "<p> How many iterations for the collision loop. </p>", 
        "repel_force": "<p>\n@deprecated\n Deprecated</p>", 
        "self_clamp": "<p> Impulse clamp for self collisions. </p>", 
        "self_friction": "<p> Fiction/damping with self contact. </p>", 
        "self_loop_count": "<p> How many iterations for the selfcollision loop. \n@deprecated\n Deprecated</p>", 
        "selfepsilon": "<p> For selfcollision. </p>", 
        "vgroup_selfcol": "<p> Vgroup to paint which vertices are used for self collisions. </p>"
      }
    }, 
    "ClothModifierData": {
      "fields": {
        "clothObject": "<p> The internal data structure for cloth. </p>", 
        "coll_parms": "<p> Definition is in {@link DNA_cloth_types.h} . </p>", 
        "hair_grid_min": "<p> grid geometry values of hair continuum </p>", 
        "hairdata": "<p> XXX nasty hack, remove once hair can be separated from cloth modifier data </p>", 
        "point_cache": "<p>{@link PointCache}  can be shared with other instances of {@link ClothModifierData} . Inspect (modifier.flag & eModifierFlag_SharedCaches) to find out. Definition is in {@link DNA_object_force_types.h} . </p>", 
        "sim_parms": "<p> Definition is in {@link DNA_cloth_types.h} . </p>"
      }
    }, 
    "ClothSimSettings": {
      "doc": "<p> This struct contains all the global data required to run a simulation. At the time of this writing, this structure contains data appropriate to run a simulation as described in Deformation Constraints in a Mass-Spring Model to Describe Rigid Cloth Behavior by Xavier Provot.</p><p> I've tried to keep similar, if not exact names for the variables as are presented in the paper. Where I've changed the concept slightly, as in stepsPerFrame compared to the time step in the paper, I've used variables with different names to minimize confusion. </p>", 
      "fields": {
        "avg_spring_len": "<p> Used for normalized springs. </p>", 
        "bending": "<p> Flexion spring stiffness. </p>", 
        "bending_damping": "<p> XXX various hair stuff should really be separate, this struct is a horrible mess alreadyDamping of bending springs. </p>", 
        "cache": "<p> UNUSED atm. </p>", 
        "Cdis": "<p> Mechanical damping of springs. \n@deprecated\n Deprecated</p>", 
        "collider_friction": "<p> Friction with colliders. </p>", 
        "compression_damp": "<p> Mechanical damping of compression springs. </p>", 
        "Cvi": "<p> Viscous/fluid damping. </p>", 
        "density_strength": "<p> Influence of hair density. </p>", 
        "density_target": "<p> Minimum density for hair. </p>", 
        "dt": "<p> This is the duration of our time step, computed.. </p>", 
        "eff_force_scale": "<p> Scaling of effector forces (see softbody_calc_forces).. </p>", 
        "eff_wind_scale": "<p> Scaling of effector wind (see softbody_calc_forces).. </p>", 
        "flags": "<p> Flags, see CSIMSETT_FLAGS enum above. </p>", 
        "gravity": "<p> Gravity/external force vector. </p>", 
        "internal_spring_max_diversion": "<p> How much the interal spring can diverge from the vertex normal during creation. </p>", 
        "internal_spring_max_length": "<p> The maximum lenght an internal spring can have during creation. </p>", 
        "mass": "<p> The mass of the entire cloth. </p>", 
        "max_bend": "<p> Max bending scaling value, min is \"bending\". </p>", 
        "max_sewing": "<p> Max sewing force. </p>", 
        "max_shear": "<p> Max shear scaling value. </p>", 
        "max_struct": "<p> Max structural scaling value, min is \"structural\". \n@deprecated\n Deprecated</p>", 
        "maxgoal": "<p> See SB. </p>", 
        "maxspringlen": "<p> In percent!; if tearing enabled, a spring will get cut. </p>", 
        "mingoal": "<p> See SB. </p>", 
        "preroll": "<p> How many frames of simulation to do before we start. \n@deprecated\n Deprecated</p>", 
        "presets": "<p> Used for presets on GUI. </p>", 
        "pressure_factor": "<p> The scaling factor to apply to the actual pressure. pressure=( (current_volume/target_volume) - 1 + uniform_pressure_force) * pressure_factor </p>", 
        "shapekey_rest": "<p> Vertex group for scaling structural stiffness. </p>", 
        "shear": "<p> Shear spring stiffness. </p>", 
        "shear_damp": "<p> Mechanical damping of shear springs. </p>", 
        "shrink_max": "<p> Max amount to shrink cloth by 0.0f (no shrink), 1.0f (shrink to nothing), -1.0f (double the edge length). </p>", 
        "shrink_min": "<p> Min amount to shrink cloth by 0.0f (no shrink), 1.0f (shrink to nothing), -1.0f (double the edge length). </p>", 
        "solver_type": "<p> Which solver should be used? txold. </p>", 
        "stepsPerFrame": "<p> Number of time steps per frame. </p>", 
        "structural": "<p> Structural spring stiffness. \n@deprecated\n Deprecated</p>", 
        "target_volume": "<p> User set volume. This is the volume the mesh wants to expand to (the equilibrium volume). </p>", 
        "tension_damp": "<p> Mechanical damping of tension springs. </p>", 
        "time_scale": "<p> Multiplies cloth speed. </p>", 
        "timescale": "<p> Parameter how fast cloth runs. </p>", 
        "uniform_pressure_force": "<p> Air pressure The uniform pressure that is constanty applied to the mesh. Can be negative </p>", 
        "vel_damping": "<p> Damp the velocity to speed up getting to the resting position. \n@deprecated\n Deprecated</p>", 
        "velocity_smooth": "<p> Smoothing of velocities for hair. </p>", 
        "vgroup_bend": "<p> Vertex group for scaling bending stiffness. </p>", 
        "vgroup_intern": "<p> Vertex group for scaling structural stiffness. </p>", 
        "vgroup_mass": "<p> Optional vertexgroup name for assigning weight.. </p>", 
        "vgroup_shear": "<p> Vertex group for scaling structural stiffness. </p>", 
        "vgroup_shrink": "<p> Vertex group for shrinking cloth. </p>", 
        "vgroup_struct": "<p> Vertex group for scaling structural stiffness. </p>", 
        "voxel_cell_size": "<p> Size of voxel grid cells for continuum dynamics. </p>"
      }
    }, 
    "Collection": {
      "fields": {
        "children": "<p>{@link CollectionChild} . </p>", 
        "collection": "<p> Deprecated \n@deprecated\n Deprecated</p>", 
        "gobject": "<p>{@link CollectionObject} . </p>", 
        "layer": "<p>\n@deprecated\n Deprecated</p>", 
        "object_cache": "<p> Runtime. Cache of objects in this collection and all its children. This is created on demand when e.g. some physics simulation needs it, we don't want to have it for every collections due to memory usage reasons. </p>", 
        "parents": "<p> Runtime. List of collections that are a parent of this datablock. </p>", 
        "tag": "<p> Runtime-only, always cleared on file load. </p>", 
        "view_layer": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "CollisionModifierData": {
      "fields": {
        "bvhtree": "<p> Bounding volume hierarchy for this cloth object. </p>", 
        "current_v": "<p> (xnew - x) at the actual inter-frame step. </p>", 
        "current_x": "<p> Position at the actual inter-frame step. </p>", 
        "current_xnew": "<p> New position at the actual inter-frame step. </p>", 
        "is_static": "<p> Collider doesn't move this frame, i.e. x[].co==xnew[].co. </p>", 
        "time_x": "<p> Cfra time of modifier. </p>", 
        "x": "<p> Position at the beginning of the frame. </p>", 
        "xnew": "<p> Position at the end of the frame. </p>", 
        "xold": "<p> Unused atm, but was discussed during sprint. </p>"
      }
    }, 
    "ColorBand": {
      "doc": "<p> 32 = MAXCOLORBAND note that this has to remain a single struct, for {@link UserDef}  </p>"
    }, 
    "ColorGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "hsv": "<p> Hsv factors. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "modify_color": "<p> Modify stroke, fill or both. </p>", 
        "pass_index": "<p> Custom index for passes. </p>"
      }
    }, 
    "ColorizeShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>"
      }
    }, 
    "ColorManagedColorspaceSettings": {
      "fields": {
        "name": "<p> MAX_COLORSPACE_NAME. </p>"
      }
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "curve_mapping": "<p> Pre-display RGB curves transform. </p>", 
        "exposure": "<p> Fstop exposure. </p>", 
        "gamma": "<p> Post-display gamma transform. </p>", 
        "look": "<p> Look which is being applied when displaying buffer on the screen (prior to view transform). </p>", 
        "view_transform": "<p> View transform which is being applied when displaying buffer on the screen. </p>"
      }
    }, 
    "ColorMixVars": {
      "fields": {
        "blend_effect": "<p> Value from SEQ_TYPE_XXX enumeration. </p>", 
        "factor": "<p> Blend factor [0.0f, 1.0f]. </p>"
      }
    }, 
    "ConsoleLine": {
      "doc": "<p> Console content </p>", 
      "fields": {
        "len": "<p> Real len - strlen(). </p>", 
        "len_alloc": "<p> keep these 3 vars so as to share free, realloc funcs Allocated length. </p>", 
        "type": "<p> Only for use when in the 'scrollback' listbase. </p>"
      }
    }, 
    "CorrectiveSmoothDeltaCache": {
      "fields": {
        "deltas": "<p> delta's between the original positions and the smoothed positions </p>", 
        "lambda": "<p> Value of settings when creating the cache. These are used to check if the cache should be recomputed. </p>"
      }
    }, 
    "CorrectiveSmoothModifierData": {
      "fields": {
        "bind_coords": "<p> positions set during 'bind' operator use for MOD_CORRECTIVESMOOTH_RESTSOURCE_BIND </p>", 
        "bind_coords_num": "<p> note: -1 is used to bind </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "delta_cache": "<p> runtime-only cache </p>"
      }
    }, 
    "Curve": {
      "fields": {
        "actnu": "<p> edit, index in nurb list </p>", 
        "actvert": "<p> edit, index in active nurb ({@link BPoint}  or {@link BezTriple} ) </p>", 
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "ctime": "<p> font part end Current evaltime - for use by Objects parented to curves. </p>", 
        "editnurb": "<p> Edited data, not in file, use pointer so we can check for it. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "len": "<p> Number of bytes (str - utf8). </p>", 
        "len_wchar": "<p> text data Number of characters (strinfo). </p>", 
        "lines": "<p> font part </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "nurb": "<p> Actual data, called splines in rna. </p>", 
        "pos": "<p> copy of EditFont vars (wchar_t aligned), warning! don't use in editmode (storage only) </p>", 
        "resolu": "<p> default </p>", 
        "texflag": "<p> Keep a short because of BKE_object_obdata_texspace_get(). </p>", 
        "type": "<p> Creation-time type of curve datablock. </p>"
      }
    }, 
    "CurveMap": {
      "fields": {
        "curve": "<p> Actual curve. </p>", 
        "ext_in": "<p> For extrapolated curves, the direction vector. </p>", 
        "flag": "<p>\n@deprecated\n Deprecated</p>", 
        "mintable": "<p> The x-axis range for the table. </p>", 
        "premul_ext_in": "<p> For RGB curves, premulled extrapolation vector. </p>", 
        "premultable": "<p> For RGB curves, premulled table. </p>", 
        "range": "<p> Quick multiply value for reading table. </p>", 
        "table": "<p> Display and evaluate table. </p>"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "black": "<p> Black/white point (black[0] abused for current frame). </p>", 
        "bwmul": "<p> Black/white point multiply value, for speed. </p>", 
        "cm": "<p> Max 4 builtin curves per mapping struct now. </p>", 
        "curr": "<p> Current rect, clip rect (is default rect too). </p>", 
        "flag": "<p> Cur; for buttons, to show active curve. </p>", 
        "sample": "<p> Sample values, if flag set it draws line and intersection. </p>"
      }
    }, 
    "CurveMapPoint": {
      "fields": {
        "flag": "<p> Shorty for result lookup. </p>"
      }
    }, 
    "CurveModifierData": {
      "fields": {
        "defaxis": "<p> Axis along which curve deforms. </p>", 
        "name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "CurveProfile": {
      "doc": "<p> Defines a profile. </p>", 
      "fields": {
        "changed_timestamp": "<p> Used for keeping track how many times the widget is changed. </p>", 
        "flag": "<p> Flag for mode states, sampling options, etc... </p>", 
        "path": "<p>{@link Sequence}  of points defining the shape of the curve. </p>", 
        "path_len": "<p> Number of user-added points that define the profile. </p>", 
        "preset": "<p> Preset to use when reset. </p>", 
        "segments": "<p> The positions of the sampled points. Used to display a preview of where they will be. </p>", 
        "segments_len": "<p> Number of sampled points. </p>", 
        "table": "<p> Display and evaluation table at higher resolution for curves. </p>", 
        "view_rect": "<p> Widget's current view, and clipping rect (is default rect too). </p>"
      }
    }, 
    "CurveProfilePoint": {
      "doc": "<p> Each control point that makes up the profile. <h2>Note</h2><p> The flags use the same enum as Bezier curves, but they aren't guaranteed to have identical functionality, and all types aren't implemented. </p> The flags use the same enum as Bezier curves, but they aren't guaranteed to have identical functionality, and all types aren't implemented. \n</p>", 
      "fields": {
        "flag": "<p> Flag selection state and others. </p>", 
        "h1": "<p> Flags for both handle's type (eBezTriple_Handle). </p>", 
        "x": "<p> Location of the point, keep together. </p>"
      }
    }, 
    "CustomData": {
      "doc": "<p> Structure which stores custom element data associated with mesh elements (vertices, edges or faces). The custom data is organized into a series of layers, each with a data type (e.g. {@link MTFace} , {@link MDeformVert} , etc.). </p>", 
      "fields": {
        "external": "<p> External file storing customdata layers. </p>", 
        "layers": "<p> CustomDataLayers, ordered by type. </p>", 
        "pool": "<p> (BMesh Only): Memory pool for allocation of blocks. </p>", 
        "totlayer": "<p> Number of layers, size of layers array. </p>", 
        "totsize": "<p> In editmode, total size of all data layers. </p>", 
        "typemap": "<p> runtime only! - maps types to indices of first layer of that type, MUST be >= CD_NUMTYPES, but we cant use a define here. Correct size is ensured in CustomData_update_typemap assert(). </p>"
      }
    }, 
    "CustomDataExternal": {
      "fields": {
        "filename": "<p> FILE_MAX. </p>"
      }
    }, 
    "CustomDataLayer": {
      "doc": "<p> Descriptor and storage for a custom data layer. </p>", 
      "fields": {
        "active": "<p> Number of the active layer of this type. </p>", 
        "active_clone": "<p> Number of the layer to render. </p>", 
        "active_mask": "<p> Number of the layer to render. </p>", 
        "active_rnd": "<p> Number of the layer to render. </p>", 
        "data": "<p> Layer data. </p>", 
        "flag": "<p> General purpose flag. </p>", 
        "name": "<p> Layer name, MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "offset": "<p> In editmode, offset of layer in block. </p>", 
        "type": "<p> Type of data in layer. </p>", 
        "uid": "<p> Shape keyblock unique id reference. </p>"
      }
    }, 
    "DataTransferModifierData": {
      "fields": {
        "data_types": "<p> See DT_TYPE_ enum in ED_object.h. </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "layers_select_dst": "<p> DT_MULTILAYER_INDEX_MAX; See DT_TOLAYERS_ enum in ED_object.h. </p>", 
        "layers_select_src": "<p> DT_MULTILAYER_INDEX_MAX; See DT_FROMLAYERS_ enum in ED_object.h. </p>", 
        "mix_mode": "<p> See CDT_MIX_ enum in BKE_customdata.h. </p>", 
        "vmap_mode": "<p> See MREMAP_MODE_ enum in BKE_mesh_mapping.h </p>"
      }
    }, 
    "DecimateModifierData": {
      "fields": {
        "angle": "<p> (mode == MOD_DECIM_MODE_DISSOLVE). </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "delimit": "<p> (mode == MOD_DECIM_MODE_DISSOLVE). </p>", 
        "face_count": "<p> runtime only </p>", 
        "iter": "<p> (mode == MOD_DECIM_MODE_UNSUBDIV). </p>", 
        "percent": "<p> (mode == MOD_DECIM_MODE_COLLAPSE). </p>", 
        "symmetry_axis": "<p> (mode == MOD_DECIM_MODE_COLLAPSE). </p>"
      }
    }, 
    "DisplaceModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "strength": "<p> end {@link MappingInfoModifierData}  </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "DisplaySafeAreas": {
      "doc": "<p><hr/> \n Safe Area options used in {@link Camera}  View & Sequencer </p>", 
      "fields": {
        "action": "<p> Image/Graphics Safe. </p>", 
        "title": "<p> each value represents the (x,y) margins as a multiplier. 'center' in this context is just the name for a different kind of safe-area Title Safe. </p>", 
        "title_center": "<p> use for alternate aspect ratio </p>"
      }
    }, 
    "DrawData": {
      "fields": {
        "free": "<p> Only nested data, NOT the engine data itself. </p>", 
        "recalc": "<p> Accumulated recalc flags, which corresponds to ID->recalc flags. </p>"
      }
    }, 
    "DriverTarget": {
      "doc": "<p> Drivers --------------------------------<mdash/><mdash/>  Driver Target (dtar)</p><p> Defines how to access a dependency needed for a driver variable. </p>", 
      "fields": {
        "flag": "<p> Flags for the validity of the target (NOTE: these get reset every time the types change). </p>", 
        "id": "<p> ID-block which owns the target, no user count. </p>", 
        "idtype": "<p> Type of ID-block that this target can use. </p>", 
        "pchan_name": "<p> Name of the posebone to use (for vars where DTAR_FLAG_STRUCT_REF is used) - MAX_ID_NAME-2. </p>", 
        "rna_path": "<p> RNA path defining the setting to use (for DVAR_TYPE_SINGLE_PROP). </p>", 
        "rotation_mode": "<p> Rotation channel calculation type. </p>", 
        "transChan": "<p> Transform channel index (for DVAR_TYPE_TRANSFORM_CHAN.) </p>"
      }
    }, 
    "DriverVar": {
      "doc": "<p> Driver Variable (dvar)</p><p> A 'variable' for use as an input for the driver evaluation. Defines a way of accessing some channel to use, that can be referred to in the expression as a variable, thus simplifying expressions and also Depsgraph building. </p>", 
      "fields": {
        "curval": "<p> Result of previous evaluation. </p>", 
        "flag": "<p> Validation tags, etc. (eDriverVar_Flags). </p>", 
        "name": "<p> Name of the variable to use in py-expression (must be valid python identifier) - MAX_ID_NAME-2. </p>", 
        "num_targets": "<p> Number of targets actually used by this variable. </p>", 
        "targets": "<p> MAX_DRIVER_TARGETS, target slots. </p>", 
        "type": "<p> Type of driver variable (eDriverVar_Types). </p>"
      }
    }, 
    "DualQuat": {
      "doc": "<p> dual quaternion. </p>"
    }, 
    "DynamicPaintBrushSettings": {
      "doc": "<p>{@link Brush}  settings </p>", 
      "fields": {
        "paint_ramp": "<p> color ramps Proximity paint falloff. </p>", 
        "pmd": "<p> For fast RNA access. </p>", 
        "vel_ramp": "<p> Velocity paint ramp. </p>"
      }
    }, 
    "DynamicPaintCanvasSettings": {
      "doc": "<p> Canvas settings </p>", 
      "fields": {
        "error": "<p> Bake error description. </p>", 
        "pmd": "<p> For fast RNA access. </p>"
      }
    }, 
    "DynamicPaintModifierData": {
      "fields": {
        "type": "<p> UI display: canvas / brush. </p>"
      }
    }, 
    "DynamicPaintRuntime": {
      "doc": "<p> Is stored in ModifierData.runtime. </p>"
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "canvas": "<p> For fast RNA access. </p>", 
        "effect_ui": "<p> Ui selection box. </p>", 
        "image_output_path": "<p> 1024 = FILE_MAX. </p>", 
        "influence_scale": "<p> per surface brush settings </p>", 
        "init_color": "<p> initial color </p>", 
        "init_layername": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "name": "<p> surface </p>", 
        "output_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "output_name2": "<p> MAX_CUSTOMDATA_LAYER_NAME some surfaces have 2 outputs. </p>", 
        "pointcache": "<p> cache </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "wave_damping": "<p> wave settings </p>"
      }
    }, 
    "EdgeSplitModifierData": {
      "fields": {
        "split_angle": "<p> Angle above which edges should be split. </p>"
      }
    }, 
    "Editing": {
      "fields": {
        "act_imagedir": "<p> 1024 = FILE_MAX. </p>", 
        "act_seq": "<p> Context vars, used to be static </p>", 
        "act_sounddir": "<p> 1024 = FILE_MAX. </p>", 
        "proxy_dir": "<p> 1024 = FILE_MAX. </p>", 
        "recycle_max_cost": "<p> Cache control </p>", 
        "seqbase": "<p> Pointer to the top-most seq's. </p>", 
        "seqbasep": "<p> Pointer to the current list of seq's being edited (can be within a meta strip). </p>"
      }
    }, 
    "EditLatt": {
      "fields": {
        "needs_flush_to_id": "<p>{@link ID}  data is older than edit-mode data. Set #Main.is_memfile_undo_flush_needed when enabling. </p>"
      }
    }, 
    "EditMeshData": {
      "fields": {
        "polyCos": "<p><em></em>  </p>", 
        "vertexCos": "<p><em></em> , polyNos are lazy initialized </p>", 
        "vertexNos": "<p><em></em>  is set) </p>"
      }
    }, 
    "EditNurb": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "keyindex": "<p> index data for shape keys </p>", 
        "needs_flush_to_id": "<p>{@link ID}  data is older than edit-mode data. Set #Main.is_memfile_undo_flush_needed when enabling. </p>", 
        "nurbs": "<p> base of nurbs' list (old Curve->editnurb) </p>", 
        "shapenr": "<p> shape key being edited </p>"
      }
    }, 
    "EffectorWeights": {
      "fields": {
        "group": "<p> Only use effectors from this group of objects. </p>", 
        "weight": "<p> Effector type specific weights. </p>"
      }
    }, 
    "ExplodeModifierData": {
      "fields": {
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "FCM_EnvelopeData": {
      "doc": "<p> envelope modifier - envelope data </p>", 
      "fields": {
        "f1": "<p> Settings for 'min' control point. </p>", 
        "f2": "<p> Settings for 'max' control point. </p>", 
        "min": "<p> Min/max values for envelope at this point (absolute values) . </p>", 
        "time": "<p> Time for that this sample-point occurs. </p>"
      }
    }, 
    "FCurve": {
      "doc": "<p> 'Function-Curve' - defines values over time for a given setting (fcu) </p>", 
      "fields": {
        "array_index": "<p> RNA - data link If applicable, the index of the RNA-array item to get. </p>", 
        "auto_smoothing": "<p> Auto-handle smoothing mode. </p>", 
        "bezt": "<p> motion data User-editable keyframes (array). </p>", 
        "color": "<p> The last-color this curve took. </p>", 
        "color_mode": "<p> curve coloring (for editor) Coloring method to use (eFCurve_Coloring). </p>", 
        "curval": "<p> value cache + settings Value stored from last time curve was evaluated (not threadsafe, debug display only!). </p>", 
        "driver": "<p> driver settings Only valid for drivers (i.e. stored in {@link AnimData}  not Actions). </p>", 
        "extend": "<p> Value-extending mode for this curve (does not cover). </p>", 
        "flag": "<p> User-editable settings for this curve. </p>", 
        "fpt": "<p> 'baked/imported' motion samples (array). </p>", 
        "grp": "<p> group Group that F-Curve belongs to. </p>", 
        "modifiers": "<p> evaluation settings {@link FCurve}  Modifiers. </p>", 
        "rna_path": "<p> RNA-path to resolve data-access. </p>", 
        "totvert": "<p> Total number of points which define the curve (i.e. size of arrays in FPoints). </p>"
      }
    }, 
    "FFMpegCodecData": {
      "fields": {
        "ffmpeg_preset": "<p> See eFFMpegPreset. </p>", 
        "max_b_frames": "<p> Only used if FFMPEG_USE_MAX_B_FRAMES flag is set. </p>"
      }
    }, 
    "FileDirEntry": {
      "doc": "<p> Container for mere direntry, with additional asset-related data. </p>", 
      "fields": {
        "blentype": "<p>{@link ID}  type, in case typeflag has FILE_TYPE_BLENDERLIB set. </p>", 
        "entry": "<p> Either point to active variant/revision if available, or own entry (in mere filebrowser case). </p>", 
        "poin": "<p> TODO: make this a real {@link ID}  pointer? </p>", 
        "tags": "<p> Tags are for info only, most of filtering is done in asset engine. </p>", 
        "typeflag": "<p>{@link eFileSel_File_Types} . </p>"
      }
    }, 
    "FileDirEntryArr": {
      "doc": "<p> Array of direntries.</p><p> This struct is used in various, different contexts.</p><p> In Filebrowser UI, it stores the total number of available entries, the number of visible (filtered) entries, and a subset of those in 'entries' {@link ListBase} , from idx_start (included) to idx_end (excluded).</p><p> In AssetEngine context (i.e. outside of 'browsing' context), entries contain all needed data, there is no filtering, so nbr_entries_filtered, entry_idx_start and entry_idx_end should all be set to -1. </p>", 
      "fields": {
        "root": "<p> FILE_MAX. </p>"
      }
    }, 
    "FileDirEntryRevision": {
      "doc": "<p> Container for a revision, only relevant in asset context. </p>", 
      "fields": {
        "size_str": "<p> Temp caching of UI-generated strings... </p>"
      }
    }, 
    "FileDirEntryVariant": {
      "doc": "<p> Container for a variant, only relevant in asset context. In case there are no variants, a single one shall exist, with NULL name/description. </p>"
    }, 
    "FileGlobal": {
      "doc": "<p>{@link FileGlobal}  stores a part of the current user-interface settings at the moment of saving, and the file-specific settings. </p>", 
      "fields": {
        "build_commit_timestamp": "<p> Commit timestamp from buildinfo. </p>", 
        "build_hash": "<p> Hash from buildinfo. </p>", 
        "filename": "<p> File path where this was saved, for recover (1024 = FILE_MAX). </p>", 
        "subvstr": "<p> Needs to be here, for human fileformat recognition (keep first!). </p>"
      }
    }, 
    "FileSelectParams": {
      "doc": "<p> Config and Input for File Selector </p>", 
      "fields": {
        "active_file": "<p> Active file used for keyboard navigation. </p>", 
        "details_flags": "<p> Details toggles (file size, creation date, etc.) </p>", 
        "dir": "<p> Directory, FILE_MAX_LIBEXTRA, 1024 + 66, this is for extreme case when 1023 length path needs to be linked in, where foo.blend/Armature need adding </p>", 
        "display": "<p> Display mode flag. </p>", 
        "f_fp": "<p> XXX <mdash/>  still unused <ndash/>  Show font preview. </p>", 
        "filter": "<p> Filter when (flags & FILE_FILTER) is true. </p>", 
        "filter_glob": "<p> List of filetypes to filter (FILE_MAXFILE). </p>", 
        "filter_id": "<p> Same as filter, but for {@link ID}  types (aka library groups). </p>", 
        "filter_search": "<p>{@link Text}  items name must match to be shown. </p>", 
        "flag": "<p> Settings for filter, hiding dots files. </p>", 
        "fp_str": "<p> String to use for font preview. </p>", 
        "highlight_file": "<p> File under cursor. </p>", 
        "recursion_level": "<p> Max number of levels in dirtree to show at once, 0 to disable recursion. </p>", 
        "sort": "<p> Sort order. </p>", 
        "title": "<p> Title, also used for the text of the execute button. </p>", 
        "type": "<p> short XXXXX for now store type here, should be moved to the operator. </p>"
      }
    }, 
    "FlipShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "flipmode": "<p> Internal, not visible in rna. </p>"
      }
    }, 
    "FluidDomainSettings": {
      "fields": {
        "_pad1": "<p> Unused. </p>", 
        "_pad10": "<p> Unused. </p>", 
        "_pad11": "<p> Unused. </p>", 
        "_pad2": "<p> Unused. </p>", 
        "_pad3": "<p> Unused. </p>", 
        "_pad5": "<p> Unused. </p>", 
        "_pad6": "<p> Unused. </p>", 
        "_pad7": "<p> Unused. </p>", 
        "_pad8": "<p> Unused. </p>", 
        "_pad9": "<p> Unused. </p>", 
        "active_color": "<p> Monitor smoke color. </p>", 
        "adapt_margin": "<p><ndash/>  User-accesible fields (from here on). <ndash/>  Adaptive domain options. </p>", 
        "alpha": "<p> Smoke domain options. </p>", 
        "base_res": "<p> Initial \"non-adapted\" resolution. </p>", 
        "border_collisions": "<p> How domain border collisions are handled. </p>", 
        "boundary_width": "<p> Usually this is just 1. </p>", 
        "burning_rate": "<p> Flame options. </p>", 
        "cache_frame_start": "<p> Cache options. </p>", 
        "cell_size": "<p> Size of simulation cell in local space. </p>", 
        "coba_field": "<p> Simulation field used for the color mapping. </p>", 
        "diss_speed": "<p> In frames. </p>", 
        "dp0": "<p> Difference from object center to grid start point. </p>", 
        "dt": "<p> Time options. </p>", 
        "dx": "<p> 1.0f / res. </p>", 
        "effector_group": "<p> Effector objects group. </p>", 
        "error": "<p> Bake error description. </p>", 
        "flags": "<p> Use-mesh, use-noise, etc. </p>", 
        "fluid_old": "<p> Adaptive domain needs access to old fluid state. </p>", 
        "fluidmat": "<p> Low res fluid matrix. </p>", 
        "fluidmat_wt": "<p> High res fluid matrix. </p>", 
        "force_group": "<p> UNUSED </p>", 
        "global_size": "<p> Global size of domain axises. </p>", 
        "guide_alpha": "<p> Fluid guiding options. Guiding weight scalar (determines strength). </p>", 
        "guide_beta": "<p> Guiding blur radius (affects size of vortices). </p>", 
        "guide_res": "<p> Res for velocity guide grids - independent from base res. </p>", 
        "guide_vel_factor": "<p> Multiply guiding velocity by this factor. </p>", 
        "imat": "<p> Domain object imat. </p>", 
        "maxres": "<p> Fluid domain options Longest axis on the BB gets this resolution assigned. </p>", 
        "mesh_concave_upper": "<p>{@link Mesh}  options. </p>", 
        "mesh_velocities": "<p> Vertex velocities of simulated fluid mesh. </p>", 
        "mmd": "<p><ndash/>  Runtime-only fields (from here on). <ndash/>  For fast RNA access. </p>", 
        "noise_strength": "<p> Noise options. </p>", 
        "noise_type": "<p> Noise type: wave, curl, anisotropic. </p>", 
        "obj_shift_f": "<p> How much object has shifted since previous smoke frame (used to \"lock\" domain while drawing). </p>", 
        "obmat": "<p> Domain obmat. </p>", 
        "openvdb_comp": "<p> OpenVDB cache options. </p>", 
        "p0": "<p> Domain object data. Start point of BB in local space (includes sub-cell shift for adaptive domain). </p>", 
        "p1": "<p> End point of BB in local space. </p>", 
        "particle_randomness": "<p> Liquid domain options. </p>", 
        "particle_type": "<p> Secondary particle options. </p>", 
        "point_cache": "<p> Pointcache options. Smoke uses only one cache from now on (index [0]), but keeping the array for now for reading old files. Definition is in {@link DNA_object_force_types.h} . </p>", 
        "res": "<p> Data resolution (res_max-res_min). </p>", 
        "res_max": "<p> Cell max. </p>", 
        "res_min": "<p> Cell min. </p>", 
        "scale": "<p> Largest domain size. </p>", 
        "shift": "<p> Current domain shift in simulation cells. </p>", 
        "shift_f": "<p> Exact domain shift. </p>", 
        "slice_method": "<p> Display options. </p>", 
        "solver_res": "<p> Dimension of manta solver, 2d or 3d. </p>", 
        "surface_tension": "<p> Diffusion options. </p>", 
        "type": "<p> Gas, liquid. </p>", 
        "viewsettings": "<p><ndash/>  Deprecated / unsed options (below). <ndash/>  View options. </p>"
      }
    }, 
    "FluidEffectorSettings": {
      "doc": "<p> Collision objects (filled with smoke). </p>", 
      "fields": {
        "mmd": "<p><ndash/>  Runtime-only fields (from here on). <ndash/>  For fast RNA access. </p>", 
        "surface_distance": "<p><ndash/>  User-accesible fields (from here on). <ndash/>  Thickness of mesh surface, used in obstacle sdf. </p>", 
        "vel_multi": "<p> Guiding options. Multiplier for object velocity. </p>"
      }
    }, 
    "FluidFlowSettings": {
      "fields": {
        "behavior": "<p> Inflow, outflow, static. </p>", 
        "density": "<p><ndash/>  User-accesible fields (from here on). <ndash/>  Emission. </p>", 
        "flags": "<p> Absolute emission etc. </p>", 
        "mmd": "<p><ndash/>  Runtime-only fields (from here on). <ndash/>  For fast RNA access. </p>", 
        "surface_distance": "<p> Maximum emission distance from mesh surface. </p>", 
        "temperature": "<p> Delta temperature (temp - ambient temp). </p>", 
        "texture_size": "<p> Texture control. </p>", 
        "type": "<p> Smoke, flames, both, outflow, liquid. </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "vel_multi": "<p> Multiplier for inherited velocity. </p>", 
        "verts_old": "<p> Initial velocity. Previous vertex positions in domain space. </p>", 
        "volume_density": "<p> Density emitted within mesh volume. </p>"
      }
    }, 
    "FluidModifierData": {
      "fields": {
        "effector": "<p> Effector objects (collision, guiding). </p>", 
        "flow": "<p> Inflow, outflow, smoke objects. </p>", 
        "type": "<p> Domain, inflow, outflow, .... </p>"
      }
    }, 
    "FluidsimModifierData": {
      "doc": "<p> DEPRECATED, only used for versioning. </p>", 
      "fields": {
        "fss": "<p> Definition is in {@link DNA_object_fluidsim_types.h} . </p>"
      }
    }, 
    "FluidsimSettings": {
      "fields": {
        "animRate": "<p> Simulation/flow rate control (i.e. old \"Fac-Time\"). </p>", 
        "animStart": "<p> anim start end time (in seconds) </p>", 
        "bakeStart": "<p> bake start end time (in blender frames) </p>", 
        "bbStart": "<p> store start coords of axis aligned bounding box together with size values are inited during derived mesh display </p>", 
        "cpsTimeStart": "<p> Fluid control settings </p>", 
        "domainNovecgen": "<p> Switch off velocity generation, volume init type for fluid/obstacles (volume=1, shell=2, both=3). </p>", 
        "farFieldSize": "<p> testing vars </p>", 
        "flag": "<p> GUI flags. </p>", 
        "fmd": "<p> For fast RNA access. </p>", 
        "frameOffset": "<p> offset for baked frames </p>", 
        "generateParticles": "<p> particle generation - on if >0, then determines amount (experimental...) </p>", 
        "generateTracers": "<p> number of tracers to generate </p>", 
        "grav": "<p> gravity strength </p>", 
        "gstar": "<p> g star param (LBM compressibility) </p>", 
        "guiDisplayMode": "<p> show original meshes, preview or final sim </p>", 
        "iniVelx": "<p> fluid object type settings gravity strength </p>", 
        "ipo": "<p> animated params </p>", 
        "maxRefine": "<p> activate refinement? </p>", 
        "meshVelocities": "<p> Vertex velocities of simulated fluid mesh. </p>", 
        "particleInfSize": "<p>{@link Particle}  display - size scaling, and alpha influence. </p>", 
        "partSlipValue": "<p> boundary \"stickiness\" for part slip values </p>", 
        "realsize": "<p> size of the domain in real units (meters along largest resolution x, y, z extent) </p>", 
        "resolutionxyz": "<p> domain object settings resolutions </p>", 
        "show_advancedoptions": "<p> display advanced options in fluid sim tab (on=1, off=0) </p>", 
        "surfaceSmoothing": "<p> smooth fluid surface? </p>", 
        "surfaceSubdivs": "<p> Number of surface subdivisions. </p>", 
        "surfdataPath": "<p> store output path, and file prefix for baked fluid surface strlens; 256= FILE_MAXFILE, 768= FILE_MAXDIR </p>", 
        "threads": "<p> threadcont the calculation is done with </p>", 
        "totvert": "<p> Number of vertices in simulated fluid mesh. </p>", 
        "type": "<p> domain, fluid or obstacle </p>", 
        "typeFlags": "<p> additional flags depending on the type, lower short contains flags to check validity, higher short additional flags </p>", 
        "viscosityMode": "<p>\n@deprecated\n Deprecated</p>", 
        "viscosityValue": "<p> fluid properties </p>"
      }
    }, 
    "FMod_Cycles": {
      "doc": "<p> TODO: we can only do complete cycles... </p><p> cycling/repetition modifier data </p>", 
      "fields": {
        "after_cycles": "<p> Number of 'cycles' after last keyframe to do. </p>", 
        "after_mode": "<p> Extrapolation mode to use after last keyframe. </p>", 
        "before_cycles": "<p> Number of 'cycles' before first keyframe to do. </p>", 
        "before_mode": "<p> Extrapolation mode to use before first keyframe. </p>"
      }
    }, 
    "FMod_Envelope": {
      "doc": "<p> envelope-like adjustment to values (for fade in/out) </p>", 
      "fields": {
        "data": "<p> Data-points defining envelope to apply (array) . </p>", 
        "midval": "<p> Value that envelope's influence is centered around / based on. </p>", 
        "min": "<p> Distances from 'middle-value' for 1:1 envelope influence. </p>", 
        "totvert": "<p> Number of envelope points. </p>"
      }
    }, 
    "FMod_FunctionGenerator": {
      "doc": "<p> 'Built-In Function' Generator modifier data</p><p> This uses the general equation for equations: y = amplitude * fn(phase_multiplier*x + phase_offset) + y_offset</p><p> where amplitude, phase_multiplier/offset, y_offset are user-defined coefficients, x is the evaluation 'time', and 'y' is the resultant value </p>", 
      "fields": {
        "amplitude": "<p> Coefficients for general equation (as above). </p>", 
        "flag": "<p> #eFMod_Generator_flags. </p>", 
        "type": "<p> flags {@link eFMod_Generator_Functions} . </p>"
      }
    }, 
    "FMod_Generator": {
      "doc": "<p><hr/> \n Generator modifier data </p>", 
      "fields": {
        "arraysize": "<p> Size of the coefficients array. </p>", 
        "coefficients": "<p> general generator information Coefficients array. </p>", 
        "flag": "<p> Settings. </p>", 
        "mode": "<p> Which 'generator' to use eFMod_Generator_Modes. </p>", 
        "poly_order": "<p> Order of polynomial generated (i.e. 1 for linear, 2 for quadratic). </p>"
      }
    }, 
    "FMod_Limits": {
      "doc": "<p> limits modifier data </p>", 
      "fields": {
        "flag": "<p> Settings for limiting. </p>", 
        "rect": "<p> Rect defining the min/max values. </p>"
      }
    }, 
    "FMod_Noise": {
      "doc": "<p> noise modifier data </p>"
    }, 
    "FMod_Python": {
      "doc": "<p> Python-script modifier data </p>", 
      "fields": {
        "prop": "<p> ID-properties to provide 'custom' settings. </p>", 
        "script": "<p>{@link Text}  buffer containing script to execute. </p>"
      }
    }, 
    "FMod_Stepped": {
      "doc": "<p> stepped modifier data </p>", 
      "fields": {
        "end_frame": "<p> End frame of the frame range that modifier works in. </p>", 
        "flag": "<p> Various settings. </p>", 
        "offset": "<p> Reference frame number that stepping starts from. </p>", 
        "start_frame": "<p> Start frame of the frame range that modifier works in. </p>", 
        "step_size": "<p> Number of frames each interpolated value should be held. </p>"
      }
    }, 
    "FModifier": {
      "doc": "<p><hr/> \n F-Curve DataTypes Modifiers --------------------------------<mdash/><mdash/>  F-Curve Modifiers (fcm)</p><p> These alter the way F-Curves behave, by altering the value that is returned when evaluating the curve's data at some time (t). </p>", 
      "fields": {
        "blendin": "<p> Number of frames from sfra before modifier takes full influence. </p>", 
        "blendout": "<p> Number of frames from efra before modifier fades out. </p>", 
        "curve": "<p> Containing curve, only used for updates to CYCLES. </p>", 
        "data": "<p> Pointer to modifier data. </p>", 
        "efra": "<p> End frame of restricted frame-range. </p>", 
        "flag": "<p> Settings for the modifier. </p>", 
        "influence": "<p> The amount that the modifier should influence the value. </p>", 
        "name": "<p> User-defined description for the modifier - MAX_ID_NAME-2. </p>", 
        "sfra": "<p> Start frame of restricted frame-range. </p>", 
        "type": "<p> Type of f-curve modifier. </p>"
      }
    }, 
    "FPoint": {
      "doc": "<p> F-Curves --------------------------------<mdash/><mdash/>  {@link FPoint}  (fpt)</p><p> This is the bare-minimum data required storing motion samples. Should be more efficient than using BPoints, which contain a lot of other unnecessary data... </p>", 
      "fields": {
        "flag": "<p> Selection info. </p>", 
        "vec": "<p> Time + value. </p>"
      }
    }, 
    "FreestyleConfig": {
      "fields": {
        "crease_angle": "<p> In radians!. </p>", 
        "flags": "<p> Suggestive contours, ridges/valleys, material boundaries. </p>", 
        "mode": "<p> Scripting, editor. </p>", 
        "raycasting_algorithm": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "FreestyleLineSet": {
      "fields": {
        "edge_types": "<p> Feature edge types. </p>", 
        "group": "<p> Group of target objects. </p>", 
        "name": "<p> Line set name, MAX_NAME. </p>", 
        "qi": "<p> Quantitative invisibility. </p>", 
        "selection": "<p> Selection criteria. </p>"
      }
    }, 
    "FreestyleLineStyle": {
      "fields": {
        "min_angle": "<p> In radians, for splitting. </p>", 
        "mtex": "<p> MAX_MTEX. </p>", 
        "nodetree": "<p> nodes </p>", 
        "panel": "<p> For UI. </p>"
      }
    }, 
    "GlowShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>"
      }
    }, 
    "GlowVars": {
      "fields": {
        "bNoComp": "<p> SHOW/HIDE glow buffer. </p>", 
        "dDist": "<p> Radius of glow blurring. </p>", 
        "fBoost": "<p> Amount to multiply glow intensity. </p>", 
        "fMini": "<p> Minimum intensity to trigger a glow. </p>"
      }
    }, 
    "GP_Interpolate_Settings": {
      "doc": "<p> Settings for GP Interpolation Operators </p>", 
      "fields": {
        "amplitude": "<p> BEZT_IPO_ELASTIC. </p>", 
        "back": "<p> BEZT_IPO_BACK. </p>", 
        "custom_ipo": "<p> Custom interpolation curve (for use with GP_IPO_CURVEMAP). </p>", 
        "easing": "<p>{@link eBezTriple_Easing}  - Easing mode (if easing equation used). </p>", 
        "flag": "<p>{@link eGP_Interpolate_SettingsFlag} . </p>", 
        "type": "<p>{@link eGP_Interpolate_Type}  - Interpolation Mode. </p>"
      }
    }, 
    "GP_Sculpt_Data": {
      "doc": "<p> Settings for a GPencil Stroke Sculpting {@link Brush}  </p>", 
      "fields": {
        "curcolor_add": "<p> Cursor color for add. </p>", 
        "curcolor_sub": "<p> Cursor color for sub. </p>", 
        "flag": "<p> EGP_Sculpt_Flag. </p>", 
        "size": "<p> Radius of brush. </p>", 
        "strength": "<p> Strength of effect. </p>", 
        "weight": "<p> Target weight. </p>"
      }
    }, 
    "GP_Sculpt_Guide": {
      "doc": "<p> Settings for a GPencil Speed Guide </p>"
    }, 
    "GP_Sculpt_Settings": {
      "doc": "<p> GPencil Stroke Sculpting Settings </p>", 
      "fields": {
        "brush": "<p> GP_SCULPT_TYPE_MAX. </p>", 
        "brushtype": "<p>{@link eGP_Sculpt_Types}  (sculpt). </p>", 
        "cur_falloff": "<p> Multiframe edit falloff effect by frame. </p>", 
        "cur_primitive": "<p>{@link Curve}  used for primitive tools. </p>", 
        "flag": "<p>{@link eGP_Sculpt_SettingsFlag} . </p>", 
        "guide": "<p> Guides used for paint tools </p>", 
        "isect_threshold": "<p> Threshold for intersections </p>", 
        "lock_axis": "<p>{@link eGP_Lockaxis_Types}  lock drawing to one axis. </p>", 
        "paintcursor": "<p> Runtime. </p>", 
        "weighttype": "<p> weight paint is a submode of sculpt but use its own index. All weight paint brushes must be defined at the end of the brush array.{@link eGP_Sculpt_Types}  (weight paint). </p>"
      }
    }, 
    "GpencilModifierData": {
      "fields": {
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "GpPaint": {
      "doc": "<p> grease pencil drawing brushes </p>"
    }, 
    "GPUDOFSettings": {
      "doc": "<p> Keep for '{@link Camera} ' versioning. Properties for dof effect. </p>", 
      "fields": {
        "focus_distance": "<p> Focal distance for depth of field. </p>"
      }
    }, 
    "GridPaintMask": {
      "doc": "<p> Multi-Resolution grid loop data. </p>", 
      "fields": {
        "data": "<p><code></code><code></code> . </p>", 
        "level": "<p> The maximum multires level associated with this grid. </p>"
      }
    }, 
    "HairKey": {
      "fields": {
        "co": "<p> Location of hair vertex. </p>", 
        "editflag": "<p> Saved particled edit mode flags. </p>", 
        "time": "<p> Time along hair, default 0-100. </p>", 
        "weight": "<p> Softbody weight. </p>"
      }
    }, 
    "Histogram": {
      "fields": {
        "co": "<p> sample line only image coords src -> dst </p>"
      }
    }, 
    "HookGpencilModifierData": {
      "fields": {
        "cent": "<p> Visualization of hook. </p>", 
        "falloff": "<p> If not zero, falloff is distance where influence zero. </p>", 
        "falloff_type": "<p> Use enums from WarpGpencilModifier (exact same functionality). </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "parentinv": "<p> Matrix making current transform unmodified. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "subtarget": "<p> Optional name of bone target, MAX_ID_NAME-2. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "HookModifierData": {
      "fields": {
        "cent": "<p> Visualization of hook. </p>", 
        "falloff": "<p> If not zero, falloff is distance where influence zero. </p>", 
        "falloff_type": "<p> Use enums from WarpModifier (exact same functionality). </p>", 
        "indexar": "<p> If NULL, it's using vertexgroup. </p>", 
        "name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>", 
        "parentinv": "<p> Matrix making current transform unmodified. </p>", 
        "subtarget": "<p> Optional name of bone target, MAX_ID_NAME-2. </p>"
      }
    }, 
    "ID": {
      "doc": "<p> There's a nasty circular dependency here.... 'void *' to the rescue! I really wonder why this is needed. </p>", 
      "fields": {
        "flag": "<p> LIB_... flags report on status of the data-block this {@link ID}  belongs to (persistent, saved to and read from .blend). </p>", 
        "name": "<p> MAX_ID_NAME. </p>", 
        "orig_id": "<p> Only set for data-blocks which are coming from copy-on-write, points to the original version of it. </p>", 
        "override_library": "<p> Reference linked {@link ID}  which this one overrides. </p>", 
        "tag": "<p> LIB_TAG_... tags (runtime only, cleared at read time). </p>"
      }
    }, 
    "IdAdtTemplate": {
      "doc": "<p>{@link Base}  Struct for Anim -------------------------------<mdash/><mdash/>  Used for #BKE_animdata_from_id() All ID-data-blocks which have their own 'local' {@link AnimData}  should have the same arrangement in their structs. </p>"
    }, 
    "IDOverrideLibrary": {
      "doc": "<p> Main container for all overriding data info of a data-block. </p>", 
      "fields": {
        "properties": "<p> List of IDOverrideProperty structs. </p>", 
        "reference": "<p> Reference linked {@link ID}  which this one overrides. </p>", 
        "storage": "<p> Read/write data. Temp {@link ID}  storing extra override data (used for differential operations only currently). Always NULL outside of read/write context. </p>"
      }
    }, 
    "IDOverrideLibraryProperty": {
      "doc": "<p> A single overridden property, contain all operations on this one. </p>", 
      "fields": {
        "operations": "<p> List of overriding operations (IDOverridePropertyOperation) applied to this property. </p>", 
        "rna_path": "<p>{@link Path}  from {@link ID}<em></em>  include indices/names for final arrays/collections items. </p>"
      }
    }, 
    "IDOverrideLibraryPropertyOperation": {
      "doc": "<p> add any future new id property types here. Static {@link ID}  override structs. </p>", 
      "fields": {
        "operation": "<p> Type of override. </p>", 
        "subitem_reference_name": "<p> Sub-item references, if needed (for arrays or collections only). We need both reference and local values to allow e.g. insertion into collections (constraints, modifiers...). In collection case, if names are defined, they are used in priority. Names are pointers (instead of char[64]) to save some space, NULL when unset. Indices are -1 when unset. </p>"
      }
    }, 
    "IDProperty": {
      "fields": {
        "data": "<p> Note, alignment for 64 bits. </p>", 
        "len": "<p> array length, also (this is important!) string length + 1. the idea is to be able to reuse array realloc functions on strings. </p>", 
        "name": "<p> MAX_IDPROP_NAME. </p>", 
        "saved": "<p> saved is used to indicate if this struct has been saved yet. seemed like a good idea as a '_pad' var was needed anyway :) </p>", 
        "totallen": "<p> Strings and arrays are both buffered, though the buffer isn't saved. totallen is total length of allocated array/string, including a buffer. Note that the buffering is mild; the code comes from python's list implementation. </p>"
      }
    }, 
    "IDPropertyData": {
      "fields": {
        "val": "<p> Note, we actually fit a double into these two ints. </p>"
      }
    }, 
    "Image": {
      "fields": {
        "active_tile_index": "<p>{@link ImageTile}  list for UDIMs. </p>", 
        "anims": "<p> sources from: </p>", 
        "aspx": "<p> display aspect - for UV editing images resized for faster openGL display </p>", 
        "cache": "<p> Not written in file. </p>", 
        "colorspace_settings": "<p> color management </p>", 
        "eye": "<p> Multiview For viewer node stereoscopy. </p>", 
        "gen_x": "<p> for generated images </p>", 
        "gpuflag": "<p> GPU texture flag. </p>", 
        "gputexture": "<p> Not written in file 4 = TEXTARGET_COUNT. </p>", 
        "name": "<p> File path, 1024 = FILE_MAX. </p>", 
        "packedfile": "<p> Deprecated. \n@deprecated\n Deprecated</p>", 
        "views": "<p>{@link ImageView} . </p>"
      }
    }, 
    "ImageFormatData": {
      "doc": "<p><hr/> \n Generic image format settings, this is used for {@link NodeImageFile}  and IMAGE_OT_save_as operator too.</p><p> note: its a bit strange that even though this is an image format struct the imtype can still be used to select video formats. RNA ensures these enum's are only selectable for render output. </p>", 
      "fields": {
        "cineon_flag": "<p> Cineon </p>", 
        "compress": "<p> (0 - 100), eg: png compression. </p>", 
        "depth": "<p> bits per channel, R_IMF_CHAN_DEPTH_8 -> 32, not a flag, only set 1 at a time. </p>", 
        "exr_codec": "<p><mdash/>  format specific <mdash/>  OpenEXR </p>", 
        "flag": "<p> Generic options for all image types, alpha zbuffer. </p>", 
        "imtype": "<p> R_IMF_IMTYPE_PNG, R_... <h2>Note</h2><p> Video types should only ever be set from this structure when used from {@link RenderData} . </p> Video types should only ever be set from this structure when used from RenderData. \n</p>", 
        "jp2_flag": "<p> Jpeg2000 </p>", 
        "planes": "<p> R_IMF_PLANES_BW, R_IMF_PLANES_RGB, R_IMF_PLANES_RGBA. </p>", 
        "quality": "<p> (0 - 100), eg: jpeg quality. </p>", 
        "tiff_codec": "<p> TIFF </p>", 
        "view_settings": "<p> color management </p>", 
        "views_format": "<p> Multiview </p>"
      }
    }, 
    "ImagePackedFile": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX. </p>"
      }
    }, 
    "ImagePaintSettings": {
      "doc": "<p><hr/> \n {@link Image}  {@link Paint}  Texture/Image Editor </p>", 
      "fields": {
        "canvas": "<p> Canvas when the explicit system is used for painting. </p>", 
        "clone": "<p> Clone layer for image mode for projective texture painting. </p>", 
        "dither": "<p> Dither amount used when painting on byte images. </p>", 
        "interp": "<p> Display texture interpolation method. </p>", 
        "mode": "<p> Mode used for texture painting. </p>", 
        "paintcursor": "<p> Wm handle. </p>", 
        "screen_grab_size": "<p> Capture size for re-projection. </p>", 
        "seam_bleed": "<p> for projection painting only </p>", 
        "stencil": "<p> Workaround until we support true layer masks. </p>"
      }
    }, 
    "ImageUser": {
      "doc": "<p>{@link ImageUser}  is in Texture, in Nodes, Background {@link Image} , {@link Image}  Window, .... should be used in conjunction with an {@link ID}  * to {@link Image} . </p>", 
      "fields": {
        "_pad0": "<p> Cyclic flag. </p>", 
        "framenr": "<p> Movies, sequences: current to display. </p>", 
        "frames": "<p> Total amount of frames to use. </p>", 
        "multi_index": "<p> Listbase indices, for menu browsing or retrieve buffer. </p>", 
        "multiview_eye": "<p> Multiview current eye - for internal use of drawing routines. </p>", 
        "offset": "<p> Offset within movie, start frame in global time. </p>", 
        "scene": "<p> To retrieve render result. </p>"
      }
    }, 
    "ImageView": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX. </p>", 
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "Ipo": {
      "doc": "<p><mdash/>  ID-Datablock <mdash/>  IPO Data-Block </p>", 
      "fields": {
        "blocktype": "<p> Blocktype: self-explanatory; showkey: either 0 or 1 (show vertical yellow lines for editing). </p>", 
        "cur": "<p> Rect defining extents of keyframes?. </p>", 
        "curve": "<p> A list of {@link IpoCurve}  structs in a linked list. </p>", 
        "muteipo": "<p> Muteipo: either 0 or 1 (whether ipo block is muted). </p>"
      }
    }, 
    "IpoCurve": {
      "doc": "<p><mdash/>  IPO {@link Curve}  <mdash/>  IPO {@link Curve}  </p>", 
      "fields": {
        "bezt": "<p> Array of BezTriples (sizeof(BezTriple) * totvert) - i.e. user-editable keyframes . </p>", 
        "bitmask": "<p> ???. </p>", 
        "blocktype": "<p> Blocktype= ipo-blocktype; adrcode= type of ipo-curve; vartype= 'format' of data. </p>", 
        "bp": "<p> Array of BPoints (sizeof(BPoint) * totvert) - i.e. baked/imported data. </p>", 
        "curval": "<p> Value of ipo-curve for current frame. </p>", 
        "driver": "<p> Pointer to ipo-driver for this curve. </p>", 
        "flag": "<p> Flag= settings; rt= ???. </p>", 
        "ipo": "<p> Interpolation and extrapolation modes . </p>", 
        "maxrct": "<p> Bounding boxes. </p>", 
        "slide_min": "<p> Minimum/maximum values for sliders (in action editor). </p>", 
        "totvert": "<p> Total number of BezTriples (i.e. keyframes) on curve. </p>", 
        "ymin": "<p> Minimum/maximum y-extents for curve. </p>"
      }
    }, 
    "IpoDriver": {
      "doc": "<p> -----------------<mdash/><mdash/><mdash/>  Type Defines ------------------<mdash/><mdash/><mdash/>  <mdash/>  IPO {@link Curve}  Driver <mdash/>  IPO {@link Curve}  Driver </p>", 
      "fields": {
        "blocktype": "<p> Sub-channel to use. </p>", 
        "name": "<p>{@link Bone} , or python expression here. </p>", 
        "ob": "<p> Target/driver ob. </p>", 
        "type": "<p> Driver settings. </p>"
      }
    }, 
    "Key": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "block": "<p> list of {@link KeyBlock} 's </p>", 
        "ctime": "<p> Only used when (Key->type == KEY_NORMAL), this value is used as a time slider, rather then using the scenes time, this value can be animated to give greater control </p>", 
        "elemsize": "<p> Size of each element in {@link KeyBlock.data} , use for allocation and stride. </p>", 
        "elemstr": "<p> This is not a regular string, although it is \\0 terminated this is an array of (element_array_size, element_type) pairs (each one char) used for calculating shape key-blocks. </p>", 
        "ipo": "<p> old animation system, deprecated for 2.5 \n@deprecated\n Deprecated</p>", 
        "refkey": "<p><em></em>  'key->block.first', perhaps later on it could be defined as some other {@link KeyBlock}  - campbell </p>", 
        "totkey": "<p> (totkey == BLI_listbase_count(&key->block)) </p>", 
        "type": "<p> absolute or relative shape key </p>", 
        "uidgen": "<p> Can never be 0, this is used for detecting old data. current free uid for keyblocks </p>"
      }
    }, 
    "KeyBlock": {
      "fields": {
        "curval": "<p> influence (typically [0 - 1] but can be more), (Key->type == KEY_RELATIVE) only. </p>", 
        "data": "<p> array of shape key values, size is (Key->elemsize * KeyBlock->totelem) </p>", 
        "name": "<p> MAX_NAME (unique name, user assigned) </p>", 
        "pos": "<p> point in time (Key->type == KEY_NORMAL) only, for historic reasons this is relative to (Key->ctime / 100), so this value increments by 0.1f per frame. </p>", 
        "relative": "<p> relative == 0 means first key is reference, otherwise the index of Key->blocks </p>", 
        "slidermin": "<p> ranges, for RNA and UI only to clamp 'curval' </p>", 
        "totelem": "<p> total number if items in the keyblock (compare with mesh/curve verts to check we match) </p>", 
        "type": "<p> interpolation type (Key->type == KEY_NORMAL) only. </p>", 
        "uid": "<p> for meshes only, match the unique number with the customdata layer </p>", 
        "vgroup": "<p> MAX_VGROUP_NAME (optional vertex group), array gets allocated into 'weights' when set </p>"
      }
    }, 
    "KeyingSet": {
      "doc": "<p><hr/> \n</p><p>{@link KeyingSet}  definition (ks)</p><p> A {@link KeyingSet}  defines a group of properties that should be keyframed together, providing a convenient way for animators to insert keyframes without resorting to Auto-Keyframing.</p><p> A few 'generic' (non-absolute and dependent on templates) KeyingSets are defined 'built-in' to facilitate easy animating for the casual animator without the need to add extra steps to the rigging process. </p>", 
      "fields": {
        "active_path": "<p> Index of the active path. </p>", 
        "description": "<p> (RNA_DYN_DESCR_MAX) short help text. </p>", 
        "flag": "<p> Settings for {@link KeyingSet} . </p>", 
        "idname": "<p> Unique name (for search, etc.) - MAX_ID_NAME-2 . </p>", 
        "keyingflag": "<p> (eInsertKeyFlags) settings to supply insertkey() with. </p>", 
        "keyingoverride": "<p> (eInsertKeyFlags) for each flag set, the relevant keyingflag bit overrides the default. </p>", 
        "name": "<p> User-viewable name for {@link KeyingSet}  (for menus, etc.) - MAX_ID_NAME-2. </p>", 
        "paths": "<p> ({@link KS_Path} ) paths to keyframe to. </p>", 
        "typeinfo": "<p> Name of the typeinfo data used for the relative paths - MAX_ID_NAME-2. </p>"
      }
    }, 
    "KS_Path": {
      "doc": "<p><hr/> \n {@link KeyingSet}  Datatypes {@link Path}  for use in {@link KeyingSet}  definitions (ksp)</p><p> Paths may be either specific (specifying the exact sub-ID dynamic data-block - such as PoseChannels - to act upon, ala Maya's 'Character Sets' and XSI's 'Marking Sets'), or they may be generic (using various placeholder template tags that will be replaced with appropriate information from the context). </p>", 
      "fields": {
        "array_index": "<p> Index that path affects. </p>", 
        "flag": "<p> Various settings, etc. </p>", 
        "group": "<p> Name of the group to add to - MAX_ID_NAME-2. </p>", 
        "groupmode": "<p> Group naming (eKSP_Grouping). </p>", 
        "id": "<p>{@link ID}  block that keyframes are for. </p>", 
        "idtype": "<p> -type that path can be used on. </p>", 
        "keyingflag": "<p> (eInsertKeyFlags) settings to supply insertkey() with. </p>", 
        "keyingoverride": "<p> (eInsertKeyFlags) for each flag set, the relevant keyingflag bit overrides the default. </p>", 
        "rna_path": "<p> Dynamically (or statically in the case of predefined sets) path. </p>"
      }
    }, 
    "LaplacianDeformModifierData": {
      "fields": {
        "anchor_grp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "cache_system": "<p> Runtime only. </p>"
      }
    }, 
    "LaplacianSmoothModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "Lattice": {
      "fields": {
        "actbp": "<p> Active element index, unset with LT_ACTBP_NONE. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "vgroup": "<p> Multiply the influence, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "LatticeGpencilModifierData": {
      "fields": {
        "cache_data": "<p> Runtime only (LatticeDeformData). </p>", 
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "LatticeModifierData": {
      "fields": {
        "name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "LayerCollection": {
      "fields": {
        "layer_collections": "<p> Synced with collection->children. </p>", 
        "scene_collection": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "Library": {
      "doc": "<p> For each library file used, a {@link Library}  struct is added to Main WARNING: readfile.c, expand_doit() reads this struct without DNA check! </p>", 
      "fields": {
        "filepath": "<p> Absolute filepath, this is only for convenience, 'name' is the real path used on file read but in some cases its useful to access the absolute one. This is set on file read. Use BKE_library_filepath_set() rather than setting 'name' directly and it will be kept in sync - campbell </p>", 
        "name": "<p>{@link Path}  name used for reading, can be relative and edited in the outliner. </p>", 
        "parent": "<p> Set for indirectly linked libs, used in the outliner and while reading. </p>", 
        "temp_index": "<p> Temp data needed by read/write code. </p>", 
        "versionfile": "<p> See BLENDER_VERSION, BLENDER_SUBVERSION, needed for do_versions. </p>"
      }
    }, 
    "Light": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "att1": "<p> Quad1 and Quad2 attenuation. </p>", 
        "bleedbias": "<p> DEPRECATED kept for compatibility. </p>", 
        "bleedexp": "<p> DEPRECATED kept for compatibility. </p>", 
        "cascade_max_dist": "<p> Eevee </p>", 
        "contact_spread": "<p> DEPRECATED kept for compatibility. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "nodetree": "<p> nodes </p>", 
        "preview": "<p> preview </p>", 
        "soft": "<p> DEPRECATED kept for compatibility. </p>", 
        "texact": "<p> texact is for buttons </p>"
      }
    }, 
    "LightCache": {
      "fields": {
        "cube_data": "<p> All lightprobes data contained in the cache. </p>", 
        "cube_len": "<p> only a single cache for now Number of probes to use for rendering. </p>", 
        "cube_mips": "<p> Does not contains valid GPUTexture, only data. </p>", 
        "cube_tx": "<p> Contains data for mipmap level 0. </p>", 
        "grid_tx": "<p> In the future, we could create a bigger texture containing multiple caches (for animation) and interpolate between the caches overtime to another texture. </p>", 
        "mips_len": "<p> Number of mipmap level to use. </p>", 
        "vis_res": "<p> Size of a visibility/reflection sample. </p>"
      }
    }, 
    "LightCacheTexture": {
      "doc": "<p> These are used as ubo data. They need to be aligned to size of vec4. ---<mdash/>  Eevee Lightcache ----<mdash/>  </p>", 
      "fields": {
        "data": "<p> Copy of GPU datas to create GPUTextures on file read. </p>"
      }
    }, 
    "LightGridCache": {
      "doc": "<p> Must match GridData. </p>", 
      "fields": {
        "increment_x": "<p>{@link World}  space vector between 2 opposite cells. </p>", 
        "resolution": "<p> Offset to the first irradiance sample in the pool. </p>"
      }
    }, 
    "LightProbe": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "attenuation_type": "<p> Attenuation type. </p>", 
        "distfalloff": "<p> Runtime display data </p>", 
        "distinf": "<p> Influence Radius. </p>", 
        "distpar": "<p> Parallax Radius. </p>", 
        "falloff": "<p> Influence falloff. </p>", 
        "flag": "<p> General purpose flags for probes. </p>", 
        "grid_resolution_x": "<p> Irradiance grid resolution. </p>", 
        "image": "<p>{@link Image}  to use on as lighting data. </p>", 
        "intensity": "<p> Intensity multiplier. </p>", 
        "parallax_ob": "<p>{@link Object}  to use as a parallax origin. </p>", 
        "parallax_type": "<p> Parallax type. </p>", 
        "type": "<p> For realtime probe objects. </p>", 
        "vis_bias": "<p> VSM visibility biases. </p>", 
        "visibility_grp": "<p>{@link Object}  visibility group, inclusive or exclusive. </p>"
      }
    }, 
    "LightProbeCache": {
      "doc": "<p> -<mdash/><mdash/>  Eevee LightProbes -<mdash/><mdash/>  Needs to be there because written to file with the light-cache. IMPORTANT Padding in these structs is essential. It must match GLSL struct definition in lightprobe_lib.glsl. Must match CubeData. </p>"
    }, 
    "LightShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "loc": "<p> Internal, not visible in rna. </p>"
      }
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "doc": "<p> Along Stroke modifiers </p>"
    }, 
    "LineStyleColorModifier_CreaseAngle": {
      "doc": "<p> Crease Angle modifiers </p>"
    }, 
    "LineStyleColorModifier_Curvature_3D": {
      "doc": "<p> 3D curvature modifiers </p>"
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "doc": "<p> Distance from {@link Camera}  modifiers </p>"
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "doc": "<p> Distance from {@link Object}  modifiers </p>"
    }, 
    "LineStyleColorModifier_Noise": {
      "doc": "<p> Noise modifiers (for color, alpha and thickness) </p>"
    }, 
    "LineStyleColorModifier_Tangent": {
      "doc": "<p> Tangent modifiers </p>"
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "fields": {
        "angle": "<p> In radians!. </p>"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "fields": {
        "angle": "<p> In radians!. </p>"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "fields": {
        "angle": "<p> In radians!. </p>"
      }
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "doc": "<p> Geometry modifiers </p>"
    }, 
    "LineStyleModifier": {
      "fields": {
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "doc": "<p> Calligraphic thickness modifier </p>", 
      "fields": {
        "orientation": "<p> In radians!. </p>"
      }
    }, 
    "Link": {
      "doc": "<p> Generic - all structs which are put into linked lists begin with this. </p>"
    }, 
    "LinkData": {
      "doc": "<p> Simple subclass of {@link Link} . Use this when it is not worth defining a custom one. </p>"
    }, 
    "ListBase": {
      "doc": "<p> Never change the size of this! dna_genfile.c detects pointer_size with it. </p>"
    }, 
    "MappingInfoModifierData": {
      "doc": "<p> not a real modifier </p>", 
      "fields": {
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "Mask": {
      "fields": {
        "flag": "<p> For anim info. </p>", 
        "masklay_act": "<p> Index of active mask layer (-1 == None). </p>", 
        "masklay_tot": "<p> Total number of mask layers. </p>", 
        "masklayers": "<p>{@link Mask}  layers. </p>", 
        "sfra": "<p> Frames, used by the sequencer. </p>"
      }
    }, 
    "MaskLayer": {
      "fields": {
        "act_point": "<p> Active point. </p>", 
        "act_spline": "<p> Active spline. </p>", 
        "alpha": "<p> blending options </p>", 
        "flag": "<p> For animation. </p>", 
        "name": "<p> Name of the mask layer (64 = MAD_ID_NAME - 2). </p>", 
        "restrictflag": "<p> Matching '{@link Object} ' flag of the same name - eventually use in the outliner . </p>", 
        "splines": "<p> List of splines which defines this mask layer. </p>"
      }
    }, 
    "MaskLayerShape": {
      "doc": "<p> one per frame </p>", 
      "fields": {
        "data": "<p> U coordinate along spline segment and weight of this point. </p>", 
        "flag": "<p> Animation flag. </p>", 
        "frame": "<p> Different flags of this point. </p>", 
        "tot_vert": "<p> To ensure no buffer overruns's: alloc size is (tot_vert * MASK_OBJECT_SHAPE_ELEM_SIZE). </p>"
      }
    }, 
    "MaskModifierData": {
      "doc": "<p>{@link Mask}  Modifier </p>", 
      "fields": {
        "flag": "<p> Flags for various things. </p>", 
        "mode": "<p> Using armature or hardcoded vgroup. </p>", 
        "ob_arm": "<p> Armature to use to in place of hardcoded vgroup. </p>", 
        "vgroup": "<p> Name of vertex group to use to mask, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "MaskParent": {
      "fields": {
        "id": "<p>{@link ID}  block of entity to which mask/spline is parented to in case of parenting to movie tracking data set to {@link MovieClip}  datablock. </p>", 
        "id_type": "<p> int flag; </p><p> // Parenting flags not used.Type of parenting. </p>", 
        "parent": "<p> Entity of parent to which parenting happened in case of parenting to movie tracking data contains name of layer. </p>", 
        "parent_corners_orig": "<p> Original corners of plane track at the moment of parenting. </p>", 
        "parent_orig": "<p> Track location at the moment of parenting, stored in mask space. </p>", 
        "sub_parent": "<p> Sub-entity of parent to which parenting happened in case of parenting to movie tracking data contains name of track. </p>", 
        "type": "<p> Type of parenting. </p>"
      }
    }, 
    "MaskSpaceInfo": {
      "fields": {
        "draw_flag": "<p> draw options </p>", 
        "mask": "<p> **** mask editing **** </p>"
      }
    }, 
    "MaskSpline": {
      "fields": {
        "flag": "<p> Different spline flag (closed, ...). </p>", 
        "offset_mode": "<p> Feather offset method. </p>", 
        "parent": "<p> Parenting information of the whole spline. </p>", 
        "points": "<p> Points which defines spline itself. </p>", 
        "points_deform": "<p> Deformed copy of 'points' {@link BezTriple}  data - not saved. </p>", 
        "tot_point": "<p> Total number of points. </p>", 
        "weight_interp": "<p> Weight interpolation. </p>"
      }
    }, 
    "MaskSplinePoint": {
      "fields": {
        "bezt": "<p> Actual point coordinates and it's handles . </p>", 
        "parent": "<p> Parenting information of particular spline point. </p>", 
        "tot_uw": "<p> Number of uv feather values. </p>", 
        "uw": "<p> Feather UV values. </p>"
      }
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "flag": "<p> Different flags of this point. </p>", 
        "u": "<p> U coordinate along spline segment and weight of this point. </p>"
      }
    }, 
    "Material": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "alpha": "<p>\n@deprecated\n Deprecated</p>", 
        "alpha_threshold": "<p> Transparency. </p>", 
        "gloss_mir": "<p> Renamed and inversed to roughness. \n@deprecated\n Deprecated</p>", 
        "gp_style": "<p> Grease pencil color. </p>", 
        "gpumaterial": "<p> Runtime cache for GLSL materials. </p>", 
        "index": "<p> Index for render passes. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "line_col": "<p> Freestyle line settings. </p>", 
        "paint_active_slot": "<p> Texture painting slots. </p>", 
        "pr_type": "<p> Preview render. </p>", 
        "r": "<p> Colors from Blender Internal that we are still using. </p>", 
        "ray_mirror": "<p>\n@deprecated\n Deprecated</p>", 
        "texpaintslot": "<p> Cached slots for texture painting, must be refreshed in refresh_texpaint_image_cache before using. </p>", 
        "use_nodes": "<p> Nodes </p>"
      }
    }, 
    "MaterialGPencilStyle": {
      "fields": {
        "alignment_mode": "<p> Mode used to align Dots and Boxes with stroke drawing path and object rotation </p>", 
        "fill_rgba": "<p> Color that should be used for drawing \"fills\" for strokes (alpha included). </p>", 
        "fill_style": "<p> Style for filling areas (used to select shader type). </p>", 
        "flag": "<p> Settings. </p>", 
        "gradient_angle": "<p> Angle used for gradients orientation. </p>", 
        "gradient_radius": "<p> Radius for radial gradients. </p>", 
        "gradient_scale": "<p> Uv coordinates scale. </p>", 
        "gradient_shift": "<p> Factor to shift filling in 2d space. </p>", 
        "gradient_type": "<p> Type of gradient. </p>", 
        "ima": "<p> Texture image for filling. </p>", 
        "index": "<p> Custom index for passes. </p>", 
        "mix_factor": "<p> Factor used to define shader behavior (several uses). </p>", 
        "mix_rgba": "<p> Secondary color used for gradients and other stuff. </p>", 
        "mix_stroke_factor": "<p> Factor used to mix texture and stroke color. </p>", 
        "mode": "<p> Drawing mode (line or dots). </p>", 
        "pattern_gridsize": "<p> Cheesboard size. </p>", 
        "sima": "<p> Texture image for strokes. </p>", 
        "stroke_rgba": "<p> Color for paint and strokes (alpha included). </p>", 
        "stroke_style": "<p> Style for drawing strokes (used to select shader type). </p>", 
        "texture_angle": "<p> Angle used for texture orientation. </p>", 
        "texture_offset": "<p> Factor to shift texture in 2d space. </p>", 
        "texture_opacity": "<p> Texture opacity. </p>", 
        "texture_pixsize": "<p> Pixel size for uv along the stroke. </p>", 
        "texture_scale": "<p> Texture scale (separated of uv scale). </p>"
      }
    }, 
    "MCol": {
      "doc": "<p> Tessellation vertex color data.</p><p><h2>Note</h2><p> The red and blue are swapped for historical reasons. </p> The red and blue are swapped for historical reasons. \n</p>"
    }, 
    "MDeformVert": {
      "fields": {
        "flag": "<p> Flag is only in use as a run-time tag at the moment. </p>"
      }
    }, 
    "MDeformWeight": {
      "doc": "<p> Vertex group index and weight for #MDeformVert.dw </p>", 
      "fields": {
        "def_nr": "<p><em></em>  be unique when in an array. </p>", 
        "weight": "<p> Weight between 0.0 and 1.0. </p>"
      }
    }, 
    "MDisps": {
      "doc": "<p> Multi-Resolution loop data. </p>", 
      "fields": {
        "hidden": "<p> Used for hiding parts of a multires mesh. Essentially the multires equivalent of #MVert.flag's ME_HIDE bit.</p><p><h2>Note</h2><p> This is a bitmap, keep in sync with type used in BLI_bitmap.h </p> This is a bitmap, keep in sync with type used in BLI_bitmap.h \n</p>", 
        "totdisp": "<p> Strange bug in {@link SDNA} : if disps pointer comes first, it fails to see totdisp </p>"
      }
    }, 
    "MEdge": {
      "doc": "<p>{@link Mesh}  Edges.</p><p> Typically accessed from {@link Mesh.medge}  </p>", 
      "fields": {
        "v1": "<p> Un-ordered vertex indices (cannot match). </p>"
      }
    }, 
    "Mesh": {
      "fields": {
        "act_face": "<p> END BMESH ONLY the last selected vertex/edge/face are used for the active face however this means the active face must always be selected, this is to keep track of the last selected face and is similar to the old active face flag where the face does not need to be selected, -1 is inactive </p>", 
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "cd_flag": "<p> customdata flag, for bevel-weight and crease, which are now optional </p>", 
        "dvert": "<p> Deformgroup vertices. </p>", 
        "edit_mesh": "<p> When the object is available, the preferred access method is: BKE_editmesh_from_object(ob) Not saved in file!. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "ldata": "<p> BMESH ONLY </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "mcol": "<p> array of colors for the tessellated faces, must be number of tessellated faces * 4 in length </p>", 
        "medge": "<p> Array of edges. </p>", 
        "mface": "<p> END BMESH ONLY mface stores the tessellation (triangulation) of the mesh, real faces are now stored in nface. Array of mesh object mode faces for tessellation. </p>", 
        "mpoly": "<p> BMESH ONLY new face structures </p>", 
        "mr": "<p> Deprecated multiresolution modeling data, only keep for loading old files. \n@deprecated\n Deprecated</p>", 
        "mtface": "<p> Store tessellation face UV's and texture here. </p>", 
        "mvert": "<p> Array of verts. </p>", 
        "subdiv": "<p>\n@deprecated\n Deprecated</p>", 
        "subdivr": "<p>\n@deprecated\n Deprecated</p>", 
        "subsurftype": "<p> Only kept for backwards compat, not used anymore. \n@deprecated\n Deprecated</p>", 
        "tface": "<p> Deprecated, use mtface. \n@deprecated\n Deprecated</p>", 
        "totpoly": "<p> BMESH ONLY </p>", 
        "totvert": "<p> END BMESH ONLY </p>"
      }
    }, 
    "Mesh_Runtime": {
      "doc": "<p> not saved in file! </p>", 
      "fields": {
        "bvh_cache": "<p> 'BVHCache', for 'BKE_bvhutil.c' </p>", 
        "deformed_only": "<p> Set by modifier stack if only deformed from original. </p>", 
        "is_original": "<p> Copied from edit-mesh (hint, draw with editmesh data). In the future we may leave the mesh-data empty since its not needed if we can use edit-mesh data. </p>", 
        "mesh_eval": "<p> Evaluated mesh for objects which do not have effective modifiers. This mesh is sued as a result of modifier stack evaluation. Since modifier stack evaluation is threaded on object level we need some synchronization. </p>", 
        "shrinkwrap_data": "<p> Non-manifold boundary data for Shrinkwrap Target Project. </p>"
      }
    }, 
    "MeshCacheModifierData": {
      "doc": "<p> cache modifier </p>", 
      "fields": {
        "eval_frame": "<p> play_mode == MOD_MESHCACHE_PLAY_EVAL we could use one float for all these but their purpose is very different </p>", 
        "filepath": "<p> FILE_MAX. </p>", 
        "forward_axis": "<p> axis conversion </p>", 
        "frame_start": "<p> play_mode == MOD_MESHCACHE_PLAY_CFEA </p>", 
        "type": "<p> File format. </p>"
      }
    }, 
    "MeshDeformModifierData": {
      "fields": {
        "bindcagecos": "<p> Coordinates that cage was bound with. </p>", 
        "bindcos": "<p> Deprecated storage of cage coords. </p>", 
        "bindfunc": "<p> runtime </p>", 
        "bindinfluences": "<p> result of static binding Influences. </p>", 
        "bindmat": "<p> Matrix of cage at binding time. </p>", 
        "bindoffsets": "<p> Offsets into influences array. </p>", 
        "bindweights": "<p> deprecated storage Deprecated inefficient storage. </p>", 
        "defgrp_name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>", 
        "dyncellmin": "<p> Offset of the dynamic bind grid. </p>", 
        "dyncellwidth": "<p> Width of dynamic bind cell. </p>", 
        "dyngrid": "<p> result of dynamic binding Grid with dynamic binding cell points. </p>", 
        "dyngridsize": "<p> Size of the dynamic bind grid. </p>", 
        "dyninfluences": "<p> Dynamic binding vertex influences. </p>", 
        "dynverts": "<p> Is this vertex bound or not?. </p>", 
        "object": "<p>{@link Mesh}  object. </p>", 
        "totinfluence": "<p> Total number of vertex influences. </p>", 
        "totvert": "<p> Total vertices in mesh and cage. </p>"
      }
    }, 
    "MeshSeqCacheModifierData": {
      "fields": {
        "object_path": "<p> 1024 = FILE_MAX. </p>", 
        "reader": "<p> Runtime. </p>"
      }
    }, 
    "MeshStatVis": {
      "doc": "<p><hr/> \n Stats Stats for Meshes </p>", 
      "fields": {
        "distort_min": "<p> distort </p>", 
        "overhang_axis": "<p> overhang </p>", 
        "sharp_min": "<p> sharp </p>", 
        "thickness_min": "<p> thickness </p>"
      }
    }, 
    "MetaBall": {
      "fields": {
        "editelems": "<p> Not saved in files, note we use pointer for editmode check. </p>", 
        "flag": "<p> Flag is enum for updates, flag2 is bitflags for settings. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "lastelem": "<p> used in editmode {@link ListBase}  edit_elems; </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "mat": "<p> material of the mother ball will define the material used of all others </p>", 
        "needs_flush_to_id": "<p>{@link ID}  data is older than edit-mode data (TODO: move to edit-mode struct). Set #Main.is_memfile_undo_flush_needed when enabling. </p>", 
        "texflag": "<p> Used to store MB_AUTOSPACE. </p>", 
        "thresh": "<p> bias elements to have an offset volume. mother ball changes will effect other objects thresholds, but these may also have their own thresh as an offset </p>", 
        "wiresize": "<p> Display and render res. </p>"
      }
    }, 
    "MetaElem": {
      "fields": {
        "bb": "<p> Bound Box of {@link MetaElem} . </p>", 
        "expx": "<p> Dimension parameters, used for some types like cubes. </p>", 
        "len": "<p> Old, only used for backwards compat. use dimensions now. </p>", 
        "mat": "<p> Matrix and inverted matrix. </p>", 
        "quat": "<p> Rotation of {@link MetaElem}  (MUST be kept normalized). </p>", 
        "rad": "<p> Radius of the meta element. </p>", 
        "rad2": "<p> Temp field, used only while processing. </p>", 
        "s": "<p> Stiffness, how much of the element to fill. </p>", 
        "x": "<p> Position of center of {@link MetaElem} . </p>"
      }
    }, 
    "MetaStack": {
      "fields": {
        "disp_range": "<p> the startdisp/enddisp when entering the meta </p>"
      }
    }, 
    "MFace": {
      "doc": "<p> Used in Blender pre 2.63, See {@link MLoop} , {@link MPoly}  for face data stored in the blend file. Use for reading old files and in a handful of cases which should be removed eventually. </p>", 
      "fields": {
        "edcode": "<p> We keep edcode, for conversion to edges draw flags in old files. </p>"
      }
    }, 
    "MFloatProperty": {
      "doc": "<p> Custom Data Properties </p>"
    }, 
    "MirrorGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>"
      }
    }, 
    "MirrorModifierData": {
      "fields": {
        "axis": "<p> Deprecated, use flag instead. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "MLoop": {
      "doc": "<p>{@link Mesh}  Loops. Each loop represents the corner of a polygon ({@link MPoly} ).</p><p> Typically accessed from #Mesh.mloop. </p>", 
      "fields": {
        "e": "<p> Edge index.</p><p><h2>Note</h2><p> The e here is because we want to move away from relying on edge hashes. </p> The e here is because we want to move away from relying on edge hashes. \n</p>", 
        "v": "<p> Vertex index. </p>"
      }
    }, 
    "MLoopCol": {
      "doc": "<p><h2>Note</h2><p> While alpha is currently is not in the view-port, this may eventually be added back, keep this value set to 255. </p> While alpha is currently is not in the view-port, this may eventually be added back, keep this value set to 255. \n</p>"
    }, 
    "MLoopTri": {
      "doc": "<p>{@link MLoopTri} 's are lightweight triangulation data, for functionality that doesn't support ngons ({@link MPoly} ). This is cache data created from ({@link MPoly} , {@link MLoop}  & {@link MVert}  arrays). There is no attempt to maintain this data's validity over time, any changes to the underlying mesh invalidate the {@link MLoopTri}  array, which will need to be re-calculated.</p><p> Users normally access this via #BKE_mesh_runtime_looptri_ensure. In rare cases its calculated directly, with #BKE_mesh_recalc_looptri.</p><p> Typical usage includes:<ul><li><p> OpenGL drawing.</p></li><li><p> #BVHTree creation.</p></li><li><p> Physics/collision detection.</p></li></ul> \nOpenGL drawing.#BVHTree creation.Physics/collision detection.\n</p><p> Storing loop indices (instead of vertex indices) allows us to directly access UV's, vertex-colors as well as vertices. The index of the source polygon is stored as well, giving access to materials and polygon normals.</p><p><h2>Note</h2><p> This data is runtime only, never written to disk.</p> This data is runtime only, never written to disk.\nUsage examples: <code>       material. ///accessoriginalmaterial.\n short short       mpoly[lt->poly].mat_nr; mat_nr=mpoly[lt->poly].mat_nr;\n\n       locations. ///accessvertexlocations.\n float float       { *vtri_co[3]={\n         mvert[mloop[lt->tri[0]].v].co, mvert[mloop[lt->tri[0]].v].co,\n         mvert[mloop[lt->tri[1]].v].co, mvert[mloop[lt->tri[1]].v].co,\n         mvert[mloop[lt->tri[2]].v].co, mvert[mloop[lt->tri[2]].v].co,\n }; };\n\n                       etc). ///accessUVcoordinates(worksforallloopdata,vertexcolors...etc).\n float float       { *uvtri_co[3]={\n         mloopuv[lt->tri[0]].uv, mloopuv[lt->tri[0]].uv,\n         mloopuv[lt->tri[1]].uv, mloopuv[lt->tri[1]].uv,\n         mloopuv[lt->tri[2]].uv, mloopuv[lt->tri[2]].uv,\n }; };\n</code> ///accessoriginalmaterial.\nshortmat_nr=mpoly[lt->poly].mat_nr;\n\n///accessvertexlocations.\nfloat*vtri_co[3]={\nmvert[mloop[lt->tri[0]].v].co,\nmvert[mloop[lt->tri[1]].v].co,\nmvert[mloop[lt->tri[2]].v].co,\n};\n\n///accessUVcoordinates(worksforallloopdata,vertexcolors...etc).\nfloat*uvtri_co[3]={\nmloopuv[lt->tri[0]].uv,\nmloopuv[lt->tri[1]].uv,\nmloopuv[lt->tri[2]].uv,\n};\n</p><p>{@link MLoopTri} 's are allocated in an array, where each polygon's {@link MLoopTri} 's are stored contiguously, the number of triangles for each polygon is guaranteed to be ({@link MPoly.totloop}  - 2), even for degenerate geometry. See {@link ME_POLY_TRI_TOT}  macro.</p><p> It's also possible to perform a reverse lookup (find all {@link MLoopTri} 's for any given {@link MPoly} ).</p><p><code>                   i ///loopoveralllooptri'sforagivenpolygon:i\n{@link MPoly}       &mpoly[i]; *mp=&mpoly[i];\n{@link MLoopTri}         mp->{@link loopstart} )]; MLoopTri*lt=&looptri[poly_to_tri_count(i,mp->loopstart)];\n int int        {@link ME_POLY_TRI_TOT} (mp); j,lt_tot=ME_POLY_TRI_TOT(mp);\n\n for for                   { (j=0;j<lt_tot;j++,lt++){\n         unsigned unsigned   int int       { vtri[3]={\n                 mloop[lt->tri[0]].v, mloop[lt->tri[0]].v,\n                 mloop[lt->tri[1]].v, mloop[lt->tri[1]].v,\n                 mloop[lt->tri[2]].v, mloop[lt->tri[2]].v,\n         }; };\n         printf( printf(       %u\\n\" \"tri%u%u%u\\n\"       vtri[2]); ,vtri[0],vtri[1],vtri[2]);\n }; };\n</code> ///loopoveralllooptri'sforagivenpolygon:i\nMPoly*mp=&mpoly[i];\nMLoopTri*lt=&looptri[poly_to_tri_count(i,mp->loopstart)];\nintj,lt_tot=ME_POLY_TRI_TOT(mp);\n\nfor(j=0;j<lt_tot;j++,lt++){\nunsignedintvtri[3]={\nmloop[lt->tri[0]].v,\nmloop[lt->tri[1]].v,\nmloop[lt->tri[2]].v,\n};\nprintf(\"tri%u%u%u\\n\",vtri[0],vtri[1],vtri[2]);\n};\n</p><p> It may also be useful to check whether or not two vertices of a triangle form an edge in the underlying mesh.</p><p> This can be done by checking the edge of the referenced loop ({@link MLoop.e} ), the winding of the {@link MLoopTri}  and the {@link MLoop} 's will always match, however the order of vertices in the edge is undefined.</p><p><code>               lt ///printrealedgesfromanMLoopTri:lt\n int int     j_next; j,j_next;\n for for                           { (j=2,j_next=0;j_next<3;j=j_next++){\n        {@link MEdge}       &medge[mloop[lt->tri[j]].e]; *ed=&medge[mloop[lt->tri[j]].e];\n         unsigned unsigned   int int           mloop[lt->tri[j_next]].v}; tri_edge[2]={mloop[lt->tri[j]].v,mloop[lt->tri[j_next]].v};\n\n         if if   (((ed->{@link v1}               || (((ed->v1==tri_edge[0])&&(ed->v2==tri_edge[1]))||\n                 ((ed->{@link v1}             tri_edge[0]))) ((ed->v1==tri_edge[1])&&(ed->v2==tri_edge[0])))\n         { {\n                 printf( printf(         %u\\n\" \"realedgefound%u%u\\n\"     tri_edge[1]); ,tri_edge[0],tri_edge[1]);\n         } }\n } }\n</code> ///printrealedgesfromanMLoopTri:lt\nintj,j_next;\nfor(j=2,j_next=0;j_next<3;j=j_next++){\nMEdge*ed=&medge[mloop[lt->tri[j]].e];\nunsignedinttri_edge[2]={mloop[lt->tri[j]].v,mloop[lt->tri[j_next]].v};\n\nif(((ed->v1==tri_edge[0])&&(ed->v2==tri_edge[1]))||\n((ed->v1==tri_edge[1])&&(ed->v2==tri_edge[0])))\n{\nprintf(\"realedgefound%u%u\\n\",tri_edge[0],tri_edge[1]);\n}\n}\n</p><p> See #BKE_mesh_looptri_get_real_edges for a utility that does this.</p><p><h2>Note</h2><p> A {@link MLoopTri}<b></b>  edges. </p> A MLoopTri may be in the middle of an ngon and not reference any edges. \n</p>"
    }, 
    "MLoopTri_Store": {
      "doc": "<p><h2>Warning</h2><p> Typical access is done via #BKE_mesh_runtime_looptri_ensure, #BKE_mesh_runtime_looptri_len. </p> Typical access is done via #BKE_mesh_runtime_looptri_ensure, #BKE_mesh_runtime_looptri_len. \n</p>", 
      "fields": {
        "array": "<p> WARNING! swapping between array (ready-to-be-used data) and array_wip (where data is actually computed) shall always be protected by same lock as one used for looptris computing. </p>"
      }
    }, 
    "MLoopUV": {
      "doc": "<p> UV coordinate for a polygon face & flag for selection & other options. </p>"
    }, 
    "ModifierData": {
      "fields": {
        "name": "<p> MAX_NAME. </p>", 
        "orig_modifier_data": "<p> Pointer to a {@link ModifierData}  in the original domain. </p>"
      }
    }, 
    "MovieClip": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "anim": "<p> Movie source data. </p>", 
        "aspx": "<p> Display aspect. </p>", 
        "cache": "<p> Cache for different stuff, not in file. </p>", 
        "colorspace_settings": "<p> color management </p>", 
        "frame_offset": "<p> Offset which is adding to a file number when reading frame from a file. affects only a way how scene frame is mapping to a file name and not touches other data associated with a clip. </p>", 
        "gpd": "<p> Grease pencil data. </p>", 
        "lastframe": "<p> Last accessed frame number. </p>", 
        "lastsize": "<p> Size of last accessed frame. </p>", 
        "len": "<p> Length of movie. </p>", 
        "name": "<p> File path, 1024 = FILE_MAX. </p>", 
        "proxy": "<p> Proxy to clip data. </p>", 
        "source": "<p>{@link Sequence}  or movie. </p>", 
        "start_frame": "<p>{@link Scene}  frame number footage starts playing at affects all data which is associated with a clip such as motion tracking, camera Reconstruction and so. </p>", 
        "tracking": "<p> Data for SfM tracking. </p>", 
        "tracking_context": "<p> Context of tracking job used to synchronize data like frame-number in {@link SpaceClip}  clip user. </p>"
      }
    }, 
    "MovieClip_RuntimeGPUTexture": {
      "fields": {
        "gputexture": "<p> Not written in file 4 = TEXTARGET_COUNT. </p>"
      }
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_size_flag": "<p> Size flags (see below) of all proxies to build. </p>", 
        "build_tc_flag": "<p> Time code flags (see below) of all tc indices to build. </p>", 
        "dir": "<p> 768=FILE_MAXDIR custom directory for index and proxy files (defaults to BL_proxy). </p>", 
        "quality": "<p> Proxy build quality. </p>", 
        "tc": "<p> Time code in use. </p>"
      }
    }, 
    "MovieClipScopes": {
      "fields": {
        "frame_width": "<p> Width and height of frame for which scopes are calculated. </p>", 
        "framenr": "<p> Frame number scopes are created for. </p>", 
        "marker": "<p> Marker scopes are created for. </p>", 
        "ok": "<p> 1 means scopes are ok and recalculation is unneeded. </p>", 
        "slide_scale": "<p> Scale used for sliding from previewe area. </p>", 
        "track": "<p> Track scopes are created for. </p>", 
        "track_disabled": "<p> Active track is disabled, special notifier should be drawn. </p>", 
        "track_locked": "<p> Active track is locked, no transformation should be allowed. </p>", 
        "track_pos": "<p> Sub-pizel position of marker in track ImBuf. </p>", 
        "track_preview": "<p> #ImBuf displayed in track preview. </p>", 
        "track_preview_height": "<p> Height of track preview widget. </p>", 
        "track_search": "<p> Search area of a track. </p>", 
        "undist_marker": "<p> Undistorted position of marker used for pattern sampling. </p>", 
        "use_track_mask": "<p> Whether track's mask should be applied on preview. </p>"
      }
    }, 
    "MovieClipUser": {
      "fields": {
        "framenr": "<p> Current frame number. </p>", 
        "render_size": "<p> Proxy render size. </p>"
      }
    }, 
    "MovieTracking": {
      "fields": {
        "act_plane_track": "<p> Active plane track. </p>", 
        "act_track": "<p> Active track. </p>", 
        "camera": "<p>{@link Camera}  intrinsics. </p>", 
        "dopesheet": "<p> Dopesheet data. </p>", 
        "objectnr": "<p> Index of active object and total number of objects. </p>", 
        "plane_tracks": "<p> List of plane tracks used by camera object. </p>", 
        "reconstruction": "<p> Reconstruction data for camera object. </p>", 
        "settings": "<p> Different tracking-related settings. </p>", 
        "stabilization": "<p> Stabilization data. </p>", 
        "stats": "<p> Statistics displaying in clip editor. </p>", 
        "tracks": "<p> List of tracks used for camera object. </p>"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "division_k1": "<p> Division distortion model coefficients </p>", 
        "focal": "<p> Focal length. </p>", 
        "intrinsics": "<p> Intrinsics handle. </p>", 
        "k1": "<p> Polynomial distortion Polynomial radial distortion. </p>", 
        "pixel_aspect": "<p> Pixel aspect ratio. </p>", 
        "principal": "<p> Principal point. </p>", 
        "sensor_width": "<p> Width of CCD sensor. </p>", 
        "units": "<p> Units of focal length user is working with. </p>"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "channels": "<p> detailed </p>", 
        "coverage_segments": "<p> ** runtime stuff ** summary </p>", 
        "flag": "<p> Dopesheet building flag such as inverted order of sort. </p>", 
        "ok": "<p> Flag if dopesheet information is still relevant. </p>", 
        "sort_method": "<p> Method to be used to sort tracks. </p>"
      }
    }, 
    "MovieTrackingDopesheetChannel": {
      "fields": {
        "max_segment": "<p> Longest segment length and total number of tracked frames. </p>", 
        "name": "<p> Name of channel. </p>", 
        "segments": "<p> Tracked segments. </p>", 
        "tot_segment": "<p> Total number of segments. </p>", 
        "track": "<p> Motion track for which channel is created. </p>"
      }
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "flag": "<p> Marker's flag (alive, ...). </p>", 
        "framenr": "<p> Number of frame marker is associated with. </p>", 
        "pattern_corners": "<p> corners of pattern in the following order: <pre> Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</pre>  Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</p><p> the coordinates are stored relative to pos. </p>", 
        "pos": "<p> 2d position of marker on frame (in unified 0..1 space). </p>", 
        "search_min": "<p> positions of left-bottom and right-top corners of search area (in unified 0..1 units, relative to marker->pos </p>"
      }
    }, 
    "MovieTrackingObject": {
      "fields": {
        "keyframe1": "<p> reconstruction options Two keyframes for reconstruction initialization. </p>", 
        "name": "<p> Name of tracking object, MAX_NAME. </p>", 
        "plane_tracks": "<p> List of plane tracks used by this object. </p>", 
        "reconstruction": "<p> Reconstruction data for this object. </p>", 
        "scale": "<p> Scale of object solution in amera space. </p>", 
        "tracks": "<p> List of tracks use to tracking this object. </p>"
      }
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "corners": "<p> Corners of the plane in the following order: <pre> Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</pre>  Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</p><p> The coordinates are stored in frame normalized coordinates. </p>", 
        "flag": "<p> Marker's flag (alive, ...). </p>", 
        "framenr": "<p> Number of frame plane marker is associated with. </p>"
      }
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "flag": "<p> Flags (selection, ...). </p>", 
        "image": "<p>{@link Image}  displaying during editing. </p>", 
        "image_opacity": "<p> Opacity of the image. </p>", 
        "last_marker": "<p> Runtime data Most recently used marker. </p>", 
        "markers": "<p> Markers in the plane track. </p>", 
        "markersnr": "<p> Count of markers in track (size of markers array). </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "point_tracks": "<p> Array of point tracks used to define this pla.ne. Each element is a pointer to {@link MovieTrackingTrack} . </p>", 
        "point_tracksnr": "<p> Number of tracks in point_tracks array. </p>"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "cameras": "<p> Reconstructed cameras. </p>", 
        "camnr": "<p> Number of reconstructed cameras. </p>", 
        "error": "<p> Average error of reconstruction. </p>", 
        "last_camera": "<p> Most recently used camera. </p>"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "clean_frames": "<p> cleanup </p>", 
        "default_algorithm_flag": "<p> Flags for the tracking algorithm (use brute, use esm, use pyramid, etc. </p>", 
        "default_flag": "<p> Default flags like color channels used by default. </p>", 
        "default_frames_limit": "<p> Number of frames to be tracked during single tracking session (if TRACKING_FRAMES_LIMIT is set). </p>", 
        "default_margin": "<p> Margin from frame boundaries. </p>", 
        "default_minimum_correlation": "<p> Minimal correlation which is still treated as successful tracking. </p>", 
        "default_motion_model": "<p> ** default tracker settings Model of the motion for this track. </p>", 
        "default_pattern_match": "<p> Re-adjust every N frames. </p>", 
        "default_pattern_size": "<p> Size of pattern area for new tracks. </p>", 
        "default_search_size": "<p> Size of search area for new tracks. </p>", 
        "default_weight": "<p> Default weight of the track. </p>", 
        "dist": "<p> ** tool settings ** set scale Distance between two bundles used for scene scaling. </p>", 
        "keyframe1": "<p> ** reconstruction settings ** two keyframes for reconstruction initialization were moved to per-tracking object settings\n@deprecated\n Deprecated</p>", 
        "keyframe2": "<p>\n@deprecated\n Deprecated</p>", 
        "motion_flag": "<p> Flags describes motion type. </p>", 
        "object_distance": "<p> set object scale Distance between two bundles used for object scaling. </p>", 
        "refine_camera_intrinsics": "<p> which camera intrinsics to refine. uses on the REFINE_* flags </p>", 
        "speed": "<p> ** common tracker settings ** Speed of tracking. </p>"
      }
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "anchor_frame": "<p> Reference point to anchor stabilization offset. </p>", 
        "filter": "<p> Filter used for pixel interpolation. </p>", 
        "locinf": "<p> Influence on location, scale and rotation. </p>", 
        "maxscale": "<p> 2d stabilization Max auto-scale factor. </p>", 
        "ok": "<p> initialization and run-time data Without effect now, we initialize on every frame. Formerly used for caching of init values. \n@deprecated\n Deprecated</p>", 
        "rot_track": "<p> Use TRACK_USE_2D_STAB_ROT on individual tracks instead. \n@deprecated\n Deprecated</p>", 
        "scale": "<p> Zoom factor known to be present on original footage. Also used for autoscale. </p>", 
        "target_pos": "<p> Expected target position of frame after raw stabilization, will be subtracted. </p>", 
        "target_rot": "<p> Expected target rotation of frame after raw stabilization, will be compensated. </p>", 
        "tot_rot_track": "<p> Total number of rotation tracks and index of active track in list. </p>", 
        "tot_track": "<p> Total number of translation tracks and index of active track in list. </p>"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "algorithm_flag": "<p> Flags for the tracking algorithm (use brute, use esm, use pyramid, etc. </p>", 
        "bundle_pos": "<p> ** reconstruction data ** Reconstructed position. </p>", 
        "color": "<p> Custom color for track. </p>", 
        "error": "<p> Average track reprojection error. </p>", 
        "flag": "<p> ** UI editing ** Flags (selection, ...). </p>", 
        "frames_limit": "<p> ** control how tracking happens Number of frames to be tracked during single tracking session (if TRACKING_FRAMES_LIMIT is set). </p>", 
        "gpd": "<p> Grease-pencil data. </p>", 
        "last_marker": "<p> Most recently used marker. </p>", 
        "margin": "<p> Margin from frame boundaries. </p>", 
        "markers": "<p> Markers in track. </p>", 
        "markersnr": "<p> ** track ** Count of markers in track. </p>", 
        "minimum_correlation": "<p> Minimal correlation which is still treated as successful tracking. </p>", 
        "motion_model": "<p> tracking parameters Model of the motion for this track. </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "offset": "<p> Offset to \"parenting\" point. </p>", 
        "pat_max": "<p>\n@deprecated\n Deprecated</p>", 
        "pat_min": "<p> ** settings ** positions of left-bottom and right-top corners of pattern (in unified 0..1 units, relative to marker->pos) moved to marker's corners since planar tracking implementation\n@deprecated\n Deprecated</p>", 
        "pattern_match": "<p> Re-adjust every N frames. </p>", 
        "search_max": "<p>\n@deprecated\n Deprecated</p>", 
        "search_min": "<p> positions of left-bottom and right-top corners of search area (in unified 0..1 units, relative to marker->pos moved to marker since affine tracking implementation\n@deprecated\n Deprecated</p>", 
        "weight": "<p> Weight of this track.</p><p> Weight defines how much the track affects on the final reconstruction, usually gets animated in a way so when track has just appeared it's weight is zero and then it gets faded up.</p><p> Used to prevent jumps of the camera when tracks are appearing or disappearing. </p>", 
        "weight_stab": "<p> track weight especially for 2D stabilization </p>"
      }
    }, 
    "MPoly": {
      "doc": "<p>{@link Mesh}  Faces This only stores the polygon size & flags, the vertex & edge indices are stored in the {@link MLoop} .</p><p> Typically accessed from {@link Mesh.mpoly} . </p>", 
      "fields": {
        "loopstart": "<p> Offset into loop array and number of loops in the face. </p>", 
        "totloop": "<p> Keep signed since we need to subtract when getting the previous loop. </p>"
      }
    }, 
    "MRecast": {
      "doc": "<p> Old game engine recast navigation data, while unused 2.7x files may contain this. </p>"
    }, 
    "MSelect": {
      "doc": "<p> Optionally store the order of selected elements. This wont always be set since only some selection operations have an order.</p><p> Typically accessed from #Mesh.mselect </p>", 
      "fields": {
        "index": "<p> Index in the vertex, edge or polygon array. </p>", 
        "type": "<p> #ME_VSEL, #ME_ESEL, #ME_FSEL. </p>"
      }
    }, 
    "MTex": {
      "fields": {
        "colfac": "<p> common </p>", 
        "norfac": "<p> material </p>", 
        "shadowfac": "<p> light </p>", 
        "timefac": "<p> particles </p>", 
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "zenupfac": "<p> world </p>"
      }
    }, 
    "MTFace": {
      "doc": "<p> Tessellation uv face data. </p>"
    }, 
    "MultiplyGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "offset": "<p> -1:inner 0:middle 1:outer </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "split_angle": "<p> in rad not deg </p>"
      }
    }, 
    "Multires": {
      "fields": {
        "vdata": "<p> Special level 1 data that cannot be modified from other levels </p>"
      }
    }, 
    "MultiresCol": {
      "doc": "<p>{@link Multires}  structs kept for compatibility with old files. </p>"
    }, 
    "MultiresColFace": {
      "fields": {
        "col": "<p> vertex colors </p>"
      }
    }, 
    "MultiresLevel": {
      "fields": {
        "verts": "<p> Kept for compatibility with even older files </p>"
      }
    }, 
    "MVert": {
      "doc": "<p>{@link Mesh}  Vertices.</p><p> Typically accessed from {@link Mesh.mvert}  </p>", 
      "fields": {
        "no": "<p> Cache the normal, can always be recalculated from surrounding faces. See #CD_CUSTOMLOOPNORMAL for custom normals. </p>"
      }
    }, 
    "MVertSkin": {
      "fields": {
        "flag": "<p>{@link eMVertSkinFlag}  </p>", 
        "radius": "<p> Radii of the skin, define how big the generated frames are. Currently only the first two elements are used. </p>"
      }
    }, 
    "NlaStrip": {
      "doc": "<p><hr/> \n 'Action' Datatypes NOTE: Although these are part of the Animation System, they are not stored here... see {@link DNA_action_types.h}  instead************************************************ NLA - Non-Linear Animation NLA Strips -------------------------------<mdash/><mdash/>  NLA {@link Strip}  (strip)</p><p> A NLA {@link Strip}  is a container for the reuse of Action data, defining parameters to control the remapping of the Action data to some destination. </p>", 
      "fields": {
        "act": "<p> Action that is referenced by this strip (strip is 'user' of the action). </p>", 
        "actstart": "<p> Range of the action to use. </p>", 
        "blendin": "<p>{@link Strip}  blending length (only used when there are no F-Curves). </p>", 
        "blendmode": "<p>{@link Strip}  blending mode (layer-based mixing). </p>", 
        "extendmode": "<p>{@link Strip}  extrapolation mode (time-based mixing). </p>", 
        "fcurves": "<p> TODO: move o.ut? </p><p> F-Curves for controlling this strip's influence and timing </p>", 
        "flag": "<p> Settings. </p>", 
        "influence": "<p> Influence of strip. </p>", 
        "modifiers": "<p> F-Curve modifiers to be applied to the entire strip's referenced F-Curves. </p>", 
        "name": "<p> User-Visible Identifier for {@link Strip}  - MAX_ID_NAME-2. </p>", 
        "orig_strip": "<p> Pointer to an original NLA strip. </p>", 
        "repeat": "<p> The number of times to repeat the action range (only when no F-Curves). </p>", 
        "scale": "<p> The amount the action range is scaled by (only when no F-Curves). </p>", 
        "speaker_handle": "<p> Handle for speaker objects. </p>", 
        "start": "<p> Extents of the strip. </p>", 
        "strip_time": "<p> Current 'time' within action being used (automatically evaluated, but can be overridden). </p>", 
        "strips": "<p> 'Child' strips (used for 'meta' strips). </p>", 
        "type": "<p> Type of NLA strip. </p>"
      }
    }, 
    "NlaTrack": {
      "doc": "<p> NLA Tracks -------------------------------<mdash/><mdash/>  NLA Track (nlt)</p><p> A track groups a bunch of 'strips', which should form a continuous set of motion, on top of which other such groups can be layered. This should allow for animators to work in a non-destructive manner, layering tweaks, etc. over 'rough' blocks of their work. </p>", 
      "fields": {
        "flag": "<p> Settings for this track. </p>", 
        "index": "<p> Index of the track in the stack <h2>Note</h2><p> not really useful, but we need a '_pad' var anyways! </p> not really useful, but we need a '_pad' var anyways! \n</p>", 
        "name": "<p> Short user-description of this track - MAX_ID_NAME-2. </p>", 
        "strips": "<p> BActionStrips in this track. </p>"
      }
    }, 
    "NodeBlurData": {
      "fields": {
        "image_in_width": "<p> Needed for absolute/relative conversions. </p>"
      }
    }, 
    "NodeColorBalance": {
      "fields": {
        "lift": "<p> LGG parameters </p>", 
        "slope": "<p> ASC CDL parameters </p>"
      }
    }, 
    "NodeDefocus": {
      "doc": "<p> qdn: Defocus blur node </p>"
    }, 
    "NodeGlare": {
      "doc": "<p> qdn: glare node </p>", 
      "fields": {
        "angle": "<p> XXX angle is only kept for backward/forward compatibility, was used for two different things, see T50736. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeHueSat": {
      "doc": "<p> NOTE: Only for do-version code. </p>"
    }, 
    "NodeImageAnim": {
      "doc": "<p> this one has been replaced with {@link ImageUser} , keep it for do_versions() </p>", 
      "fields": {
        "cyclic": "<p>\n@deprecated\n Deprecated</p>", 
        "frames": "<p>\n@deprecated\n Deprecated</p>", 
        "movie": "<p>\n@deprecated\n Deprecated</p>", 
        "nr": "<p>\n@deprecated\n Deprecated</p>", 
        "sfra": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeImageFile": {
      "fields": {
        "name": "<p> 1024 = FILE_MAX. </p>"
      }
    }, 
    "NodeImageLayer": {
      "doc": "<p> layer info for image node outputs </p>", 
      "fields": {
        "pass_index": "<p> index in the Image->layers->passes lists \n@deprecated\n Deprecated</p>", 
        "pass_name": "<p> render pass name Amount defined in openexr_multi.h. </p>"
      }
    }, 
    "NodeImageMultiFile": {
      "doc": "<p> XXX first struct fields should match {@link NodeImageFile}  to ensure forward compatibility </p>", 
      "fields": {
        "active_input": "<p> Selected input in details view list. </p>", 
        "base_path": "<p> 1024 = FILE_MAX. </p>", 
        "efra": "<p>\n@deprecated\n Deprecated</p>", 
        "sfra": "<p> XXX old frame rand values from {@link NodeImageFile}  for forward compatibility. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeImageMultiFileSocket": {
      "fields": {
        "layer": "<p> multilayer output EXR_TOT_MAXNAME-2 ('.' and channel char are appended). </p>", 
        "path": "<p> 1024 = FILE_MAX. </p>", 
        "use_node_format": "<p> Use overall node image format. </p>", 
        "use_render_format": "<p> single layer file output \n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeLensDist": {
      "doc": "<p> qdn: lens distortion node </p>"
    }, 
    "NodeScriptDict": {
      "fields": {
        "dict": "<p> For PyObject *dict. </p>", 
        "node": "<p> For BPy_Node *node. </p>"
      }
    }, 
    "NodeShaderScript": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX. </p>"
      }
    }, 
    "NodeShaderTexIES": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX. </p>"
      }
    }, 
    "NodeShaderTexPointDensity": {
      "fields": {
        "pd": "<p> Used at runtime only by sampling RNA API. </p>", 
        "vertex_attribute_name": "<p> Vertex attribute layer for color source, MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "NodeTexEnvironment": {
      "fields": {
        "color_space": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeTexImage": {
      "fields": {
        "color_space": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeTexVoronoi": {
      "fields": {
        "coloring": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeTonemap": {
      "doc": "<p> qdn: tonemap node </p>"
    }, 
    "NoiseGpencilModifierData": {
      "fields": {
        "factor": "<p> Factor of noise. </p>", 
        "flag": "<p> Several flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "seed": "<p> Random seed </p>", 
        "step": "<p> How many frames before recalculate randoms. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "NormalEditModifierData": {
      "doc": "<p> Set Split Normals modifier </p>", 
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "target": "<p> Source of normals, or center of ellipsoid. </p>"
      }
    }, 
    "Nurb": {
      "doc": "<p><h2>Note</h2><p>{@link Nurb}  name is misleading, since it can be used for polygons too, also, it should be NURBS ({@link Nurb}  isn't the singular of Nurbs). </p>  name is misleading, since it can be used for polygons too, also, it should be NURBS (Nurb isn't the singular of Nurbs). \n</p>", 
      "fields": {
        "charidx": "<p> only used for dynamically generated Nurbs created from OB_FONT's </p>", 
        "mat_nr": "<p> Index into material list. </p>", 
        "next": "<p> Multiple nurbs per curve object are allowed. </p>", 
        "pntsu": "<p> Number of points in the U or V directions. </p>", 
        "resolu": "<p> Tessellation resolution in the U or V directions. </p>", 
        "tilt_interp": "<p> KEY_LINEAR, KEY_CARDINAL, KEY_BSPLINE. </p>"
      }
    }, 
    "ObHook": {
      "doc": "<p> Warning, this is not used anymore because hooks are now modifiers </p>", 
      "fields": {
        "cent": "<p> Visualization of hook. </p>", 
        "falloff": "<p> If not zero, falloff is distance where influence zero. </p>", 
        "mat": "<p> Temp matrix while hooking. </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "parentinv": "<p> Matrix making current transform unmodified. </p>", 
        "totindex": "<p> Curindex is cache for fast lookup. </p>", 
        "type": "<p> Active is only first hook, for button menu. </p>"
      }
    }, 
    "Object": {
      "fields": {
        "actcol": "<p> Currently selected material in the UI. </p>", 
        "actdef": "<p> Current deformation group, note: index starts at 1. </p>", 
        "actfmap": "<p> Current face map, note: index starts at 1. </p>", 
        "action": "<p> struct {@link Path}  *path; </p>", 
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "avs": "<p> Settings for visualization of object-transform animation. </p>", 
        "base_flag": "<p> Depsgraph Used by depsgraph, flushed from base. </p>", 
        "base_local_view_bits": "<p> Used by viewport, synced from base. </p>", 
        "boundtype": "<p> Bounding box use for drawing. </p>", 
        "col_group": "<p> Collision mask settings </p>", 
        "colbits": "<p> Deprecated, use 'matbits'. \n@deprecated\n Deprecated</p>", 
        "collision_boundtype": "<p> Bounding box type used for collision. </p>", 
        "color": "<p>{@link Object}  color (in most cases the material color is used for drawing). </p>", 
        "constinv": "<p> Inverse result of constraints. doesn't include effect of parent or object local transform. </p>", 
        "constraints": "<p>{@link Object}  constraints. </p>", 
        "data": "<p> Pointer to objects data - an '{@link ID} ' or NULL. </p>", 
        "defbase": "<p> List of {@link bDeformGroup}  (vertex groups) names and flag only. </p>", 
        "drawdata": "<p> Runtime (must be immediately after id for utilities to use it). </p>", 
        "dscale": "<p> Ack!, changing. </p>", 
        "dsize": "<p> DEPRECATED, 2.60 and older only. \n@deprecated\n Deprecated</p>", 
        "dt": "<p> Viewport draw type. </p>", 
        "dtx": "<p> Viewport draw extra settings. </p>", 
        "flag": "<p> Copy of {@link Base} . </p>", 
        "fluidsimSettings": "<p> If fluidsim enabled, store additional settings. </p>", 
        "fmaps": "<p> List of facemaps. </p>", 
        "gpd": "<p> Grease Pencil data. </p>", 
        "greasepencil_modifiers": "<p> List of {@link GpencilModifierData}  structures. </p>", 
        "ima_ofs": "<p> Offset for image empties. </p>", 
        "imat": "<p> Inverse matrix of 'obmat' for any other use than rendering!</p><p><h2>Note</h2><p> this isn't assured to be valid as with 'obmat', before using this value you should do... invert_m4_m4(ob->imat, ob->obmat); </p> this isn't assured to be valid as with 'obmat', before using this value you should do... invert_m4_m4(ob->imat, ob->obmat); \n</p>", 
        "imat_ren": "<p> Previously 'imat' was used at render time, but as other places use it too the interactive ui of 2.5 creates problems. So now only 'imat_ren' should be used when ever the inverse of ob->obmat * re->viewmat is needed! - jahka </p>", 
        "index": "<p> Custom index, for renderpasses. </p>", 
        "instance_collection": "<p>{@link Object}  duplicator for group. </p>", 
        "instance_faces_scale": "<p> Dupliface scale. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "iuser": "<p> Must be non-null when object is an empty image. </p>", 
        "lay": "<p> Copy of {@link Base} 's layer in the scene. \n@deprecated\n Deprecated</p>", 
        "loc": "<p> rot en drot have to be together! (transform('r' en 's')) </p>", 
        "lodlevels": "<p> Contains data for levels of detail. </p>", 
        "mat": "<p> materials {@link Material}  slots. </p>", 
        "matbits": "<p> A boolean field, with each byte 1 if corresponding material is linked to object. </p>", 
        "mode": "<p> Local object mode. </p>", 
        "modifiers": "<p> List of {@link ModifierData}  structures. </p>", 
        "mpath": "<p> Motion path cache for this object. </p>", 
        "nlaflag": "<p> Used for DopeSheet filtering settings (expanded/collapsed). </p>", 
        "obmat": "<p> Final worldspace matrix with constraints & animsys applied. </p>", 
        "par1": "<p> Can be vertexnrs. </p>", 
        "parentinv": "<p> Inverse result of parent, so that object doesn't 'stick' to parent. </p>", 
        "parsubstr": "<p> String describing subobject info, MAX_ID_NAME-2. </p>", 
        "particlesystem": "<p>{@link Particle}  systems. </p>", 
        "pd": "<p>{@link Particle}  deflector/attractor/collision data. </p>", 
        "pose": "<p> Pose data, armature objects only. </p>", 
        "proxy": "<p> if ob->proxy (or proxy_group), this object is proxy for object ob->proxy proxy_from is set in target back to the proxy. </p>", 
        "quat": "<p> Quaternion rotation. </p>", 
        "restrictflag": "<p> For restricting view, select, render etc. accessible in outliner. </p>", 
        "rigidbody_constraint": "<p> Settings for Bullet constraint. </p>", 
        "rigidbody_object": "<p> Settings for Bullet rigid body. </p>", 
        "rot": "<p> Euler rotation. </p>", 
        "rotAngle": "<p> Axis angle rotation - angle part. </p>", 
        "rotAxis": "<p> Axis angle rotation - axis part. </p>", 
        "rotmode": "<p> Rotation mode - uses defines set out in {@link DNA_action_types.h}  for PoseChannel rotations.... </p>", 
        "runtime": "<p> Runtime evaluation data (keep last). </p>", 
        "scale": "<p> Scale (can be negative). </p>", 
        "shader_fx": "<p> List of viewport effects. Actually only used by grease pencil. </p>", 
        "shapeflag": "<p> Flag for pinning. </p>", 
        "shapenr": "<p> Current shape key for menu or pinned. </p>", 
        "soft": "<p> If exists, saved in file. </p>", 
        "softflag": "<p> Softbody settings. </p>", 
        "totcol": "<p> Copy of mesh, curve & meta struct member of same name (keep in sync). </p>", 
        "transflag": "<p> Transformation settings and transform locks . </p>"
      }
    }, 
    "Object_Runtime": {
      "doc": "<p> Not saved in file! </p>", 
      "fields": {
        "bb": "<p> Axis aligned boundbox (in localspace). </p>", 
        "curve_cache": "<p> Runtime evaluated curve-specific data, not stored in the file. </p>", 
        "gpencil_cache": "<p> Runtime grease pencil drawing data </p>", 
        "gpencil_evaluated_frames": "<p> Runtime grease pencil evaluated data created by modifiers </p>", 
        "gpencil_tot_layers": "<p> Runtime grease pencil total layers used for evaluated data created by modifiers </p>", 
        "is_mesh_eval_owned": "<p> Denotes whether the evaluated mesh is owned by this object or is referenced and owned by somebody else. </p>", 
        "last_data_mask": "<p> The custom data layer mask that was last used to calculate mesh_eval and mesh_deform_eval. </p>", 
        "last_need_mapping": "<p> Did last modifier stack generation need mapping support? </p>", 
        "mesh_deform_eval": "<p>{@link Mesh}  structure created during object evaluation. It has deformation only modifiers applied on it. </p>", 
        "mesh_eval": "<p>{@link Mesh}  structure created during object evaluation. It has all modifiers applied. </p>", 
        "mesh_orig": "<p> Original mesh pointer, before object->data was changed to point to mesh_eval. Is assigned by dependency graph's copy-on-write evaluation. </p>", 
        "object_as_temp_mesh": "<p><code></code> . </p>", 
        "parent_display_origin": "<p> Only used for drawing the parent/child help-line. </p>", 
        "select_id": "<p> Selection id of this object; only available in the original object </p>"
      }
    }, 
    "OceanModifierData": {
      "fields": {
        "cachepath": "<p> FILE_MAX. </p>", 
        "foamlayername": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "OffsetGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "OpacityGpencilModifierData": {
      "fields": {
        "factor": "<p> Main Opacity factor. </p>", 
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "modify_color": "<p> Modify stroke, fill or both. </p>", 
        "opacity_mode": "<p> Mode of opacity, colors or strength </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "OrigSpaceFace": {
      "doc": "<p> Original space within a face (similar to UV coordinates), however they are used to determine the original position in a face.</p><p> Unlike UV's these are not user editable and always start out using a fixed 0-1 range. Currently only used for particle placement. </p>"
    }, 
    "Paint": {
      "doc": "<p>{@link Paint}  Tool {@link Base}  </p>", 
      "fields": {
        "cavity_curve": "<p> Cavity curve. </p>", 
        "flags": "<p> enum ePaintFlags </p>", 
        "num_input_samples": "<p>{@link Paint}  stroke can use up to PAINT_MAX_INPUT_SAMPLES inputs to smooth the stroke </p>", 
        "paint_cursor": "<p> WM {@link Paint}  cursor </p>", 
        "symmetry_flags": "<p> flags used for symmetry </p>", 
        "tool_slots": "<p> Each tool has it's own active brush, The currently active tool is defined by the current 'brush'. </p>"
      }
    }, 
    "Paint_Runtime": {
      "fields": {
        "tool_offset": "<p> Avoid having to compare with scene pointer everywhere. </p>"
      }
    }, 
    "PaintCurve": {
      "fields": {
        "add_index": "<p> Index where next point will be added. </p>", 
        "points": "<p> Points of curve. </p>"
      }
    }, 
    "PaintCurvePoint": {
      "fields": {
        "bez": "<p> Bezier handle. </p>", 
        "pressure": "<p> Pressure on that point. </p>"
      }
    }, 
    "PaintToolSlot": {
      "doc": "<p> We might want to store other things here. </p>"
    }, 
    "Palette": {
      "fields": {
        "colors": "<p> Pointer to individual colors. </p>"
      }
    }, 
    "PaletteColor": {
      "fields": {
        "rgb": "<p> two values, one to store rgb, other to store values for sculpt/weight </p>"
      }
    }, 
    "Panel": {
      "doc": "<p> The part from uiBlock that needs saved in file. </p>", 
      "fields": {
        "activedata": "<p> Runtime for panel manipulation. </p>", 
        "blocksizex": "<p>{@link Panel}  size excluding children. </p>", 
        "children": "<p> Sub panels. </p>", 
        "drawname": "<p>{@link Panel}  name is identifier for restoring location. </p>", 
        "layout": "<p> Runtime for drawing. </p>", 
        "ofsx": "<p> Offset within the region. </p>", 
        "panelname": "<p> Defined as UI_MAX_NAME_STR. </p>", 
        "sizex": "<p>{@link Panel}  size including children. </p>", 
        "sortorder": "<p> s are aligned according to increasing sort-order. </p>", 
        "type": "<p> Runtime. </p>"
      }
    }, 
    "PanelCategoryDyn": {
      "doc": "<p> Notes on {@link Panel}  Categories:</p><p><ul><li><p>{@link ARegion.panels_category}  ({@link PanelCategoryDyn} ) is a runtime only list of categories collected during draw.</p></li><li><p>{@link ARegion.panels_category_active}  ({@link PanelCategoryStack} ) is basically a list of strings (category id's).</p></li></ul> \nARegion.panels_category (PanelCategoryDyn) is a runtime only list of categories collected during draw.ARegion.panels_category_active (PanelCategoryStack) is basically a list of strings (category id's).\n</p><p> Clicking on a tab moves it to the front of ar->panels_category_active, If the context changes so this tab is no longer displayed, then the first-most tab in {@link ARegion.panels_category_active}  is used.</p><p> This way you can change modes and always have the tab you last clicked on.region level tabs </p>"
    }, 
    "PanelCategoryStack": {
      "doc": "<p> region stack of active tabs </p>"
    }, 
    "PartDeflect": {
      "fields": {
        "absorption": "<p> Used for forces. </p>", 
        "clump_fac": "<p> guide curve, same as for particle child effects </p>", 
        "deflect": "<p> Deflection flag - does mesh deflect particles. </p>", 
        "drawvec1": "<p> Display Size Runtime only : start of the curve or draw scale. </p>", 
        "drawvec2": "<p> Runtime only : end of the curve. </p>", 
        "drawvec_falloff_max": "<p> Runtime only. </p>", 
        "drawvec_falloff_min": "<p> Runtime only. </p>", 
        "f_damp": "<p> Damping ratio of the harmonic effector. </p>", 
        "f_flow": "<p> How much force is converted into \"air flow\", i.e. force used as the velocity of surrounding medium. </p>", 
        "f_noise": "<p> Noise of force. </p>", 
        "f_power": "<p> fall-off The power law - real gravitation is 2 (square). </p>", 
        "f_power_r": "<p> Radial fall-off power. </p>", 
        "f_size": "<p> Noise size for noise effector, restlength for harmonic effector. </p>", 
        "f_source": "<p> Force source object. </p>", 
        "f_strength": "<p> Main effector values The strength of the force (+ or - ). </p>", 
        "falloff": "<p> Fall-off type. </p>", 
        "flag": "<p> General settings flag. </p>", 
        "forcefield": "<p> Force field type, do the vertices attract / repel particles? </p>", 
        "kink": "<p> For curve guide. </p>", 
        "maxdist": "<p> If indicated, use this maximum. </p>", 
        "maxrad": "<p> Radial versions of above. </p>", 
        "mindist": "<p> If indicated, use this minimum. </p>", 
        "pdef_cfrict": "<p> Friction of cloth collisions. </p>", 
        "pdef_damp": "<p> particle collisions Damping factor for particle deflection. </p>", 
        "pdef_frict": "<p> Friction factor for particle deflection. </p>", 
        "pdef_perm": "<p> Chance of particle passing through mesh. </p>", 
        "pdef_rdamp": "<p> Random element of damping for deflection. </p>", 
        "pdef_rfrict": "<p> Random element of friction for deflection. </p>", 
        "pdef_sbdamp": "<p> softbody collisions Damping factor for softbody deflection. </p>", 
        "pdef_sbift": "<p> Inner face thickness for softbody deflection. </p>", 
        "pdef_sboft": "<p> Outer face thickness for softbody deflection. </p>", 
        "pdef_stickness": "<p> Surface particle stickiness. </p>", 
        "rng": "<p> effector noise Random noise generator for e.g. wind. </p>", 
        "seed": "<p> Noise random seed. </p>", 
        "shape": "<p> Point, plane or surface. </p>", 
        "tex": "<p> Texture of the texture effector. </p>", 
        "tex_mode": "<p> Texture effector. </p>", 
        "tex_nabla": "<p> texture effector Used for calculating partial derivatives. </p>"
      }
    }, 
    "PartEff": {
      "fields": {
        "imat": "<p> Inverse matrix of parent {@link Object} . </p>", 
        "vgroupname": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "ParticleBrushData": {
      "doc": "<p><hr/> \n {@link Particle}  Edit Settings for a {@link Particle}  {@link Editing}  {@link Brush}  </p>", 
      "fields": {
        "size": "<p> Common setting. </p>", 
        "step": "<p> For specific brushes only. </p>"
      }
    }, 
    "ParticleData": {
      "fields": {
        "alive": "<p> The life state of a particle. </p>", 
        "boid": "<p> Boids data. </p>", 
        "dietime": "<p> Particles can die unnaturally (collision). </p>", 
        "fuv": "<p> Coordinates on face/edge number \"num\" and depth alon.g </p>", 
        "hair": "<p> Hair vertices. </p>", 
        "keys": "<p> Keyed keys. </p>", 
        "num": "<p> WARNING! Those two indices, when not affected to vertices, are for !!! TESSELLATED FACES !!!, not POLYGONS!Index to vert/edge/face. </p>", 
        "num_dmcache": "<p> Index to derived mesh data (face) to avoid slow lookups. </p>", 
        "prev_state": "<p> Previous state. </p>", 
        "size": "<p> face normal for volume emission. Size and multiplier so that we can update size when ever. </p>", 
        "sphdensity": "<p> Density of sph particle. </p>", 
        "state": "<p> Current global coordinates. </p>", 
        "time": "<p> Dietime is not necessarily time+lifetime as. </p>", 
        "totkey": "<p> Amount of hair or keyed key.s </p>"
      }
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "index": "<p> Only updated on file save and used on file load. </p>"
      }
    }, 
    "ParticleEditSettings": {
      "doc": "<p>{@link Particle}  Edit Mode Settings </p>", 
      "fields": {
        "paintcursor": "<p> Runtime. </p>"
      }
    }, 
    "ParticleInstanceModifierData": {
      "fields": {
        "index_layer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "value_layer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "ParticleKey": {
      "fields": {
        "ave": "<p> Angular velocity. </p>", 
        "co": "<p> when changed update size of struct to copy_particleKey()!! Location. </p>", 
        "rot": "<p> Rotation quaternion. </p>", 
        "time": "<p> When this key happens. </p>", 
        "vel": "<p> Velocity. </p>"
      }
    }, 
    "ParticleSettings": {
      "fields": {
        "acc": "<p> global physical properties </p>", 
        "adapt_angle": "<p> adaptive path rendering </p>", 
        "bb_align": "<p> billboards </p>", 
        "bb_split_offset": "<p>\n@deprecated\n Deprecated</p>", 
        "bb_vel_tail": "<p>\n@deprecated\n Deprecated</p>", 
        "bending_random": "<p> hair dynamics </p>", 
        "branch_thres": "<p> branching </p>", 
        "child_flag": "<p> children </p>", 
        "clength": "<p> length </p>", 
        "clumpfac": "<p> clumping </p>", 
        "color_vec_max": "<p> draw color </p>", 
        "draw_line": "<p> drawing stuff </p>", 
        "draw_step": "<p> number of path segments, power of 2 except </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "keyed_loops": "<p> keyed particles </p>", 
        "kink_amp": "<p> kink </p>", 
        "mass": "<p> physical properties </p>", 
        "mtex": "<p> MAX_MTEX. </p>", 
        "normfac": "<p> initial velocity factors </p>", 
        "parting_fac": "<p> parting </p>", 
        "phystype": "<p> physics modes </p>", 
        "randlength": "<p> length </p>", 
        "rotfrom": "<p>\n@deprecated\n Deprecated</p>", 
        "rough1": "<p> rough </p>", 
        "shape": "<p> hair thickness shape </p>", 
        "shape_flag": "<p> hair shape </p>", 
        "sta": "<p> time and emission </p>", 
        "use_modifier_stack": "<p> modified dm support </p>"
      }
    }, 
    "ParticleSystem": {
      "fields": {
        "bb_uvname": "<p> Billboard uv name, MAX_CUSTOMDATA_LAYER_NAME. \n@deprecated\n Deprecated</p>", 
        "bvhtree": "<p> Used for interactions with self and other systems. </p>", 
        "child": "<p> Child particles. </p>", 
        "childcache": "<p> Child cache (runtime). </p>", 
        "clmd": "<p> Cloth simulation for hair. </p>", 
        "dt_frac": "<p> Current time step, as a fraction of a frame. </p>", 
        "edit": "<p>{@link Particle}  editmode (runtime). </p>", 
        "free_edit": "<p> Free callback. </p>", 
        "hair_in_mesh": "<p> Input/output for cloth simulation. </p>", 
        "imat": "<p> Used for instancing. </p>", 
        "lattice_deform_data": "<p> Run-time only lattice deformation data. </p>", 
        "lattice_strength": "<p> Influence of the lattice modifier. </p>", 
        "name": "<p>{@link Particle}  system name, MAX_NAME. </p>", 
        "next": "<p> note1: make sure all (run-time) are NULL's in 'copy_particlesystem' XXX, this function is no more! - need to investigate. note2: make sure any uses of this struct in DNA are accounted for in 'BKE_object_copy_particlesystems'. </p>", 
        "orig_psys": "<p> Set by dependency graph's copy-on-write, allows to quickly go from evaluated particle system to original one.</p><p> Original system will have this set to NULL.</p><p> Use psys_orig_get() function to access, </p>", 
        "parent": "<p> Particles from global space -> parent space. </p>", 
        "part": "<p>{@link Particle}  settings. </p>", 
        "particles": "<p> (parent) particles. </p>", 
        "pathcache": "<p>{@link Path}  cache (runtime). </p>", 
        "pathcachebufs": "<p> Buffers for the above. </p>", 
        "pointcache": "<p> point cache </p>", 
        "recalc": "<p> NOTE: Recalc is one of ID_RECALC_PSYS_ALL flags.</p><p> TODO(sergey): Use part->id.recalc instead of this duplicated flag somehow. </p>", 
        "targets": "<p> Used for keyed and boid physics. </p>", 
        "tree": "<p> Used for interactions with self and other systems. </p>", 
        "vgroup": "<p> if you change these remember to update array lengths to PSYS_TOT_VG! Vertex groups, 0==disable, 1==starting index. </p>"
      }
    }, 
    "ParticleSystemModifierData": {
      "fields": {
        "mesh_final": "<p> Final {@link Mesh}  - its topology may differ from orig mesh. </p>", 
        "mesh_original": "<p> Original mesh that particles are attached to. </p>"
      }
    }, 
    "Path": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "PathPoint": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "vec": "<p> Grr, cant get rid of tilt yet. </p>"
      }
    }, 
    "PhysicsSettings": {
      "doc": "<p><hr/> \n Global/Common Physics Settings </p>"
    }, 
    "PixelShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "size": "<p> Last element used for shader only. </p>"
      }
    }, 
    "PointCache": {
      "fields": {
        "cached_frames": "<p><code></code>  with flags to indicate cached frames. Can be later used for other per frame flags too if needed. </p>", 
        "editframe": "<p> Frame being edited (runtime only). </p>", 
        "endframe": "<p> Simulation end frame. </p>", 
        "flag": "<p> Generic flag. </p>", 
        "free_edit": "<p> Free callback. </p>", 
        "index": "<p> Modifier stack index. </p>", 
        "last_exact": "<p> Last exact frame that's cached. </p>", 
        "last_valid": "<p> Used for editing cache - what is the last baked frame. </p>", 
        "path": "<p> File path, 1024 = FILE_MAX. </p>", 
        "simframe": "<p> Current frame of simulation (only if SIMULATION_VALID). </p>", 
        "startframe": "<p> Simulation start frame. </p>", 
        "step": "<p> The number of frames between cached frames. This should probably be an upper bound for a per point adaptive step in the future, buf for now it's the same for all points. Without adaptivity this can effect the perceived simulation quite a bit though. If for example particles are colliding with a horizontal plane (with high damping) they quickly come to a stop on the plane, however there are still forces acting on the particle (gravity and collisions), so the particle velocity isn't necessarily zero for the whole duration of the frame even if the particle seems stationary. If all simulation frames aren't cached (step > 1) these velocities are interpolated into movement for the non-cached frames. The result will look like the point is oscillating around the collision location. So for now cache step should be set to 1 for accurate reproduction of collisions. </p>", 
        "totpoint": "<p> for external cache files Number of cached points. </p>"
      }
    }, 
    "PointDensity": {
      "fields": {
        "coba": "<p> For time -> color </p>", 
        "color_source": "<p> psys_color_source </p>", 
        "falloff_curve": "<p> Falloff density curve. </p>", 
        "ob_cache_space": "<p> cache points in worldspace, object space, ... ? </p>", 
        "object": "<p> for '{@link Object} ' or '{@link Particle}  system' type - source object </p>", 
        "point_data": "<p> Dynamically allocated extra for extra information, like particle age. </p>", 
        "point_tree": "<p> The acceleration tree containing points. </p>", 
        "psys": "<p><code></code>  in ob.particlesystem, non-ID pointer not allowed </p>", 
        "psys_cache_space": "<p> cache points in worldspace, object space, ... ? </p>", 
        "vertex_attribute_name": "<p> vertex attribute layer for color source, MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "PreviewImage": {
      "fields": {
        "gputexture": "<p> Runtime-only data. </p>", 
        "icon_id": "<p> Used by previews outside of {@link ID}  context. </p>", 
        "tag": "<p> Runtime data. </p>", 
        "w": "<p> All values of 2 are really NUM_ICON_SIZES </p>"
      }
    }, 
    "PTCacheMem": {
      "fields": {
        "cur": "<p> BPHYS_TOT_DATA. </p>", 
        "data": "<p> BPHYS_TOT_DATA. </p>"
      }
    }, 
    "rctf": {
      "doc": "<p> float rectangle. </p>"
    }, 
    "rcti": {
      "doc": "<p> typedef struct vec3d { double x, y, z; } vec3d;</p><p> typedef struct vec4i { int x, y, z, w; } vec4i;</p><p> typedef struct vec4f { float x, y, z, w; } vec4f;</p><p> typedef struct vec4d { double x, y, z, w; } vec4d;integer rectangle. </p>"
    }, 
    "RegionView3D": {
      "fields": {
        "camdx": "<p>{@link Camera}  view offsets, 1.0 = viewplane moves entire width/height. </p>", 
        "camzoom": "<p> Viewport zoom on the camera frame, see BKE_screen_view3d_zoom_to_fac. </p>", 
        "clip": "<p> User defined clipping planes. </p>", 
        "clip_local": "<p> Clip in object space, means we can test for clipping in editmode without first going into worldspace. </p>", 
        "dist": "<p> Distance from 'ofs' along -viewinv[2] vector, where result is negative as is 'ofs'. </p>", 
        "gridview": "<p>\n@deprecated\n Deprecated</p>", 
        "is_persp": "<p> Check if persp/ortho view, since 'persp' cant be used for this since it can have cameras assigned as well. (only set in #view3d_winmatrix_set) </p>", 
        "localvd": "<p> Allocated backup of its self while in localview. </p>", 
        "lpersp": "<p> Lpersp can never be set to 'RV3D_CAMOB'. </p>", 
        "lviewquat": "<p> Last view (use when switching out of camera view). </p>", 
        "ofs": "<p> View center & orbit pivot, negative of worldspace location, also matches -viewinv[3][0:3] in ortho mode. </p>", 
        "ofs_lock": "<p> Normalized offset for locked view: (-1, -1) bottom left, (1, 1) upper right. </p>", 
        "persinv": "<p> Inverse of persmat. </p>", 
        "persmat": "<p> Viewmat*winmat. </p>", 
        "pixsize": "<p> Runtime only. </p>", 
        "rot_angle": "<p> Active rotation from NDOF or elsewhere. </p>", 
        "sms": "<p> Animated smooth view. </p>", 
        "tw_axis_min": "<p> min/max dot product on twmat xyz axis. </p>", 
        "twdrawflag": "<p> XXX can easily get rid of this (Julian). </p>", 
        "twmat": "<p> Transform gizmo matrix. </p>", 
        "viewcamtexcofac": "<p> Offset/scale for camera glsl texcoords. </p>", 
        "viewinv": "<p> Inverse of viewmat. </p>", 
        "viewlock_quad": "<p> Options for quadview (store while out of quad view). </p>", 
        "viewmat": "<p> GL_MODELVIEW matrix. </p>", 
        "viewmatob": "<p> viewmat/persmat multiplied with object matrix, while drawing and selection. </p>", 
        "viewquat": "<p> View rotation, must be kept normalized. </p>", 
        "winmat": "<p> GL_PROJECTION matrix. </p>"
      }
    }, 
    "RemeshModifierData": {
      "fields": {
        "depth": "<p> octree depth </p>", 
        "scale": "<p> ratio between size of model and grid </p>", 
        "threshold": "<p> floodfill option, controls how small components can be before they are removed </p>"
      }
    }, 
    "RenderData": {
      "doc": "<p><hr/> \n Render Data </p>", 
      "fields": {
        "actlay": "<p> Converted to Scene->active_layer. \n@deprecated\n Deprecated</p>", 
        "alphamode": "<p> What to do with the sky/background. Picks sky/premul blending for the background. </p>", 
        "bake": "<p> Cycles baking </p>", 
        "bake_mode": "<p> Bake Render options </p>", 
        "border": "<p> Render border to render sub-resions. </p>", 
        "cfra": "<p> Frames as in 'images'. </p>", 
        "color_mgt_flag": "<p> color management settings - color profiles, gamma correction, etc </p>", 
        "debug_pass_type": "<p> Type of the debug pass to use. Only used when built with debug passes support. </p>", 
        "dimensionspreset": "<p> For the dimensions presets menu. </p>", 
        "displaymode": "<p> Render to image editor, fullscreen or to new window. </p>", 
        "dither_intensity": "<p> Dither noise intensity </p>", 
        "engine": "<p> render engine </p>", 
        "fg_stamp": "<p> foreground/background color. </p>", 
        "frame_step": "<p> Frames to jump during render/playback. </p>", 
        "gauss": "<p> Value used to define filter size for all filter options </p>", 
        "hair_type": "<p> Hair Display </p>", 
        "imtype": "<p>\n@deprecated\n Deprecated</p>", 
        "layers": "<p> information on different layers to be rendered Converted to Scene->view_layers. \n@deprecated\n Deprecated</p>", 
        "line_thickness_mode": "<p> Freestyle line thickness options </p>", 
        "mblur_shutter_curve": "<p> Motion blur shutter </p>", 
        "mode": "<p> Flags for render settings. Use bit-masking to access the settings. </p>", 
        "pic": "<p> path to render output 1024 = FILE_MAX. </p>", 
        "planes": "<p>\n@deprecated\n Deprecated</p>", 
        "psfra": "<p> Start+end frames of preview range. </p>", 
        "quality": "<p>\n@deprecated\n Deprecated</p>", 
        "scemode": "<p> Flags for render settings. Use bit-masking to access the settings. </p>", 
        "seq_flag": "<p> Flag use for sequence render/draw. </p>", 
        "seq_prev_type": "<p> sequencer options </p>", 
        "seq_rend_type": "<p> UNUSED!. </p>", 
        "simplify_subsurf": "<p> render simplify </p>", 
        "size": "<p> Size in %. </p>", 
        "stamp": "<p> stamps flags. </p>", 
        "stamp_font_id": "<p> Select one of blenders bitmap fonts. </p>", 
        "stamp_udata": "<p> stamp info user data. </p>", 
        "stereomode": "<p> XXX deprecated since .2.5. </p><p> Standalone player stereo settings\n@deprecated\n Deprecated</p>", 
        "subframe": "<p> Subframe offset from cfra, in 0.0-1.0. </p>", 
        "subimtype": "<p>\n@deprecated\n Deprecated</p>", 
        "tilex": "<p> render tile dimensions </p>", 
        "unit_line_thickness": "<p> In pixels. </p>", 
        "views": "<p> MultiView {@link SceneRenderView} . </p>", 
        "xasp": "<p> Adjustment factors for the aspect ratio in the x direction, was a short in 2.45 </p>", 
        "xsch": "<p> from buttons: The desired number of pixels in the x direction </p>", 
        "ysch": "<p> The desired number of pixels in the y direction </p>"
      }
    }, 
    "RenderProfile": {
      "doc": "<p><hr/> \n Render Conversion/Simplfication Settings control render convert and shading engine </p>"
    }, 
    "RenderSlot": {
      "fields": {
        "name": "<p> 64 = MAX_NAME. </p>"
      }
    }, 
    "Report": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "len": "<p><code></code> , saves some time calculating the word wrap . </p>", 
        "type": "<p> ReportType. </p>"
      }
    }, 
    "ReportList": {
      "doc": "<p> saved in the wm, don't remove </p>", 
      "fields": {
        "printlevel": "<p> ReportType. </p>", 
        "storelevel": "<p> ReportType. </p>"
      }
    }, 
    "ReportTimerInfo": {
      "doc": "<p> timer customdata to control reports display These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "RigidBodyCon": {
      "doc": "<p><hr/> \n RigidBody Constraint RigidBodyConstraint (rbc)</p><p> Represents an constraint connecting two rigid bodies. </p>", 
      "fields": {
        "breaking_threshold": "<p> Breaking impulse threshold. </p>", 
        "flag": "<p> (eRigidBodyCon_Flag). </p>", 
        "limit_ang_x_lower": "<p> rotation limits </p>", 
        "limit_lin_x_lower": "<p> limits translation limits </p>", 
        "motor_ang_max_impulse": "<p> Maximum force used to reach angular target velocity. </p>", 
        "motor_ang_target_velocity": "<p> Angular velocity the motor tries to hold. </p>", 
        "motor_lin_max_impulse": "<p> Maximum force used to reach linear target velocity. </p>", 
        "motor_lin_target_velocity": "<p> motor settings Linear velocity the motor tries to hold. </p>", 
        "num_solver_iterations": "<p> Number of constraint solver iterations made per simulation step. </p>", 
        "ob1": "<p> First object influenced by the constraint. </p>", 
        "ob2": "<p> Second object influenced by the constraint. </p>", 
        "physics_constraint": "<p> References to Physics Sim object. Exist at runtime only Physics object representation (i.e. btTypedConstraint). </p>", 
        "spring_damping_x": "<p> amount of velocity lost over time </p>", 
        "spring_stiffness_x": "<p> spring settings resistance to deformation </p>", 
        "spring_type": "<p> Spring implementation to use. </p>", 
        "type": "<p> General Settings for this {@link RigidBodyCon}  (eRigidBodyCon_Type) role of RigidBody in sim . </p>"
      }
    }, 
    "RigidBodyOb": {
      "doc": "<p> RigidBodyObject (rbo)</p><p> Represents an object participating in a RigidBody sim. This is attached to each object that is currently participating in a sim. </p>", 
      "fields": {
        "ang_damping": "<p> Damping for angular velocities. </p>", 
        "ang_sleep_thresh": "<p> Deactivation threshold for angular velocities. </p>", 
        "col_groups": "<p> Collision groups that determines which rigid bodies can collide with each other. </p>", 
        "flag": "<p> (eRigidBodyOb_Flag). </p>", 
        "friction": "<p> Resistance of object to movement. </p>", 
        "lin_damping": "<p> Damping for linear velocities. </p>", 
        "lin_sleep_thresh": "<p> Deactivation threshold for linear velocities. </p>", 
        "margin": "<p> Tolerance for detecting collisions. </p>", 
        "mass": "<p> Physics Parameters How much object 'weighs' (i.e. absolute 'amount of stuff' it holds). </p>", 
        "mesh_source": "<p> (eRigidBody_MeshSource) mesh source for mesh based collision shapes. </p>", 
        "orn": "<p> Rigid body orientation. </p>", 
        "pos": "<p> Rigid body position. </p>", 
        "restitution": "<p> How 'bouncy' object is when it collides. </p>", 
        "shape": "<p> (eRigidBody_Shape) collision shape to use. </p>", 
        "shared": "<p> This pointer is shared between all evaluated copies. </p>", 
        "type": "<p> General Settings for this {@link RigidBodyOb}  (eRigidBodyOb_Type) role of RigidBody in sim . </p>"
      }
    }, 
    "RigidBodyOb_Shared": {
      "doc": "<p><hr/> \n RigidBody {@link Object}  Container for data that is shared among CoW copies.</p><p> This is placed in a separate struct so that, for example, the physics_shape pointer can be replaced without having to update all CoW copies. </p>", 
      "fields": {
        "physics_object": "<p> References to Physics Sim objects. Exist at runtime only Physics object representation (i.e. btRigidBody). </p>", 
        "physics_shape": "<p> Collision shape used by physics sim (i.e. btCollisionShape). </p>"
      }
    }, 
    "RigidBodyWorld": {
      "doc": "<p>{@link RigidBodyWorld}  (rbw)</p><p> Represents a \"simulation scene\" existing within the parent scene. </p>", 
      "fields": {
        "constraints": "<p> Group containing objects to use for Rigid Body Constraint.s </p>", 
        "effector_weights": "<p> Sim {@link World}  Settings -------------------------------------------------------<mdash/><mdash/>  Effectors info. </p>", 
        "flag": "<p> (eRigidBodyWorld_Flag) settings for this {@link RigidBodyWorld} . </p>", 
        "group": "<p> Group containing objects to use for Rigid Bodies. </p>", 
        "ltime": "<p> Last frame world was evaluated for (internal). </p>", 
        "num_solver_iterations": "<p> Number of constraint solver iterations made per simulation step. </p>", 
        "numbodies": "<p> Number of objects in rigid body group. </p>", 
        "objects": "<p> Array to access group objects by index, only used at runtime. </p>", 
        "pointcache": "<p> Moved to shared->pointcache. \n@deprecated\n Deprecated</p>", 
        "ptcaches": "<p> Moved to shared->ptcaches. \n@deprecated\n Deprecated</p>", 
        "shared": "<p> This pointer is shared between all evaluated copies. </p>", 
        "steps_per_second": "<p> Number of simulation steps thaken per second. </p>", 
        "time_scale": "<p> Used to speed up or slow down the simulation. </p>"
      }
    }, 
    "RigidBodyWorld_Shared": {
      "doc": "<p><hr/> \n RigidBody {@link World}  Container for data shared by original and evaluated copies of {@link RigidBodyWorld}  </p>", 
      "fields": {
        "physics_world": "<p> References to Physics Sim objects. Exist at runtime only ----------------<mdash/><mdash/>  Physics sim world (i.e. btDiscreteDynamicsWorld). </p>", 
        "pointcache": "<p> cache </p>"
      }
    }, 
    "RimShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>"
      }
    }, 
    "Scene": {
      "fields": {
        "active_keyingset": "<p> User-Defined KeyingSets Index of the active {@link KeyingSet} . first {@link KeyingSet}  has index 1, 'none' active is 0, 'add new' is -1 </p>", 
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "basact": "<p> Active base. \n@deprecated\n Deprecated</p>", 
        "base": "<p>\n@deprecated\n Deprecated</p>", 
        "clip": "<p> Movie Tracking Active movie clip. </p>", 
        "collection": "<p>\n@deprecated\n Deprecated</p>", 
        "cursor": "<p> 3d cursor location. </p>", 
        "customdata_mask": "<p> XXX. runtime flag for drawing, actually belongs in the window, only used by BKE_object_handle_update() </p>", 
        "customdata_mask_modal": "<p> XXX. same as above but for temp operator use (gl renders) </p>", 
        "depsgraph_hash": "<p> none of the dependency graph vars is mean to be saved </p>", 
        "ed": "<p>{@link Sequence}  editor data is allocated here. </p>", 
        "flag": "<p> Various settings. </p>", 
        "fps_info": "<p> (runtime) info/cache used for presenting playback framerate info to the user. </p>", 
        "gpd": "<p> Grease Pencil - Annotations </p>", 
        "keyingsets": "<p> s for this scene </p>", 
        "lay": "<p> Bitflags for layer visibility (deprecated). \n@deprecated\n Deprecated</p>", 
        "layact": "<p> Active layer (deprecated) \n@deprecated\n Deprecated</p>", 
        "layer_properties": "<p> Settings to be override by workspaces. </p>", 
        "master_collection": "<p> Not an actual datablock, but memory owned by scene. </p>", 
        "orientation_slots": "<p> First is the [scene, translate, rotate, scale]. </p>", 
        "physics_settings": "<p> Physics simulation settings </p>", 
        "r": "<p> migrate or replace? depends on some internal things... no, is on the right place (ton) </p>", 
        "rigidbody_world": "<p> RigidBody simulation world+settings </p>", 
        "toolsettings": "<p> Default allocated now. </p>", 
        "unit": "<p> Units </p>", 
        "view_settings": "<p> Color Management </p>"
      }
    }, 
    "SceneCollection": {
      "fields": {
        "active_object_index": "<p> For UI. </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "objects": "<p> ({@link Object}  *)LinkData->data. </p>", 
        "scene_collections": "<p> Nested collections. </p>"
      }
    }, 
    "SceneDisplay": {
      "doc": "<p><hr/> \n {@link Scene}  Display - used for store scene specific display settings for the 3d view </p>", 
      "fields": {
        "light_direction": "<p>{@link Light}  direction for shadows/highlight. </p>", 
        "matcap_ssao_distance": "<p> Settings for Cavity Shader. </p>", 
        "shading": "<p> OpenGL render engine settings. </p>", 
        "viewport_aa": "<p> Method of AA for viewport rendering and image rendering </p>"
      }
    }, 
    "SceneEEVEE": {
      "fields": {
        "shadow_method": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "SceneRenderLayer": {
      "doc": "<p><hr/> \n Render Layers Render Layer </p>", 
      "fields": {
        "freestyleConfig": "<p> Converted to {@link ViewLayer}  freestyleConfig. \n@deprecated\n Deprecated</p>", 
        "lay": "<p> Converted to {@link LayerCollection}  cycles camera visibility override. \n@deprecated\n Deprecated</p>", 
        "lay_exclude": "<p>\n@deprecated\n Deprecated</p>", 
        "lay_zmask": "<p> Converted to {@link LayerCollection}  cycles holdout override. \n@deprecated\n Deprecated</p>", 
        "layflag": "<p> Converted to {@link ViewLayer}  layflag and flag. \n@deprecated\n Deprecated</p>", 
        "mat_override": "<p> Converted to {@link ViewLayer}  setting. \n@deprecated\n Deprecated</p>", 
        "name": "<p> MAX_NAME. \n@deprecated\n Deprecated</p>", 
        "pass_alpha_threshold": "<p> Converted to {@link ViewLayer}  pass_alpha_threshold. \n@deprecated\n Deprecated</p>", 
        "pass_xor": "<p> Converted to {@link ViewLayer}  passflag and flag. \n@deprecated\n Deprecated</p>", 
        "passflag": "<p> pass_xor has to be after passflag Pass_xor has to be after passflag. \n@deprecated\n Deprecated</p>", 
        "prop": "<p> Converted to {@link ViewLayer}  id_properties. \n@deprecated\n Deprecated</p>", 
        "samples": "<p> Converted to {@link ViewLayer}  setting. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SceneRenderView": {
      "doc": "<p> View - MultiView </p>", 
      "fields": {
        "name": "<p> MAX_NAME. </p>", 
        "suffix": "<p> MAX_NAME. </p>"
      }
    }, 
    "ScrArea": {
      "fields": {
        "actionzones": "<p> #AZone. </p>", 
        "butspacetype": "<p>{@link eSpace_Type}  (SPACE_FOO). </p>", 
        "do_refresh": "<p> Private, for spacetype refresh callback. </p>", 
        "full": "<p> If area==full, this is the parent. </p>", 
        "global": "<p> Non-NULL if this area is global. </p>", 
        "handlers": "<p> #wmEventHandler. </p>", 
        "headertype": "<p> OLD! 0=no header, 1= down, 2= up. \n@deprecated\n Deprecated</p>", 
        "region_active_win": "<p> Index of last used region of 'RGN_TYPE_WINDOW' runtime variable, updated by executing operators. </p>", 
        "regionbase": "<p> NOTE: This region list is the one from the active/visible editor (first item in spacedata list). Use {@link SpaceLink.regionbase}  if it's inactive (but only then)!{@link ARegion} . </p>", 
        "spacedata": "<p> A list of space links (editors) that were open in this area before. When changing the editor type, we try to reuse old editor data from this list. The first item is the active/visible one.{@link SpaceLink} . </p>", 
        "spacetype": "<p> eSpace_Type (SPACE_FOO).</p><p> Temporarily used while switching area type, otherwise this should be SPACE_EMPTY. Also, versioning uses it to nicely replace deprecated * editors. It's been there for ages, name doesn't fit any more. </p>", 
        "totrct": "<p> Rect bound by v1 v2 v3 v4. </p>", 
        "type": "<p> Callbacks for this space type. </p>", 
        "v1": "<p> Ordered (bl, tl, tr, br). </p>", 
        "winx": "<p> Size. </p>"
      }
    }, 
    "ScrAreaMap": {
      "fields": {
        "areabase": "<p>{@link ScrArea} . </p>", 
        "edgebase": "<p>{@link ScrEdge} . </p>", 
        "vertbase": "<p> ** NOTE: KEEP ORDER IN SYNC WITH LISTBASES IN bScreen! ** {@link ScrVert}  - screens have vertices/edges to define areas. </p>"
      }
    }, 
    "ScrEdge": {
      "fields": {
        "border": "<p> 1 when at edge of screen. </p>"
      }
    }, 
    "ScrGlobalAreaData": {
      "doc": "<p> These two lines with # tell makesdna this struct can be excluded. Should be: #ifndef WITH_GLOBAL_AREA_WRITING </p>", 
      "fields": {
        "align": "<p> GlobalAreaAlign. </p>", 
        "cur_fixed_height": "<p> Global areas have a non-dynamic size. That means, changing the window size doesn't affect their size at all. However, they can still be 'collapsed', by changing this value. Ignores DPI (ED_area_global_size_y and winx/winy don't) </p>", 
        "flag": "<p> GlobalAreaFlag. </p>", 
        "size_min": "<p> For global areas, this is the min and max size they can use depending on if they are 'collapsed' or not. </p>"
      }
    }, 
    "Script": {
      "doc": "<p>{@link Script}  Runtime Data - Obsolete (pre 2.5) </p>", 
      "fields": {
        "scriptarg": "<p> 1024 = FILE_MAX. </p>", 
        "scriptname": "<p> Store the script file here so we can re-run it on loading blender, if \"Enable Scripts\" is on1024 = FILE_MAX. </p>"
      }
    }, 
    "ScrVert": {
      "fields": {
        "flag": "<p> first one used internally, second one for tools </p>"
      }
    }, 
    "Sculpt": {
      "doc": "<p><hr/> \n {@link Sculpt}  {@link Sculpt}  </p>", 
      "fields": {
        "constant_detail": "<p> scale for constant detail size Constant detail resolution (Blender unit / constant_detail). </p>", 
        "detail_size": "<p> Maximum edge length for dynamic topology sculpting (in pixels) </p>", 
        "flags": "<p> float pivot[3]; XXX not used? </p><p> For rotating around a pivot point </p>", 
        "gravity_factor": "<p> gravity factor for sculpting </p>", 
        "radial_symm": "<p> char tablet_size, tablet_strength; XXX not used? </p><p> Control tablet input </p>", 
        "symmetrize_direction": "<p> Direction used for SCULPT_OT_symmetrize operator </p>"
      }
    }, 
    "SDNA": {
      "fields": {
        "alias": "<p> Runtime versions of data stored in DNA, lazy initialized, only different when renaming is done. </p>", 
        "data": "<p> Full copy of 'encoded' data (when data_alloc is set, otherwise borrowed). </p>", 
        "data_len": "<p> Length of data. </p>", 
        "mem_arena": "<p> Temporary memory currently only used for version patching DNA. </p>", 
        "names": "<p> Struct member names.</p><p> Aligned with {@link SDNA.names} , same pointers when unchanged. </p>", 
        "names_array_len": "<p> Result of #DNA_elem_array_size (aligned with {@link names} ). </p>", 
        "names_len": "<p> Total number of struct members. </p>", 
        "pointer_size": "<p> Size of a pointer in bytes. </p>", 
        "structs": "<p> sp = structs[a] is the address of a struct definition sp[0] is struct type number, sp[1] amount of members</p><p> (sp[2], sp[3]), (sp[4], sp[5]), .. are the member type and name numbers respectively. </p>", 
        "structs_len": "<p> Number of struct types. </p>", 
        "structs_map": "<p> #GHash for faster lookups, requires WITH_DNA_GHASH to be used for now.</p><p> A version of {@link SDNA.structs_map}  that uses #SDNA.alias.types for it's keys. </p>", 
        "types": "<p> Type names.</p><p> Aligned with {@link SDNA.types} , same pointers when unchanged. </p>", 
        "types_len": "<p> Number of basic types + struct types. </p>", 
        "types_size": "<p> Type lengths. </p>"
      }
    }, 
    "Sequence": {
      "doc": "<p> The sequence structure is the basic struct used by any strip. each of the strips uses a different sequence structure.</p><p><h2>Warning</h2><p> The first part identical to {@link ID}  (for use in ipo's) the comment above is historic, probably we can drop the {@link ID}  compatibility, but take care making this change.</p> The first part identical to ID (for use in ipo's) the comment above is historic, probably we can drop the ID compatibility, but take care making this change.\n<h2>Warning</h2><p> This is really a '{@link Strip} ' in the UI!, name is highly confusing. </p> This is really a 'Strip' in the UI!, name is highly confusing. \n</p>", 
      "fields": {
        "anim_endofs": "<p> Is subtle different to startofs / endofs. </p>", 
        "anim_startofs": "<p> Only use part of animation file. </p>", 
        "anims": "<p> For MOVIE strips. </p>", 
        "clip": "<p> For MOVIECLIP strips. </p>", 
        "clip_flag": "<p> MOVIECLIP render flags. </p>", 
        "effectdata": "<p> Struct pointer for effect settings. </p>", 
        "flag": "<p> Flags bitmap (see below) and the type of sequence. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "len": "<p> The length of the contents of this strip - before handles are applied. </p>", 
        "lib": "<p> Needed (to be like ipo), else it will raise libdata warnings, this should never be used. </p>", 
        "machine": "<p> Machine: the strip channel, depth the depth in the sequence when dealing with metastrips. </p>", 
        "mask": "<p> For MASK strips. </p>", 
        "modifiers": "<p> modifiers </p>", 
        "multicam_source": "<p> For multicam source selection. </p>", 
        "name": "<p> SEQ_NAME_MAXSTR - name, set by default and needs to be unique, for RNA paths. </p>", 
        "pitch": "<p> Pitch (-0.1..10), pan -2..2. </p>", 
        "scene": "<p> these {@link ID}  vars should never be NULL but can be when linked libs fail to load, so check on access </p>", 
        "scene_camera": "<p> Override scene camera. </p>", 
        "seq1": "<p> pointers for effects: </p>", 
        "seqbase": "<p> List of strips for metastrips. </p>", 
        "sfra": "<p> is sfra needed anymore? - it looks like its only used in one place Starting frame according to the timeline of the scene. </p>", 
        "sound": "<p> The linked \"bSound\" object. </p>", 
        "start": "<p> Start frame of contents of strip in absolute frame coordinates. For metastrips start of first strip startdisp. </p>", 
        "startdisp": "<p> Starting and ending points of the strip in the sequence. </p>", 
        "startofs": "<p> Frames after the first frame where display starts, frames before the last frame where display ends. </p>", 
        "startstill": "<p> Frames that use the first frame before data begins, frames that use the last frame after data ends. </p>", 
        "streamindex": "<p> Streamindex for movie or sound files with several streams. </p>", 
        "tmp": "<p> Tmp var for copying, and tagging for linked selection. </p>", 
        "views_format": "<p> Multiview </p>"
      }
    }, 
    "SequenceModifierData": {
      "doc": "<p> ***************** {@link Sequence}  modifiers ****************** </p>", 
      "fields": {
        "mask_input_type": "<p> mask input, either sequence or mask {@link ID}  </p>", 
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "SequencerScopes": {
      "doc": "<p> ***************** {@link Scopes}  ****************** </p>"
    }, 
    "ShaderFxData": {
      "fields": {
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "ShaderFxData_Runtime": {
      "doc": "<p> Runtime temp data </p>"
    }, 
    "ShadowShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>"
      }
    }, 
    "ShrinkwrapModifierData": {
      "fields": {
        "auxTarget": "<p> Additional shrink target. </p>", 
        "keepDist": "<p> Distance offset to keep from mesh/projection point. </p>", 
        "projAxis": "<p> Axis to project over. </p>", 
        "projLimit": "<p> Limit the projection ray cast. </p>", 
        "shrinkMode": "<p> Shrink to surface mode. </p>", 
        "shrinkOpts": "<p> Shrink options. </p>", 
        "shrinkType": "<p> Shrink type projection. </p>", 
        "subsurfLevels": "<p> If using projection over vertex normal this controls the level of subsurface that must be done before getting the vertex coordinates and normal </p>", 
        "target": "<p> Shrink target. </p>", 
        "vgroup_name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "SimpleDeformModifierData": {
      "fields": {
        "axis": "<p> Lock axis (for taper and stretch). </p>", 
        "deform_axis": "<p> Axis to perform the deform on (default is X, but can be overridden by origin. </p>", 
        "factor": "<p> Factors to control simple deforms. </p>", 
        "limit": "<p> Lower and upper limit. </p>", 
        "mode": "<p> Deform function. </p>", 
        "origin": "<p>{@link Object}  to control the origin of modifier space coordinates. </p>", 
        "vgroup_name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "SimplifyGpencilModifierData": {
      "fields": {
        "distance": "<p> Merge distance </p>", 
        "factor": "<p> Factor of simplify. </p>", 
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "length": "<p> Sample length </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "mode": "<p> Type of simplify. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "step": "<p> Every n vertex to keep. </p>"
      }
    }, 
    "SkinModifierData": {
      "doc": "<p> Skin modifier </p>"
    }, 
    "SmokeModifierData": {
      "doc": "<p> DEPRECATED, only used for versioning. </p>", 
      "fields": {
        "type": "<p> Domain, inflow, outflow, .... </p>"
      }
    }, 
    "SmoothGpencilModifierData": {
      "fields": {
        "factor": "<p> Factor of noise. </p>", 
        "flag": "<p> Several flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "step": "<p> How many times apply smooth. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "SmoothModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "SoftBody": {
      "fields": {
        "balldamp": "<p> Cooling down collision response. </p>", 
        "ballstiff": "<p> Pressure the ball is loaded with. </p>", 
        "bpoint": "<p> Not saved in file. </p>", 
        "bspring": "<p> Not saved in file. </p>", 
        "colball": "<p> self collision Fixed collision ball size if > 0. </p>", 
        "defgoal": "<p> Default goal for vertices without vgroup. </p>", 
        "goalfrict": "<p> Softbody goal springs friction. </p>", 
        "goalspring": "<p> goal Softbody goal springs. </p>", 
        "grav": "<p> Softbody amount of gravitaion to apply. </p>", 
        "infrict": "<p> Softbody inner springs friction. </p>", 
        "inspring": "<p> springs Softbody inner springs. </p>", 
        "keys": "<p><ndash/>  these must be kept for backwards compatibility <ndash/>  Array of size totpointkey. </p>", 
        "lcom": "<p> reverse esimated obmatrix .. no need to store in blend file .. how ever who cares </p>", 
        "local": "<p> Local==1: use local coords for baking. </p>", 
        "mediafrict": "<p> Friction to env. </p>", 
        "mingoal": "<p> Quick limits for goal. </p>", 
        "namedVG_Mass": "<p> Along with it introduce mass painting starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613. MAX_VGROUP_NAME </p>", 
        "namedVG_Softgoal": "<p> Starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613. MAX_VGROUP_NAME </p>", 
        "namedVG_Spring_K": "<p> Along with it introduce Spring_K painting starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613. MAX_VGROUP_NAME </p>", 
        "nodemass": "<p><em></em> . </p>", 
        "physics_speed": "<p> User control over simulation speed. </p>", 
        "pointcache": "<p> Moved to {@link SoftBody_Shared} . \n@deprecated\n Deprecated</p>", 
        "ptcaches": "<p> Moved to {@link SoftBody_Shared} . \n@deprecated\n Deprecated</p>", 
        "rklimit": "<p> Error limit for ODE solver. </p>", 
        "scratch": "<p> Scratchpad/cache on live time not saved in file. </p>", 
        "secondspring": "<p><hr/> \n </p>", 
        "sfra": "<p> baking </p>", 
        "totpoint": "<p> dynamic data </p>", 
        "totpointkey": "<p> If totpointkey != totpoint or totkey!- (efra-sfra)/interval -> free keys. </p>", 
        "vertgroup": "<p> Index starting at 1. </p>"
      }
    }, 
    "SoftBody_Shared": {
      "doc": "<p> Container for data that is shared among CoW copies.</p><p> This is placed in a separate struct so that values can be changed without having to update all CoW copies. </p>"
    }, 
    "SolidifyModifierData": {
      "fields": {
        "defgrp_name": "<p> Name of vertex group to use, MAX_VGROUP_NAME. </p>", 
        "nonmanifold_offset_mode": "<p> Variables for #MOD_SOLIDIFY_MODE_NONMANIFOLD. </p>", 
        "offset": "<p> New surface offset leve.l </p>", 
        "offset_clamp": "<p> Clamp offset based on surrounding geometry. </p>", 
        "offset_fac": "<p> Midpoint of the offset . </p>", 
        "offset_fac_vg": "<p> factor for the minimum weight to use when vgroups are used, avoids 0.0 weights giving duplicate geometry </p>"
      }
    }, 
    "SpaceAction": {
      "doc": "<p> Action Editor Space. This is defined here instead of in {@link DNA_space_types.h}  </p>", 
      "fields": {
        "action": "<p> The currently active action. </p>", 
        "ads": "<p> The currently active context (when not showing action). </p>", 
        "autosnap": "<p> Automatic keyframe snapping mode . </p>", 
        "cache_display": "<p> (eTimeline_Cache_Flag). </p>", 
        "mode": "<p>{@link Editing}  context </p>", 
        "mode_prev": "<p> Storage for sub-space types. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "timeslide": "<p> For Time-Slide transform mode drawing - current frame?. </p>", 
        "v2d": "<p> End '{@link SpaceLink} ' header. Copied to region. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SpaceClip": {
      "doc": "<p> Clip Editor </p>", 
      "fields": {
        "_pad1": "<p> End '{@link SpaceLink} ' header. </p>", 
        "around": "<p> Pivot point for transforms. </p>", 
        "clip": "<p> Clip data. </p>", 
        "cursor": "<p>{@link Mask}  editor 2d cursor. </p>", 
        "flag": "<p> Flags. </p>", 
        "gpencil_src": "<p> grease pencil </p>", 
        "loc": "<p> current stabilization data Pre-composed stabilization data. </p>", 
        "mode": "<p> Editor mode (editing context being displayed). </p>", 
        "path_length": "<p> Length of displaying path, in frames. </p>", 
        "postproc_flag": "<p> movie postprocessing </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "scopes": "<p> Different scoped displayed in space panels. </p>", 
        "stabmat": "<p> Current stabilization matrix and the same matrix in unified space, defined when drawing and used for mouse position calculation. </p>", 
        "user": "<p> User of clip. </p>", 
        "view": "<p> Type of the clip editor view. </p>", 
        "xlockof": "<p> User defined offset from locked position. </p>", 
        "xof": "<p> User defined offset, image is centered. </p>", 
        "zoom": "<p> User defined zoom level. </p>"
      }
    }, 
    "SpaceConsole": {
      "doc": "<p> Console View </p>", 
      "fields": {
        "history": "<p>{@link ConsoleLine} ; command history, current edited line is the first. </p>", 
        "language": "<p> Multiple consoles are possible, not just python. </p>", 
        "lheight": "<p> End '{@link SpaceLink} ' header. space vars </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "scrollback": "<p>{@link ConsoleLine} ; output. </p>", 
        "sel_start": "<p> Selection offset in bytes. </p>"
      }
    }, 
    "SpaceFile": {
      "doc": "<p> File Browser </p>", 
      "fields": {
        "_pad1": "<p> End '{@link SpaceLink} ' header. </p>", 
        "files": "<p> Holds the list of files to show. </p>", 
        "folders_next": "<p> Holds the list of next directories (pushed from previous) to show. </p>", 
        "folders_prev": "<p> Holds the list of previous directories to show. </p>", 
        "op": "<p> operator that is invoking fileselect op->exec() will be called on the 'Load' button. if operator provides op->cancel(), then this will be invoked on the cancel button. </p>", 
        "params": "<p> Config and input for file select. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>"
      }
    }, 
    "SpaceGraph": {
      "doc": "<p> 'Graph' Editor (formerly known as the IPO Editor) </p>", 
      "fields": {
        "ads": "<p> Settings for filtering animation data <h2>Note</h2><p> we use a pointer due to code-linking issues. </p> we use a pointer due to code-linking issues. \n</p>", 
        "around": "<p> Pivot point for transforms. </p>", 
        "autosnap": "<p> Time-transform autosnapping settings for Graph editor (eAnimEdit_AutoSnap in {@link DNA_action_types.h} ). </p>", 
        "cursorTime": "<p> Time value for cursor (when in drivers mode; animation uses current frame). </p>", 
        "cursorVal": "<p> Cursor value (y-value, x-value is current frame). </p>", 
        "flag": "<p> Settings for Graph editor (eGraphEdit_Flag). </p>", 
        "mode": "<p> Mode for the Graph editor (eGraphEdit_Mode). </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "v2d": "<p> End '{@link SpaceLink} ' header. Deprecated, copied to region. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SpaceGraph_Runtime": {
      "fields": {
        "flag": "<p>{@link eGraphEdit_Runtime_Flag}  </p>", 
        "ghost_curves": "<p> Sampled snapshots of F-Curves used as in-session guides </p>"
      }
    }, 
    "SpaceImage": {
      "doc": "<p> Image/UV Editor </p>", 
      "fields": {
        "centx": "<p> Storage for offset while render drawing. </p>", 
        "cursor": "<p> UV editor 2d cursor. </p>", 
        "curtile": "<p> The currently active tile of the image when tile is enabled, is kept in sync with the active faces tile. </p>", 
        "dt_uv": "<p> UV draw type. </p>", 
        "gpd": "<p> Grease pencil data. </p>", 
        "image": "<p> End '{@link SpaceLink} ' header. </p>", 
        "mode": "<p> View/paint/mask. </p>", 
        "mode_prev": "<p> Storage for sub-space types. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "sample_line_hist": "<p> Sample line histogram. </p>", 
        "scopes": "<p>{@link Histogram}  waveform and vectorscope. </p>", 
        "sticky": "<p> Sticky selection type. </p>", 
        "xof": "<p> User defined offset, image is centered. </p>", 
        "zoom": "<p> User defined zoom level. </p>"
      }
    }, 
    "SpaceInfo": {
      "doc": "<p> Info Header </p>", 
      "fields": {
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "rpt_mask": "<p> End '{@link SpaceLink} ' header. </p>"
      }
    }, 
    "SpaceLink": {
      "doc": "<p> The base structure all the other spaces are derived (implicitly) from. Would be good to make this explicit. </p>", 
      "fields": {
        "regionbase": "<p> Storage of regions for inactive spaces. </p>"
      }
    }, 
    "SpaceNla": {
      "doc": "<p> NLA Editor </p>", 
      "fields": {
        "autosnap": "<p> End '{@link SpaceLink} ' header. This uses the same settings as autosnap for Action Editor. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "v2d": "<p> Deprecated, copied to region. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SpaceNode": {
      "fields": {
        "aspect": "<p> Internal state variables. </p>", 
        "cursor": "<p> Mouse pos for drawing socketless link and adding nodes. </p>", 
        "flag": "<p> Menunr: browse id block in header. </p>", 
        "gpd": "<p> Grease-pencil data. </p>", 
        "id": "<p> Context, no need to save in file? well... pinning... </p>", 
        "insert_ofs_dir": "<p> Direction for offsetting nodes on insertion. </p>", 
        "iofsd": "<p> XXX hack for translate_attach op-macros to pass data from transform op to insert_offset op Temporary data for node insert offset (in UI called Auto-offset). </p>", 
        "linkdrag": "<p> Temporary data for modal linking operator. </p>", 
        "recalc": "<p> Currently on 0/1, for auto compo. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "shaderfrom": "<p> Shader from object or world. </p>", 
        "texfrom": "<p> Texfrom object, world or brush. </p>", 
        "tree_idname": "<p> tree type for the current node tree </p>", 
        "treepath": "<p> XXX nodetree pointer info is all in the path stack now, remove later on and use {@link bNodeTreePath}  instead. For now these variables are set when pushing/popping from path stack, to avoid having to update all the functions and operators. Can be done when design is accepted and everything is properly tested. </p>", 
        "treetype": "<p> Treetype: as same nodetree->type. \n@deprecated\n Deprecated</p>", 
        "v2d": "<p> End '{@link SpaceLink} ' header. Deprecated, copied to region. \n@deprecated\n Deprecated</p>", 
        "xof": "<p> Offset for drawing the backdrop. </p>", 
        "zoom": "<p> Zoom for backdrop. </p>"
      }
    }, 
    "SpaceOutliner": {
      "doc": "<p> Outliner </p>", 
      "fields": {
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "search_string": "<p> search stuff </p>", 
        "sync_select_dirty": "<p> Selection syncing flag (#WM_OUTLINER_SYNC_SELECT_FROM_OBJECT and similar flags). </p>", 
        "treehash": "<p> Pointers to treestore elements, grouped by (id, type, nr) in hashtable for faster searching </p>", 
        "treestore": "<p> treestore is an ordered list of {@link TreeStoreElem} 's from outliner tree; Note that treestore may contain duplicate elements if element is used multiple times in outliner tree (e. g. linked objects) Also note that BLI_mempool can not be read/written in DNA directly, therefore readfile.c/writefile.c linearize treestore into {@link TreeStore}  structure </p>", 
        "v2d": "<p> End '{@link SpaceLink} ' header. Deprecated, copied to region. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SpaceProperties": {
      "doc": "<p> Properties Editor </p>", 
      "fields": {
        "mainb": "<p> Context tabs. </p>", 
        "path": "<p> Runtime. </p>", 
        "pathflag": "<p> Runtime. </p>", 
        "preview": "<p> Preview is signal to refresh. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "space_subtype": "<p> For different kinds of property editors (exposed in the space type selector). </p>", 
        "v2d": "<p> End '{@link SpaceLink} ' header. Deprecated, copied to region. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SpaceScript": {
      "doc": "<p>{@link Script}  View - Obsolete (pre 2.5) </p>", 
      "fields": {
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "script": "<p> End '{@link SpaceLink} ' header. </p>"
      }
    }, 
    "SpaceSeq": {
      "doc": "<p> Sequencer </p>", 
      "fields": {
        "draw_flag": "<p> Overlay an image of the editing on below the strips. </p>", 
        "gpd": "<p> Grease-pencil data. </p>", 
        "mainb": "<p> Weird name for the sequencer subtype (seq, image, luma... etc). </p>", 
        "multiview_eye": "<p> Multiview current eye - for internal use. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "render_size": "<p> ESpaceSeq_Proxy_RenderSize. </p>", 
        "scopes": "<p> Different scoped displayed in space. </p>", 
        "v2d": "<p> End '{@link SpaceLink} ' header. Deprecated, copied to region. \n@deprecated\n Deprecated</p>", 
        "view": "<p> See SEQ_VIEW_* below. </p>", 
        "xof": "<p> Deprecated: offset for drawing the image preview. \n@deprecated\n Deprecated</p>", 
        "yof": "<p>\n@deprecated\n Deprecated</p>", 
        "zoom": "<p> Deprecated, handled by {@link View2D}  now. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "SpaceStatusBar": {
      "doc": "<p> These two lines with # tell makesdna this struct can be excluded. Should be: #ifndef WITH_GLOBAL_AREA_WRITING </p>", 
      "fields": {
        "regionbase": "<p> Storage of regions for inactive spaces. </p>"
      }
    }, 
    "SpaceText": {
      "doc": "<p>{@link Text}  Editor </p>", 
      "fields": {
        "findstr": "<p> ST_MAX_FIND_STR. </p>", 
        "lheight": "<p> User preference, is font_size! </p>", 
        "live_edit": "<p> Run python while editing, evil. </p>", 
        "margin_column": "<p> Column number to show right margin at. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "replacestr": "<p> ST_MAX_FIND_STR. </p>", 
        "runtime": "<p> Keep last. </p>", 
        "text": "<p> End '{@link SpaceLink} ' header. </p>", 
        "wordwrap": "<p> Booleans </p>"
      }
    }, 
    "SpaceText_Runtime": {
      "fields": {
        "cwidth_px": "<p> Runtime computed, character width. </p>", 
        "drawcache": "<p> Cache for faster drawing. </p>", 
        "lheight_px": "<p> Actual line height, scaled by dpi. </p>", 
        "line_number_display_digits": "<p> Number of digits to show in the line numbers column (when enabled). </p>", 
        "scroll_ofs_px": "<p> Run-time for scroll increments smaller than a line (smooth scroll). Values must be between zero and the line, column width: (cwidth, TXT_LINE_HEIGHT(st)). </p>", 
        "scroll_px_per_line": "<p> Use for drawing scroll-bar & calculating scroll operator motion scaling. </p>", 
        "scroll_region_handle": "<p> The handle of the scroll-bar which can be clicked and dragged. </p>", 
        "scroll_region_select": "<p> The region for selected text to show in the scrolling area. </p>", 
        "viewlines": "<p> Number of lines this window can display (even when they aren't used). </p>"
      }
    }, 
    "SpaceTopBar": {
      "doc": "<p> These two lines with # tell makesdna this struct can be excluded. Should be: #ifndef WITH_GLOBAL_AREA_WRITING </p>", 
      "fields": {
        "regionbase": "<p> Storage of regions for inactive spaces. </p>"
      }
    }, 
    "SpaceUserPref": {
      "fields": {
        "_pad1": "<p> End '{@link SpaceLink} ' header. </p>", 
        "filter": "<p> Search term for filtering in the UI. </p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>"
      }
    }, 
    "Speaker": {
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "flag": "<p> flag </p>", 
        "volume": "<p> animatable properties </p>", 
        "volume_max": "<p> not animatable properties </p>"
      }
    }, 
    "SPHFluidSettings": {
      "fields": {
        "radius": "<p>{@link Particle}  Fluid </p>"
      }
    }, 
    "Stereo3dFormat": {
      "fields": {
        "anaglyph_type": "<p> Anaglyph scheme for the user display. </p>", 
        "display_mode": "<p> Encoding mode. </p>", 
        "interlace_type": "<p> Interlace type for the user display. </p>"
      }
    }, 
    "Strip": {
      "fields": {
        "color_balance": "<p>\n@deprecated\n Deprecated</p>", 
        "colorspace_settings": "<p> color management </p>", 
        "stripdata": "<p> Only used as an array in IMAGE sequences(!), and as a 1-element array in MOVIE sequences, NULL for all other strip-types. </p>"
      }
    }, 
    "StripAnim": {
      "doc": "<p> strlens; 256= FILE_MAXFILE, 768= FILE_MAXDIR </p>"
    }, 
    "StripProxy": {
      "fields": {
        "build_flags": "<p> to build </p>", 
        "build_tc_flags": "<p> to build </p>", 
        "file": "<p> (defaults to BL_proxy) </p>"
      }
    }, 
    "SubdivGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "level": "<p> Factor of subdivision. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>"
      }
    }, 
    "SubsurfModifierData": {
      "fields": {
        "emCache": "<p> TODO(sergey): Get rid of those with the old CCG subdivision code. </p>"
      }
    }, 
    "SurfaceDeformModifierData": {
      "fields": {
        "target": "<p> Bind target object. </p>", 
        "verts": "<p> Vertex bind data. </p>"
      }
    }, 
    "SurfaceModifierData": {
      "fields": {
        "bvhtree": "<p> Bounding volume hierarchy of the mesh faces. </p>", 
        "v": "<p> Velocity. </p>", 
        "x": "<p> Old position. </p>"
      }
    }, 
    "SwirlShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "transparent": "<p> Not visible in rna. </p>"
      }
    }, 
    "Tex": {
      "fields": {
        "_pad0": "<p> variables disabled, moved to struct iuser </p>", 
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "dist_amount": "<p> newnoise: distorted noise amount, musgrave & voronoi output scale </p>", 
        "ipo": "<p> old animation system, deprecated for 2.5 \n@deprecated\n Deprecated</p>", 
        "mg_H": "<p> newnoise: musgrave parameters </p>", 
        "noisebasis": "<p> newnoise: noisebasis type for clouds/marble/etc, noisebasis2 only used for distorted noise </p>", 
        "noisedepth": "<p> noisedepth MUST be <= 30 else we get floating point exceptions </p>", 
        "vn_w1": "<p> newnoise: voronoi nearest neighbor weights, minkovsky exponent, distance metric & color type </p>"
      }
    }, 
    "TexMapping": {
      "doc": "<p> used for mapping and texture nodes. note: rot is now in radians </p>"
    }, 
    "TexNodeOutput": {
      "doc": "<p> TEX_output </p>"
    }, 
    "TexPaintSlot": {
      "doc": "<p> WATCH IT: change type? also make changes in ipo.h </p>", 
      "fields": {
        "ima": "<p>{@link Image}  to be painted on. </p>", 
        "interp": "<p> Copy of node inteporlation setting. </p>", 
        "uvname": "<p> Customdata index for uv layer, MAX_NAM.E </p>", 
        "valid": "<p> Do we have a valid image and UV map. </p>"
      }
    }, 
    "TextLine": {
      "fields": {
        "format": "<p> May be NULL if syntax is off or not yet formatted. </p>", 
        "len": "<p> Blen unused. </p>"
      }
    }, 
    "ThemeSpace": {
      "doc": "<p> try to put them all in one, if needed a special struct can be created as well for example later on, when we introduce wire colors for ob types or so... </p>", 
      "fields": {
        "active_object": "<p> Outliner - active object. </p>", 
        "anim_active": "<p> NLA Active Action + Summary Channel. </p>", 
        "anim_non_active": "<p> Active Action = NULL. </p>", 
        "anim_preview_range": "<p> Preview range overlay. </p>", 
        "back": "<p> main window colors </p>", 
        "button": "<p> button/tool regions Region background. </p>", 
        "button_title": "<p>{@link Panel}  title. </p>", 
        "ds_channel": "<p> Dopesheet. </p>", 
        "edited_object": "<p> Outliner - edited object. </p>", 
        "execution_buts": "<p> Region background. </p>", 
        "face": "<p> Solid faces. </p>", 
        "face_dot": "<p> selected color. </p>", 
        "header": "<p> header colors Region background. </p>", 
        "header_title": "<p> Unused. </p>", 
        "info_selected": "<p> info </p>", 
        "keyframe_scale_fac": "<p> For dopesheet - scale factor for size of keyframes (i.e. height of channels). </p>", 
        "keytype_keyframe": "<p> Keytypes. </p>", 
        "keytype_keyframe_select": "<p> Keytypes. </p>", 
        "list": "<p> listview regions Region background. </p>", 
        "list_title": "<p>{@link Panel}  title. </p>", 
        "match": "<p> Outliner - filter match. </p>", 
        "movie": "<p> For sequence editor. </p>", 
        "navigation_bar": "<p> navigation bar regions Region background. </p>", 
        "nla_meta": "<p> NLA \"Meta\" strips. </p>", 
        "nla_sound": "<p> NLA \"Sound\" strips. </p>", 
        "nla_track": "<p> NLA \"Track\" </p>", 
        "nla_transition": "<p> NLA \"Transition\" strips. </p>", 
        "nla_tweakdupli": "<p> NLA - warning color for duplicate instances of tweaking strip. </p>", 
        "nla_tweaking": "<p> NLA 'Tweaking' action/strip. </p>", 
        "panelcolors": "<p> note, cannot use name 'panel' because of DNA mapping old files </p>", 
        "row_alternate": "<p> Outliner - row color difference. </p>", 
        "selected_highlight": "<p> Outliner - selected item. </p>", 
        "selected_object": "<p> Outliner - selected object. </p>", 
        "skin_root": "<p> Skin modifier root color. </p>", 
        "syntaxl": "<p> syntax for textwindow and nodes </p>", 
        "tab_active": "<p> region tabs </p>", 
        "title": "<p>{@link Panel}  title. </p>", 
        "uv_others": "<p> Uvs of other objects. </p>", 
        "uv_shadow": "<p> Two uses, for uvs with modifier applied on mesh and uvs during painting. </p>"
      }
    }, 
    "ThemeUI": {
      "fields": {
        "gizmo_hi": "<p> Gizmo Colors. </p>", 
        "icon_border_intensity": "<p> Intensity of the border icons. >0 will render an border around themed icons. </p>", 
        "icon_collection": "<p>{@link Collection}  items. </p>", 
        "icon_folder": "<p> File folders. </p>", 
        "icon_modifier": "<p> Modifier and constraint items. </p>", 
        "icon_object": "<p>{@link Object}  items. </p>", 
        "icon_object_data": "<p>{@link Object}  data items. </p>", 
        "icon_scene": "<p> Icon Colors. {@link Scene}  items. </p>", 
        "icon_shading": "<p> Shading related items. </p>", 
        "menu_shadow_fac": "<p> fac: 0 - 1 for blend factor, width in pixels </p>", 
        "wcol_regular": "<p> Interface Elements (buttons, menus, icons) </p>", 
        "xaxis": "<p> Axis Colors </p>"
      }
    }, 
    "ThemeWireColor": {
      "doc": "<p> set of colors for use as a custom color set for Objects/Bones wire drawing </p>", 
      "fields": {
        "flag": "<p>{@link eWireColor_Flags} . </p>"
      }
    }, 
    "ThickGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "thickness": "<p> Thickness change. </p>", 
        "vgname": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "TimeGpencilModifierData": {
      "fields": {
        "flag": "<p> Flags. </p>", 
        "frame_scale": "<p> Animation scale. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "sfra": "<p> Start and end frame for custom range. </p>"
      }
    }, 
    "TimeMarker": {
      "doc": "<p><hr/> \n Markers </p>"
    }, 
    "TintGpencilModifierData": {
      "fields": {
        "factor": "<p> Mix factor. </p>", 
        "flag": "<p> Flags. </p>", 
        "layer_pass": "<p> Custom index for passes. </p>", 
        "layername": "<p> Layer name. </p>", 
        "materialname": "<p>{@link Material}  name. </p>", 
        "modify_color": "<p> Modify stroke, fill or both. </p>", 
        "pass_index": "<p> Custom index for passes. </p>", 
        "rgb": "<p> Tint color. </p>"
      }
    }, 
    "ToolSettings": {
      "fields": {
        "_pad2": "<p> UV painting </p>", 
        "annotate_thickness": "<p> Default stroke thickness for annotation strokes. </p>", 
        "annotate_v3d_align": "<p> Annotations Stroke placement settings - 3D View. </p>", 
        "auto_normalize": "<p> Auto normalizing mode in wpaint. </p>", 
        "autoik_chainlen": "<p> Auto-IK Runtime only. </p>", 
        "autokey_flag": "<p> Auto-Keying Mode Defines in {@link DNA_userdef_types.h} . </p>", 
        "custom_bevel_profile_preset": "<p> Custom {@link Curve}  Profile for bevel tool: Temporary until there is a proper preset system that stores the profiles or maybe stores entire bevel configurations. </p>", 
        "doublimit": "<p> Remove doubles limit. </p>", 
        "edge_mode": "<p> Edge tagging, store operator settings (no UI access). </p>", 
        "gp_interpolate": "<p> Grease Pencil Interpolation Tool(s) </p>", 
        "gp_paint": "<p> Gpencil paint. </p>", 
        "gp_sculpt": "<p> Grease Pencil {@link Sculpt}  </p>", 
        "gpencil_flags": "<p> Grease Pencil Flags/options for how the tool works. </p>", 
        "gpencil_ima_align": "<p>{@link Image}  Editor. </p>", 
        "gpencil_selectmode_edit": "<p> Stroke selection mode for Edit. </p>", 
        "gpencil_selectmode_sculpt": "<p> Stroke selection mode for {@link Sculpt} . </p>", 
        "gpencil_seq_align": "<p> Sequencer Preview. </p>", 
        "gpencil_v2d_align": "<p> General 2D Editor. </p>", 
        "gpencil_v3d_align": "<p> Stroke placement settings: 3D View. </p>", 
        "imapaint": "<p>{@link Image}  {@link Paint}  (8 bytes aligned please!) </p>", 
        "keyframe_type": "<p> Keyframe type (see {@link DNA_curve_types.h} ). </p>", 
        "lock_markers": "<p> Lock marker editing. </p>", 
        "multipaint": "<p>{@link Paint}  multiple bones in wpaint. </p>", 
        "multires_subdiv_type": "<p>{@link Multires}  </p>", 
        "normal_vector": "<p> Normal {@link Editing}  </p>", 
        "particle": "<p>{@link Particle}  {@link Editing}  </p>", 
        "proportional_action": "<p> Proportional edit, action editor. </p>", 
        "proportional_fcurve": "<p> Proportional edit, graph editor. </p>", 
        "proportional_mask": "<p> Proportional edit, mask editing. </p>", 
        "proportional_objects": "<p> Proportional edit, object mode. </p>", 
        "proportional_size": "<p> Transform Proportional Area of {@link Effect}  </p>", 
        "sculpt_paint_settings": "<p> XXX: these sculpt_paint_* fields are deprecated, use the unified_paint_settings field instead! \n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_alpha": "<p>\n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_size": "<p>\n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_unprojected_radius": "<p>\n@deprecated\n Deprecated</p>", 
        "select_thresh": "<p> Select Group Threshold </p>", 
        "selectmode": "<p> Selection Mode for {@link Mesh}  </p>", 
        "transform_pivot_point": "<p> Transform </p>", 
        "unified_paint_settings": "<p> Unified {@link Paint}  Settings </p>", 
        "unwrapper": "<p> UV Calculation </p>", 
        "uvsculpt": "<p> Uv smooth. </p>", 
        "vgroup_weight": "<p> Vertex group weight - used only for editmode, not weight paint </p>", 
        "vgroupsubset": "<p> Subset selection filter in wpaint. </p>", 
        "vpaint": "<p> Vertex paint. </p>", 
        "wpaint": "<p> Weight paint. </p>"
      }
    }, 
    "TransformOrientation": {
      "fields": {
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "TransformOrientationSlot": {
      "doc": "<p><hr/> \n {@link Scene}  ID-Block </p>"
    }, 
    "TransformVars": {
      "fields": {
        "uniform_scale": "<p> Preserve aspect/ratio when scaling. </p>"
      }
    }, 
    "TreeStore": {
      "doc": "<p> used only to store data in in blend files </p>", 
      "fields": {
        "data": "<p> Elements to be packed from mempool in writefile.c or extracted to mempool in readfile.c </p>", 
        "totelem": "<p> Was previously used for memory preallocation. \n@deprecated\n Deprecated</p>", 
        "usedelem": "<p> Number of elements in data array. </p>"
      }
    }, 
    "TreeStoreElem": {
      "fields": {
        "id": "<p> XXX We actually also store non-ID data in this pointer for identifying the {@link TreeStoreElem}  for a TreeElement when rebuilding the tree. Ugly! </p>"
      }
    }, 
    "TriangulateModifierData": {
      "doc": "<p> Triangulate modifier </p>"
    }, 
    "uiFont": {
      "doc": "<p> default fonts to load/initialize first font is the default (index 0), others optional </p>", 
      "fields": {
        "blf_id": "<p> From blfont lib. </p>", 
        "filename": "<p> 1024 = FILE_MAX. </p>", 
        "r_to_l": "<p> Fonts that read from left to right. </p>", 
        "uifont_id": "<p> Own id (eUIFont_ID). </p>"
      }
    }, 
    "uiFontStyle": {
      "doc": "<p> This state defines appearance of text. </p>", 
      "fields": {
        "italic": "<p> Style hint. </p>", 
        "kerning": "<p> Unfitted or default kerning value. </p>", 
        "points": "<p> Actual size depends on 'global' dpi. </p>", 
        "shadow": "<p> Value is amount of pixels blur. </p>", 
        "shadowalpha": "<p> Total alpha. </p>", 
        "shadowcolor": "<p> 1 value, typically white or black anyway. </p>", 
        "shadx": "<p> Shadow offset in pixels. </p>", 
        "uifont_id": "<p> Saved in file, 0 is default. </p>"
      }
    }, 
    "uiList": {
      "fields": {
        "dyn_data": "<p> Dynamic data (runtime). </p>", 
        "filter_byname": "<p> Filtering data. Defined as UI_MAX_NAME_STR. </p>", 
        "layout_type": "<p> How items are layedout in the list. </p>", 
        "list_id": "<p> Defined as UI_MAX_NAME_STR. </p>", 
        "next": "<p> some list UI data need to be saved in file </p>", 
        "properties": "<p> Custom sub-classes properties. </p>", 
        "type": "<p> Runtime. </p>"
      }
    }, 
    "uiListDyn": {
      "doc": "<p>{@link uiList}  dynamic data... These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "height": "<p> Number of rows needed to draw all elements. </p>", 
        "items_filter_flags": "<p> Filtering data. Items_len length. </p>", 
        "items_filter_neworder": "<p> Org_idx -> new_idx, items_len length. </p>", 
        "items_len": "<p> Number of items in collection. </p>", 
        "items_shown": "<p> Number of items actually visible after filtering. </p>", 
        "resize": "<p> Those are temp data used during drag-resize with GRIP button (they are in pixels, the meaningful data is the difference between resize_prev and resize)... </p>", 
        "visual_height": "<p> Actual visual height of the list (in rows). </p>", 
        "visual_height_min": "<p> Minimal visual height of the list (in rows). </p>"
      }
    }, 
    "uiPreview": {
      "doc": "<p> Some preview UI data need to be saved in file. </p>", 
      "fields": {
        "preview_id": "<p> Defined as UI_MAX_NAME_STR. </p>"
      }
    }, 
    "uiStyle": {
      "doc": "<p> this is fed to the layout engine and widget code </p>", 
      "fields": {
        "minlabelchars": "<p> In characters. </p>", 
        "minwidgetchars": "<p> In characters. </p>", 
        "name": "<p> MAX_STYLE_NAME. </p>"
      }
    }, 
    "UnifiedPaintSettings": {
      "doc": "<p><hr/> \n Unified {@link Paint}  Settings These settings can override the equivalent fields in the active {@link Brush}  for any paint mode; the flag field controls whether these values are used </p>", 
      "fields": {
        "alpha": "<p> unified strength of brush </p>", 
        "colorspace": "<p> ColorSpace cache to avoid locking up during sampling </p>", 
        "flag": "<p> user preferences for sculpt and paint </p>", 
        "last_location": "<p> store last location of stroke or whether the mesh was hit. Valid only while stroke is active </p>", 
        "last_rake": "<p> rake rotation record movement of mouse so that rake can start at an intuitive angle </p>", 
        "mask_tex_mouse": "<p> position of mouse, used to sample the mask texture </p>", 
        "overlap_factor": "<p> Normalization factor due to accumulated value of curve along spacing. Calculated when brush spacing changes to dampen strength of stroke if space attenuation is used. </p>", 
        "pixel_radius": "<p> radius of brush, premultiplied with pressure. In case of anchored brushes contains the anchored radius </p>", 
        "rgb": "<p> unified brush color </p>", 
        "secondary_rgb": "<p> unified brush secondary color </p>", 
        "size": "<p> unified radius of brush in pixels </p>", 
        "size_pressure_value": "<p> drawing pressure </p>", 
        "stroke_active": "<p> check is there an ongoing stroke right now </p>", 
        "tex_mouse": "<p> position of mouse, used to sample the texture </p>", 
        "unprojected_radius": "<p> unified radius of brush in Blender units </p>", 
        "weight": "<p> unified brush weight, [0, 1] </p>"
      }
    }, 
    "UnitSettings": {
      "doc": "<p><hr/> \n Assorted {@link Scene}  Data -------------------------------------<mdash/><mdash/>  Unit Settings </p>", 
      "fields": {
        "scale_length": "<p> Display/Editing unit options for each scene Maybe have other unit conversions?. </p>", 
        "system": "<p> Imperial, metric etc. </p>", 
        "system_rotation": "<p> Not implemented as a proper unit system yet. </p>"
      }
    }, 
    "UserDef": {
      "fields": {
        "anim_player": "<p> 1024 = FILE_MAX. </p>", 
        "app_flag": "<p> Experimental flag for app-templates to make changes to behavior which are outside the scope of typical preferences. </p>", 
        "app_template": "<p> Startup application template. </p>", 
        "auto_smoothing_new": "<p>{@link Curve}  smoothing type for newly added F-Curves. </p>", 
        "autokey_flag": "<p> Flags for autokeying. </p>", 
        "autokey_mode": "<p>{@link eAutokey_Mode} , autokeying mode. </p>", 
        "coba_weight": "<p> From texture.h. </p>", 
        "color_picker_type": "<p>{@link eColorPicker_Types} . </p>", 
        "compute_device_type": "<p> Legacy, for backwards compatibility only. </p>", 
        "dpi": "<p> Runtime, full DPI divided by pixelsize. </p>", 
        "dpi_fac": "<p> Runtime, multiplier to scale UI elements based on DPI. </p>", 
        "drag_threshold_mouse": "<p> Drag pixels (scaled by DPI). </p>", 
        "dupflag": "<p>{@link eDupli_ID_Flags} . </p>", 
        "fcu_inactive_alpha": "<p> Opacity of inactive F-Curves in F-Curve Editor. </p>", 
        "filebrowser_display_type": "<p> eUserpref_TempSpaceDisplayType </p>", 
        "flag": "<p>{@link eUserPref_Flag} . </p>", 
        "gp_settings": "<p>{@link eGP_UserdefSettings} . </p>", 
        "gpencil_multisamples": "<p>{@link eMultiSample_Type} , amount of samples for Grease Pencil. </p>", 
        "gpencil_new_layer_col": "<p> Default color for newly created Grease Pencil layers. </p>", 
        "gpu_viewport_quality": "<p>\n@deprecated\n Deprecated</p>", 
        "image_draw_method": "<p> eImageDrawMethod, Method to be used to draw the images (AUTO, GLSL, Textures or DrawPixels) </p>", 
        "image_editor": "<p> 1024 = FILE_MAX. </p>", 
        "ipo_new": "<p> Interpolation mode for newly added F-Curves. </p>", 
        "keyhandles_new": "<p> Handle types for newly added keyframes. </p>", 
        "ndof_deadzone": "<p> Dead-zone of 3D mouse. </p>", 
        "ndof_flag": "<p>{@link eNdof_Flag} , flags for 3D mouse. </p>", 
        "ndof_sensitivity": "<p> Overall sensitivity of 3D mouse. </p>", 
        "node_margin": "<p> Node insert offset (aka auto-offset) margin, but might be useful for later stuff as well. </p>", 
        "ogl_multisamples": "<p>{@link eMultiSample_Type} , amount of samples for OpenGL FSA, if zero no FSA. </p>", 
        "pad_rot_angle": "<p> Control the rotation step of the view when PAD2, PAD4, PAD6&PAD8 is use. </p>", 
        "pie_initial_timeout": "<p> Direction in the pie menu will always be calculated from the initial position within this time limit. </p>", 
        "pie_menu_radius": "<p> Pie menu radius. </p>", 
        "pie_menu_threshold": "<p> Pie menu distance from center before a direction is set. </p>", 
        "pie_tap_timeout": "<p> If keeping a pie menu spawn button pressed after this time, it turns into a drag/release pie menu. </p>", 
        "pixelsize": "<p> Runtime, line width and point size based on DPI. </p>", 
        "pref_flag": "<p> #eUserPref_PrefFlag preferences for the preferences. </p>", 
        "pressure_softness": "<p>{@link Curve}  non-linearity parameter. </p>", 
        "pressure_threshold_max": "<p> Raw tablet pressure that maps to 100%. </p>", 
        "recent_files": "<p> Maximum number of recently used files to remember . </p>", 
        "render_cachedir": "<p> EXR cache path 768 = FILE_MAXDIR. </p>", 
        "render_display_type": "<p> eUserpref_RenderDisplayType </p>", 
        "renderdir": "<p> FILE_MAX length. </p>", 
        "runtime": "<p> Runtime data (keep last). </p>", 
        "rvibright": "<p> Rotating view icon brightness. </p>", 
        "rvisize": "<p> Rotating view icon size. </p>", 
        "scrollback": "<p> Console scrollback limit. </p>", 
        "smooth_viewtx": "<p> Milliseconds to spend spinning the view. </p>", 
        "space_data": "<p> The UI for the user preferences. </p>", 
        "tablet_api": "<p> Tablet API to use (Windows only). </p>", 
        "tempdir": "<p> FILE_MAXDIR length. </p>", 
        "text_render": "<p> Options for text rendering. </p>", 
        "timecode_style": "<p>{@link eTimecodeStyles} , style of timecode display. </p>", 
        "transopts": "<p>{@link eUserpref_Translation_Flags} . </p>", 
        "ui_line_width": "<p> Setting for UI line width. </p>", 
        "ui_scale": "<p> Setting for UI scale. </p>", 
        "uiflag": "<p>{@link eUserpref_UI_Flag} . </p>", 
        "uiflag2": "<p>{@link eUserpref_UI_Flag2} . </p>", 
        "user_keyconfig_prefs": "<p>{@link wmKeyConfigPref} . </p>", 
        "user_menus": "<p>{@link bUserMenu} . </p>", 
        "v2d_min_gridsize": "<p> Minimum spacing between gridlines in {@link View2D}  grids. </p>", 
        "versionfile": "<p>{@link UserDef}  has separate do-version handling, and can be read from other files. </p>", 
        "view_frame_keyframes": "<p> Number of keyframes to zoom around current frame. </p>", 
        "view_frame_seconds": "<p> Seconds to zoom around current frame. </p>", 
        "view_frame_type": "<p>{@link eZoomFrame_Mode} . </p>", 
        "view_rotate_sensitivity_trackball": "<p> Track-ball rotation scale. </p>", 
        "view_rotate_sensitivity_turntable": "<p> Turn-table rotation amount per-pixel in radians. Scaled with DPI. </p>", 
        "virtual_pixel": "<p> Deprecated, for forward compatibility. </p>", 
        "widget_unit": "<p> Private, defaults to 20 for 72 DPI setting. </p>"
      }
    }, 
    "UserDef_Experimental": {
      "fields": {
        "_pad0": "<p> makesdna does not allow empty structs. </p>"
      }
    }, 
    "UserDef_FileSpaceData": {
      "doc": "<p> Storage for UI data that to keep it even after the window was closed. (Similar to {@link UserDef_SpaceData} .) </p>", 
      "fields": {
        "details_flags": "<p>{@link FileSelectParams.details_flags}  </p>", 
        "display_type": "<p>{@link FileSelectParams.display}  </p>", 
        "filter_id": "<p>{@link FileSelectParams.filter_id}  </p>", 
        "flag": "<p>{@link FileSelectParams.flag}  </p>", 
        "sort_type": "<p>{@link FileSelectParams.sort}  </p>", 
        "temp_win_sizex": "<p> Info used when creating the file browser in a temporary window. </p>", 
        "thumbnail_size": "<p> FileSelectParams.thumbnail_size </p>"
      }
    }, 
    "UserDef_SpaceData": {
      "doc": "<p> Store UI data here instead of the space since the space is typically a window which is freed. </p>", 
      "fields": {
        "flag": "<p>{@link eUserPref_SpaceData_Flag}  UI options. </p>"
      }
    }, 
    "UVProjectModifierData": {
      "fields": {
        "projectors": "<p> the objects which do the projecting MOD_UVPROJECT_MAXPROJECTORS. </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "UVWarpModifierData": {
      "fields": {
        "bone_dst": "<p> Optional name of bone target, MAX_ID_NAME-2. </p>", 
        "bone_src": "<p> Optional name of bone target, MAX_ID_NAME-2. </p>", 
        "center": "<p> Used for rotate/scale. </p>", 
        "object_dst": "<p> Target. </p>", 
        "object_src": "<p> Source. </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "vgroup_name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>"
      }
    }, 
    "vec2f": {
      "doc": "<p> vector of two floats. </p>"
    }, 
    "vec2s": {
      "doc": "<p> types vector of two shorts. </p>"
    }, 
    "vec3f": {
      "doc": "<p> not used at the moment typedef struct vec2i { int x, y; } vec2i;</p><p> typedef struct vec2d { double x, y; } vec2d;</p><p> typedef struct vec3i { int x, y, z; } vec3i; </p>"
    }, 
    "VFont": {
      "fields": {
        "name": "<p> 1024 = FILE_MAX. </p>", 
        "temp_pf": "<p> runtime only, holds memory for freetype to read from TODO, replace this with blf_font_new() style loading </p>"
      }
    }, 
    "View2D": {
      "doc": "<p><hr/> \n View 2D data - stored per region </p>", 
      "fields": {
        "align": "<p> Alignment of content in totrect. </p>", 
        "alpha_vert": "<p> Usually set externally (as in, not in view2d files). Alpha of vertical and horizontal scrollbars (range is [0, 255]). </p>", 
        "around": "<p> Pivot point for transforms (rotate and scale). </p>", 
        "flag": "<p> Settings. </p>", 
        "keepofs": "<p> Keepofs - axes that translation is not allowed to occur on. </p>", 
        "keeptot": "<p> Keeptot - 'cur' rect cannot move outside the 'tot' rect?. </p>", 
        "keepzoom": "<p> Keepzoom - axes that zooming cannot occur on, and also clamp within zoom-limits. </p>", 
        "mask": "<p>{@link Mask}  - region (in screenspace) within which 'cur' can be viewed. </p>", 
        "min": "<p> Min/max sizes of 'cur' rect (only when keepzoom not set). </p>", 
        "minzoom": "<p> Allowable zoom factor range (only when (keepzoom & V2D_LIMITZOOM)) is set. </p>", 
        "oldwinx": "<p> Storage of previous winx/winy values encountered by UI_view2d_curRect_validate(), for keepaspect. </p>", 
        "scroll": "<p> Scroll - scrollbars to display (bitflag). </p>", 
        "scroll_ui": "<p> Scroll_ui - temp settings used for UI drawing of scrollers. </p>", 
        "sms": "<p> animated smooth view </p>", 
        "tab_cur": "<p> Current tab. </p>", 
        "tab_num": "<p> Number of tabs stored. </p>", 
        "tab_offset": "<p> Different offset per tab, for buttons. </p>", 
        "tot": "<p> Tot - area that data can be drawn in; cur - region of tot that is visible in viewport. </p>", 
        "vert": "<p> Vert - vertical scrollbar region; hor - horizontal scrollbar region. </p>", 
        "winx": "<p> Storage of current winx/winy values, set in UI_view2d_size_update. </p>"
      }
    }, 
    "View3D": {
      "doc": "<p> 3D ViewPort Struct. </p>", 
      "fields": {
        "bundle_drawtype": "<p> Display style for bundle. </p>", 
        "bundle_size": "<p> Size of bundles in reconstructed data. </p>", 
        "dist": "<p>\n@deprecated\n Deprecated</p>", 
        "drawtype": "<p>\n@deprecated\n Deprecated</p>", 
        "gizmo_flag": "<p> Transform gizmo info. #V3D_GIZMO_SHOW_* </p>", 
        "gpd": "<p> XXX deprecated? Grease-Pencil Data (annotation layers). \n@deprecated\n Deprecated</p>", 
        "gridsubdiv": "<p> Number of subdivisions in the grid between each highlighted grid line. </p>", 
        "layact": "<p>\n@deprecated\n Deprecated</p>", 
        "localvd": "<p> Allocated backup of its self while in localview. </p>", 
        "multiview_eye": "<p> Multiview current eye - for internal use. </p>", 
        "ob_centre_bone": "<p> Optional string for armature bone to define center, MAXBONENAME. </p>", 
        "ob_centre_cursor": "<p> Optional bool for 3d cursor to define center. </p>", 
        "ofs": "<p>\n@deprecated\n Deprecated</p>", 
        "persp": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> Storage of regions for inactive spaces. </p>", 
        "runtime": "<p> Runtime evaluation data (keep last). </p>", 
        "shading": "<p> Display settings. </p>", 
        "stereo3d_flag": "<p> Stereoscopy settings. </p>", 
        "vertex_opacity": "<p> Actually only used to define the opacity of the grease pencil vertex in edit mode. </p>", 
        "view": "<p>\n@deprecated\n Deprecated</p>", 
        "viewquat": "<p> End '{@link SpaceLink} ' header. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "View3D_Runtime": {
      "fields": {
        "properties_storage": "<p> Nkey panel stores stuff here. </p>"
      }
    }, 
    "View3DOverlay": {
      "doc": "<p> 3D Viewport Overlay settings. </p>", 
      "fields": {
        "_pad3": "<p> Armature edit/pose mode settings. </p>", 
        "edit_flag": "<p> Edit mode settings. </p>", 
        "gpencil_paper_opacity": "<p> Grease pencil settings. </p>", 
        "paint_flag": "<p>{@link Paint}  mode settings. </p>", 
        "texture_paint_mode_opacity": "<p> Alpha for texture, weight, vertex paint overlay. </p>", 
        "wireframe_threshold": "<p> Other settings. </p>", 
        "wpaint_flag": "<p> Weight paint mode settings. </p>"
      }
    }, 
    "View3DShading": {
      "doc": "<p> 3D Viewport Shading settings. </p>", 
      "fields": {
        "lookdev_light": "<p> FILE_MAXFILE. </p>", 
        "matcap": "<p> FILE_MAXFILE. </p>", 
        "prev_type": "<p> Runtime, for toggle between rendered viewport. </p>", 
        "render_pass": "<p><code></code>  where one bit is set </p>", 
        "studio_light": "<p> FILE_MAXFILE. </p>", 
        "type": "<p> Shading type (OB_SOLID, ..). </p>"
      }
    }, 
    "ViewLayer": {
      "fields": {
        "drawdata": "<p> Runtime data {@link ViewLayerEngineData} . </p>", 
        "id_properties": "<p> Equivalent to datablocks {@link ID}  properties. </p>", 
        "layer_collections": "<p>{@link LayerCollection} . </p>", 
        "layflag": "<p> Old {@link SceneRenderLayer}  data. </p>", 
        "name": "<p> MAX_NAME. </p>", 
        "object_bases": "<p> ObjectBase. </p>", 
        "passflag": "<p> Pass_xor has to be after passflag. </p>", 
        "stats": "<p> Default allocated now. </p>"
      }
    }, 
    "VPaint": {
      "doc": "<p><hr/> \n Vertex {@link Paint}  Vertex {@link Paint}  </p>", 
      "fields": {
        "radial_symm": "<p> For mirrored painting. </p>"
      }
    }, 
    "WalkNavigation": {
      "fields": {
        "mouse_speed": "<p> Speed factor for look around. </p>", 
        "teleport_time": "<p> Duration to use for teleporting. </p>"
      }
    }, 
    "WarpModifierData": {
      "fields": {
        "defgrp_name": "<p> Optional vertexgroup name, MAX_VGROUP_NAME. </p>", 
        "flag": "<p> Not used yet. </p>", 
        "object_from": "<p> end {@link MappingInfoModifierData}  </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "WaveModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>", 
        "objectcenter": "<p> end {@link MappingInfoModifierData}  </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME. </p>"
      }
    }, 
    "WaveShaderFxData": {
      "fields": {
        "flag": "<p> Flags. </p>"
      }
    }, 
    "WeightedNormalModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "WeightVGEditModifierData": {
      "fields": {
        "_pad0": "<p> Padding... </p>", 
        "add_threshold": "<p> The add/remove vertices weight thresholds. </p>", 
        "cmap_curve": "<p> Mapping stuff. The custom mapping curve!. </p>", 
        "default_weight": "<p> Weight for vertices not in vgroup. </p>", 
        "defgrp_name": "<p> Name of vertex group to edit. MAX_VGROUP_NAME. </p>", 
        "edit_flags": "<p> Using MOD_WVG_EDIT_* flags. </p>", 
        "falloff_type": "<p> Using MOD_WVG_MAPPING_* defines. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME. </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "mask_tex_mapping": "<p> How to map the texture (using MOD_DISP_MAP_* enums). </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_texture": "<p> The texture. </p>"
      }
    }, 
    "WeightVGMixModifierData": {
      "fields": {
        "_pad1": "<p> Padding... </p>", 
        "default_weight_a": "<p> Default weight value for first vgroup. </p>", 
        "default_weight_b": "<p> Default weight value to mix in. </p>", 
        "defgrp_name_a": "<p> Name of vertex group to modify/weight. MAX_VGROUP_NAME. </p>", 
        "defgrp_name_b": "<p> Name of other vertex group to mix in. MAX_VGROUP_NAME. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME. </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "mask_tex_mapping": "<p> How to map the texture!. </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "mix_mode": "<p> How second vgroups weights affect first ones. </p>", 
        "mix_set": "<p> What vertices to affect. </p>"
      }
    }, 
    "WeightVGProximityModifierData": {
      "fields": {
        "_pad0": "<p> Padding... </p>", 
        "defgrp_name": "<p> Name of vertex group to modify/weight. MAX_VGROUP_NAME. </p>", 
        "falloff_type": "<p> Put here to avoid breaking existing struct... Using MOD_WVG_MAPPING_* enums. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME. </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "mask_tex_mapping": "<p> How to map the texture!. </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV Map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "min_dist": "<p> Distances mapping to 0.0/1.0 weights. </p>", 
        "proximity_mode": "<p> Proximity modes. </p>", 
        "proximity_ob_target": "<p> Target object from which to calculate vertices distances. </p>"
      }
    }, 
    "WeldModifierData": {
      "fields": {
        "defgrp_name": "<p> Name of vertex group to use to mask, MAX_VGROUP_NAME. </p>", 
        "merge_dist": "<p> The limit below which to merge vertices. </p>"
      }
    }, 
    "WipeVars": {
      "doc": "<p> ************* {@link Effect}  Variable Structs ********* </p>"
    }, 
    "WireframeModifierData": {
      "doc": "<p> many of these options match 'solidify' </p>", 
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME. </p>"
      }
    }, 
    "wmKeyConfig": {
      "fields": {
        "basename": "<p> Idname of configuration this is derives from, \"\" if none. </p>", 
        "idname": "<p> Unique name. </p>"
      }
    }, 
    "wmKeyConfigPref": {
      "doc": "<p> This is similar to addon-preferences, however unlike add-ons key-config's aren't saved to disk.</p><p>{@link wmKeyConfigPref}  is written to DNA, #wmKeyConfigPrefType_Runtime has the RNA type. </p>", 
      "fields": {
        "idname": "<p> Unique name. </p>"
      }
    }, 
    "wmKeyMap": {
      "doc": "<p> stored in WM, the actively used keymaps </p>", 
      "fields": {
        "flag": "<p> General flags. </p>", 
        "idname": "<p> Global editor keymaps, or for more per space/region. </p>", 
        "kmi_id": "<p> Last kmi id. </p>", 
        "modal_items": "<p> For modal, #EnumPropertyItem for now. </p>", 
        "owner_id": "<p> Optional, see: {@link wmOwnerID} . </p>", 
        "poll": "<p> runtime Verify if enabled in the current context, use #WM_keymap_poll instead of direct calls. </p>", 
        "regionid": "<p> See above. </p>", 
        "spaceid": "<p> Same IDs as in {@link DNA_space_types.h} . </p>"
      }
    }, 
    "wmKeyMapDiffItem": {
      "doc": "<p> Used instead of {@link wmKeyMapItem}  for diff keymaps. </p>"
    }, 
    "wmKeyMapItem": {
      "doc": "<p> Partial copy of the event, for matching by event handler. </p>", 
      "fields": {
        "flag": "<p> flag: inactive, expanded </p>", 
        "id": "<p> Unique identifier. Positive for kmi that override builtins, negative otherwise. </p>", 
        "idname": "<p> operator Used to retrieve operator type pointer. </p>", 
        "keymodifier": "<p> Rawkey modifier. </p>", 
        "maptype": "<p> runtime Keymap editor. </p>", 
        "properties": "<p> Operator properties, assigned to ptr->data and can be written to a file. </p>", 
        "propvalue": "<p> If used, the item is from modal map. </p>", 
        "propvalue_str": "<p> modal Runtime temporary storage for loading. </p>", 
        "ptr": "<p> Rna pointer to access properties. </p>", 
        "shift": "<p> Oskey is apple or windowskey, value denotes order of pressed. </p>", 
        "type": "<p> event Event code itself. </p>", 
        "val": "<p> KM_ANY, KM_PRESS, KM_NOTHING etc. </p>"
      }
    }, 
    "wmOperator": {
      "doc": "<p> This one is the operator itself, stored in files for macros etc. operator + operator-type should be able to redo entirely, but for different context's. </p>", 
      "fields": {
        "customdata": "<p> Custom storage, only while operator runs. </p>", 
        "idname": "<p> saved Used to retrieve type pointer. </p>", 
        "layout": "<p> Runtime for drawing. </p>", 
        "macro": "<p> List of operators, can be a tree. </p>", 
        "opm": "<p> Current running macro, not saved. </p>", 
        "properties": "<p> Saved, user-settable properties. </p>", 
        "ptr": "<p> Rna pointer to access properties. </p>", 
        "py_instance": "<p> Python stores the class instance here. </p>", 
        "reports": "<p> Errors and warnings storage. </p>", 
        "type": "<p> runtime Operator type definition from idname. </p>"
      }
    }, 
    "wmOperatorTypeMacro": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. should be something like DNA_EXCLUDE but the preprocessor first removes all comments, spaces etc </p>", 
      "fields": {
        "idname": "<p> operator id </p>", 
        "properties": "<p> rna pointer to access properties, like keymap Operator properties, assigned to ptr->data and can be written to a file. </p>"
      }
    }, 
    "wmOwnerID": {
      "doc": "<p> Optional tags, which features to use, aligned with {@link bAddon}  names by convention. </p>", 
      "fields": {
        "name": "<p> MAX_NAME. </p>"
      }
    }, 
    "wmWindow": {
      "doc": "<p> IME is win32 only! the saveable part, rest of data is local in ghostwinlay </p>", 
      "fields": {
        "active": "<p> Set to 1 if an active window, for quick rejects. </p>", 
        "addmousemove": "<p> Internal: tag this for extra mousemove event, makes cursors/buttons active on UI switching. </p>", 
        "cursor": "<p> Current mouse cursor type. </p>", 
        "cursor_keymap_status": "<p> Private runtime info to show text in the status bar. </p>", 
        "drawcalls": "<p> custom drawing callbacks </p>", 
        "eventstate": "<p> Storage for event system. </p>", 
        "gesture": "<p> Gesture stuff. </p>", 
        "ghostwin": "<p> Don't want to include ghost.h stuff. </p>", 
        "global_areas": "<p> Global areas aren't part of the screen, but part of the window directly. <h2>Note</h2><p> Code assumes global areas with fixed height, fixed width not supported yet </p> Code assumes global areas with fixed height, fixed width not supported yet \n</p>", 
        "gpuctx": "<p> Don't want to include gpu stuff. </p>", 
        "grabcursor": "<p> Cursor grab mode. </p>", 
        "handlers": "<p> Window+screen handlers, handled last. </p>", 
        "ime_data": "<p> Input Method Editor data - complex character input (esp. for asian character input) Currently WIN32, runtime-only data </p>", 
        "last_pie_event": "<p> Exception to the above rule for nested pies, store last pie event for operators that spawn a new pie right after destruction of last pie. </p>", 
        "lastcursor": "<p> Previous cursor when setting modal one. </p>", 
        "lock_pie_event": "<p> Internal, lock pie creation from this event until released. </p>", 
        "modalcursor": "<p> The current modal cursor. </p>", 
        "modalhandlers": "<p> Priority handlers, handled first. </p>", 
        "monitor": "<p> Multiscreen... no idea how to store yet. </p>", 
        "new_scene": "<p> Temporary when switching. </p>", 
        "parent": "<p> Parent window. </p>", 
        "posx": "<p> Window coords. </p>", 
        "queue": "<p> All events (ghost level events were handled). </p>", 
        "scene": "<p> Active scene displayed in this window. </p>", 
        "screen": "<p>\n@deprecated\n Deprecated</p>", 
        "stereo3d_format": "<p> Properties for stereoscopic displays. </p>", 
        "tweak": "<p> Internal for wm_operators.c. </p>", 
        "view_layer_name": "<p> Active view layer displayed in this window. </p>", 
        "windowstate": "<p> Borderless, full. </p>", 
        "winid": "<p> Winid also in screens, is for retrieving this window after read. </p>"
      }
    }, 
    "wmWindowManager": {
      "doc": "<p> reports need to be before {@link wmWindowManager}  windowmanager is saved, tag WMAN </p>", 
      "fields": {
        "addonconf": "<p> Addon configuration. </p>", 
        "autosavetimer": "<p> Timer for auto save. </p>", 
        "defaultconf": "<p> Default configuration. </p>", 
        "drags": "<p> Active dragged items. </p>", 
        "file_saved": "<p> Indicator whether data was saved. </p>", 
        "initialized": "<p> Set on file read. </p>", 
        "is_interface_locked": "<p> Indicates whether interface is locked for user interaction. </p>", 
        "jobs": "<p> Threaded jobs manager. </p>", 
        "keyconfigs": "<p> Known key configurations. </p>", 
        "op_undo_depth": "<p> Operator stack depth to avoid nested undo pushes. </p>", 
        "operators": "<p> Operator registry. </p>", 
        "outliner_sync_select_dirty": "<p> Set after selection to notify outliner to sync. Stores type of selection </p>", 
        "paintcursors": "<p> Extra overlay cursors to draw, like circles. </p>", 
        "queue": "<p> Refresh/redraw wmNotifier structs. </p>", 
        "reports": "<p> Information and error reports. </p>", 
        "timers": "<p> Active timers. </p>", 
        "undo_stack": "<p> All undo history (runtime only). </p>", 
        "userconf": "<p> User configuration. </p>", 
        "windrawable": "<p> Separate active from drawable. </p>"
      }
    }, 
    "WorkSpace": {
      "fields": {
        "flags": "<p> Enum eWorkSpaceFlags. </p>", 
        "hook_layout_relations": "<p> Store for each hook (so for each window) which layout has been activated the last time this workspace was visible. {@link WorkSpaceDataRelation} . </p>", 
        "layouts": "<p>{@link WorkSpaceLayout} . </p>", 
        "order": "<p> Number for workspace tab reordering in the UI. </p>", 
        "owner_ids": "<p> Feature tagging (use for addons) {@link wmOwnerID} . </p>", 
        "status_text": "<p> Info text from modal operators (runtime). </p>", 
        "tools": "<p> List of {@link bToolRef}  </p>"
      }
    }, 
    "WorkSpaceDataRelation": {
      "doc": "<p> Generic (and simple/primitive) struct for storing a history of assignments/relations of workspace data to non-workspace data in a listbase inside the workspace.</p><p> Using this we can restore the old state of a workspace if the user switches back to it.</p><p> \n</p><p><em></em> . More concretely:<ul><li><p> There are two windows, win1 and win2.</p></li><li><p> Both show workspace ws1, but both also had workspace ws2 activated at some point before.</p></li><li><p> Last time ws2 was active in win1, screen-layout sl1 was activated.</p></li><li><p> Last time ws2 was active in win2, screen-layout sl2 was activated.</p></li><li><p> When changing from ws1 to ws2 in win1, screen-layout sl1 should be activated again.</p></li><li><p> When changing from ws1 to ws2 in win2, screen-layout sl2 should be activated again. So that means we have to store the active screen-layout in a per workspace, per window relation. This struct is used to store an active screen-layout for each window within the workspace. To find the screen-layout to activate for this window-workspace combination, simply lookup the {@link WorkSpaceDataRelation}  with the workspace-hook of the window set as parent. </p></li></ul> \nThere are two windows, win1 and win2.Both show workspace ws1, but both also had workspace ws2 activated at some point before.Last time ws2 was active in win1, screen-layout sl1 was activated.Last time ws2 was active in win2, screen-layout sl2 was activated.When changing from ws1 to ws2 in win1, screen-layout sl1 should be activated again.When changing from ws1 to ws2 in win2, screen-layout sl2 should be activated again. So that means we have to store the active screen-layout in a per workspace, per window relation. This struct is used to store an active screen-layout for each window within the workspace. To find the screen-layout to activate for this window-workspace combination, simply lookup the WorkSpaceDataRelation with the workspace-hook of the window set as parent. \n</p>", 
      "fields": {
        "parent": "<p> The data used to identify the relation (e.g. to find screen-layout (= value) from/for a hook). </p>", 
        "value": "<p> The value for this parent-data/workspace relation. </p>"
      }
    }, 
    "WorkSpaceInstanceHook": {
      "doc": "<p> Little wrapper to store data that is going to be per window, but coming from the workspace. It allows us to keep workspace and window data completely separate. </p>", 
      "fields": {
        "temp_workspace_store": "<p> Needed because we can't change workspaces/layouts in running handler loop, it would break context. </p>"
      }
    }, 
    "WorkSpaceLayout": {
      "doc": "<p> Wrapper for {@link bScreen} . </p><p> #bScreens are IDs and thus stored in a main list-base. We also want to store a list-base of them within the workspace (so each workspace can have its own set of screen-layouts) which would mess with the next/prev pointers. So we use this struct to wrap a {@link bScreen}  pointer with another pair of next/prev pointers. </p>", 
      "fields": {
        "name": "<p> The name of this layout, we override the RNA name of the screen with this (but not {@link ID}  name itself) MAX_NAME. </p>"
      }
    }, 
    "World": {
      "doc": "<p>{@link World}  defines general modeling data such as a background fill, gravity, color model etc. It mixes rendering data and modeling data. </p>", 
      "fields": {
        "adt": "<p> Animation data (must be immediately after id for utilities to use it). </p>", 
        "aodist": "<p> Ambient occlusion. </p>", 
        "drawdata": "<p> runtime (must be immediately after id for utilities to use it). </p>", 
        "exposure": "<p> Exposure= mult factor. unused now, but maybe back later. Kept in to be upward compat. New is exp/range control. linfac & logfac are constants... don't belong in file, but allocating 8 bytes for temp mem isn't useful either. </p>", 
        "flag": "<p> Assorted settings. </p>", 
        "gpumaterial": "<p> Runtime. </p>", 
        "ipo": "<p> Old animation system, deprecated for 2.5. \n@deprecated\n Deprecated</p>", 
        "mode": "<p> Some world modes bit 0: Do mist </p>", 
        "nodetree": "<p> nodes </p>", 
        "preview": "<p> previews </p>"
      }
    }
  }, 
  "system": "Blender", 
  "version": "2.82"
}