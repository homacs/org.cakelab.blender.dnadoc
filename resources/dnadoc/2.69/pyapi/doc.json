{
  "system": "Blender", 
  "structs": {
    "FreestyleLineSet": {
      "fields": {
        "exclude_external_contour": "Exclude external contours", 
        "face_mark_negation": "Set the negation operation for the condition on face marks", 
        "qi_start": "First QI value of the QI range", 
        "select_edge_mark": "Select edge marks", 
        "select_ridge_valley": "Select ridges and valleys", 
        "exclude_border": "Exclude border edges", 
        "select_by_face_marks": "Select feature edges by face marks", 
        "face_mark_condition": "Set a feature edge selection condition on face marks", 
        "exclude_material_boundary": "Exclude edges at material boundaries", 
        "exclude_contour": "Exclude contours", 
        "exclude_silhouette": "Exclude silhouette edges", 
        "exclude_edge_mark": "Exclude edge marks", 
        "select_material_boundary": "Select edges at material boundaries", 
        "group": "A group of objects based on which feature edges are selected", 
        "exclude_ridge_valley": "Exclude ridges and valleys", 
        "visibility": "Determine how to use visibility for feature edge selection", 
        "select_by_visibility": "Select feature edges based on visibility", 
        "edge_type_negation": "Set the negation operation for conditions on feature edge types", 
        "group_negation": "Set the negation operation for conditions on feature edge types", 
        "select_by_edge_types": "Select feature edges based on edge types", 
        "select_border": "Select border edges", 
        "select_external_contour": "Select external contours", 
        "select_silhouette": "Select silhouette edges", 
        "exclude_crease": "Exclude crease edges", 
        "select_suggestive_contour": "Select suggestive contours", 
        "linestyle": "Line style settings", 
        "exclude_suggestive_contour": "Exclude suggestive contours", 
        "qi_end": "Last QI value of the QI range", 
        "select_by_group": "Select feature edges based on a group of objects", 
        "edge_type_combination": "Set the combination operation for conditions on feature edge types", 
        "name": "Line set name", 
        "select_contour": "Select contours", 
        "select_by_image_border": "Select feature edges by image border (less memory consumption)", 
        "select_crease": "Select crease edges", 
        "show_render": "Enable or disable this line set during stroke rendering"
      }
    }, 
    "PropertyGroup": {
      "fields": {
        "name": "Unique name used in the code and scripting"
      }
    }, 
    "NodeSocketInterfaceVectorDirection": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "BoneGroups": {
      "fields": {
        "active_index": "Active index in bone groups array", 
        "active": "Active bone group for this pose"
      }
    }, 
    "Spline": {
      "fields": {
        "use_endpoint_u": "Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)", 
        "use_smooth": "Smooth the normals of the surface or beveled curve", 
        "tilt_interpolation": "The type of tilt interpolation for 3D, Bezier curves", 
        "use_cyclic_u": "Make this curve or surface a closed loop in the U direction", 
        "resolution_u": "Curve or Surface subdivisions per segment", 
        "resolution_v": "Surface subdivisions per segment", 
        "character_index": "(read-only)    Location of this character in the text data (only for text curves)", 
        "use_endpoint_v": "Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)", 
        "order_u": "NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)", 
        "point_count_u": "(read-only)    Total number points for the curve or surface in the U direction", 
        "order_v": "NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)", 
        "point_count_v": "(read-only)    Total number points for the surface on the V direction", 
        "type": "The interpolation type for this curve element", 
        "use_cyclic_v": "Make this surface a closed loop in the V direction", 
        "points": "(read-only)    Collection of points that make up this poly or nurbs spline", 
        "hide": "Hide this curve in Edit mode", 
        "use_bezier_v": "Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)", 
        "use_bezier_u": "Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)", 
        "bezier_points": "(read-only)    Collection of points for Bezier curves only", 
        "radius_interpolation": "The type of radius interpolation for Bezier curves"
      }
    }, 
    "MovieTrackingObjects": {
      "fields": {
        "active": "Active object in this tracking data object"
      }
    }, 
    "Particle": {
      "fields": {
        "hair_keys": "(read-only)", 
        "is_visible": "(read-only)", 
        "particle_keys": "(read-only)", 
        "is_exist": "(read-only)"
      }
    }, 
    "TransformOrientation": {
      "fields": {
        "name": "Name of the custom transform orientation"
      }
    }, 
    "AnimViz": {
      "fields": {
        "motion_path": "(read-only)    Motion Path settings for visualization", 
        "onion_skin_frames": "(read-only)    Onion Skinning (ghosting) settings for visualization"
      }
    }, 
    "NodeSocketVectorDirection": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "SceneRenderLayer": {
      "fields": {
        "use": "Disable or enable the render layer", 
        "exclude_reflection": "Exclude raytraced reflection pass from combined", 
        "use_pass_emit": "Deliver emission pass", 
        "use_pass_uv": "Deliver texture UV pass", 
        "use_pass_subsurface_color": "Deliver subsurface color pass", 
        "use_pass_glossy_direct": "Deliver glossy direct pass", 
        "exclude_environment": "Exclude environment pass from combined", 
        "use_pass_transmission_indirect": "Deliver transmission indirect pass", 
        "use_pass_subsurface_indirect": "Deliver subsurface indirect pass", 
        "layers": "Scene layers included in this render layer", 
        "use_solid": "Render Solid faces in this Layer", 
        "use_pass_diffuse": "Deliver diffuse pass", 
        "layers_zmask": "Zmask scene layers for solid faces", 
        "light_override": "Group to override all other lights in this render layer", 
        "use_pass_vector": "Deliver speed vector pass", 
        "use_pass_diffuse_color": "Deliver diffuse color pass", 
        "invert_zmask": "For Zmask, only render what is behind solid z values instead of in front", 
        "use_pass_material_index": "Deliver material index pass", 
        "use_pass_transmission_direct": "Deliver transmission direct pass", 
        "use_pass_diffuse_direct": "Deliver diffuse direct pass", 
        "samples": "Override number of render samples for this render layer, 0 will use the scene setting", 
        "use_pass_glossy_color": "Deliver glossy color pass", 
        "use_edge_enhance": "Render Edge-enhance in this Layer (only works for Solid faces)", 
        "use_pass_indirect": "Deliver indirect lighting pass", 
        "exclude_specular": "Exclude specular pass from combined", 
        "exclude_emit": "Exclude emission pass from combined", 
        "use_pass_shadow": "Deliver shadow pass", 
        "use_pass_mist": "Deliver mist factor pass (0.0-1.0)", 
        "name": "Render layer name", 
        "use_ztransp": "Render Z-Transparent faces in this Layer (on top of Solid and Halos)", 
        "material_override": "Material to override all other materials in this render layer", 
        "use_pass_ambient_occlusion": "Deliver AO pass", 
        "use_pass_z": "Deliver Z values pass", 
        "use_pass_environment": "Deliver environment lighting pass", 
        "use_all_z": "Fill in Z values for solid faces in invisible layers, for masking", 
        "use_pass_reflection": "Deliver raytraced reflection pass", 
        "use_pass_subsurface_direct": "Deliver subsurface direct pass", 
        "use_pass_object_index": "Deliver object index pass", 
        "exclude_indirect": "Exclude indirect pass from combined", 
        "use_pass_diffuse_indirect": "Deliver diffuse indirect pass", 
        "use_strand": "Render Strands in this Layer", 
        "use_pass_refraction": "Deliver raytraced refraction pass", 
        "use_pass_specular": "Deliver specular pass", 
        "use_pass_normal": "Deliver normal pass", 
        "use_sky": "Render Sky in this Layer", 
        "use_freestyle": "Render stylized strokes in this Layer", 
        "use_zmask": "Only render what's in front of the solid z values", 
        "freestyle_settings": "(read-only)", 
        "use_halo": "Render Halos in this Layer (on top of Solid)", 
        "exclude_refraction": "Exclude raytraced refraction pass from combined", 
        "exclude_ambient_occlusion": "Exclude AO pass from combined", 
        "use_pass_combined": "Deliver full combined RGBA buffer", 
        "exclude_shadow": "Exclude shadow pass from combined", 
        "layers_exclude": "Exclude scene layers from having any influence", 
        "use_pass_color": "Deliver shade-less color pass", 
        "use_pass_glossy_indirect": "Deliver glossy indirect pass", 
        "use_pass_transmission_color": "Deliver transmission color pass"
      }
    }, 
    "ImagePaint": {
      "fields": {
        "use_normal_falloff": "Paint most on faces pointing towards the view", 
        "seam_bleed": "Extend paint beyond the faces UVs to reduce seams (in pixels, slower)", 
        "use_clone_layer": "Use another UV map as clone source, otherwise use the 3D cursor as the source", 
        "use_backface_culling": "Ignore faces pointing away from the view (faster)", 
        "screen_grab_size": "Size to capture the image for re-projecting", 
        "invert_stencil": "Invert the stencil layer", 
        "normal_angle": "Paint most on faces pointing towards the view according to this angle", 
        "use_occlude": "Only paint onto the faces directly under the brush (slower)", 
        "use_stencil_layer": "Set the mask layer from the UV map buttons"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "NodeSocketBool": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "MovieClipSequence": {
      "fields": {
        "use_translation": "Translate image before processing", 
        "use_float": "Convert input to float data", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_reverse_frames": "Reverse frame order", 
        "undistort": "Use the undistorted version of the clip", 
        "crop": "(read-only)", 
        "stabilize2d": "Use the 2D stabilized version of the clip"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MaintainVolumeConstraint": {
      "fields": {
        "volume": "Volume of the bone at rest", 
        "free_axis": "The free scaling axis of the object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FModifierFunctionGenerator": {
      "fields": {
        "phase_multiplier": "Scale factor determining the 'speed' of the function", 
        "amplitude": "Scale factor determining the maximum/minimum values", 
        "phase_offset": "Constant factor to offset time by for function", 
        "function_type": "Type of built-in function to use", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them", 
        "value_offset": "Constant factor to offset values by"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "BevelModifier": {
      "fields": {
        "use_only_vertices": "Bevel verts/corners, not edges", 
        "vertex_group": "Vertex group name", 
        "width": "Bevel value/amount", 
        "angle_limit": "Angle above which to bevel edges", 
        "edge_weight_method": "What edge weight to use for weighting a vertex", 
        "use_clamp_overlap": "Clamp the width to avoid overlap", 
        "segments": "Number of segments for round edges/verts"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "NodeSocketInterfaceColor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "CompositorNodeLumaMatte": {
      "fields": {
        "limit_min": "Values lower than this setting are 100% keyed", 
        "limit_max": "Values higher than this setting are 100% opaque"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "GammaCrossSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Space": {
      "fields": {
        "type": "(read-only)    Space data type"
      }
    }, 
    "CompositorNodeDefocus": {
      "fields": {
        "blur_max": "Blur limit, maximum CoC radius", 
        "z_scale": "Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1", 
        "f_stop": "Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius", 
        "use_zbuffer": "Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)", 
        "angle": "Bokeh shape rotation offset", 
        "threshold": "CoC radius threshold, prevents background bleed on in-focus midground, 0=off", 
        "use_gamma_correction": "Enable gamma correction before and after main process", 
        "use_preview": "Enable low quality mode, useful for preview"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "RigidBodyJointConstraint": {
      "fields": {
        "pivot_x": "Offset pivot on X", 
        "use_angular_limit_x": "Use minimum/maximum X angular limit", 
        "pivot_z": "Offset pivot on Z", 
        "pivot_y": "Offset pivot on Y", 
        "use_linked_collision": "Disable collision between linked bodies", 
        "axis_x": "Rotate pivot on X axis", 
        "axis_y": "Rotate pivot on Y axis", 
        "show_pivot": "Display the pivot point and rotation in 3D view", 
        "use_limit_z": "Use minimum/maximum z limit", 
        "axis_z": "Rotate pivot on Z axis", 
        "use_limit_x": "Use minimum/maximum X limit", 
        "target": "Target Object", 
        "use_limit_y": "Use minimum/maximum y limit", 
        "use_angular_limit_y": "Use minimum/maximum Y angular limit", 
        "use_angular_limit_z": "Use minimum/maximum Z angular limit", 
        "child": "Child object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MeshColorLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of Vertex color layer", 
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering"
      }
    }, 
    "LaplacianSmoothModifier": {
      "fields": {
        "use_normalized": "Improve and stabilize the enhanced shape", 
        "use_volume_preserve": "Apply volume preservation after smooth", 
        "lambda_factor": "Smooth factor effect", 
        "use_z": "Smooth object along Z axis", 
        "use_x": "Smooth object along X axis", 
        "use_y": "Smooth object along Y axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "lambda_border": "Lambda factor in border"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CompositorNodeDilateErode": {
      "fields": {
        "mode": "Growing/shrinking mode", 
        "edge": "Edge to inset", 
        "falloff": "Falloff type the feather", 
        "distance": "Distance to grow/shrink (number of iterations)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "StateActuator": {
      "fields": {
        "operation": "Select the bit operation on object state mask"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "MetaElement": {
      "fields": {
        "size_z": "Size of element, use of components depends on element type", 
        "hide": "Hide element", 
        "size_y": "Size of element, use of components depends on element type", 
        "rotation": "Normalized quaternion rotation", 
        "size_x": "Size of element, use of components depends on element type", 
        "stiffness": "Stiffness defines how much of the element to fill", 
        "type": "Metaball types", 
        "use_negative": "Set metaball as negative one"
      }
    }, 
    "ShaderNodeMaterial": {
      "fields": {
        "use_diffuse": "Material Node outputs Diffuse", 
        "use_specular": "Material Node outputs Specular", 
        "invert_normal": "Material Node uses inverted normal"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "SpaceInfo": {
      "fields": {
        "show_report_warning": "Display warnings", 
        "show_report_error": "Display error text", 
        "show_report_info": "Display general information", 
        "show_report_operator": "Display the operator log", 
        "show_report_debug": "Display debug reporting info"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "ArmatureEditBones": {
      "fields": {
        "active": "Armatures active edit bone"
      }
    }, 
    "Sound": {
      "fields": {
        "use_memory_cache": "The sound file is decoded and loaded into RAM", 
        "filepath": "Sound sample file used by this Sound datablock", 
        "use_mono": "If the file contains multiple audio channels they are rendered to a single one", 
        "packed_file": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "RigidBodyWorld": {
      "fields": {
        "use_split_impulse": "Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)", 
        "effector_weights": "(read-only)", 
        "time_scale": "Change the speed of the simulation", 
        "steps_per_second": "Number of simulation steps taken per second (higher values are more accurate but slower)", 
        "point_cache": "(read-only)", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "constraints": "Group containing rigid body constraint objects", 
        "enabled": "Simulation will be evaluated", 
        "group": "Group containing objects participating in this simulation"
      }
    }, 
    "NodeOutputFileSlotLayer": {
      "fields": {
        "name": "OpenEXR layer name used for this slot"
      }
    }, 
    "CurvesModifier": {
      "fields": {
        "curve_mapping": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "DynamicPaintBrushSettings": {
      "fields": {
        "use_material": "Use object material to define color and influence", 
        "use_velocity_alpha": "Multiply brush influence by velocity color ramp alpha", 
        "use_velocity_depth": "Multiply brush intersection depth (displace, waves) by velocity ramp alpha", 
        "invert_proximity": "Proximity falloff is applied inside the volume", 
        "wave_clamp": "Maximum level of surface intersection used to influence waves (use 0.0 to disable)", 
        "ray_direction": "Ray direction to use for projection (if brush object is located in that direction it's painted)", 
        "use_proximity_ramp_alpha": "Only read color ramp alpha", 
        "paint_color": "Color of the paint", 
        "velocity_max": "Velocity considered as maximum influence (Blender units per frame)", 
        "paint_alpha": "Paint alpha", 
        "solid_radius": "Radius that will be painted solid", 
        "smudge_strength": "Smudge effect strength", 
        "paint_wetness": "Paint wetness, visible in wetmap (some effects only affect wet paint)", 
        "paint_distance": "Maximum distance from brush to mesh surface to affect paint", 
        "particle_system": "The particle system to paint with", 
        "wave_factor": "Multiplier for wave influence of this brush", 
        "use_paint_erase": "Erase / remove paint instead of adding it", 
        "use_proximity_project": "Brush is projected to canvas from defined direction within brush proximity", 
        "use_particle_radius": "Use radius from particle settings", 
        "use_velocity_color": "Replace brush color by velocity color ramp", 
        "paint_ramp": "(read-only)    Color ramp used to define proximity falloff", 
        "velocity_ramp": "(read-only)    Color ramp used to define brush velocity effect", 
        "use_absolute_alpha": "Only increase alpha value if paint alpha is higher than existing", 
        "material": "Material to use (if not defined, material linked to the mesh is used)", 
        "use_negative_volume": "Negate influence inside the volume", 
        "use_smudge": "Make this brush to smudge existing paint as it moves", 
        "proximity_falloff": "Proximity falloff type", 
        "smooth_radius": "Smooth falloff added after solid radius"
      }
    }, 
    "PythonConstraint": {
      "fields": {
        "target_count": "Usually only 1-3 are needed", 
        "use_targets": "Use the targets indicated in the constraint panel", 
        "has_script_error": "(read-only)    The linked Python script has thrown an error", 
        "text": "The text object that contains the Python script", 
        "targets": "(read-only)    Target Objects"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MaterialGameSettings": {
      "fields": {
        "physics": "Use physics properties of materials", 
        "use_backface_culling": "Hide Back of the face in Game Engine", 
        "face_orientation": "Especial face orientation options", 
        "invisible": "Make face invisible", 
        "text": "Use material as text in Game Engine", 
        "alpha_blend": "Blend Mode for Transparent Faces"
      }
    }, 
    "CompositorNodeCurveRGB": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeSwitch": {
      "fields": {
        "check": "Off: first socket, On: second socket"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "SubsurfModifier": {
      "fields": {
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "render_levels": "Number of subdivisions to perform when rendering", 
        "use_subsurf_uv": "Use subsurf to subdivide UVs", 
        "levels": "Number of subdivisions to perform"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "UserPreferencesFilePaths": {
      "fields": {
        "hide_system_bookmarks": "Hide system bookmarks in the file selector", 
        "show_thumbnails": "Open in thumbnail view for images and movies", 
        "use_relative_paths": "Default relative path option for the file selector", 
        "show_hidden_files_datablocks": "Hide files/datablocks that start with a dot (.*)", 
        "save_version": "The number of old versions to maintain in the current directory, when manually saving", 
        "script_directory": "Alternate script path, matching the default layout with subdirs: startup, addons & modules (requires restart)", 
        "use_file_compression": "Enable file compression when saving .blend files", 
        "animation_player": "Path to a custom animation/frame sequence player", 
        "recent_files": "Maximum number of recently opened files to remember", 
        "use_save_preview_images": "Enables automatic saving of preview images in the .blend file", 
        "auto_save_time": "The time (in minutes) to wait between automatic temporary saves", 
        "sound_directory": "The default directory to search for sounds", 
        "use_auto_save_temporary_files": "Automatic saving of temporary files in temp directory, uses process ID", 
        "use_keep_session": "Always load session recovery and save it after quitting Blender", 
        "hide_recent_locations": "Hide recent locations in the file selector", 
        "render_output_directory": "The default directory for rendering output, for new scenes", 
        "use_load_ui": "Load user interface setup when loading .blend files", 
        "i18n_branches_directory": "The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI", 
        "temporary_directory": "The directory for storing temporary save files", 
        "font_directory": "The default directory to search for loading fonts", 
        "image_editor": "Path to an image editor", 
        "texture_directory": "The default directory to search for textures", 
        "use_filter_files": "Display only files with extensions in the image select window", 
        "animation_player_preset": "Preset configs for external animation players"
      }
    }, 
    "MeshDeformModifier": {
      "fields": {
        "is_bound": "(read-only)    Whether geometry has been bound to control cage", 
        "precision": "The grid size for binding", 
        "vertex_group": "Vertex group name", 
        "invert_vertex_group": "Invert vertex group influence", 
        "use_dynamic_bind": "Recompute binding dynamically on top of other deformers (slower and more memory consuming)", 
        "object": "Mesh object to deform with"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MirrorModifier": {
      "fields": {
        "use_clip": "Prevent vertices from going through the mirror during transform", 
        "use_mirror_u": "Mirror the U texture coordinate around the 0.5 point", 
        "use_mirror_v": "Mirror the V texture coordinate around the 0.5 point", 
        "use_z": "Enable Z axis mirror", 
        "use_x": "Enable X axis mirror", 
        "use_mirror_vertex_groups": "Mirror vertex groups (e.g. .R->.L)", 
        "use_y": "Enable Y axis mirror", 
        "merge_threshold": "Distance from axis within which mirrored vertices are merged", 
        "mirror_object": "Object to use as mirror", 
        "use_mirror_merge": "Merge vertices within the merge threshold"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "FileSelectParams": {
      "fields": {
        "use_filter_backup": "Show .blend1, .blend2, etc. files", 
        "show_hidden": "Show hidden dot files", 
        "use_filter_text": "Show text files", 
        "use_filter_font": "Show font files", 
        "title": "(read-only)    Title for the file browser", 
        "directory": "Directory displayed in the file browser", 
        "use_filter_script": "Show script files", 
        "use_filter": "Enable filtering of files", 
        "use_filter_image": "Show image files", 
        "display_type": "Display mode for the file list", 
        "use_filter_sound": "Show sound files", 
        "filename": "Active file in the file browser", 
        "use_filter_folder": "Show folders", 
        "use_filter_blender": "Show .blend files", 
        "use_filter_movie": "Show movie files"
      }
    }, 
    "CompositorNodeRotate": {
      "fields": {
        "filter_type": "Method to use to filter rotation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeComposite": {
      "fields": {
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "UDKMeshListPG": {
      "fields": {
        "otype": "This will be ignore when exported", 
        "bexport": "This object will be export when true.", 
        "bselect": "Make sure you have Mesh is parent to Armature."
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CopyScaleConstraint": {
      "fields": {
        "use_z": "Copy the target's Z scale", 
        "use_x": "Copy the target's X scale", 
        "use_offset": "Add original scale into copied scale", 
        "use_y": "Copy the target's Y scale", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "use_uniform_scale": "Scale uniformly, preserving aspect ratio"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property", 
        "target": "Target object from which the distance is measured"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "SpaceClipEditor": {
      "fields": {
        "show_red_channel": "Show red channel in the frame", 
        "show_filters": "Show filters for graph editor", 
        "show_tiny_markers": "Show markers in a more compact manner", 
        "show_graph_tracks": "Display the speed curves (in \"x\" direction red, in \"y\" direction green) for the selected tracks", 
        "show_names": "Show track names and status", 
        "show_grid": "Show grid showing lens distortion", 
        "mode": "Editing context being displayed", 
        "view": "Type of the clip editor view", 
        "grease_pencil_source": "Where the grease pencil comes from", 
        "lock_time_cursor": "Lock curves view to time cursor during playback and tracking", 
        "show_track_path": "Show path of how track moves", 
        "show_graph_frames": "Show curve for per-frame average error (camera motion should be solved first)", 
        "show_stable": "Show stable footage in editor (if stabilization is enabled)", 
        "lock_selection": "Lock viewport to selected markers during playback", 
        "show_bundles": "Show projection of 3D markers into footage", 
        "path_length": "Length of displaying path, in frames", 
        "show_marker_pattern": "Show pattern boundbox for markers", 
        "use_grayscale_preview": "Display frame in grayscale mode", 
        "mask": "Mask displayed and edited in this space", 
        "show_disabled": "Show disabled tracks from the footage", 
        "show_marker_search": "Show search boundbox for markers", 
        "use_manual_calibration": "Use manual calibration helpers", 
        "show_green_channel": "Show green channel in the frame", 
        "show_graph_hidden": "Include channels from objects/bone that aren't visible", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "use_mute_footage": "Mute footage and show black background instead", 
        "show_blue_channel": "Show blue channel in the frame", 
        "show_graph_only_selected": "Only include channels relating to selected objects and data", 
        "mask_draw_type": "Draw type for mask splines", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "scopes": "(read-only)    Scopes to visualize movie clip statistics", 
        "clip": "Movie clip displayed and edited in this space"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "MeshStatVis": {
      "fields": {
        "overhang_min": "Minimum angle to display", 
        "overhang_max": "Maximum angle to display", 
        "thickness_max": "Maximum for measuring thickness", 
        "distort_max": "Maximum angle to display", 
        "distort_min": "Minimum angle to display", 
        "sharp_min": "Minimum angle to display", 
        "thickness_min": "Minimum for measuring thickness", 
        "thickness_samples": "Number of samples to test per face", 
        "sharp_max": "Maximum angle to display", 
        "type": "XXX"
      }
    }, 
    "CompositorNodeColorCorrection": {
      "fields": {
        "midtones_start": "Start of midtones", 
        "midtones_gamma": "Midtones gamma", 
        "master_lift": "Master lift", 
        "highlights_contrast": "Highlights contrast", 
        "highlights_saturation": "Highlights saturation", 
        "red": "Red channel active", 
        "highlights_lift": "Highlights lift", 
        "master_gamma": "Master gamma", 
        "master_saturation": "Master saturation", 
        "midtones_end": "End of midtones", 
        "midtones_contrast": "Midtones contrast", 
        "highlights_gamma": "Highlights gamma", 
        "midtones_lift": "Midtones lift", 
        "shadows_lift": "Shadows lift", 
        "shadows_contrast": "Shadows contrast", 
        "shadows_gamma": "Shadows gamma", 
        "green": "Green channel active", 
        "master_contrast": "Master contrast", 
        "highlights_gain": "Highlights gain", 
        "midtones_gain": "Midtones gain", 
        "blue": "Blue channel active", 
        "shadows_saturation": "Shadows saturation", 
        "midtones_saturation": "Midtones saturation", 
        "shadows_gain": "Shadows gain", 
        "master_gain": "Master gain"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ParentActuator": {
      "fields": {
        "use_compound": "Add this object shape to the parent shape (only if the parent shape is already compound)", 
        "use_ghost": "Make this object ghost while parented", 
        "object": "Set this object as parent"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "MovieReconstructedCamera": {
      "fields": {
        "average_error": "(read-only)    Average error of reconstruction", 
        "matrix": "(read-only)    Worldspace transformation matrix", 
        "frame": "(read-only)    Frame number marker is keyframed on"
      }
    }, 
    "CyclesCurveSettings": {
      "fields": {
        "tip_width": "Strand's width at tip", 
        "shape": "Strand shape parameter", 
        "use_closetip": "Set tip radius to zero", 
        "radius_scale": "Multiplier of width properties", 
        "root_width": "Strand's width at root"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OperatorFileListElement": {
      "fields": {
        "name": "Name of a file or directory within a file list"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "WarpModifier": {
      "fields": {
        "use_volume_preserve": "Preserve volume when rotations are used", 
        "object_from": "Object to transform from", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "uv_layer": "UV map name", 
        "vertex_group": "Vertex group name for modulating the deform", 
        "object_to": "Object to transform to", 
        "falloff_radius": "Radius to apply"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CompositorNodeDistanceMatte": {
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "NlaTracks": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "SoundSequence": {
      "fields": {
        "volume": "Playback volume of the sound", 
        "show_waveform": "Whether to draw the sound's waveform", 
        "sound": "(read-only)    Sound datablock used by this sequence", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "pitch": "Playback pitch of the sound", 
        "pan": "Playback panning of the sound (only for Mono sources)", 
        "animation_offset_end": "Animation end offset (trim end)"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "RadarSensor": {
      "fields": {
        "distance": "Depth of the radar cone", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "angle": "Opening angle of the radar cone (in degrees)", 
        "axis": "Along which axis the radar cone is cast"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "ShaderNodeTexBrick": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "VertexColors": {
      "fields": {
        "active_index": "Active vertex color index", 
        "active": "(read-only)    Active vertex color layer"
      }
    }, 
    "FluidSimulationModifier": {
      "fields": {
        "settings": "(read-only)    Settings for how this object is used in the fluid simulation"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SceneGameRecastData": {
      "fields": {
        "sample_dist": "Detail mesh sample spacing", 
        "region_min_size": "Minimum regions size (smaller regions will be deleted)", 
        "sample_max_error": "Detail mesh simplification max sample error", 
        "agent_height": "Minimum height where the agent can still walk", 
        "edge_max_len": "Maximum contour edge length", 
        "climb_max": "Maximum height between grid cells the agent can climb", 
        "edge_max_error": "Maximum distance error from contour to cells", 
        "cell_size": "Rasterized cell size", 
        "cell_height": "Rasterized cell height", 
        "agent_radius": "Radius of the agent", 
        "verts_per_poly": "Max number of vertices per polygon", 
        "region_merge_size": "Minimum regions size (smaller regions will be merged)", 
        "slope_max": "Maximum walkable slope angle"
      }
    }, 
    "CurveMap": {
      "fields": {
        "extend": "Extrapolate the curve or extend it horizontally", 
        "points": "(read-only)"
      }
    }, 
    "MaterialSlot": {
      "fields": {
        "material": "Material datablock used by this material slot", 
        "link": "Link material to object or the object's data", 
        "name": "(read-only)    Material slot name"
      }
    }, 
    "NodeSocketFloatPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeTreePath": {
      "fields": {
        "node_tree": "(read-only)    Base node tree from context"
      }
    }, 
    "GreasePencilLayers": {
      "fields": {
        "active": "Active grease pencil layer"
      }
    }, 
    "KeyMapItem": {
      "fields": {
        "ctrl": "Control key pressed", 
        "idname": "Identifier of operator to call on input event", 
        "shift": "Shift key pressed", 
        "alt": "Alt key pressed", 
        "active": "Activate or deactivate item", 
        "oskey": "Operating system key pressed", 
        "is_user_defined": "(read-only)    Is this keymap item user defined (doesn't just replace a builtin item)", 
        "type": "Type of event", 
        "any": "Any modifier keys pressed", 
        "is_user_modified": "(read-only)    Is this keymap item modified by the user", 
        "key_modifier": "Regular key pressed as a modifier", 
        "map_type": "Type of event mapping", 
        "name": "(read-only)    Name of operator (translated) to call on input event", 
        "id": "(read-only)    ID of the item", 
        "propvalue": "The value this event translates to in a modal keymap", 
        "properties": "(read-only)    Properties to set when the operator is called", 
        "show_expanded": "Show key map event and property details in the user interface"
      }
    }, 
    "ClothModifier": {
      "fields": {
        "settings": "(read-only)", 
        "point_cache": "(read-only)", 
        "collision_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshUVLoopLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of UV map"
      }
    }, 
    "ParticleSystemModifier": {
      "fields": {
        "particle_system": "(read-only)    Particle System that this modifier controls"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Speaker": {
      "fields": {
        "attenuation": "How strong the distance affects volume, depending on distance model", 
        "volume_max": "Maximum volume, no matter how near the object is", 
        "distance_max": "Maximum distance for volume calculation, no matter how far away the object is", 
        "sound": "Sound datablock used by this speaker", 
        "cone_angle_outer": "Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated", 
        "cone_angle_inner": "Angle of the inner cone, in degrees, inside the cone the volume is 100 %", 
        "volume": "How loud the sound is", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "volume_min": "Minimum volume, no matter how far away the object is", 
        "cone_volume_outer": "Volume outside the outer cone", 
        "distance_reference": "Reference distance at which volume is 100 %", 
        "pitch": "Playback pitch of the sound", 
        "muted": "Mute the speaker"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "UIPopupMenu": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "FModifierGenerator": {
      "fields": {
        "mode": "Type of generator to use", 
        "poly_order": "The highest power of 'x' for this polynomial (number of coefficients - 1)", 
        "coefficients": "Coefficients for 'x' (starting from lowest power of x^0)", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "ShaderNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "WoodTexture": {
      "fields": {
        "noise_basis": "Noise basis used for turbulence", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "UIList": {
      "fields": {
        "bitflag_filter_item": "(read-only)    The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)", 
        "use_filter_sort_alpha": "Sort items by their name", 
        "filter_name": "Only show items matching this name (use '*' as wildcard)", 
        "use_filter_invert": "Invert filtering (show hidden items, and vice-versa)", 
        "use_filter_show": "Show filtering options", 
        "bl_idname": "If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is \"OBJECT_UL_vgroups\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_UL_vgroups\")", 
        "layout_type": "(read-only)", 
        "use_filter_sort_reverse": "Invert the order of shown items"
      }
    }, 
    "ShaderNodeSubsurfaceScattering": {
      "fields": {
        "falloff": "Function to determine how much light nearby points contribute based on their distance to the shading point"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "RenderLayer": {
      "fields": {
        "use": "(read-only)    Disable or enable the render layer", 
        "exclude_reflection": "(read-only)    Exclude raytraced reflection pass from combined", 
        "use_pass_emit": "(read-only)    Deliver emission pass", 
        "use_pass_uv": "(read-only)    Deliver texture UV pass", 
        "use_pass_subsurface_color": "(read-only)    Deliver subsurface color pass", 
        "use_pass_glossy_direct": "(read-only)    Deliver glossy direct pass", 
        "exclude_environment": "(read-only)    Exclude environment pass from combined", 
        "use_pass_transmission_indirect": "(read-only)    Deliver transmission indirect pass", 
        "use_pass_subsurface_indirect": "(read-only)    Deliver subsurface indirect pass", 
        "layers": "(read-only)    Scene layers included in this render layer", 
        "use_solid": "(read-only)    Render Solid faces in this Layer", 
        "use_pass_diffuse": "(read-only)    Deliver diffuse pass", 
        "layers_zmask": "(read-only)    Zmask scene layers for solid faces", 
        "light_override": "(read-only)    Group to override all other lights in this render layer", 
        "use_pass_vector": "(read-only)    Deliver speed vector pass", 
        "use_pass_diffuse_color": "(read-only)    Deliver diffuse color pass", 
        "invert_zmask": "(read-only)    For Zmask, only render what is behind solid z values instead of in front", 
        "use_pass_material_index": "(read-only)    Deliver material index pass", 
        "use_pass_transmission_direct": "(read-only)    Deliver transmission direct pass", 
        "use_pass_diffuse_direct": "(read-only)    Deliver diffuse direct pass", 
        "use_pass_glossy_color": "(read-only)    Deliver glossy color pass", 
        "use_edge_enhance": "(read-only)    Render Edge-enhance in this Layer (only works for Solid faces)", 
        "use_pass_indirect": "(read-only)    Deliver indirect lighting pass", 
        "exclude_specular": "(read-only)    Exclude specular pass from combined", 
        "exclude_emit": "(read-only)    Exclude emission pass from combined", 
        "use_pass_shadow": "(read-only)    Deliver shadow pass", 
        "use_pass_mist": "(read-only)    Deliver mist factor pass (0.0-1.0)", 
        "name": "(read-only)    Render layer name", 
        "use_ztransp": "(read-only)    Render Z-Transparent faces in this Layer (on top of Solid and Halos)", 
        "material_override": "(read-only)    Material to override all other materials in this render layer", 
        "use_pass_ambient_occlusion": "(read-only)    Deliver AO pass", 
        "use_pass_z": "(read-only)    Deliver Z values pass", 
        "use_pass_environment": "(read-only)    Deliver environment lighting pass", 
        "use_all_z": "(read-only)    Fill in Z values for solid faces in invisible layers, for masking", 
        "use_pass_reflection": "(read-only)    Deliver raytraced reflection pass", 
        "use_pass_subsurface_direct": "(read-only)    Deliver subsurface direct pass", 
        "use_pass_object_index": "(read-only)    Deliver object index pass", 
        "exclude_indirect": "(read-only)    Exclude indirect pass from combined", 
        "use_pass_diffuse_indirect": "(read-only)    Deliver diffuse indirect pass", 
        "passes": "(read-only)", 
        "use_strand": "(read-only)    Render Strands in this Layer", 
        "use_pass_refraction": "(read-only)    Deliver raytraced refraction pass", 
        "use_pass_specular": "(read-only)    Deliver specular pass", 
        "use_pass_normal": "(read-only)    Deliver normal pass", 
        "use_sky": "(read-only)    Render Sky in this Layer", 
        "use_freestyle": "(read-only)    Render stylized strokes in this Layer", 
        "use_zmask": "(read-only)    Only render what's in front of the solid z values", 
        "use_halo": "(read-only)    Render Halos in this Layer (on top of Solid)", 
        "exclude_refraction": "(read-only)    Exclude raytraced refraction pass from combined", 
        "exclude_ambient_occlusion": "(read-only)    Exclude AO pass from combined", 
        "use_pass_combined": "(read-only)    Deliver full combined RGBA buffer", 
        "exclude_shadow": "(read-only)    Exclude shadow pass from combined", 
        "layers_exclude": "(read-only)    Exclude scene layers from having any influence", 
        "use_pass_color": "(read-only)    Deliver shade-less color pass", 
        "use_pass_glossy_indirect": "(read-only)    Deliver glossy indirect pass", 
        "use_pass_transmission_color": "(read-only)    Deliver transmission color pass"
      }
    }, 
    "MovieTracking": {
      "fields": {
        "settings": "(read-only)", 
        "stabilization": "(read-only)", 
        "objects": "(read-only)    Collection of objects in this tracking data object", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "active_object_index": "Index of active object", 
        "dopesheet": "(read-only)", 
        "reconstruction": "(read-only)", 
        "camera": "(read-only)", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object"
      }
    }, 
    "ClothCollisionSettings": {
      "fields": {
        "vertex_group_self_collisions": "Vertex group to define vertices which are not used during self collisions", 
        "use_collision": "Enable collisions with other objects", 
        "distance_min": "Minimum distance between collision objects before collision response takes in", 
        "repel_force": "Repulsion force to apply on cloth when close to colliding", 
        "self_friction": "Friction/damping with self contact", 
        "collision_quality": "How many collision iterations should be done. (higher is better quality but slower)", 
        "use_self_collision": "Enable self collisions", 
        "distance_repel": "Maximum distance to apply repulsion force, must be greater than minimum distance", 
        "self_distance_min": "0.5 means no distance at all, 1.0 is maximum distance", 
        "self_collision_quality": "How many self collision iterations should be done (higher is better quality but slower)", 
        "friction": "Friction force if a collision happened (higher = less movement)", 
        "group": "Limit colliders to this Group"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "default_frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "distance": "Distance between two bundles used for scene scaling", 
        "object_distance": "Distance between two bundles used for object scaling", 
        "speed": "Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)", 
        "use_default_normalization": "Normalize light intensities while tracking (slower)", 
        "use_tripod_solver": "Use special solver to track a stable camera position, such as a tripod", 
        "default_motion_model": "Default motion model to use for tracking", 
        "default_margin": "Default distance from image boundary at which marker stops tracking", 
        "clean_frames": "Effect on tracks which are tracked less than the specified amount of frames", 
        "use_fallback_reconstruction": "Use fallback reconstruction algorithm in cases main reconstruction algorithm failed (could give better solution with bad tracks)", 
        "clean_action": "Cleanup action to execute", 
        "reconstruction_success_threshold": "Threshold value of reconstruction error which is still considered successful", 
        "clean_error": "Effect on tracks which have a larger re-projection error", 
        "use_default_red_channel": "Use red channel from footage for tracking", 
        "use_default_blue_channel": "Use blue channel from footage for tracking", 
        "default_pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "use_default_brute": "Use a brute-force translation-only initialization when tracking", 
        "default_correlation_min": "Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "default_search_size": "Size of search area for newly created tracks", 
        "use_keyframe_selection": "Automatically select keyframes when solving camera/object motion", 
        "use_default_mask": "Use a grease pencil datablock as a mask to use only specified areas of pattern when tracking", 
        "use_default_green_channel": "Use green channel from footage for tracking", 
        "show_default_expanded": "Show the expanded in the user interface", 
        "default_pattern_size": "Size of pattern area for newly created tracks", 
        "refine_intrinsics": "Refine intrinsics during camera solving"
      }
    }, 
    "NodeInternalSocketTemplate": {
      "fields": {
        "identifier": "(read-only)    Identifier of the socket", 
        "name": "(read-only)    Name of the socket", 
        "type": "(read-only)    Data type of the socket"
      }
    }, 
    "BrushTextureSlot": {
      "fields": {
        "angle": "Brush texture rotation"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "UILayout": {
      "fields": {
        "scale_y": "Scale factor along the Y for items in this (sub)layout", 
        "scale_x": "Scale factor along the X for items in this (sub)layout", 
        "enabled": "When false, this (sub)layout is grayed out"
      }
    }, 
    "ColorRamp": {
      "fields": {
        "elements": "(read-only)"
      }
    }, 
    "MaskSplines": {
      "fields": {
        "active_point": "Active spline of masking layer", 
        "active": "Active spline of masking layer"
      }
    }, 
    "ShapeKey": {
      "fields": {
        "interpolation": "Interpolation type for absolute shape keys", 
        "relative_key": "Shape used as a relative key", 
        "data": "(read-only)", 
        "slider_max": "Maximum for slider", 
        "slider_min": "Minimum for slider", 
        "vertex_group": "Vertex weight group, to blend with basis shape", 
        "name": "Name of Shape Key", 
        "mute": "Mute this shape key", 
        "value": "Value of shape key at the current frame", 
        "frame": "(read-only)    Frame for absolute keys"
      }
    }, 
    "ColorBalanceModifier": {
      "fields": {
        "color_balance": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "HueCorrectModifier": {
      "fields": {
        "curve_mapping": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "NodeSocketInterfaceIntPercentage": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSetting": {
      "fields": {
        "value": "Python expression to be evaluated as the initial node setting"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CompositorNodeImage": {
      "fields": {
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "use_straight_alpha_output": "Put Node output buffer to straight alpha instead of premultiplied", 
        "frame_duration": "Number of images of a movie to use", 
        "use_cyclic": "Cycle the images in the movie", 
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ShaderNodeBump": {
      "fields": {
        "invert": "Invert the bump mapping direction to push into the surface instead of out"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "OperatorStrokeElement": {
      "fields": {
        "pressure": "Tablet pressure"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "MultiplySequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "CompositorNodeAlphaOver": {
      "fields": {
        "premul": "Mix Factor"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "TextureNodeBricks": {
      "fields": {
        "offset_frequency": "Offset every N rows", 
        "squash_frequency": "Squash every N rows"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "WorldStarsSettings": {
      "fields": {
        "color_random": "Randomize star colors", 
        "use_stars": "Enable starfield generation", 
        "size": "Average screen dimension of stars", 
        "average_separation": "Average distance between any two stars", 
        "distance_min": "Minimum distance to the camera for stars"
      }
    }, 
    "BlendDataWorlds": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "NodeSocketInterfaceStandard": {
      "fields": {
        "type": "(read-only)    Data type"
      }, 
      "inherits": [
        "NodeSocketInterface"
      ]
    }, 
    "ShaderNodeTexSky": {
      "fields": {
        "ground_albedo": "Ground color that is subtly reflected in the sky", 
        "turbidity": "Atmospheric turbidity", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings", 
        "sun_direction": "Direction from where the sun is shining"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexMagic": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "turbulence_depth": "Level of detail in the added turbulent noise", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "count": "The number of times this object is repeated with respect to other objects", 
        "name": "(read-only)    Particle dupliobject name"
      }
    }, 
    "CompositorNodeKeying": {
      "fields": {
        "despill_balance": "Balance between non-key colors used to detect amount of key color to be removed", 
        "despill_factor": "Factor of despilling screen color from image", 
        "blur_pre": "Chroma pre-blur size which applies before running keyer", 
        "screen_balance": "Balance between two non-primary channels primary channel is comparing against", 
        "edge_kernel_radius": "Radius of kernel used to detect whether pixel belongs to edge", 
        "edge_kernel_tolerance": "Tolerance to pixels inside kernel which are treating as belonging to the same plane", 
        "feather_distance": "Distance to grow/shrink the feather", 
        "blur_post": "Matte blur size which applies after clipping and dilate/eroding", 
        "feather_falloff": "Falloff type the feather", 
        "dilate_distance": "Matte dilate/erode side", 
        "clip_black": "Value of non-scaled matte pixel which considers as fully background pixel", 
        "clip_white": "Value of non-scaled matte pixel which considers as fully foreground pixel"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "DampedTrackConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object", 
        "track_axis": "Axis that points to the target object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ThemeView3D": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "Keyframe": {
      "fields": {
        "handle_right": "Coordinates of the right handle (after the control point)", 
        "interpolation": "Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe", 
        "handle_right_type": "Handle types", 
        "select_left_handle": "Left handle selection status", 
        "handle_left_type": "Handle types", 
        "select_right_handle": "Right handle selection status", 
        "co": "Coordinates of the control point", 
        "type": "Type of keyframe (for visual purposes only)", 
        "handle_left": "Coordinates of the left handle (before the control point)", 
        "select_control_point": "Control point selection status"
      }
    }, 
    "ParticleKey": {
      "fields": {
        "rotation": "Key rotation quaternion", 
        "location": "Key location", 
        "time": "Time of key over the simulation", 
        "velocity": "Key velocity", 
        "angular_velocity": "Key angular velocity"
      }
    }, 
    "NodeSocketVectorTranslation": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "Pose": {
      "fields": {
        "bones": "(read-only)    Individual pose bones for the armature", 
        "ik_param": "(read-only)    Parameters for IK solver", 
        "ik_solver": "Selection of IK solver for IK chain", 
        "animation_visualization": "(read-only)    Animation data for this datablock", 
        "bone_groups": "(read-only)    Groups of the bones"
      }
    }, 
    "CrossSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "PythonController": {
      "fields": {
        "mode": "Python script type (textblock or module - faster)", 
        "module": "Module name and function to run, e.g. \"someModule.main\" (internal texts and external python files can be used)", 
        "text": "Text datablock with the python script", 
        "use_debug": "Continuously reload the module from disk for editing external modules without restarting"
      }, 
      "inherits": [
        "Controller"
      ]
    }, 
    "SpaceUVEditor": {
      "fields": {
        "edge_draw_type": "Draw type for drawing UV edges", 
        "use_snap_to_pixels": "Snap UVs to pixel locations while editing", 
        "show_stretch": "Draw faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)", 
        "sticky_select_mode": "Automatically select also UVs sharing the same vertex as the ones being selected", 
        "show_modified_edges": "Draw edges after modifiers are applied", 
        "show_normalized_coords": "Display UV coordinates from 0.0 to 1.0 rather than in pixels", 
        "show_other_objects": "Draw other selected objects that share the same image", 
        "draw_stretch_type": "Type of stretch to draw", 
        "show_faces": "Draw faces over the image", 
        "use_live_unwrap": "Continuously unwrap the selected UV island while transforming pinned vertices", 
        "lock_bounds": "Constraint to stay within the image bounds while editing", 
        "show_smooth_edges": "Draw UV edges anti-aliased"
      }
    }, 
    "Camera": {
      "fields": {
        "angle_y": "Camera lens vertical field of view", 
        "angle_x": "Camera lens horizontal field of view", 
        "sensor_height": "Vertical size of the image sensor area in millimeters", 
        "sensor_fit": "Method to fit image and field of view angle inside the sensor", 
        "dof_object": "Use this object to define the depth of field focal point", 
        "show_name": "Show the active Camera's name in Camera view", 
        "cycles": "(read-only)    Cycles camera settings", 
        "show_guide": "Draw overlay", 
        "lens": "Perspective Camera lens value in millimeters", 
        "type": "Camera types", 
        "ortho_scale": "Orthographic Camera scale (similar to zoom)", 
        "show_passepartout": "Show a darkened overlay outside the image area in Camera view", 
        "clip_end": "Camera far clipping distance", 
        "sensor_width": "Horizontal size of the image sensor area in millimeters", 
        "angle": "Camera lens field of view", 
        "dof_distance": "Distance to the focus point for depth of field", 
        "shift_y": "Perspective Camera vertical shift", 
        "draw_size": "Apparent size of the Camera object in the 3D View", 
        "show_sensor": "Show sensor size (film gate) in Camera view", 
        "shift_x": "Perspective Camera horizontal shift", 
        "show_title_safe": "Show TV title safe and action safe zones in Camera view", 
        "clip_start": "Camera near clipping distance", 
        "passepartout_alpha": "Opacity (alpha) of the darkened overlay in Camera view", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "lens_unit": "Unit to edit lens in for the user interface", 
        "show_mist": "Draw a line from the Camera to indicate the mist area", 
        "show_limits": "Draw the clipping range and focus point on the camera"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CollisionSettings": {
      "fields": {
        "damping_factor": "Amount of damping during particle collision", 
        "absorption": "How much of effector force gets lost during collision with this object (in percent)", 
        "friction_factor": "Amount of friction during particle collision", 
        "stickiness": "Amount of stickiness to surface collision", 
        "use": "Enable this objects as a collider for physics systems", 
        "permeability": "Chance that the particle will pass through the mesh", 
        "friction_random": "Random variation of friction", 
        "use_particle_kill": "Kill collided particles", 
        "damping": "Amount of damping during collision", 
        "damping_random": "Random variation of damping", 
        "thickness_inner": "Inner face thickness", 
        "thickness_outer": "Outer face thickness"
      }
    }, 
    "NlaStrip": {
      "fields": {
        "use_auto_blend": "Number of frames for Blending In/Out is automatically determined from overlapping strips", 
        "select": "NLA Strip is selected", 
        "use_sync_length": "Update range of frames referenced from action after tweaking strip and its keyframes", 
        "use_animated_time": "Strip time is controlled by an F-Curve rather than automatically determined", 
        "active": "(read-only)    NLA Strip is active", 
        "scale": "Scaling factor for action", 
        "mute": "NLA Strip is not evaluated", 
        "action_frame_end": "Last frame from action to use", 
        "use_reverse": "NLA Strip is played back in reverse order (only when timing is automatically determined)", 
        "modifiers": "(read-only)    Modifiers affecting all the F-Curves in the referenced Action", 
        "type": "(read-only)    Type of NLA Strip", 
        "use_animated_influence": "Influence setting is controlled by an F-Curve rather than automatically determined", 
        "strips": "(read-only)    NLA Strips that this strip acts as a container for (if it is of type Meta)", 
        "influence": "Amount the strip contributes to the current result", 
        "strip_time": "Frame of referenced Action to evaluate", 
        "extrapolation": "Action to take for gaps past the strip extents", 
        "use_animated_time_cyclic": "Cycle the animated time within the action start & end", 
        "action_frame_start": "First frame from action to use", 
        "repeat": "Number of times to repeat the action range", 
        "action": "Action referenced by this strip", 
        "blend_in": "Number of frames at start of strip to fade in influence", 
        "fcurves": "(read-only)    F-Curves for controlling the strip's influence and timing", 
        "blend_type": "Method used for combining strip's result with accumulated result"
      }
    }, 
    "NodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "CompositorNodeTime": {
      "fields": {
        "curve": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "AreaLamp": {
      "fields": {
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "use_umbra": "Emphasize parts that are fully shadowed (Constant Jittered sampling)", 
        "size_y": "Size of the area of the area Lamp in the Y direction for Rectangle shapes", 
        "use_jitter": "Use noise for sampling  (Constant Jittered sampling)", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shape": "Shape of the area lamp", 
        "use_dither": "Use 2x2 dithering for sampling  (Constant Jittered sampling)", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "size": "Size of the area of the area Lamp, X direction size for Rectangle shapes", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "gamma": "Light gamma correction value", 
        "shadow_ray_samples_y": "Number of samples taken extra (samples x samples)", 
        "shadow_ray_samples_x": "Number of samples taken extra (samples x samples)"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "AdjustmentSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "animation_offset_end": "Animation end offset (trim end)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Linesets": {
      "fields": {
        "active_index": "Index of active line set slot", 
        "active": "(read-only)    Active line set being displayed"
      }
    }, 
    "CompositorNodeTranslate": {
      "fields": {
        "use_relative": "Use relative (percent) values to define blur radius", 
        "wrap_axis": "Wrap image on a specific axis"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "FModifierLimits": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "use_min_x": "Use the minimum X value", 
        "max_y": "Highest Y value to allow", 
        "use_min_y": "Use the minimum Y value", 
        "use_max_x": "Use the maximum X value", 
        "min_x": "Lowest X value to allow", 
        "use_max_y": "Use the maximum Y value", 
        "min_y": "Lowest Y value to allow"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "NodeSocketColor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "AnimVizOnionSkinning": {
      "fields": {
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_step": "Number of frames between ghosts shown (not for 'On Keyframes' Onion-skinning method)", 
        "show_only_selected": "For Pose-Mode drawing, only draw ghosts for selected bones", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_end": "End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "type": "Method used for determining what ghosts get drawn", 
        "frame_start": "Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)"
      }
    }, 
    "Paint": {
      "fields": {
        "brush": "Active Brush", 
        "show_low_resolution": "For multires, show low resolution while navigating the view", 
        "input_samples": "Average multiple input samples together to smooth the brush stroke"
      }
    }, 
    "Scene": {
      "fields": {
        "frame_step": "Number of frames to skip forward while rendering/playing back each frame", 
        "sequence_editor": "(read-only)", 
        "udk_option_ignoreactiongroupnames": "This will Ignore Action Set Group Names Check With Armature Bones. It will override armature to set action set.", 
        "objects": "(read-only)", 
        "use_audio_scrub": "Play audio from Sequence Editor while scrubbing", 
        "keying_sets": "(read-only)    Absolute Keying Sets for this Scene", 
        "orientations": "(read-only)", 
        "cycles": "(read-only)    Cycles render settings", 
        "frame_end": "Final frame of the playback/rendering range", 
        "frame_subframe": "(read-only)", 
        "udk_option_filename_src": "Sets the name for the files", 
        "udkArm_list": "(read-only)", 
        "cursor_location": "3D cursor location", 
        "frame_start": "First frame of the playback/rendering range", 
        "udk_copy_merge": "This will copy the mesh(s) and merge the object together and unlink the mesh to be remove while exporting the object.", 
        "frame_preview_start": "Alternative start frame for UI playback", 
        "udk_option_triangulate": "Convert Quads to Triangles", 
        "udk_option_export": "What to export", 
        "game_settings": "(read-only)", 
        "layers": "Visible layers - Shift-Click to select multiple layers", 
        "tool_settings": "(read-only)", 
        "udk_option_rebuildobjects": "In case of deform skeleton mesh and animations data. This will rebuild objects from raw format on export when checked.", 
        "udk_option_selectanimations": "Select animation(s) for export to psa file.", 
        "use_audio_sync": "Play back and sync with audio clock, dropping frames if frame display is too slow", 
        "udkas_list": "(read-only)", 
        "audio_distance_model": "Distance model for distance attenuation calculation", 
        "udk_option_smoothing_groups": "Activate hard edges as smooth groups", 
        "is_nla_tweakmode": "(read-only)    Whether there is any action referenced by NLA being edited (strictly read-only)", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "rigidbody_world": "(read-only)", 
        "active_clip": "Active movie clip used for constraints and viewport drawing", 
        "cycles_curves": "(read-only)    Cycles hair rendering settings", 
        "audio_doppler_speed": "Speed of sound for Doppler effect calculation", 
        "udk_option_export_psa": "Boolean for exporting psa format (Animation Data)", 
        "active_layer": "(read-only)    Active scene layer index", 
        "sync_mode": "How to sync playback", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "use_stamp_note": "User defined note for the render stamping", 
        "use_frame_drop": "Play back dropping frames if frame display is too slow", 
        "frame_current_final": "(read-only)    Current frame with subframe and time remapping applied", 
        "udkobj_list": "(read-only)", 
        "use_preview_range": "Use an alternative start/end frame for UI playback, rather than the scene start/end frame", 
        "audio_doppler_factor": "Pitch factor for Doppler effect calculation", 
        "background_set": "Background set scene", 
        "unit_settings": "(read-only)    Unit editing settings", 
        "object_bases": "(read-only)", 
        "udk_option_export_psk": "Boolean for exporting psk format (Skeleton Mesh)", 
        "world": "World used for rendering the scene", 
        "sequencer_colorspace_settings": "(read-only)    Settings of color space sequencer is working in", 
        "use_nodes": "Enable the compositing node tree", 
        "camera": "Active camera, used for rendering the scene", 
        "udk_option_clamp_uv": "True is to limit Clamp UV co-ordinates to [0-1]. False is unrestricted (x,y).", 
        "render": "(read-only)", 
        "use_gravity": "Use global gravity for all dynamics", 
        "frame_current": "Current Frame, to update animation data from python frame_set() instead", 
        "timeline_markers": "(read-only)    Markers used in all timelines for the current scene", 
        "keying_sets_all": "(read-only)    All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)", 
        "udk_option_verbose": "Verbose console output", 
        "udk_option_scale": "In case you don't want to scale objects manually. This will just scale position when on export for the skeleton mesh and animation data.", 
        "udkmesh_list": "(read-only)", 
        "frame_preview_end": "Alternative end frame for UI playback", 
        "use_audio": "Play back of audio from Sequence Editor will be muted", 
        "grease_pencil": "Grease Pencil datablock", 
        "gravity": "Constant acceleration in a given direction", 
        "audio_volume": "Audio volume", 
        "node_tree": "(read-only)    Compositing node tree", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "udk_option_selectobjects": "Select Armature and Mesh(s). Just make sure mesh(s) is parent to armature."
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "orientation": "Angle of the main direction", 
        "thickness_max": "Maximum thickness in the main direction", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "thickness_min": "Minimum thickness in the direction perpendicular to the main direction", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleAlphaModifier_AlongStroke": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "NodeSocketInterface": {
      "fields": {
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "in_out": "(read-only)    Input or Output type", 
        "name": "Socket name"
      }
    }, 
    "ShaderNodeTexWave": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ObjectBase": {
      "fields": {
        "select": "Object base selection state", 
        "layers": "Layers the object base is on", 
        "layers_local_view": "(read-only)    3D local view layers the object base is on", 
        "object": "(read-only)    Object this base links to"
      }
    }, 
    "Area": {
      "fields": {
        "regions": "(read-only)    Regions this area is subdivided in", 
        "spaces": "(read-only)    Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)", 
        "width": "(read-only)    Area width", 
        "x": "(read-only)    The window relative vertical location of the area", 
        "y": "(read-only)    The window relative horizontal location of the area", 
        "show_menus": "Show menus in the header", 
        "type": "Current editor type for this area", 
        "height": "(read-only)    Area height"
      }
    }, 
    "EdgeSplitModifier": {
      "fields": {
        "use_edge_sharp": "Split edges that are marked as sharp", 
        "use_edge_angle": "Split edges with high angle between faces", 
        "split_angle": "Angle above which to split edges"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MovieClip": {
      "fields": {
        "use_proxy_custom_directory": "Create proxy images in a custom directory (default is movie location)", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "display_aspect": "Display Aspect for this clip, does not affect rendering", 
        "use_proxy": "Use a preview proxy and/or timecode index for this clip", 
        "source": "(read-only)    Where the clip comes from", 
        "frame_duration": "(read-only)    Detected duration of movie clip in frames", 
        "tracking": "(read-only)", 
        "frame_start": "Global scene frame number at which this movie starts playing (affects all data associated with a clip)", 
        "frame_offset": "Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)", 
        "proxy": "(read-only)", 
        "filepath": "Filename of the movie or sequence file", 
        "grease_pencil": "Grease pencil data for this movie clip", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SpaceUserPreferences": {
      "fields": {
        "filter_text": "Search term for filtering in the UI", 
        "filter_type": "Filter method"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "MovieSequence": {
      "fields": {
        "stream_index": "For files with several movie streams, use the stream with the given index", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "use_translation": "Translate image before processing", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "mpeg_preseek": "For MPEG movies, preseek this many frames", 
        "use_float": "Convert input to float data", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "proxy": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "elements": "(read-only)", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "BlendDataSounds": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "SpotLamp": {
      "fields": {
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "spot_blend": "The softness of the spotlight edge", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "use_square": "Cast a square spot light shape", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "show_cone": "Draw transparent cone in 3D view to visualize which objects are contained in it", 
        "falloff_type": "Intensity Decay with distance", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "use_sphere": "Set light intensity to zero beyond lamp distance", 
        "spot_size": "Angle of the spotlight beam", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "halo_intensity": "Brightness of the spotlight's halo cone", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "use_halo": "Render spotlight with a volumetric halo", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "halo_step": "Volumetric halo sampling frequency", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "linear_attenuation": "Linear distance attenuation"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "NodeSocketString": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "BoidRuleAverageSpeed": {
      "fields": {
        "level": "How much velocity's z-component is kept constant", 
        "wander": "How fast velocity's direction is randomized", 
        "speed": "Percentage of maximum speed"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "EnumPropertyItem": {
      "fields": {
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "icon": "(read-only)    Icon of the item", 
        "name": "(read-only)    Human readable name", 
        "description": "(read-only)    Description of the item's purpose", 
        "value": "(read-only)    Value of the item"
      }
    }, 
    "OperatorMacro": {
      "fields": {
        "properties": "(read-only)"
      }
    }, 
    "SpaceImageEditor": {
      "fields": {
        "image": "Image displayed and edited in this space", 
        "use_image_pin": "Display current image regardless of object selection", 
        "use_realtime_update": "Update other affected window spaces automatically to reflect changes during interactive operations such as transform", 
        "show_uvedit": "(read-only)    Show UV editing related properties", 
        "sample_histogram": "(read-only)    Sampled colors along line", 
        "uv_editor": "(read-only)    UV editor settings", 
        "zoom": "(read-only)    Zoom factor", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "cursor_location": "2D cursor location for this view", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "mode": "Editing context being displayed", 
        "grease_pencil": "Grease pencil data for this space", 
        "draw_channels": "Channels of the image to draw", 
        "mask_draw_type": "Draw type for mask splines", 
        "pivot_point": "Rotation/Scaling Pivot", 
        "scopes": "(read-only)    Scopes to visualize image statistics", 
        "show_paint": "(read-only)    Show paint related properties", 
        "show_repeat": "Draw the image repeated outside of the main view", 
        "show_render": "(read-only)    Show render related properties", 
        "show_maskedit": "(read-only)    Show Mask editing related properties", 
        "mask": "Mask displayed and edited in this space"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "CopyTransformsConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FCurveModifiers": {
      "fields": {
        "active": "Active F-Curve Modifier"
      }
    }, 
    "ImageUser": {
      "fields": {
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "fields_per_frame": "Number of fields per rendered frame (2 fields is 1 image)", 
        "multilayer_pass": "(read-only)    Pass in multilayer image", 
        "multilayer_layer": "(read-only)    Layer in multilayer image", 
        "frame_duration": "Number of images of a movie to use", 
        "use_cyclic": "Cycle the images in the movie", 
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "frame_current": "Current frame number in image sequence or movie"
      }
    }, 
    "Sensor": {
      "fields": {
        "use_pulse_true_level": "Activate TRUE level triggering (pulse mode)", 
        "invert": "Invert the level(output) of this sensor", 
        "pin": "Display when not linked to a visible states controller", 
        "use_pulse_false_level": "Activate FALSE level triggering (pulse mode)", 
        "name": "Sensor name", 
        "controllers": "(read-only)    The list containing the controllers connected to the sensor", 
        "use_tap": "Trigger controllers only for an instant, even while the sensor remains true", 
        "use_level": "Level detector, trigger controllers of new states (only applicable upon logic state transition)", 
        "show_expanded": "Set sensor expanded in the user interface", 
        "frequency": "Delay between repeated pulses(in logic tics, 0=no delay)"
      }
    }, 
    "CompositorNodeMask": {
      "fields": {
        "motion_blur_shutter": "Exposure for motion blur as a factor of FPS", 
        "size_source": "Where to get the mask size from for aspect/size information", 
        "use_motion_blur": "Use feather information from the mask", 
        "use_antialiasing": "Apply an anti-aliasing filter to the mask", 
        "motion_blur_samples": "Number of motion blur samples", 
        "use_feather": "Use feather information from the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ParticleFluidSettings": {
      "fields": {
        "alpha_influence": "Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)", 
        "filepath": "Directory (and/or filename prefix) to store and load particles from", 
        "use_floats": "Show floating foam particles", 
        "particle_influence": "Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), >1=stronger", 
        "use_drops": "Show drop particles", 
        "show_tracer": "Show tracer particles"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "NodeSocketInterfaceVectorEuler": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "FluidMeshVertex": {
      "fields": {
        "velocity": "(read-only)"
      }
    }, 
    "DecimateModifier": {
      "fields": {
        "delimit": "Limit merging geometry", 
        "face_count": "(read-only)    The current number of faces in the decimated mesh", 
        "use_dissolve_boundaries": "Dissolve all vertices inbetween face boundaries (planar only)", 
        "vertex_group": "Vertex group name (collapse only)", 
        "invert_vertex_group": "Invert vertex group influence (collapse only)", 
        "angle_limit": "Only dissolve angles below this (planar only)", 
        "use_collapse_triangulate": "Keep triangulated faces resulting from decimation (collapse only)", 
        "iterations": "Number of times reduce the geometry (unsubdivide only)", 
        "ratio": "Ratio of triangles to reduce to (collapse only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Brush": {
      "fields": {
        "smooth_stroke_radius": "Minimum distance from last point before stroke continues", 
        "auto_smooth_factor": "Amount of smoothing to automatically apply to each stroke", 
        "strength": "How powerful the effect of the brush is when applied", 
        "use_paint_vertex": "Use this brush in vertex paint mode", 
        "use_locked_size": "When locked brush stays same size relative to object; when unlocked brush size is given in pixels", 
        "use_secondary_overlay": "Show texture in viewport", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_restore_mesh": "Allow a single dot to be carefully positioned", 
        "cursor_color_add": "Color of cursor when adding", 
        "use_adaptive_space": "Space daubs according to surface orientation instead of screen space", 
        "use_frontface": "Brush only affects vertexes that face the viewer", 
        "use_rake": "Rotate the brush texture to match the stroke direction", 
        "height": "Affectable height of brush (layer height for layer tool, i.e.)", 
        "use_wrap": "Enable torus wrapping while painting", 
        "use_pressure_spacing": "Enable tablet pressure sensitivity for spacing", 
        "use_primary_overlay_override": "Don't show overlay during a stroke", 
        "vertex_tool": "Brush blending mode", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "use_space": "Limit brush application to the distance specified by spacing", 
        "mask_stencil_dimension": "Dimensions of mask stencil in viewport", 
        "use_paint_image": "Use this brush in texture paint mode", 
        "use_random_rotation": "Rotate the brush texture at random", 
        "clone_alpha": "Opacity of clone image display", 
        "weight": "Vertex weight when brush is applied", 
        "plane_trim": "If a vertex is further away from offset plane than this, then it is not affected", 
        "use_primary_overlay": "Show texture in viewport", 
        "jitter": "Jitter the position of the brush while painting", 
        "size": "Radius of the brush in pixels", 
        "texture_sample_bias": "Value added to texture samples", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "use_anchor": "Keep the brush anchored to the initial location", 
        "use_original_normal": "When locked keep using normal of surface where stroke was initiated", 
        "use_cursor_overlay_override": "Don't show overlay during a stroke", 
        "use_paint_weight": "Use this brush in weight paint mode", 
        "plane_offset": "Adjust plane on which the brush acts towards or away from the object surface", 
        "use_edge_to_edge": "Drag anchor brush from edge-to-edge", 
        "clone_image": "Image for clone tool", 
        "use_space_attenuation": "Automatically adjust strength to give consistent results for different spacings", 
        "texture_slot": "(read-only)", 
        "use_custom_icon": "Set the brush icon from an image file", 
        "curve": "(read-only)    Editable falloff curve", 
        "use_paint_sculpt": "Use this brush in sculpt mode", 
        "blend": "Brush blending mode", 
        "use_airbrush": "Keep applying paint effect while holding mouse (spray)", 
        "crease_pinch_factor": "How much the crease brush pinches", 
        "stencil_pos": "Position of stencil in viewport", 
        "use_inverse_smooth_pressure": "Lighter pressure causes more smoothing to be applied", 
        "mask_texture_slot": "(read-only)", 
        "use_relative_jitter": "Jittering happens in screen space, not relative to brush size", 
        "normal_weight": "How much grab will pull vertexes out of surface during a grab", 
        "use_alpha": "When this is disabled, lock alpha while painting", 
        "spacing": "Spacing between brush daubs as a percentage of brush diameter", 
        "rate": "Interval between paints for Airbrush", 
        "smooth_stroke_factor": "Higher values give a smoother stroke", 
        "use_pressure_jitter": "Enable tablet pressure sensitivity for jitter", 
        "mask_stencil_pos": "Position of mask stencil in viewport", 
        "use_cursor_overlay": "Show cursor in viewport", 
        "sculpt_capabilities": "(read-only)    Brush's capabilities in sculpt mode", 
        "use_offset_pressure": "Enable tablet pressure sensitivity for offset", 
        "brush_capabilities": "(read-only)    Brush's capabilities", 
        "icon_filepath": "File path to brush icon", 
        "use_plane_trim": "Enable Plane Trim", 
        "stencil_dimension": "Dimensions of stencil in viewport", 
        "use_secondary_overlay_override": "Don't show overlay during a stroke", 
        "jitter_absolute": "Jitter the position of the brush in pixels while painting", 
        "cursor_color_subtract": "Color of cursor when subtracting", 
        "use_accumulate": "Accumulate stroke daubs on top of each other", 
        "use_persistent": "Sculpt on a persistent layer of the mesh", 
        "use_smooth_stroke": "Brush lags behind mouse and follows a smoother path"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CollisionSensor": {
      "fields": {
        "use_material": "Toggle collision on material or property", 
        "use_pulse": "Change to the set of colliding objects generates pulse", 
        "material": "Only look for objects with this material (blank = all objects)", 
        "property": "Only look for objects with this property (blank = all objects)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "RenderSettings": {
      "fields": {
        "use_envmaps": "Calculate environment maps while rendering", 
        "bake_distance": "Maximum distance from active object to other object (in blender units)", 
        "use_file_extension": "Add the file format extensions to the rendered file name (eg: filename + .jpg)", 
        "bake_quad_split": "Choose the method used to split a quad into 2 triangles for baking", 
        "stamp_note_text": "Custom text to appear in the stamp note", 
        "use_overwrite": "Overwrite existing files while rendering", 
        "use_game_engine": "(read-only)    Current rendering engine is a game engine", 
        "bake_margin": "Amount of pixels to extend the baked result with, as post process filter", 
        "octree_resolution": "Resolution of raytrace accelerator, use higher resolutions for larger scenes", 
        "use_shading_nodes": "(read-only)    Active render engine uses new shading nodes system", 
        "raytrace_method": "Type of raytrace accelerator structure", 
        "use_instances": "Instance support leads to effective memory reduction when using duplicates", 
        "use_bake_to_vertex_color": "Bake to vertex colors instead of to a UV-mapped image", 
        "use_crop_to_border": "Crop the rendered frame to the defined border size", 
        "use_stamp_frame": "Include the frame number in image metadata", 
        "file_extension": "(read-only)    The file extension used for saving renders", 
        "use_free_image_textures": "Free all image textures from memory after render, to save memory before compositing", 
        "frame_map_old": "Old mapping value in frames", 
        "display_mode": "Select where rendered images will be displayed", 
        "is_movie_format": "(read-only)    When true the format is a movie", 
        "use_compositing": "Process the render result through the compositing pipeline, if compositing nodes are enabled", 
        "use_single_layer": "Only render the active layer", 
        "use_local_coords": "Vertex coordinates are stored locally on each primitive (increases memory usage, but may have impact on speed)", 
        "field_order": "Order of video fields (select which lines get rendered first, to create smooth motion for TV output)", 
        "simplify_shadow_samples": "Global maximum shadow samples", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "has_multiple_engines": "(read-only)    More than one rendering engine is available", 
        "use_freestyle": "Draw stylized strokes using Freestyle", 
        "use_sss": "Calculate sub-surface scattering in materials rendering", 
        "bake_type": "Choose shading information to bake into the image", 
        "use_stamp_date": "Include the current date in image metadata", 
        "fps_base": "Framerate base", 
        "use_free_unused_nodes": "Free Nodes that are not used while compositing, to save memory", 
        "image_settings": "(read-only)", 
        "threads_mode": "Determine the amount of render threads used", 
        "use_simplify_triangulate": "Disable non-planar quads being triangulated", 
        "resolution_y": "Number of vertical pixels in the rendered image", 
        "resolution_x": "Number of horizontal pixels in the rendered image", 
        "line_thickness_mode": "Line thickness mode for Freestyle line drawing", 
        "use_persistent_data": "Keep render data around for faster re-renders", 
        "edge_color": "Edge color", 
        "resolution_percentage": "Percentage scale for render resolution", 
        "use_fields_still": "Disable the time difference between fields", 
        "use_stamp_sequencer_strip": "Include the name of the foreground sequence strip in image metadata", 
        "use_bake_normalize": "With displacement normalize to the distance, with ambient occlusion normalize without using material settings", 
        "use_stamp_render_time": "Include the render time in image metadata", 
        "simplify_child_particles": "Global child particles percentage", 
        "antialiasing_samples": "Amount of anti-aliasing samples per pixel", 
        "filepath": "Directory/name to save animations, # characters defines the position and length of frame numbers", 
        "use_placeholder": "Create empty placeholder files while rendering frames (similar to Unix 'touch')", 
        "use_motion_blur": "Use multi-sampled 3D scene motion blur", 
        "use_stamp_time": "Include the rendered frame timecode as HH:MM:SS.FF in image metadata", 
        "layers": "(read-only)", 
        "stamp_foreground": "Color to use for stamp text", 
        "ffmpeg": "(read-only)    FFmpeg related settings for the scene", 
        "filter_size": "Pixel width over which the reconstruction filter combines samples", 
        "use_stamp_lens": "Include the active camera's lens in image metadata", 
        "use_bake_selected_to_active": "Bake shading on the surface of selected objects to the active object", 
        "use_bake_lores_mesh": "Calculate heights against unsubdivided low resolution mesh", 
        "sequencer_gl_preview": "Method to draw in the sequencer view", 
        "pixel_aspect_x": "Horizontal aspect ratio - for anamorphic or non-square pixel output", 
        "use_sequencer_gl_textured_solid": "Draw face-assigned textures in solid draw method", 
        "pixel_aspect_y": "Vertical aspect ratio - for anamorphic or non-square pixel output", 
        "stamp_font_size": "Size of the font used when rendering stamp text", 
        "use_stamp_marker": "Include the name of the last marker in image metadata", 
        "use_edge_enhance": "Create a toon outline around the edges of geometry", 
        "bake_samples": "Number of samples used for ambient occlusion baking from multires", 
        "use_stamp_note": "Include a custom note in image metadata", 
        "motion_blur_shutter": "Time taken in frames between shutter open and close", 
        "simplify_subdivision": "Global maximum subdivision level", 
        "border_min_y": "Minimum Y value for the render border", 
        "border_min_x": "Minimum X value to for the render border", 
        "tile_y": "Vertical tile size to use while rendering", 
        "use_border": "Render a user-defined border region, within the frame size (note that this disables save_buffers and full_sample)", 
        "border_max_y": "Maximum Y value for the render border", 
        "border_max_x": "Maximum X value for the render border", 
        "tile_x": "Horizontal tile size to use while rendering", 
        "pixel_filter_type": "Reconstruction filter used for combining anti-aliasing samples", 
        "use_bake_antialiasing": "Enables Anti-aliasing", 
        "use_sequencer": "Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist", 
        "engine": "Engine to use for rendering", 
        "use_antialiasing": "Render and combine multiple samples per pixel to prevent jagged edges", 
        "frame_map_new": "How many frames the Map Old will last", 
        "bake_normal_space": "Choose normal space for baking", 
        "use_bake_multires": "Bake directly from multires object", 
        "bake_bias": "Bias towards faces further away from the object (in blender units)", 
        "stamp_background": "Color to use behind stamp text", 
        "use_stamp": "Render the stamp info text in the rendered image", 
        "use_stamp_filename": "Include the .blend filename in image metadata", 
        "use_shadows": "Calculate shadows while rendering", 
        "fps": "Framerate, expressed in frames per second", 
        "threads": "Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)", 
        "use_stamp_scene": "Include the name of the active scene in image metadata", 
        "use_fields": "Render image to two fields per frame, for interlaced TV output", 
        "simplify_ao_sss": "Global approximate AO and SSS quality factor", 
        "use_full_sample": "Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)", 
        "edge_threshold": "Threshold for drawing outlines on geometry edges", 
        "use_bake_clear": "Clear Images before baking", 
        "use_raytrace": "Pre-calculate the raytrace accelerator and render raytracing effects", 
        "use_stamp_camera": "Include the name of the active camera in image metadata", 
        "line_thickness": "Line thickness in pixels", 
        "use_textures": "Use textures to affect material properties", 
        "use_save_buffers": "Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)", 
        "sequencer_gl_render": "Method to draw in the sequencer view", 
        "motion_blur_samples": "Number of scene samples to take with motion blur", 
        "dither_intensity": "Amount of dithering noise added to the rendered image to break up banding", 
        "use_simplify": "Enable simplification of scene for quicker preview renders"
      }
    }, 
    "WindowManager": {
      "fields": {
        "addon_support": "Display support level", 
        "keyconfigs": "(read-only)    Registered key configurations", 
        "operators": "(read-only)    Operator registry", 
        "addon_search": "Search within the selected filter", 
        "addon_filter": "Filter addons by category", 
        "windows": "(read-only)    Open windows"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SurfaceCurve": {
      "fields": {
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID", 
        "Curve"
      ]
    }, 
    "VoxelDataTexture": {
      "fields": {
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "voxel_data": "(read-only)    The voxel data associated with this texture"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "CompositorNodeIDMask": {
      "fields": {
        "use_antialiasing": "Apply an anti-aliasing filter to the mask", 
        "index": "Pass index number to convert to alpha"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ThemeSpaceGeneric": {
      "fields": {
        "panelcolors": "(read-only)"
      }
    }, 
    "ScrewModifier": {
      "fields": {
        "angle": "Angle of revolution", 
        "use_normal_calculate": "Calculate the order of edges (needed for meshes, but not curves)", 
        "use_object_screw_offset": "Use the distance between the objects to make a screw", 
        "render_steps": "Number of steps in the revolution", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "screw_offset": "Offset the revolution along its axis", 
        "axis": "Screw axis", 
        "steps": "Number of steps in the revolution", 
        "use_normal_flip": "Flip normals of lathed faces", 
        "iterations": "Number of times to apply the screw operation", 
        "object": "Object to define the screw axis"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "TransformConstraint": {
      "fields": {
        "to_min_z": "Bottom range of Z axis destination motion", 
        "to_min_y": "Bottom range of Y axis destination motion", 
        "from_min_y": "Bottom range of Y axis source motion", 
        "from_min_x": "Bottom range of X axis source motion", 
        "use_motion_extrapolate": "Extrapolate ranges", 
        "map_to_z_from": "The source axis constrained object's Z axis uses", 
        "from_min_z": "Bottom range of Z axis source motion", 
        "map_from": "The transformation type to use from the target", 
        "to_min_x": "Bottom range of X axis destination motion", 
        "target": "Target Object", 
        "map_to_y_from": "The source axis constrained object's Y axis uses", 
        "map_to": "The transformation type to affect of the constrained object", 
        "from_max_x": "Top range of X axis source motion", 
        "from_max_y": "Top range of Y axis source motion", 
        "from_max_z": "Top range of Z axis source motion", 
        "to_max_y": "Top range of Y axis destination motion", 
        "to_max_z": "Top range of Z axis destination motion", 
        "map_to_x_from": "The source axis constrained object's X axis uses", 
        "to_max_x": "Top range of X axis destination motion"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MouseSensor": {
      "fields": {
        "use_pulse": "Moving the mouse over a different object generates a pulse", 
        "mouse_event": "Type of event this mouse sensor should trigger on"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "WorldMistSettings": {
      "fields": {
        "intensity": "Overall minimum intensity of the mist effect", 
        "falloff": "Type of transition used to fade mist", 
        "depth": "Distance over which the mist effect fades in", 
        "start": "Starting distance of the mist, measured from the camera", 
        "use_mist": "Occlude objects with the environment color as they are further away", 
        "height": "Control how much mist density decreases with height"
      }
    }, 
    "SequenceProxy": {
      "fields": {
        "build_100": "Build 100% proxy resolution", 
        "build_free_run": "Build free run time code index", 
        "filepath": "Location of custom proxy file", 
        "build_50": "Build 50% proxy resolution", 
        "build_75": "Build 75% proxy resolution", 
        "build_record_run": "Build record run time code index", 
        "build_25": "Build 25% proxy resolution", 
        "directory": "Location to store the proxy files", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "quality": "JPEG Quality of proxies to build"
      }
    }, 
    "ExplodeModifier": {
      "fields": {
        "show_dead": "Show mesh when particles are dead", 
        "show_alive": "Show mesh when particles are alive", 
        "use_edge_cut": "Cut face edges for nicer shrapnel", 
        "particle_uv": "UV map to change with particle age", 
        "show_unborn": "Show mesh when particles are unborn", 
        "use_size": "Use particle size for the shrapnel", 
        "protect": "Clean vertex group edges"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "GameActuator": {
      "fields": {
        "filename": "Load this blend file, use the \"//\" prefix for a path relative to the current blend file"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "FModifier": {
      "fields": {
        "use_restricted_range": "F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them", 
        "is_valid": "(read-only)    F-Curve Modifier has invalid settings and will not be evaluated", 
        "active": "F-Curve Modifier is the one being edited", 
        "blend_in": "Number of frames from start frame for influence to take effect", 
        "blend_out": "Number of frames from end frame for influence to fade out", 
        "use_influence": "F-Curve Modifier's effects will be tempered by a default factor", 
        "mute": "F-Curve Modifier will not be evaluated", 
        "frame_end": "Frame that modifier's influence ends (if Restrict Frame Range is in use)", 
        "type": "(read-only)    F-Curve Modifier Type", 
        "frame_start": "Frame that modifier's influence starts (if Restrict Frame Range is in use)", 
        "show_expanded": "F-Curve Modifier's panel is expanded in UI", 
        "influence": "Amount of influence F-Curve Modifier will have when not fading in/out"
      }
    }, 
    "UserPreferencesEdit": {
      "fields": {
        "use_drag_immediately": "Moving things with a mouse drag confirms when releasing the button", 
        "use_auto_keying_warning": "Show warning indicators when transforming objects and bones if auto keying is enabled", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis", 
        "use_keyframe_insert_needed": "Keyframe insertion only when keyframe needed", 
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "use_duplicate_surface": "Causes surface data to be duplicated with the object", 
        "use_auto_keying": "Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "use_negative_frames": "Current frame number can be manually set to a negative value", 
        "use_duplicate_particle": "Causes particle systems to be duplicated with the object", 
        "object_align": "When adding objects from a 3D View menu, either align them with that view or with the world", 
        "undo_memory_limit": "Maximum memory usage in megabytes (0 means unlimited)", 
        "fcurve_unselected_alpha": "Amount that unselected F-Curves stand out from the background (Graph Editor)", 
        "use_grease_pencil_simplify_stroke": "Simplify the final stroke", 
        "use_duplicate_texture": "Causes texture data to be duplicated with the object", 
        "use_global_undo": "Global undo works by keeping a full copy of the file itself in memory, so takes extra memory", 
        "use_visual_keying": "Use Visual keying automatically for constrained objects", 
        "use_grease_pencil_smooth_stroke": "Smooth the final stroke", 
        "keyframe_new_interpolation_type": "Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)", 
        "use_duplicate_action": "Causes actions to be duplicated with the object", 
        "grease_pencil_manhattan_distance": "Pixels moved by mouse per axis when drawing stroke", 
        "sculpt_paint_overlay_color": "Color of texture overlay", 
        "undo_steps": "Number of undo steps available (smaller values conserve memory)", 
        "use_duplicate_armature": "Causes armature data to be duplicated with the object", 
        "keyframe_new_handle_type": "Handle type for handles of new keyframes", 
        "use_enter_edit_mode": "Enter Edit Mode automatically after adding a new object", 
        "use_duplicate_curve": "Causes curve data to be duplicated with the object", 
        "use_duplicate_lamp": "Causes lamp data to be duplicated with the object", 
        "use_duplicate_text": "Causes text data to be duplicated with the object", 
        "material_link": "Toggle whether the material is linked to object data or the object block", 
        "use_keyframe_insert_available": "Automatic keyframe insertion in available F-Curves", 
        "grease_pencil_euclidean_distance": "Distance moved by mouse when drawing stroke (in pixels) to include", 
        "use_duplicate_mesh": "Causes mesh data to be duplicated with the object", 
        "use_duplicate_metaball": "Causes metaball data to be duplicated with the object", 
        "use_duplicate_fcurve": "Causes F-curve data to be duplicated with the object", 
        "use_duplicate_material": "Causes material data to be duplicated with the object", 
        "grease_pencil_eraser_radius": "Radius of eraser 'brush'"
      }
    }, 
    "ConsoleLine": {
      "fields": {
        "body": "Text in the line", 
        "type": "Console line type when used in scrollback"
      }
    }, 
    "FluidFluidSettings": {
      "fields": {
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type", 
        "initial_velocity": "Initial velocity of fluid", 
        "use": "Object contributes to the fluid simulation"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "PropertyGroupItem": {
      "fields": {
        "idp_array": "(read-only)", 
        "collection": "(read-only)", 
        "group": "(read-only)"
      }
    }, 
    "RandomActuator": {
      "fields": {
        "chance": "Pick a number between 0 and 1, success if it's below this value", 
        "float_min": "Choose a number from a range: lower boundary of the range", 
        "seed": "Initial seed of the random generator, use Python for more freedom (choose 0 for not random)", 
        "int_max": "Choose a number from a range: upper boundary of the range", 
        "float_mean": "A normal distribution: mean of the distribution", 
        "use_always_true": "Always false or always true", 
        "distribution": "Choose the type of distribution", 
        "float_max": "Choose a number from a range: upper boundary of the range", 
        "int_value": "Always return this number", 
        "standard_derivation": "A normal distribution: standard deviation of the distribution", 
        "int_min": "Choose a number from a range: lower boundary of the range", 
        "half_life_time": "Negative exponential dropoff", 
        "property": "Assign the random value to this property", 
        "float_value": "Always return this number", 
        "int_mean": "Expected mean value of the distribution"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ThemeSpaceGradient": {
      "fields": {
        "panelcolors": "(read-only)", 
        "gradients": "(read-only)"
      }
    }, 
    "LineStyleAlphaModifier_DistanceFromObject": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property", 
        "target": "Target object from which the distance is measured"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "BooleanModifier": {
      "fields": {
        "object": "Mesh object to use for Boolean operation"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MetaBallElements": {
      "fields": {
        "active": "(read-only)    Last selected element"
      }
    }, 
    "SmoothModifier": {
      "fields": {
        "use_z": "Smooth object along Z axis", 
        "use_x": "Smooth object along X axis", 
        "use_y": "Smooth object along Y axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "factor": "Strength of modifier effect"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CompositorNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "SpaceProperties": {
      "fields": {
        "use_pin_id": "Use the pinned context", 
        "use_limited_texture_context": "Use the limited version of texture user (for 'old shading' mode)", 
        "context": "Type of active data to display and edit", 
        "align": "Arrangement of the panels", 
        "texture_context": "Type of texture data to display and edit"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "GPencilStrokePoint": {
      "fields": {
        "pressure": "Pressure of tablet at point when drawing it"
      }
    }, 
    "ParticleSystem": {
      "fields": {
        "parent": "Use this object's coordinate system instead of global coordinate system", 
        "vertex_group_density": "Vertex group to control density", 
        "billboard_time_index_uv": "UV map to control billboard time index (X-Y)", 
        "invert_vertex_group_kink": "Negate the effect of the kink vertex group", 
        "seed": "Offset in the random number table, to get a different randomized result", 
        "vertex_group_kink": "Vertex group to control kink", 
        "vertex_group_length": "Vertex group to control length", 
        "targets": "(read-only)    Target particle systems", 
        "active_particle_target": "(read-only)", 
        "invert_vertex_group_density": "Negate the effect of the density vertex group", 
        "billboard_split_uv": "UV map to control billboard splitting", 
        "point_cache": "(read-only)", 
        "has_multiple_caches": "(read-only)    Particle system has multiple point caches", 
        "particles": "(read-only)    Particles generated by the particle system", 
        "vertex_group_velocity": "Vertex group to control velocity", 
        "invert_vertex_group_field": "Negate the effect of the field vertex group", 
        "vertex_group_rotation": "Vertex group to control rotation", 
        "child_particles": "(read-only)    Child particles generated by the particle system", 
        "settings": "Particle system settings", 
        "billboard_normal_uv": "UV map to control billboard normals", 
        "invert_vertex_group_roughness_2": "Negate the effect of the roughness 2 vertex group", 
        "invert_vertex_group_roughness_1": "Negate the effect of the roughness 1 vertex group", 
        "reactor_target_object": "For reactor systems, the object that has the target particle system (empty if same object)", 
        "use_hair_dynamics": "Enable hair dynamics using cloth simulation", 
        "is_editable": "(read-only)    Particle system can be edited in particle mode", 
        "is_edited": "(read-only)    Particle system has been edited in particle mode", 
        "invert_vertex_group_rotation": "Negate the effect of the rotation vertex group", 
        "vertex_group_size": "Vertex group to control size", 
        "child_seed": "Offset in the random number table for child particles, to get a different randomized result", 
        "dt_frac": "(read-only)    The current simulation time step size, as a fraction of a frame", 
        "invert_vertex_group_clump": "Negate the effect of the clump vertex group", 
        "vertex_group_clump": "Vertex group to control clump", 
        "vertex_group_field": "Vertex group to control field", 
        "vertex_group_roughness_end": "Vertex group to control roughness end", 
        "reactor_target_particle_system": "For reactor systems, index of particle system on the target object", 
        "vertex_group_tangent": "Vertex group to control tangent", 
        "invert_vertex_group_velocity": "Negate the effect of the velocity vertex group", 
        "vertex_group_roughness_2": "Vertex group to control roughness 2", 
        "name": "Particle system name", 
        "vertex_group_roughness_1": "Vertex group to control roughness 1", 
        "is_global_hair": "(read-only)    Hair keys are in global coordinate space", 
        "invert_vertex_group_length": "Negate the effect of the length vertex group", 
        "invert_vertex_group_tangent": "Negate the effect of the tangent vertex group", 
        "use_keyed_timing": "Use key times", 
        "invert_vertex_group_roughness_end": "Negate the effect of the roughness end vertex group", 
        "cloth": "(read-only)    Cloth dynamics for hair", 
        "invert_vertex_group_size": "Negate the effect of the size vertex group"
      }
    }, 
    "ClothSettings": {
      "fields": {
        "bending_stiffness": "Wrinkle coefficient (higher = less smaller but more big wrinkles)", 
        "rest_shape_key": "Shape key to use the rest spring lengths from", 
        "bending_stiffness_max": "Maximum bending stiffness value", 
        "effector_weights": "(read-only)", 
        "mass": "Mass of cloth material", 
        "structural_stiffness_max": "Maximum structural stiffness value", 
        "goal_max": "Goal maximum, vertex group weights are scaled to match this range", 
        "vertex_group_structural_stiffness": "Vertex group for fine control over structural stiffness", 
        "pre_roll": "Start simulation a number of frames earlier to let the cloth settle in", 
        "goal_default": "Default Goal (vertex target position) value, when no Vertex Group used", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "quality": "Quality of the simulation in steps per frame (higher is better quality but slower)", 
        "use_stiffness_scale": "If enabled, stiffness can be scaled along a weight painted vertex group", 
        "air_damping": "Air has normally some thickness which slows falling things down", 
        "vertex_group_bending": "Vertex group for fine control over bending stiffness", 
        "gravity": "Gravity or external force vector", 
        "structural_stiffness": "Overall stiffness of structure", 
        "goal_min": "Goal minimum, vertex group weights are scaled to match this range", 
        "pin_stiffness": "Pin (vertex target position) spring stiffness", 
        "vel_damping": "Damp velocity to help cloth reach the resting position faster (1.0 = no damping, 0.0 = fully dampened)", 
        "goal_friction": "Goal (vertex target position) friction", 
        "spring_damping": "Damping of cloth velocity (higher = more smooth, less jiggling)", 
        "use_pin_cloth": "Enable pinning of cloth vertices to other objects/positions", 
        "vertex_group_mass": "Vertex Group for pinning of vertices"
      }
    }, 
    "Material": {
      "fields": {
        "use_full_oversampling": "Force this material to render full shading/textures for all anti-aliasing samples", 
        "active_texture": "Active texture slot being displayed", 
        "cycles": "(read-only)    Cycles material settings", 
        "specular_alpha": "Alpha transparency for specular areas", 
        "use_shadeless": "Make this material insensitive to light or shadow", 
        "halo": "(read-only)    Halo settings for the material", 
        "type": "Material type defining how the object is rendered", 
        "translucency": "Amount of diffuse shading on the back side", 
        "roughness": "Oren-Nayar Roughness", 
        "diffuse_ramp": "(read-only)    Color ramp used to affect diffuse shading", 
        "game_settings": "(read-only)    Game material settings", 
        "subsurface_scattering": "(read-only)    Subsurface scattering settings for the material", 
        "use_object_color": "Modulate the result with a per-object color", 
        "use_cubic": "Use cubic interpolation for diffuse values, for smoother transitions", 
        "darkness": "Minnaert darkness", 
        "pass_index": "Index number for the IndexMA render pass", 
        "shadow_ray_bias": "Shadow raytracing bias to prevent terminator problems on shadow boundary", 
        "use_light_group_local": "When linked in, material uses local light group with the same name", 
        "use_vertex_color_light": "Add vertex colors as additional lighting", 
        "use_mist": "Use mist with this material (in world settings)", 
        "diffuse_toon_size": "Size of diffuse toon area", 
        "diffuse_ramp_blend": "Blending method of the ramp and the diffuse color", 
        "volume": "(read-only)    Volume settings for the material", 
        "diffuse_ramp_factor": "Blending factor (also uses alpha in Colorband)", 
        "raytrace_mirror": "(read-only)    Raytraced reflection settings for the material", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "diffuse_color": "Diffuse color of the material", 
        "active_texture_index": "Index of active texture slot", 
        "use_diffuse_ramp": "Toggle diffuse ramp operations", 
        "use_face_texture_alpha": "Replace the object's base alpha value with alpha from UV map image textures", 
        "use_vertex_color_paint": "Replace object base color with vertex colors (multiply with 'texture face' face assigned textures)", 
        "active_node_material": "Active node material", 
        "invert_z": "Render material's faces with an inverted Z buffer (scanline only)", 
        "specular_intensity": "How intense (bright) the specular reflection is", 
        "specular_toon_smooth": "Smoothness of specular toon area", 
        "diffuse_fresnel": "Power of Fresnel", 
        "offset_z": "Give faces an artificial offset in the Z buffer for Z transparency", 
        "specular_ramp": "(read-only)    Color ramp used to affect specular shading", 
        "specular_hardness": "How hard (sharp) the specular reflection is", 
        "use_ray_shadow_bias": "Prevent raytraced shadow errors on surfaces with smooth shaded normals (terminator problem)", 
        "specular_slope": "The standard deviation of surface slope", 
        "ambient": "Amount of global ambient color the material receives", 
        "specular_ramp_input": "How the ramp maps on the surface", 
        "use_face_texture": "Replace the object's base color with color from UV map image textures", 
        "shadow_cast_alpha": "Shadow casting alpha, in use for Irregular and Deep shadow buffer", 
        "specular_ramp_blend": "Blending method of the ramp and the specular color", 
        "strand": "(read-only)    Strand settings for the material", 
        "use_light_group_exclusive": "Material uses the light group exclusively - these lamps are excluded from other scene lighting", 
        "use_transparent_shadows": "Allow this object to receive transparent shadows cast through other objects", 
        "use_cast_shadows_only": "Make objects with this material appear invisible (not rendered), only casting shadows", 
        "alpha": "Alpha transparency of the material", 
        "diffuse_fresnel_factor": "Blending factor of Fresnel", 
        "physics": "(read-only)    Game physics settings", 
        "use_nodes": "Use shader nodes to render the material", 
        "raytrace_transparency": "(read-only)    Raytraced transparency settings for the material", 
        "use_transparency": "Render material as transparent", 
        "use_uv_project": "Use to ensure UV interpolation is correct for camera projections (use with UV project modifier)", 
        "transparency_method": "Method to use for rendering transparency", 
        "use_sky": "Render this material with zero alpha, with sky background in place (scanline only)", 
        "shadow_buffer_bias": "Factor to multiply shadow buffer bias with (0 is ignore)", 
        "use_cast_buffer_shadows": "Allow this material to cast shadows from shadow buffer lamps", 
        "preview_render_type": "Type of preview render", 
        "specular_ior": "Specular index of refraction", 
        "specular_color": "Specular color of the material", 
        "specular_toon_size": "Size of specular toon area", 
        "use_shadows": "Allow this material to receive shadows", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "diffuse_toon_smooth": "Smoothness of diffuse toon area", 
        "mirror_color": "Mirror color of the material", 
        "use_cast_approximate": "Allow this material to cast shadows when using approximate ambient occlusion", 
        "diffuse_ramp_input": "How the ramp maps on the surface", 
        "use_specular_ramp": "Toggle specular ramp operations", 
        "diffuse_intensity": "Amount of diffuse reflection", 
        "use_raytrace": "Include this material and geometry that uses it in raytracing calculations", 
        "use_tangent_shading": "Use the material's tangent vector instead of the normal for shading - for anisotropic shading effects", 
        "node_tree": "(read-only)    Node tree for node based materials", 
        "use_textures": "Enable/Disable each texture", 
        "light_group": "Limit lighting to lamps in this Group", 
        "use_only_shadow": "Render shadows as the material's alpha value, making the material transparent except for shadowed areas", 
        "emit": "Amount of light to emit", 
        "shadow_only_type": "How to draw shadows", 
        "specular_ramp_factor": "Blending factor (also uses alpha in Colorband)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "KeyingSetPaths": {
      "fields": {
        "active_index": "Current Keying Set index", 
        "active": "Active Keying Set used to insert/delete keyframes"
      }
    }, 
    "UserPreferencesSystem": {
      "fields": {
        "use_text_antialiasing": "Draw user interface text anti-aliased", 
        "gl_clip_alpha": "Clip alpha below this threshold in the 3D textured view", 
        "use_translate_interface": "Translate interface", 
        "use_translate_tooltips": "Translate tooltips", 
        "use_16bit_textures": "Use 16 bit per component texture for float images", 
        "image_draw_method": "Method used for displaying images on the screen", 
        "use_region_overlap": "Draw tool/property regions over the main region, when using Triple Buffer", 
        "memory_cache_limit": "Memory cache limit (in megabytes)", 
        "multi_sample": "Enable OpenGL multi-sampling, only for systems that support it, requires restart", 
        "texture_collection_rate": "Number of seconds between each run of the GL texture garbage collector", 
        "language": "Language used for translation", 
        "audio_device": "Audio output device", 
        "compute_device_type": "Device to use for computation (rendering with Cycles)", 
        "scrollback": "Maximum number of lines to store for the console buffer", 
        "use_weight_color_range": "Enable color range used for weight visualization in weight painting mode", 
        "audio_sample_format": "Audio sample format", 
        "prefetch_frames": "Number of frames to render ahead during playback (sequencer only)", 
        "audio_mixing_buffer": "Number of samples used by the audio mixing buffer", 
        "use_international_fonts": "Use international fonts", 
        "compute_device": "Device to use for computation", 
        "use_mipmaps": "Scale textures for the 3D View (looks nicer but uses more memory and slows image reloading)", 
        "texture_time_out": "Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)", 
        "use_scripts_auto_execute": "Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)", 
        "window_draw_method": "Drawing method used by the window manager", 
        "dpi": "Font size and resolution for display", 
        "gl_texture_limit": "Limit the texture size to save graphics memory", 
        "solid_lights": "(read-only)    Lights user to display objects in solid draw mode", 
        "use_tabs_as_spaces": "Automatically convert all new tabs into spaces for new and loaded text files", 
        "author": "Name that will be used in exported files when format supports such feature", 
        "audio_channels": "Audio channel count", 
        "use_preview_images": "Allow user to choose any codec (Windows only, might generate instability)", 
        "weight_color_range": "(read-only)    Color range used for weight visualization in weight painting mode", 
        "color_picker_type": "Different styles of displaying the color picker widget", 
        "use_translate_new_dataname": "Translate new data names (when adding/creating some)", 
        "use_textured_fonts": "Use textures for drawing international fonts", 
        "screencast_wait_time": "Time in milliseconds between each frame recorded for screencast", 
        "anisotropic_filter": "Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)", 
        "frame_server_port": "Frameserver Port for Frameserver Rendering", 
        "use_gpu_mipmap": "Generate Image Mipmaps on the GPU", 
        "screencast_fps": "Frame rate for the screencast to be played back", 
        "use_vertex_buffer_objects": "Use Vertex Buffer Objects (or Vertex Arrays, if unsupported) for viewport rendering", 
        "audio_sample_rate": "Audio sample rate"
      }
    }, 
    "OperatorMousePath": {
      "fields": {
        "loc": "Mouse location", 
        "time": "Time of mouse location"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "LineStyleGeometryModifier_SinusDisplacement": {
      "fields": {
        "phase": "Phase of the sinus displacement", 
        "wavelength": "Wavelength of the sinus displacement", 
        "amplitude": "Amplitude of the sinus displacement", 
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "MusgraveTexture": {
      "fields": {
        "octaves": "Number of frequencies used", 
        "noise_basis": "Noise basis used for turbulence", 
        "offset": "The fractal offset", 
        "noise_intensity": "Intensity of the noise", 
        "musgrave_type": "Fractal noise algorithm", 
        "dimension_max": "Highest fractal dimension", 
        "lacunarity": "Gap between successive frequencies", 
        "gain": "The gain multiplier", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "LineStyleColorModifier_Material": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "use_ramp": "Use color ramp to map the BW average into an RGB color", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "material_attribute": "Specify which material attribute is used", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "exposure": "Exposure (stops) applied before display transform", 
        "curve_mapping": "(read-only)    Color curve mapping applied before display transform", 
        "use_curve_mapping": "Use RGB curved for pre-display transformation", 
        "look": "Additional transform applied before view transform for an artistic needs", 
        "gamma": "Amount of gamma modification applied after display transform", 
        "view_transform": "View used when converting image to a display space"
      }
    }, 
    "EffectorWeights": {
      "fields": {
        "all": "All effector's weight", 
        "charge": "Charge effector weight", 
        "vortex": "Vortex effector weight", 
        "boid": "Boid effector weight", 
        "texture": "Texture effector weight", 
        "turbulence": "Turbulence effector weight", 
        "lennardjones": "Lennard-Jones effector weight", 
        "curve_guide": "Curve guide effector weight", 
        "apply_to_hair_growing": "Use force fields when growing hair", 
        "gravity": "Global gravity weight", 
        "magnetic": "Magnetic effector weight", 
        "force": "Force effector weight", 
        "smokeflow": "Smoke Flow effector weight", 
        "drag": "Drag effector weight", 
        "harmonic": "Harmonic effector weight", 
        "group": "Limit effectors to this Group", 
        "wind": "Wind effector weight"
      }
    }, 
    "ShaderNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "NodeSocketInt": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "MovieTrackingObjectTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "SequenceElement": {
      "fields": {
        "orig_width": "(read-only)    Original image width", 
        "orig_height": "(read-only)    Original image height"
      }
    }, 
    "BoidState": {
      "fields": {
        "active_boid_rule": "(read-only)", 
        "name": "Boid state name", 
        "rules": "(read-only)", 
        "ruleset_type": "How the rules in the list are evaluated"
      }
    }, 
    "Image": {
      "fields": {
        "use_view_as_render": "Apply render part of display transformation when displaying this image on the screen", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "frame_end": "End frame of an animated texture", 
        "source": "Where the image comes from", 
        "type": "(read-only)    How to generate the image", 
        "use_clamp_y": "Disable texture repeating vertically", 
        "resolution": "X/Y pixels per meter", 
        "use_clamp_x": "Disable texture repeating horizontally", 
        "frame_start": "Start frame of an animated texture", 
        "use_alpha": "Use the alpha channel information from the image or make image fully opaque", 
        "field_order": "Order of video fields (select which lines are displayed first)", 
        "filepath": "Image/Movie file name", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_animation": "Use as animated texture in the game engine", 
        "file_format": "Format used for re-saving this file", 
        "tiles_y": "Degree of repetition in the Y direction", 
        "tiles_x": "Degree of repetition in the X direction", 
        "mapping": "Mapping type to use for this image in the game engine", 
        "filepath_raw": "Image/Movie file name (without data refreshing)", 
        "display_aspect": "Display Aspect for this image, does not affect rendering", 
        "fps": "Speed of the animation in frames per second", 
        "is_dirty": "(read-only)    Image has changed and is not saved", 
        "use_fields": "Use fields of the image", 
        "bindcode": "(read-only)    OpenGL bindcode", 
        "frame_duration": "(read-only)    Duration (in frames) of the image (1 when not a video/sequence)", 
        "use_generated_float": "Generate floating point buffer", 
        "generated_width": "Generated image width", 
        "generated_height": "Generated image height", 
        "has_data": "(read-only)    True if this image has data", 
        "depth": "(read-only)    Image bit depth", 
        "is_float": "(read-only)    True if this image is stored in float buffer", 
        "pixels": "Image pixels in floating point values", 
        "channels": "(read-only)    Number of channels in pixels buffer", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded", 
        "packed_file": "(read-only)", 
        "generated_type": "Generated image type", 
        "render_slot": "The current render slot displayed, only for viewer type images", 
        "use_tiles": "Use of tilemode for faces (default shift-LMB to pick the tile for selected faces)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MeshSkinVertexLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of skin layer"
      }
    }, 
    "TimelineMarker": {
      "fields": {
        "select": "Marker selection state", 
        "camera": "Camera this timeline sets to active", 
        "frame": "The frame on which the timeline marker appears"
      }
    }, 
    "NodeSocketInterfaceFloatAngle": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "RegionView3D": {
      "fields": {
        "view_rotation": "Rotation in quaternions (keep normalized)", 
        "view_perspective": "View Perspective", 
        "view_matrix": "Current view matrix of the 3D region", 
        "show_sync_view": "Sync view position between side views", 
        "view_camera_offset": "View shift in camera view", 
        "view_distance": "Distance to the view location", 
        "view_location": "View pivot location", 
        "view_camera_zoom": "Zoom factor in camera view", 
        "lock_rotation": "Lock view rotation in side views", 
        "perspective_matrix": "(read-only)    Current perspective matrix of the 3D region", 
        "use_box_clip": "Clip objects based on what's visible in other side views"
      }
    }, 
    "ThemeNLAEditor": {
      "fields": {
        "sound_strips": "Sound Strip - Unselected (for timing speaker sounds)", 
        "strips_selected": "Action-Clip Strip - Selected", 
        "meta_strips": "Meta Strip - Unselected (for grouping related strips)", 
        "sound_strips_selected": "Sound Strip - Selected (for timing speaker sounds)", 
        "tweak_duplicate": "Warning/error indicator color for strips referencing the strip being tweaked", 
        "space_list": "(read-only)    Settings for space list", 
        "active_action_unset": "Animation data block doesn't have active action", 
        "transition_strips": "Transition Strip - Unselected", 
        "space": "(read-only)    Settings for space", 
        "strips": "Action-Clip Strip - Unselected", 
        "meta_strips_selected": "Meta Strip - Selected (for grouping related strips)", 
        "transition_strips_selected": "Transition Strip - Selected", 
        "active_action": "Animation data block has active action", 
        "tweak": "Color for strip/action being 'tweaked' or edited"
      }
    }, 
    "BlendDataLattices": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "VertexGroup": {
      "fields": {
        "lock_weight": "Maintain the relative weights for the group", 
        "name": "Vertex group name", 
        "index": "(read-only)    Index number of the vertex group"
      }
    }, 
    "MeshTessFaces": {
      "fields": {
        "active": "The active face for this mesh"
      }
    }, 
    "BoidRuleAvoid": {
      "fields": {
        "use_predict": "Predict target movement", 
        "fear_factor": "Avoid object if danger from it is above this threshold", 
        "object": "Object to avoid"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "FCurveSample": {
      "fields": {
        "select": "Selection status", 
        "co": "Point coordinates"
      }
    }, 
    "PackedFile": {
      "fields": {
        "size": "(read-only)    Size of packed file in bytes"
      }
    }, 
    "DistortedNoiseTexture": {
      "fields": {
        "noise_basis": "Noise basis used for turbulence", 
        "noise_distortion": "Noise basis for the distortion", 
        "distortion": "Amount of distortion", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "CyclesWorldSettings": {
      "fields": {
        "sample_map_resolution": "Importance map size is resolution x resolution; higher values potentially produce less noise, at the cost of memory and speed", 
        "sample_as_light": "Use multiple importance sampling for the environment, enabling for non-solid colors is recommended", 
        "samples": "Number of light samples to render for each AA sample"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "MaterialTextureSlot": {
      "fields": {
        "specular_color_factor": "Amount texture affects specular color", 
        "use_map_emission": "The texture affects the volume's emission", 
        "translucency_factor": "Amount texture affects translucency", 
        "use_map_alpha": "The texture affects the alpha value", 
        "use": "Enable this material texture slot", 
        "use_map_scatter": "The texture affects the volume's scattering", 
        "use_map_density": "The texture affects the volume's density", 
        "use_map_raymir": "The texture affects the ray-mirror value", 
        "use_map_color_reflection": "The texture affects the color of scattered light", 
        "use_map_to_bounds": "Map coordinates in object bounds", 
        "use_map_color_emission": "The texture affects the color of emission", 
        "emit_factor": "Amount texture affects emission", 
        "reflection_factor": "Amount texture affects brightness of out-scattered light", 
        "use_map_color_transmission": "The texture affects the result color after other light has been scattered/absorbed", 
        "normal_map_space": "Set space of normal map image", 
        "use_map_normal": "The texture affects the rendered normal", 
        "use_map_warp": "Let the texture warp texture coordinates of next channels", 
        "diffuse_factor": "Amount texture affects diffuse reflectivity", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "scattering_factor": "Amount texture affects scattering", 
        "warp_factor": "Amount texture affects texture coordinates of next channels", 
        "normal_factor": "Amount texture affects normal values", 
        "emission_color_factor": "Amount texture affects emission color", 
        "use_map_reflect": "The texture affects the reflected light's brightness", 
        "use_map_translucency": "The texture affects the translucency value", 
        "emission_factor": "Amount texture affects emission", 
        "use_from_original": "Dupli's derive their object coordinates from the original object's transformation", 
        "ambient_factor": "Amount texture affects ambient", 
        "bump_objectspace": "Space to apply bump mapping in", 
        "displacement_factor": "Amount texture displaces the surface", 
        "use_map_hardness": "The texture affects the hardness value", 
        "use_map_displacement": "Let the texture displace the surface", 
        "alpha_factor": "Amount texture affects alpha", 
        "reflection_color_factor": "Amount texture affects color of out-scattered light", 
        "raymir_factor": "Amount texture affects ray mirror", 
        "use_map_diffuse": "The texture affects the value of diffuse reflectivity", 
        "mirror_factor": "Amount texture affects mirror color", 
        "use_map_mirror": "The texture affects the mirror color", 
        "use_map_color_spec": "The texture affects the specularity color", 
        "use_map_specular": "The texture affects the value of specular reflectivity", 
        "bump_method": "Method to use for bump mapping", 
        "use_map_ambient": "The texture affects the value of ambient", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "use_from_dupli": "Dupli's instanced from verts, faces or particles, inherit texture coordinate from their parent", 
        "diffuse_color_factor": "Amount texture affects diffuse color", 
        "transmission_color_factor": "Amount texture affects result color after light has been scattered/absorbed", 
        "hardness_factor": "Amount texture affects hardness", 
        "specular_factor": "Amount texture affects specular reflectivity", 
        "density_factor": "Amount texture affects density", 
        "use_map_color_diffuse": "The texture affects basic color of the material", 
        "use_map_emit": "The texture affects the emit value"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "ID": {
      "fields": {
        "library": "(read-only)    Library file the datablock is linked from", 
        "is_updated": "(read-only)    Datablock is tagged for recalculation", 
        "name": "Unique datablock ID name", 
        "is_updated_data": "(read-only)    Datablock data is tagged for recalculation", 
        "tag": "Tools can use this to tag data (initial state is undefined)", 
        "use_fake_user": "Save this datablock even if it has no users", 
        "is_library_indirect": "(read-only)    Is this ID block linked indirectly", 
        "users": "(read-only)    Number of times this datablock is referenced"
      }
    }, 
    "WaveModifier": {
      "fields": {
        "narrowness": "Distance between the top and the base of a wave, the higher the value, the more narrow the wave", 
        "start_position_y": "Y coordinate of the start position", 
        "time_offset": "Either the starting frame (for positive speed) or ending frame (for negative speed.)", 
        "use_normal": "Displace along normals", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "use_x": "X axis motion", 
        "use_y": "Y axis motion", 
        "lifetime": "Lifetime of the wave in frames, zero means infinite", 
        "use_normal_z": "Enable displacement along the Z normal", 
        "use_cyclic": "Cyclic wave effect", 
        "speed": "Speed of the wave, towards the starting point when negative", 
        "use_normal_x": "Enable displacement along the X normal", 
        "use_normal_y": "Enable displacement along the Y normal", 
        "start_position_object": "Object which defines the wave center", 
        "damping_time": "Number of frames in which the wave damps out after it dies", 
        "uv_layer": "UV map name", 
        "vertex_group": "Vertex group name for modulating the wave", 
        "width": "Distance between the waves", 
        "start_position_x": "X coordinate of the start position", 
        "falloff_radius": "Distance after which it fades out", 
        "height": "Height of the wave"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "AnimData": {
      "fields": {
        "nla_tracks": "(read-only)    NLA Tracks (i.e. Animation Layers)", 
        "action_blend_type": "Method used for combining Active Action's result with result of NLA stack", 
        "action_extrapolation": "Action to take for gaps past the Active Action's range (when evaluating with NLA)", 
        "action": "Active Action for this datablock", 
        "use_nla": "NLA stack is evaluated when evaluating this block", 
        "drivers": "(read-only)    The Drivers/Expressions for this datablock", 
        "action_influence": "Amount the Active Action contributes to the result of the NLA stack"
      }
    }, 
    "FModifierEnvelopeControlPoint": {
      "fields": {
        "min": "Lower bound of envelope at this control-point", 
        "max": "Upper bound of envelope at this control-point", 
        "frame": "Frame this control-point occurs on"
      }
    }, 
    "CompositorNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ActionActuator": {
      "fields": {
        "use_force": "Apply Action as a global or local force depending on the local option (dynamic objects only)", 
        "blend_mode": "How this layer is blended with previous layers", 
        "use_additive": "Action is added to the current loc/rot/scale in global or local coordinate according to Local flag", 
        "priority": "Execution priority - lower numbers will override actions with higher numbers (with 2 or more actions at once, the overriding channels must be lower in the stack)", 
        "layer": "The animation layer to play the action on", 
        "layer_weight": "How much of the previous layer to blend into this one", 
        "use_continue_last_frame": "Restore last frame when switching on/off, otherwise play from the start each time", 
        "apply_to_children": "Update Action on all children Objects as well", 
        "frame_property": "Assign the action's current frame number to this property", 
        "frame_blend_in": "Number of frames of motion blending", 
        "use_local": "Let the Action act in local coordinates, used in Force and Add mode", 
        "property": "Use this property to define the Action position", 
        "play_mode": "Action playback type"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "MessageActuator": {
      "fields": {
        "body_message": "Optional, message body Text", 
        "to_property": "Optional, send message to objects with this name only, or empty to broadcast", 
        "subject": "Optional, message subject (this is what can be filtered on)", 
        "body_type": "Toggle message type: either Text or a PropertyName", 
        "body_property": "The message body will be set by the Property Value"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ClampToConstraint": {
      "fields": {
        "main_axis": "Main axis of movement", 
        "use_cyclic": "Treat curve as cyclic curve (no clamping to curve bounding box)", 
        "target": "Target Object (Curves only)"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ArmatureModifier": {
      "fields": {
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "use_multi_modifier": "Use same input as previous modifier, and mix results using overall vgroup", 
        "use_bone_envelopes": "Bind Bone envelopes to armature modifier", 
        "use_vertex_groups": "Bind vertex groups to armature modifier", 
        "invert_vertex_group": "Invert vertex group influence", 
        "object": "Armature object to deform with", 
        "use_deform_preserve_volume": "Deform rotation interpolation with quaternions"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SpaceConsole": {
      "fields": {
        "font_size": "Font size to use for displaying the text", 
        "language": "Command line prompt language", 
        "history": "(read-only)    Command history", 
        "prompt": "Command line prompt", 
        "scrollback": "(read-only)    Command output"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "BoidRuleFollowLeader": {
      "fields": {
        "use_line": "Follow leader in a line", 
        "distance": "Distance behind leader to follow", 
        "queue_count": "How many boids in a line", 
        "object": "Follow this object instead of a boid"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "NodeSocketInterfaceFloatTime": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "CompositorNodeStabilize": {
      "fields": {
        "filter_type": "Method to use to filter stabilization"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "FModifierStepped": {
      "fields": {
        "frame_offset": "Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)", 
        "frame_step": "Number of frames to hold each value", 
        "frame_end": "Frame that modifier's influence ends (if applicable)", 
        "use_frame_end": "Restrict modifier to only act before its 'end' frame", 
        "use_frame_start": "Restrict modifier to only act after its 'start' frame", 
        "frame_start": "Frame that modifier's influence starts (if applicable)"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "BackgroundImage": {
      "fields": {
        "show_on_foreground": "Show this image in front of objects in viewport", 
        "image": "Image displayed and edited in this space", 
        "show_background_image": "Show this image as background", 
        "draw_depth": "Draw under or over everything", 
        "use_camera_clip": "Use movie clip from active scene camera", 
        "source": "Data source used for background", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "view_axis": "The axis to display the image on", 
        "frame_method": "How the image fits in the camera frame", 
        "size": "Scaling factor for the background image", 
        "offset_x": "Offset image horizontally from the world origin", 
        "opacity": "Image opacity to blend the image against the background color", 
        "offset_y": "Offset image vertically from the world origin", 
        "clip": "Movie clip displayed and edited in this space", 
        "show_expanded": "Show the expanded in the user interface"
      }
    }, 
    "SpaceGraphEditor": {
      "fields": {
        "cursor_position_y": "Graph Editor 2D-Value cursor - Y-Value component", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views", 
        "use_only_selected_keyframe_handles": "Only show and edit handles of selected keyframes", 
        "use_beauty_drawing": "Draw F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_cursor": "Show 2D cursor", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "mode": "Editing context being displayed", 
        "show_handles": "Show handles of Bezier control points", 
        "use_only_selected_curves_handles": "Only keyframes of selected F-Curves are visible and editable", 
        "has_ghost_curves": "Graph Editor instance has some ghost curves stored", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_group_colors": "Draw groups and channels with colors matching their corresponding groups", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "auto_snap": "Automatic time snapping settings for transformations"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "UnifiedPaintSettings": {
      "fields": {
        "use_unified_weight": "Instead of per-brush weight, the weight is shared across brushes", 
        "size": "Radius of the brush in pixels", 
        "strength": "How powerful the effect of the brush is when applied", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "use_locked_size": "When locked brush stays same size relative to object; when unlocked brush size is given in pixels", 
        "weight": "Weight to assign in vertex groups", 
        "use_unified_size": "Instead of per-brush radius, the radius is shared across brushes", 
        "use_unified_strength": "Instead of per-brush strength, the strength is shared across brushes", 
        "unprojected_radius": "Radius of brush in Blender units"
      }
    }, 
    "LineStyleAlphaModifier_DistanceFromCamera": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "BlendDataGreasePencils": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ActionConstraint": {
      "fields": {
        "min": "Minimum value for target channel range", 
        "max": "Maximum value for target channel range", 
        "action": "The constraining action", 
        "frame_end": "Last frame of the Action to use", 
        "use_bone_object_action": "Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels", 
        "transform_channel": "Transformation channel from the target that is used to key the Action", 
        "frame_start": "First frame of the Action to use", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MeshLoopColorLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of Vertex color layer", 
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering"
      }
    }, 
    "MeshSkinVertex": {
      "fields": {
        "use_loose": "If vertex has multiple adjacent edges, it is hulled to them directly", 
        "use_root": "Vertex is a root for rotation calculations and armature generation", 
        "radius": "Radius of the skin"
      }
    }, 
    "ObjectConstraints": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "BlendDataActions": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MetaBall": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this datablock", 
        "materials": "(read-only)", 
        "update_method": "Metaball edit update behavior", 
        "elements": "(read-only)    Meta elements", 
        "texspace_location": "Texture space location", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "threshold": "Influence of meta elements", 
        "render_resolution": "Polygonization resolution in rendering", 
        "resolution": "Polygonization resolution in the 3D viewport", 
        "texspace_size": "Texture space size", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "OceanTexData": {
      "fields": {
        "output": "The data that is output by the texture", 
        "ocean_object": "Object containing the ocean modifier"
      }
    }, 
    "TextureNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "SmokeDomainSettings": {
      "fields": {
        "use_dissolve_smoke": "Enable smoke to disappear over time", 
        "flame_smoke": "Amount of smoke created by burning fuel", 
        "use_adaptive_domain": "Adapt simulation resolution and size to fluid", 
        "strength": "Strength of noise", 
        "adapt_margin": "Margin added around fluid to minimize boundary interference", 
        "flame_smoke_color": "Color of smoke emitted from burning fuel", 
        "amplify": "Enhance the resolution of smoke by this factor using noise", 
        "cell_size": "(read-only)    Cell Size", 
        "collision_group": "Limit collisions to this group", 
        "alpha": "How much density affects smoke motion (higher value results in faster rising smoke)", 
        "collision_extents": "Select which domain border will be treated as collision object", 
        "flame_ignition": "Minimum temperature of flames", 
        "point_cache": "(read-only)", 
        "resolution_max": "Maximal resolution used in the fluid domain", 
        "flame_max_temp": "Maximum temperature of flames", 
        "beta": "How much heat affects smoke motion (higher value results in faster rising smoke)", 
        "point_cache_compress_type": "Compression method to be used", 
        "dissolve_speed": "Dissolve Speed", 
        "fluid_group": "Limit fluid objects to this group", 
        "density": "(read-only)    Smoke density", 
        "effector_weights": "(read-only)", 
        "domain_resolution": "(read-only)    Smoke Grid Resolution", 
        "use_dissolve_smoke_log": "Using 1/x", 
        "vorticity": "Amount of turbulence/rotation in fluid", 
        "show_high_resolution": "Show high resolution (using amplification)", 
        "adapt_threshold": "Maximum amount of fluid cell can contain before it is considered empty", 
        "effector_group": "Limit effectors to this group", 
        "noise_type": "Noise method which is used for creating the high resolution", 
        "burning_rate": "Speed of the burning reaction (use larger values for smaller flame)", 
        "flame_vorticity": "Additional vorticity for the flames", 
        "time_scale": "Adjust simulation speed", 
        "start_point": "(read-only)    Start point", 
        "highres_sampling": "Method for sampling the high resolution flow", 
        "use_high_resolution": "Enable high resolution (using amplification)", 
        "additional_res": "Maximum number of additional cells"
      }
    }, 
    "KinematicConstraint": {
      "fields": {
        "distance": "Radius of limiting sphere", 
        "pole_angle": "Pole rotation offset", 
        "lock_location_y": "Constraint position along Y axis", 
        "use_tail": "Include bone's tail as last element in chain", 
        "lock_location_x": "Constraint position along X axis", 
        "weight": "For Tree-IK: Weight of position control for this target", 
        "use_stretch": "Enable IK Stretching", 
        "reference_axis": "Constraint axis Lock options relative to Bone or Target reference", 
        "iterations": "Maximum number of solving iterations", 
        "lock_location_z": "Constraint position along Z axis", 
        "target": "Target Object", 
        "chain_count": "How many bones are included in the IK effect - 0 uses all bones", 
        "orient_weight": "For Tree-IK: Weight of orientation control for this target", 
        "pole_target": "Object for pole rotation", 
        "use_rotation": "Chain follows rotation of target", 
        "lock_rotation_x": "Constraint rotation along X axis", 
        "lock_rotation_y": "Constraint rotation along Y axis", 
        "lock_rotation_z": "Constraint rotation along Z axis", 
        "use_location": "Chain follows position of target", 
        "limit_mode": "Distances in relation to sphere of influence to allow"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "PathCompare": {
      "fields": {
        "use_glob": "Enable wildcard globbing"
      }
    }, 
    "LineStyleThicknessModifier_AlongStroke": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "value_min": "Minimum output value of the mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "ThemeUserPreferences": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ShaderNodeTexVoronoi": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "MaterialRaytraceTransparency": {
      "fields": {
        "filter": "Amount to blend in the material's diffuse color in raytraced transparency (simulating absorption)", 
        "gloss_factor": "The clarity of the refraction. Values < 1.0 give diffuse, blurry refractions", 
        "gloss_samples": "Number of cone samples averaged for blurry refractions", 
        "falloff": "Falloff power for transmissivity filter effect (1.0 is linear)", 
        "fresnel": "Power of Fresnel for transparency (Ray or ZTransp)", 
        "depth": "Maximum allowed number of light inter-refractions", 
        "gloss_threshold": "Threshold for adaptive sampling. If a sample contributes less than this amount (as a percentage), sampling is stopped", 
        "fresnel_factor": "Blending factor for Fresnel", 
        "depth_max": "Maximum depth for light to travel through the transparent material before becoming fully filtered (0.0 is disabled)", 
        "ior": "Angular index of refraction for raytraced refraction"
      }
    }, 
    "MovieTrackingTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "ShaderNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "VertexGroupElement": {
      "fields": {
        "weight": "Vertex Weight", 
        "group": "(read-only)"
      }
    }, 
    "ColorSequence": {
      "fields": {
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "LineStyleGeometryModifier_GuidingLines": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "offset": "Displacement that is applied to the main direction line along its normal", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "MulticamSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "animation_offset_end": "Animation end offset (trim end)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "ColorManagedInputColorspaceSettings": {
      "fields": {
        "name": "Color space of the image or movie on disk"
      }
    }, 
    "ThemeFileBrowser": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "SoftBodyModifier": {
      "fields": {
        "settings": "(read-only)", 
        "point_cache": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ActuatorSensor": {
      "fields": {
        "actuator": "Actuator name, actuator active state modifications will be detected"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "SequenceModifier": {
      "fields": {
        "input_mask_type": "Type of input data used for mask", 
        "input_mask_strip": "Strip used as mask input for the modifier", 
        "mute": "Mute this modifier", 
        "type": "(read-only)", 
        "input_mask_id": "Mask ID used as mask input for the modifier", 
        "show_expanded": "Mute expanded settings for the modifier"
      }
    }, 
    "CompositorNodeHueCorrect": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "PointDensity": {
      "fields": {
        "vertex_cache_space": "Coordinate system to cache vertices in", 
        "noise_basis": "Noise formula used for turbulence", 
        "falloff_curve": "(read-only)", 
        "falloff_speed_scale": "Multiplier to bring particle speed within an acceptable range", 
        "use_falloff_curve": "Use a custom falloff curve", 
        "turbulence_depth": "Level of detail in the added turbulent noise", 
        "use_turbulence": "Add directed noise to the density at render-time", 
        "particle_cache_space": "Coordinate system to cache particles in", 
        "turbulence_influence": "Method for driving added turbulent noise", 
        "speed_scale": "Multiplier to bring particle speed within an acceptable range", 
        "falloff": "Method of attenuating density by distance from the point", 
        "falloff_soft": "Softness of the 'soft' falloff option", 
        "color_ramp": "(read-only)", 
        "point_source": "Point data to use as renderable point density", 
        "radius": "Radius from the shaded sample to look for points within", 
        "turbulence_scale": "Scale of the added turbulent noise", 
        "color_source": "Data to derive color results from", 
        "particle_system": "Particle System to render as points", 
        "turbulence_strength": "Strength of the added turbulent noise", 
        "object": "Object to take point data from"
      }
    }, 
    "WorldTextureSlot": {
      "fields": {
        "horizon_factor": "Amount texture affects color of the horizon", 
        "use_map_zenith_up": "Affect the color of the zenith above", 
        "use_map_horizon": "Affect the color of the horizon", 
        "zenith_down_factor": "Amount texture affects color of the zenith below", 
        "blend_factor": "Amount texture affects color progression of the background", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "use_map_blend": "Affect the color progression of the background", 
        "zenith_up_factor": "Amount texture affects color of the zenith above", 
        "use_map_zenith_down": "Affect the color of the zenith below", 
        "object": "Object to use for mapping with Object texture coordinates"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "Menu": {
      "fields": {
        "layout": "(read-only)    Defines the structure of the menu in the UI", 
        "bl_idname": "If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is \"OBJECT_MT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_MT_hello\")", 
        "bl_label": "The menu label"
      }
    }, 
    "EditObjectActuator": {
      "fields": {
        "use_replace_display_mesh": "Replace the display mesh", 
        "use_replace_physics_mesh": "Replace the physics mesh (triangle bounds only - compound shapes not supported)", 
        "mass": "The mass of the object", 
        "use_3d_tracking": "Enable 3D tracking", 
        "angular_velocity": "Angular velocity upon creation", 
        "use_local_linear_velocity": "Apply the transformation locally", 
        "mode": "The mode of the actuator", 
        "use_local_angular_velocity": "Apply the rotation locally", 
        "linear_velocity": "Velocity upon creation", 
        "time": "Duration the new Object lives or the track takes", 
        "track_object": "Track to this Object", 
        "mesh": "Replace the existing, when left blank 'Phys' will remake the existing physics mesh", 
        "object": "Add this Object and all its children (can't be on a visible layer)"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "FloatProperty": {
      "fields": {
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "precision": "(read-only)    Number of digits after the dot used by buttons", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size", 
        "hard_max": "(read-only)    Maximum value used by buttons"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "GPencilStroke": {
      "fields": {
        "points": "(read-only)    Stroke data points"
      }
    }, 
    "Property": {
      "fields": {
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "is_registered": "(read-only)    Property is registered as part of type registration", 
        "srna": "(read-only)    Struct definition used for properties assigned to this item", 
        "is_registered_optional": "(read-only)    Property is optionally registered as part of type registration", 
        "icon": "(read-only)    Icon of the item", 
        "is_hidden": "(read-only)    True when the property is hidden", 
        "description": "(read-only)    Description of the property for tooltips", 
        "is_enum_flag": "(read-only)    True when multiple enums", 
        "type": "(read-only)    Data type of the property", 
        "is_argument_optional": "(read-only)    True when the property is optional in a Python function implementing an RNA function", 
        "is_animatable": "(read-only)    Property is animatable through RNA", 
        "is_never_none": "(read-only)    True when this value can't be set to None", 
        "translation_context": "(read-only)    Translation context of the property's name", 
        "is_output": "(read-only)    True when this property is an output value from an RNA function", 
        "is_readonly": "(read-only)    Property is editable through RNA", 
        "unit": "(read-only)    Type of units for this property", 
        "is_required": "(read-only)    False when this property is an optional argument in an RNA function", 
        "subtype": "(read-only)    Semantic interpretation of the property", 
        "name": "(read-only)    Human readable name", 
        "is_skip_save": "(read-only)    True when the property is not saved in presets", 
        "is_runtime": "(read-only)    Property has been dynamically created at runtime", 
        "is_library_editable": "(read-only)    Property is editable from linked instances (changes not saved)"
      }
    }, 
    "PropertySensor": {
      "fields": {
        "value_min": "Minimum value in Interval type", 
        "value_max": "Maximum value in Interval type", 
        "evaluation_type": "Type of property evaluation", 
        "value": "Check for this value in types in Equal or Not Equal types"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "CompositorNodeMovieDistortion": {
      "fields": {
        "distortion_type": "Distortion to use to filter image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "MeshTessFace": {
      "fields": {
        "area": "(read-only)    Read only area of this face", 
        "vertices_raw": "Fixed size vertex indices array", 
        "normal": "(read-only)    Local space unit length normal vector for this face", 
        "vertices": "Vertex indices", 
        "index": "(read-only)    Index of this face"
      }
    }, 
    "ParticleSettings": {
      "fields": {
        "factor_random": "Give the starting speed a random variation", 
        "use_multiply_size_mass": "Multiply mass by particle size", 
        "object_align_factor": "Let the emitter object orientation give the particle a starting speed", 
        "use_dead": "Show particles after they have died", 
        "active_texture": "Active texture slot being displayed", 
        "tangent_phase": "Rotate the surface tangent", 
        "integrator": "Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)", 
        "type": "Particle Type", 
        "frame_start": "Frame number to start emitting particles", 
        "length_random": "Give path length a random variation", 
        "use_react_start_end": "Give birth to unreacted particles eventually", 
        "size_random": "Give the particle size a random variation", 
        "apply_effector_to_children": "Apply effectors to children", 
        "trail_count": "Number of trail particles", 
        "use_whole_group": "Use whole group at once", 
        "child_radius": "Radius of children around parent", 
        "use_rotation_dupli": "Use object's rotation for duplication (global x-axis is aligned particle rotation axis)", 
        "dupli_weights": "(read-only)    Weights for all of the objects in the dupli group", 
        "simplify_transition": "Transition period for fading out strands", 
        "fluid": "(read-only)", 
        "line_length_tail": "Length of the line's tail", 
        "physics_type": "Particle physics type", 
        "use_hair_bspline": "Interpolate hair using B-Splines", 
        "hexagonal_grid": "Create the grid in a hexagonal pattern", 
        "billboard_velocity_tail": "Scale billboards by velocity", 
        "timestep": "The simulation timestep per frame (seconds per frame)", 
        "kink_axis": "Which axis to use for offset", 
        "roughness_1_size": "Size of location dependent rough", 
        "render_step": "How many steps paths are rendered with (power of 2)", 
        "color_maximum": "Maximum length of the particle color vector", 
        "use_velocity_length": "Multiply line length by particle speed", 
        "drag_factor": "Amount of air-drag", 
        "effect_hair": "Hair stiffness for effectors", 
        "show_velocity": "Show particle velocity", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "angular_velocity_factor": "Angular velocity amount (in radians per second)", 
        "brownian_factor": "Amount of Brownian motion", 
        "use_size_deflect": "Use particle's size in deflection", 
        "simplify_refsize": "Reference size in pixels, after which simplification begins", 
        "emit_from": "Where to emit particles from", 
        "roughness_2_threshold": "Amount of particles left untouched by random rough", 
        "time_tweak": "A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)", 
        "child_parting_factor": "Create parting in the children based on parent strands", 
        "use_self_effect": "Particle effectors effect themselves", 
        "use_react_multiple": "React multiple times", 
        "billboard_tilt_random": "Random tilt of the billboards", 
        "distribution": "How to distribute particles on selected element", 
        "simplify_rate": "Speed of simplification", 
        "jitter_factor": "Amount of jitter applied to the sampling", 
        "use_rotations": "Calculate particle rotations", 
        "billboard_velocity_head": "Scale billboards by velocity", 
        "show_health": "Draw boid health", 
        "userjit": "Emission locations / face (0 = automatic)", 
        "regrow_hair": "Regrow hair for each frame", 
        "use_emit_random": "Emit in random order of elements", 
        "lock_billboard": "Lock the billboards align axis", 
        "simplify_viewport": "Speed of Simplification", 
        "draw_step": "How many steps paths are drawn with (power of 2)", 
        "billboard_align": "In respect to what the billboards are aligned", 
        "path_end": "End time of drawn path", 
        "use_absolute_path_time": "Path timing is in absolute frames", 
        "use_group_pick_random": "Pick objects from group randomly", 
        "tangent_factor": "Let the surface tangent give the particle a starting speed", 
        "child_length": "Length of child paths", 
        "effector_weights": "(read-only)", 
        "use_modifier_stack": "Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)", 
        "force_field_2": "(read-only)", 
        "force_field_1": "(read-only)", 
        "child_parting_max": "Maximum root to tip angle (tip distance/root distance for long hair)", 
        "child_size_random": "Random variation to the size of the child particles", 
        "hair_length": "Length of the hair", 
        "billboard_tilt": "Tilt of the billboards", 
        "show_number": "Show particle number", 
        "kink_amplitude_clump": "How much clump affects kink amplitude", 
        "kink_flat": "How flat the hairs are", 
        "use_global_dupli": "Use object's global coordinates for duplication", 
        "use_parent_particles": "Render parent particles", 
        "adaptive_pixel": "How many pixels path has to cover to make another render segment", 
        "child_roundness": "Roundness of children around parent", 
        "courant_target": "The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range", 
        "dupli_group": "Show Objects in this Group in place of particles", 
        "child_size": "A multiplier for the child particle size", 
        "child_parting_min": "Minimum root to tip angle (tip distance/root distance for long hair)", 
        "lock_boids_to_surface": "Constrain boids to a surface", 
        "active_dupliweight": "(read-only)", 
        "lifetime": "Life span of the particles", 
        "cycles": "(read-only)    Cycles hair settings", 
        "frame_end": "Frame number to stop emitting particles", 
        "create_long_hair_children": "Calculate children that suit long hair well", 
        "show_size": "Show particle size", 
        "hair_step": "Number of hair segments", 
        "path_start": "Starting time of drawn path", 
        "use_scale_dupli": "Use object's scale for duplication", 
        "dupli_object": "Show this Object in place of particles", 
        "use_advanced_hair": "Use full physics calculations for growing hair", 
        "roughness_endpoint": "Amount of end point rough", 
        "use_render_emitter": "Render emitter Object also", 
        "rendered_child_count": "Number of children/parent for rendering", 
        "kink_shape": "Adjust the offset to the beginning/end", 
        "grid_random": "Add random offset to the grid locations", 
        "phase_factor": "Rotation around the chosen orientation axis", 
        "use_adaptive_subframes": "Automatically set the number of subframes", 
        "rotation_factor_random": "Randomize particle orientation", 
        "draw_size": "Size of particles on viewport in pixels (0=default)", 
        "use_strand_primitive": "Use the strand primitive for rendering", 
        "virtual_parents": "Relative amount of virtual parents", 
        "billboard_offset_split": "How to offset billboard textures", 
        "use_dynamic_rotation": "Particle rotations are effected by collisions and effectors", 
        "count": "Total number of particles", 
        "use_die_on_collision": "Particles die when they collide with a deflector object", 
        "kink": "Type of periodic offset on the path", 
        "subframes": "Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))", 
        "damping": "Amount of damping", 
        "use_even_distribution": "Use even distribution from faces based on face areas or edge lengths", 
        "phase_factor_random": "Randomize rotation around the chosen orientation axis", 
        "angular_velocity_mode": "What axis is used to change particle rotation with time", 
        "branch_threshold": "Threshold of branching", 
        "invert_grid": "Invert what is considered object and what is not", 
        "kink_amplitude": "The amplitude of the offset", 
        "object_factor": "Let the object give the particle a starting speed", 
        "active_texture_index": "Index of active texture slot", 
        "billboard_object": "Billboards face this object (default is active camera)", 
        "use_render_adaptive": "Draw steps of the particle path", 
        "child_type": "Create child particles", 
        "billboard_uv_split": "Number of rows/columns to split UV coordinates for billboards", 
        "render_type": "How particles are rendered", 
        "is_fluid": "(read-only)    Particles were created by a fluid simulation", 
        "child_nbr": "Number of children/parent", 
        "use_group_count": "Use object multiple times in the same group", 
        "normal_factor": "Let the surface normal give the particle a starting speed", 
        "mass": "Mass of the particles", 
        "billboard_size": "Scale billboards relative to particle size", 
        "particle_size": "The size of the particles", 
        "kink_frequency": "The frequency of the offset (1/total length)", 
        "effector_amount": "How many particles are effectors (0 is all particles)", 
        "line_length_head": "Length of the line's head", 
        "boids": "(read-only)", 
        "roughness_2": "Amount of random rough", 
        "react_event": "The event of target particles to react on", 
        "roughness_1": "Amount of location dependent rough", 
        "roughness_2_size": "Size of random rough", 
        "clump_factor": "Amount of clumping", 
        "show_unborn": "Show particles before they are emitted", 
        "child_length_threshold": "Amount of particles left untouched by child path length", 
        "clump_shape": "Shape of clumping", 
        "draw_method": "How particles are drawn in viewport", 
        "particle_factor": "Let the target particle give the particle a starting speed", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "grid_resolution": "The resolution of the particle grid", 
        "lifetime_random": "Give the particle life a random variation", 
        "billboard_animation": "How to animate billboard textures", 
        "draw_percentage": "Percentage of particles to display in 3D view", 
        "draw_color": "Draw additional particle data as a color", 
        "rotation_mode": "Particle orientation axis (does not affect Explode modifier's results)", 
        "material": "Material used for the particles", 
        "adaptive_angle": "How many degrees path has to curve to make another render segment", 
        "keyed_loops": "Number of times the keys are looped", 
        "reactor_factor": "Let the vector away from the target particle's location give the particle a starting speed", 
        "roughness_end_shape": "Shape of end point rough", 
        "use_simplify": "Remove child strands as the object becomes smaller on the screen"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Text": {
      "fields": {
        "current_line": "(read-only)    Current line, and start line of selection if one exists", 
        "current_line_index": "(read-only)    Index of current TextLine in TextLine collection", 
        "use_tabs_as_spaces": "Automatically converts all new tabs into spaces", 
        "filepath": "Filename of the text file", 
        "use_module": "Register this text as a module on loading, Text name must end with \".py\"", 
        "select_end_character": "(read-only)    Index of character after end of selection in the selection end line", 
        "is_in_memory": "(read-only)    Text file is in memory, without a corresponding file on disk", 
        "select_end_line": "(read-only)    End line of selection", 
        "is_dirty": "(read-only)    Text file has been edited since last save", 
        "current_character": "(read-only)    Index of current character in current line, and also start index of character in selection if one exists", 
        "lines": "(read-only)    Lines of text", 
        "is_modified": "(read-only)    Text file on disk is different than the one in memory"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "select": "Selection status", 
        "u": "U coordinate of point along spline segment", 
        "weight": "Weight of feather point"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "use_invert_sort": "Invert sort order of dopesheet channels", 
        "show_hidden": "Include channels from objects/bone that aren't visible", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "sort_method": "Method to be used to sort channels in dopesheet view"
      }
    }, 
    "Panel": {
      "fields": {
        "layout": "(read-only)    Defines the structure of the panel in the UI", 
        "bl_space_type": "The space where the panel is going to be used in", 
        "bl_context": "The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)", 
        "bl_idname": "If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is \"OBJECT_PT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_PT_hello\"", 
        "bl_region_type": "The region where the panel is going to be used in", 
        "bl_options": "Options for this panel type", 
        "text": "XXX todo", 
        "bl_label": "The panel label, shows up in the panel header at the right of the triangle used to collapse the panel"
      }
    }, 
    "NodeSocketInterfaceFloat": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "Theme": {
      "fields": {
        "bone_color_sets": "(read-only)", 
        "console": "(read-only)", 
        "node_editor": "(read-only)", 
        "outliner": "(read-only)", 
        "sequence_editor": "(read-only)", 
        "clip_editor": "(read-only)", 
        "dopesheet_editor": "(read-only)", 
        "logic_editor": "(read-only)", 
        "text_editor": "(read-only)", 
        "nla_editor": "(read-only)", 
        "graph_editor": "(read-only)", 
        "name": "Name of the theme", 
        "user_interface": "(read-only)", 
        "timeline": "(read-only)", 
        "view_3d": "(read-only)", 
        "file_browser": "(read-only)", 
        "image_editor": "(read-only)", 
        "properties": "(read-only)", 
        "info": "(read-only)", 
        "user_preferences": "(read-only)"
      }
    }, 
    "GameSoftBodySettings": {
      "fields": {
        "use_shape_match": "Enable soft body shape matching goal", 
        "weld_threshold": "Welding threshold: distance between nearby vertices to be considered equal => set to 0.0 to disable welding test and speed up scene loading (ok if the mesh has no duplicates)", 
        "linear_stiffness": "Linear stiffness of the soft body links", 
        "use_bending_constraints": "Enable bending constraints", 
        "cluster_iterations": "Number of cluster iterations", 
        "location_iterations": "Position solver iterations", 
        "shape_threshold": "Shape matching threshold", 
        "dynamic_friction": "Dynamic Friction", 
        "use_cluster_rigid_to_softbody": "Enable cluster collision between soft and rigid body", 
        "use_cluster_soft_to_softbody": "Enable cluster collision between soft and soft body", 
        "collision_margin": "Collision margin for soft body. Small value makes the algorithm unstable"
      }
    }, 
    "CompositorNodeCrop": {
      "fields": {
        "use_crop_size": "Whether to crop the size of the input image", 
        "relative": "Use relative values to crop image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "FollowTrackConstraint": {
      "fields": {
        "frame_method": "How the footage fits in the camera frame", 
        "use_3d_position": "Use 3D position of track to parent to", 
        "use_active_clip": "Use active clip defined in scene", 
        "depth_object": "Object used to define depth in camera space by projecting onto surface of this object", 
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "track": "Movie tracking track to follow", 
        "clip": "Movie Clip to get tracking data from", 
        "object": "Movie tracking object to follow (if empty, camera object is used)"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "Itasc": {
      "fields": {
        "feedback": "Feedback coefficient for error correction, average response time is 1/feedback (default=20)", 
        "damping_epsilon": "Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)", 
        "step_min": "Lower bound for timestep in second in case of automatic substeps", 
        "precision": "Precision of convergence in case of reiteration", 
        "step_count": "Divide the frame interval into this many steps", 
        "damping_max": "Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)", 
        "step_max": "Higher bound for timestep in second in case of automatic substeps", 
        "use_auto_step": "Automatically determine the optimal number of steps for best performance/accuracy trade off", 
        "velocity_max": "Maximum joint velocity in rad/s (default=50)", 
        "iterations": "Maximum number of iterations for convergence in case of reiteration", 
        "reiteration_method": "Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames", 
        "solver": "Solving method selection: automatic damping or manual damping"
      }, 
      "inherits": [
        "IKParam"
      ]
    }, 
    "AlphaUnderSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "ThemeInfo": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "UDKActionSetListPG": {
      "fields": {
        "bmatch": "This check against bone names and action group names matches and override boolean if true.", 
        "bexport": "Check this to export the animation"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "HookModifier": {
      "fields": {
        "falloff": "If not zero, the distance from the hook where influence ends", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "subtarget": "Name of Parent Bone for hook (if applicable), also recalculates and clears offset", 
        "force": "Relative force of the hook", 
        "object": "Parent Object for hook, also recalculates and clears offset"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CompositorNodeColorBalance": {
      "fields": {
        "offset": "Correction for Shadows", 
        "lift": "Correction for Shadows", 
        "power": "Correction for Midtones", 
        "slope": "Correction for Highlights", 
        "gamma": "Correction for Midtones", 
        "gain": "Correction for Highlights"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "VoxelData": {
      "fields": {
        "intensity": "Multiplier for intensity values", 
        "extension": "How the texture is extrapolated past its original bounds", 
        "interpolation": "Method to interpolate/smooth values between voxel cells", 
        "still_frame": "The frame number to always use", 
        "filepath": "The external source data file to use", 
        "use_still_frame": "Always render a still frame from the voxel data sequence", 
        "domain_object": "Object used as the smoke simulation domain", 
        "resolution": "Resolution of the voxel grid", 
        "smoke_data_type": "Simulation value to be used as a texture", 
        "file_format": "Format of the source data set to render"
      }
    }, 
    "SpaceLogicEditor": {
      "fields": {
        "show_sensors_linked_controller": "Show linked objects to the controller", 
        "show_sensors_selected_objects": "Show sensors of all selected objects", 
        "show_controllers_linked_controller": "Show linked objects to sensor/actuator", 
        "show_actuators_linked_controller": "Show linked objects to the actuator", 
        "show_actuators_selected_objects": "Show actuators of all selected objects", 
        "show_controllers_active_object": "Show controllers of active object", 
        "show_actuators_active_states": "Show only actuators connected to active states", 
        "show_controllers_selected_objects": "Show controllers of all selected objects", 
        "show_actuators_active_object": "Show actuators of active object", 
        "show_sensors_active_object": "Show sensors of active object", 
        "show_sensors_active_states": "Show only sensors connected to active states"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "ParticleSettingsTextureSlot": {
      "fields": {
        "use_map_gravity": "Affect the particle gravity", 
        "gravity_factor": "Amount texture affects particle gravity", 
        "use_map_length": "Affect the child hair length", 
        "use_map_life": "Affect the life time of the particles", 
        "velocity_factor": "Amount texture affects particle initial velocity", 
        "rough_factor": "Amount texture affects child roughness", 
        "use_map_density": "Affect the density of the particles", 
        "life_factor": "Amount texture affects particle life time", 
        "use_map_size": "Affect the particle size", 
        "kink_factor": "Amount texture affects child kink", 
        "field_factor": "Amount texture affects particle force fields", 
        "clump_factor": "Amount texture affects child clump", 
        "damp_factor": "Amount texture affects particle damping", 
        "use_map_field": "Affect the particle force fields", 
        "size_factor": "Amount texture affects physical particle size", 
        "use_map_kink": "Affect the child kink", 
        "length_factor": "Amount texture affects child hair length", 
        "use_map_clump": "Affect the child clumping", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "use_map_damp": "Affect the particle velocity damping", 
        "use_map_rough": "Affect the child rough", 
        "use_map_time": "Affect the emission time of the particles", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "use_map_velocity": "Affect the particle initial velocity", 
        "density_factor": "Amount texture affects particle density", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "time_factor": "Amount texture affects particle emission time"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "TextureNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "BlendDataTexts": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "NodeSocketVector": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "MaterialHalo": {
      "fields": {
        "add": "Strength of the add effect", 
        "flare_subflare_count": "Number of sub-flares", 
        "use_soft": "Soften the edges of halos at intersections with other geometry", 
        "line_count": "Number of star shaped lines rendered over the halo", 
        "use_flare_mode": "Render halo as a lens flare", 
        "seed": "Randomize ring dimension and line location", 
        "use_lines": "Render star shaped lines over halo", 
        "flare_seed": "Offset in the flare seed table", 
        "use_star": "Render halo as a star", 
        "flare_boost": "Give the flare extra strength", 
        "ring_count": "Number of rings rendered over the halo", 
        "use_vertex_normal": "Use the vertex normal to specify the dimension of the halo", 
        "hardness": "Hardness of the halo", 
        "use_texture": "Give halo a texture", 
        "size": "Dimension of the halo", 
        "flare_size": "Factor by which the flare is larger than the halo", 
        "use_shaded": "Let halo receive light and shadows from external objects", 
        "use_ring": "Render rings over halo", 
        "star_tip_count": "Number of points on the star shaped halo", 
        "use_extreme_alpha": "Use extreme alpha", 
        "flare_subflare_size": "Dimension of the sub-flares, dots and circles"
      }
    }, 
    "BlendDataCurves": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "PivotConstraint": {
      "fields": {
        "offset": "Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point", 
        "use_relative_location": "Offset will be an absolute point in space instead of relative to the target", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "rotation_range": "Rotation range on which pivoting should occur", 
        "target": "Target Object, defining the position of the pivot when defined"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ParticleEdit": {
      "fields": {
        "brush": "(read-only)", 
        "is_hair": "(read-only)    Editing hair", 
        "use_preserve_root": "Keep root keys unmodified", 
        "use_fade_time": "Fade paths and keys further away from current frame", 
        "use_emitter_deflect": "Keep paths from intersecting the emitter", 
        "use_auto_velocity": "Calculate point velocities automatically", 
        "default_key_count": "How many keys to make new particles with", 
        "is_editable": "(read-only)    A valid edit mode exists", 
        "use_default_interpolate": "Interpolate new particles from the existing ones", 
        "show_particles": "Draw actual particles", 
        "select_mode": "Particle select and display mode", 
        "emitter_distance": "Distance to keep particles away from the emitter", 
        "draw_step": "How many steps to draw the path with", 
        "use_preserve_length": "Keep path lengths constant", 
        "fade_frames": "How many frames to fade", 
        "object": "(read-only)    The edited object"
      }
    }, 
    "PointDensityTexture": {
      "fields": {
        "point_density": "(read-only)    The point density settings associated with this texture"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "ThemeImageEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "influence_scale": "Influence of stabilization algorithm on footage scale", 
        "use_autoscale": "Automatically scale footage to cover unfilled areas when stabilizing", 
        "active_track_index": "Index of active track in stabilization tracks list", 
        "filter_type": "Method to use to filter stabilization", 
        "influence_rotation": "Influence of stabilization algorithm on footage rotation", 
        "scale_max": "Limit the amount of automatic scaling", 
        "influence_location": "Influence of stabilization algorithm on footage location", 
        "use_stabilize_rotation": "Stabilize horizon line on the shot", 
        "rotation_track": "Track used to compensate rotation", 
        "tracks": "(read-only)    Collection of tracks used for stabilization", 
        "use_2d_stabilization": "Use 2D stabilization for footage"
      }
    }, 
    "ShaderNodeMixRGB": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range", 
        "use_alpha": "Include alpha of second input in this operation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ParticleSystems": {
      "fields": {
        "active_index": "Index of active particle system slot", 
        "active": "(read-only)    Active particle system being displayed"
      }
    }, 
    "RandomSensor": {
      "fields": {
        "seed": "Initial seed of the generator (choose 0 for not random)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "UserPreferencesInput": {
      "fields": {
        "view_rotate_method": "Rotation style in the viewport", 
        "ndof_orbit_sensitivity": "Overall sensitivity of the 3D Mouse for orbiting", 
        "drag_threshold": "Amount of pixels you have to drag before dragging UI items happens", 
        "ndof_rotate_invert_axis": "Invert rotation axis", 
        "active_keyconfig": "The name of the active key configuration", 
        "view_zoom_method": "Which style to use for viewport scaling", 
        "ndof_lock_horizon": "Keep horizon level while flying with 3D Mouse", 
        "ndof_tilt_invert_axis": "Invert tilt axis", 
        "select_mouse": "Mouse button used for selection", 
        "invert_zoom_wheel": "Swap the Mouse Wheel zoom direction", 
        "use_mouse_emulate_3_button": "Emulate Middle Mouse with Alt+Left Mouse (doesn't work with Left Mouse Select option)", 
        "use_trackpad_natural": "If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI", 
        "ndof_zoom_invert": "Zoom using opposite direction", 
        "ndof_panz_invert_axis": "Invert z axis", 
        "ndof_view_rotate_method": "Rotation style in the viewport", 
        "tweak_threshold": "Number of pixels you have to drag before tweak event is triggered", 
        "view_zoom_axis": "Axis of mouse movement to zoom in or out on", 
        "ndof_panx_invert_axis": "Invert x axis", 
        "ndof_pany_invert_axis": "Invert y axis", 
        "ndof_roll_invert_axis": "Invert roll axis", 
        "use_mouse_mmb_paste": "In text window, paste with middle mouse button instead of panning", 
        "wheel_scroll_lines": "Number of lines scrolled at a time with the mouse wheel", 
        "invert_mouse_zoom": "Invert the axis of mouse movement for zooming", 
        "use_emulate_numpad": "Main 1 to 0 keys act as the numpad ones (useful for laptops)", 
        "ndof_fly_helicopter": "Device up/down directly controls your Z position", 
        "ndof_zoom_updown": "Zoom using up/down on the device (otherwise forward/backward)", 
        "use_mouse_continuous": "Allow moving the mouse outside the view on some manipulations (transform, ui control drag)", 
        "ndof_show_guide": "Display the center and axis during rotation", 
        "mouse_double_click_time": "Time/delay (in ms) for a double click", 
        "ndof_sensitivity": "Overall sensitivity of the 3D Mouse for panning"
      }
    }, 
    "LimitLocationConstraint": {
      "fields": {
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "use_min_x": "Use the minimum X value", 
        "use_min_z": "Use the minimum Z value", 
        "use_min_y": "Use the minimum Y value", 
        "use_max_x": "Use the maximum X value", 
        "use_max_z": "Use the maximum Z value", 
        "use_max_y": "Use the maximum Y value", 
        "max_x": "Highest X value to allow", 
        "max_z": "Highest Z value to allow", 
        "max_y": "Highest Y value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_z": "Lowest Z value to allow", 
        "min_y": "Lowest Y value to allow"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "NodeSocketInterfaceVectorXYZ": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "SpaceTextEditor": {
      "fields": {
        "use_live_edit": "Run python while editing", 
        "replace_text": "Text to replace selected text with using the replace tool", 
        "font_size": "Font size to use for displaying the text", 
        "use_find_all": "Search in all text datablocks, instead of only the active one", 
        "show_line_numbers": "Show line numbers next to the text", 
        "tab_width": "Number of spaces to display tabs with", 
        "find_text": "Text to search for with the find tool", 
        "use_match_case": "Search string is sensitive to uppercase and lowercase letters", 
        "use_overwrite": "Overwrite characters when typing rather than inserting them", 
        "top": "(read-only)    Top line visible", 
        "show_margin": "Show right margin", 
        "visible_lines": "(read-only)    Amount of lines that can be visible in current editor", 
        "use_find_wrap": "Search again from the start of the file when reaching the end", 
        "margin_column": "Column number to show right margin at", 
        "show_syntax_highlight": "Syntax highlight for scripting", 
        "text": "Text displayed and edited in this space", 
        "show_line_highlight": "Highlight the current line", 
        "show_word_wrap": "Wrap words if there is not enough horizontal space"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "CameraActuator": {
      "fields": {
        "damping": "Strength of the constraint that drives the camera behind the target", 
        "axis": "Axis the Camera will try to get behind", 
        "object": "Look at this Object"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "BlendDataMaterials": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ParticleInstanceModifier": {
      "fields": {
        "show_dead": "Show instances when particles are dead", 
        "use_children": "Create instances from child particles", 
        "random_position": "Randomize position along path", 
        "show_alive": "Show instances when particles are alive", 
        "use_path": "Create instances along particle paths", 
        "use_normal": "Create instances from normal particles", 
        "show_unborn": "Show instances when particles are unborn", 
        "use_size": "Use particle size to scale the instances", 
        "use_preserve_shape": "Don't stretch the object", 
        "position": "Position along path", 
        "axis": "Pole axis for rotation", 
        "object": "Object that has the particle system"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "LimitScaleConstraint": {
      "fields": {
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "use_min_x": "Use the minimum X value", 
        "use_min_z": "Use the minimum Z value", 
        "use_min_y": "Use the minimum Y value", 
        "use_max_x": "Use the maximum X value", 
        "use_max_z": "Use the maximum Z value", 
        "use_max_y": "Use the maximum Y value", 
        "max_x": "Highest X value to allow", 
        "max_z": "Highest Z value to allow", 
        "max_y": "Highest Y value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_z": "Lowest Z value to allow", 
        "min_y": "Lowest Y value to allow"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "BlendDataFonts": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MagicTexture": {
      "fields": {
        "noise_depth": "Depth of the noise", 
        "turbulence": "Turbulence of the noise"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "CloudsTexture": {
      "fields": {
        "cloud_type": "Determine whether Noise returns grayscale or RGB values", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_depth": "Depth of the cloud calculation", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "ActionGroup": {
      "fields": {
        "color_set": "Custom color set to use", 
        "select": "Action group is selected", 
        "channels": "(read-only)    F-Curves in this group", 
        "lock": "Action group is locked", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "show_expanded": "Action group is expanded"
      }
    }, 
    "CompositorNodeZcombine": {
      "fields": {
        "use_antialias_z": "Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders", 
        "use_alpha": "Take Alpha channel into account when doing the Z operation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorMatte": {
      "fields": {
        "color_saturation": "Saturation Tolerance for the color", 
        "color_hue": "Hue tolerance for colors to be considered a keying color", 
        "color_value": "Value Tolerance for the color"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "Library": {
      "fields": {
        "parent": "(read-only)", 
        "filepath": "Path to the library .blend file"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ArrayModifier": {
      "fields": {
        "fit_type": "Array length calculation method", 
        "curve": "Curve object to fit array length to", 
        "offset_object": "Use the location and rotation of another object to determine the distance and rotational change between arrayed items", 
        "count": "Number of duplicates to make", 
        "use_relative_offset": "Add an offset relative to the object's bounding box", 
        "use_constant_offset": "Add a constant offset", 
        "fit_length": "Length to fit array within", 
        "start_cap": "Mesh object to use as a start cap", 
        "use_object_offset": "Add another object's transformation to the total offset", 
        "use_merge_vertices_cap": "Merge vertices in first and last duplicates", 
        "relative_offset_displace": "The size of the geometry will determine the distance between arrayed items", 
        "end_cap": "Mesh object to use as an end cap", 
        "constant_offset_displace": "Value for the distance between arrayed items", 
        "use_merge_vertices": "Merge vertices in adjacent duplicates", 
        "merge_threshold": "Limit below which to merge vertices"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DriverVariable": {
      "fields": {
        "name": "Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)", 
        "type": "Driver variable type", 
        "targets": "(read-only)    Sources of input data for evaluating this variable"
      }
    }, 
    "NodeFrame": {
      "fields": {
        "label_size": "Font size to use for displaying the label", 
        "shrink": "Shrink the frame to minimal bounding box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NearSensor": {
      "fields": {
        "distance": "Trigger distance", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "reset_distance": "The distance where the sensor forgets the actor"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "ThemeDopeSheet": {
      "fields": {
        "summary": "Color of summary channel", 
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "use_clip": "Force the curve view to fit a defined boundary", 
        "curves": "(read-only)", 
        "black_level": "For RGB curves, the color that black is mapped to", 
        "white_level": "For RGB curves, the color that white is mapped to"
      }
    }, 
    "ShaderNodeExtendedMaterial": {
      "fields": {
        "use_diffuse": "Material Node outputs Diffuse", 
        "use_specular": "Material Node outputs Specular", 
        "invert_normal": "Material Node uses inverted normal"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "ShaderNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "StringProperty": {
      "fields": {
        "default": "(read-only)    string default value", 
        "length_max": "(read-only)    Maximum length of the string, 0 means unlimited"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "NodeSocketInterfaceFloatPercentage": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "UDKArmListPG": {
      "fields": {
        "otype": "This will be ignore when exported", 
        "bexport": "This will be ignore when exported", 
        "bselect": "This will be ignore when exported"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "NodeSocketInterfaceVectorVelocity": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "BezierSplinePoint": {
      "fields": {
        "handle_right": "Coordinates of the second handle", 
        "hide": "Visibility status", 
        "handle_right_type": "Handle types", 
        "select_left_handle": "Handle 1 selection status", 
        "weight_softbody": "Softbody goal weight", 
        "handle_left_type": "Handle types", 
        "select_right_handle": "Handle 2 selection status", 
        "tilt": "Tilt in 3D View", 
        "co": "Coordinates of the control point", 
        "radius": "Radius for beveling", 
        "handle_left": "Coordinates of the first handle", 
        "select_control_point": "Control point selection status"
      }
    }, 
    "Function": {
      "fields": {
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "is_registered": "(read-only)    Function is registered as callback as part of type registration", 
        "use_self": "(read-only)    Function does not pass its self as an argument (becomes a static method in python)", 
        "is_registered_optional": "(read-only)    Function is optionally registered as callback part of type registration", 
        "description": "(read-only)    Description of the Function's purpose", 
        "use_self_type": "(read-only)    Function passes its self type as an argument (becomes a class method in python if use_self is false)", 
        "parameters": "(read-only)    Parameters for the function"
      }
    }, 
    "BoidRule": {
      "fields": {
        "use_in_air": "Use rule when boid is flying", 
        "name": "Boid rule name", 
        "use_on_land": "Use rule when boid is on land", 
        "type": "(read-only)"
      }
    }, 
    "MeshTextureFace": {
      "fields": {
        "uv_raw": "Fixed size UV coordinates array"
      }
    }, 
    "CompositorNodeBoxMask": {
      "fields": {
        "rotation": "Rotation angle of the box", 
        "width": "Width of the box", 
        "x": "X position of the middle of the box", 
        "y": "Y position of the middle of the box", 
        "height": "Height of the box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "BlendDataLamps": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataTextures": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "EnvironmentMapTexture": {
      "fields": {
        "environment_map": "(read-only)    Get the environment map associated with this texture", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "image": "Source image file to read the environment map from", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "filter_type": "Texture filter to use for sampling image", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "filter_probes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "GameStringProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "Armature": {
      "fields": {
        "edit_bones": "(read-only)", 
        "show_axes": "Draw bone axes", 
        "use_deform_delay": "Don't deform children when manipulating bones in Pose Mode", 
        "ghost_type": "Method of Onion-skinning for active Action", 
        "ghost_frame_start": "Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "show_bone_custom_shapes": "Draw bones with their custom shapes", 
        "show_names": "Draw bone names", 
        "use_mirror_x": "Apply changes to matching bone on opposite side of X-Axis", 
        "deform_method": "Vertex Deformer Method (Game Engine only)", 
        "pose_position": "Show armature in binding pose or final posed state", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "bones": "(read-only)", 
        "use_auto_ik": "Add temporary IK constraints while grabbing bones in Pose Mode", 
        "ghost_step": "Number of frame steps on either side of current frame to show as ghosts (only for 'Around Current Frame' Onion-skinning method)", 
        "layers_protected": "Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo", 
        "layers": "Armature layer visibility", 
        "ghost_frame_end": "End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "ghost_size": "Frame step for Ghosts (not for 'On Keyframes' Onion-skinning method)", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "show_group_colors": "Draw bone group colors"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MeshFloatPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MaskModifier": {
      "fields": {
        "vertex_group": "Vertex group name", 
        "invert_vertex_group": "Use vertices that are not part of region defined", 
        "armature": "Armature to use as source of bones to mask"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SpeedControlSequence": {
      "fields": {
        "multiply_speed": "Multiply the resulting speed after the speed factor", 
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "use_as_speed": "Interpret the value as speed instead of a frame number", 
        "scale_to_length": "Scale values from 0.0 to 1.0 to target sequence length"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "FModifierNoise": {
      "fields": {
        "phase": "A random seed for the noise effect", 
        "depth": "Amount of fine level detail present in the noise", 
        "strength": "Amplitude of the noise - the amount that it modifies the underlying curve", 
        "scale": "Scaling (in time) of the noise", 
        "blend_type": "Method of modifying the existing F-Curve"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "BlendDataScreens": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "Lamp": {
      "fields": {
        "color": "Light color", 
        "distance": "Falloff distance - the light is at half the original intensity at this point", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "active_texture": "Active texture slot being displayed", 
        "cycles": "(read-only)    Cycles lamp settings", 
        "use_specular": "Create specular highlights", 
        "type": "Type of Lamp", 
        "use_own_layer": "Illuminate objects only on the same layers the lamp is on", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "active_texture_index": "Index of active texture slot", 
        "use_diffuse": "Do diffuse shading", 
        "node_tree": "(read-only)    Node tree for node based lamps", 
        "use_nodes": "Use shader nodes to render the lamp", 
        "energy": "Amount of light that the lamp emits", 
        "use_negative": "Cast negative light"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "KeyingSets": {
      "fields": {
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')", 
        "active": "Active Keying Set used to insert/delete keyframes"
      }
    }, 
    "DelaySensor": {
      "fields": {
        "duration": "If >0, delay in number of logic tics before the negative trigger following the positive trigger", 
        "use_repeat": "Toggle repeat option (if selected, the sensor restarts after Delay+Duration logic tics)", 
        "delay": "Delay in number of logic tics before the positive trigger (default 60 per second)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "Modifier": {
      "fields": {
        "show_on_cage": "Enable direct editing of modifier control cage", 
        "show_viewport": "Display modifier in realtime", 
        "use_apply_on_spline": "Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface", 
        "show_in_editmode": "Use modifier while in the Edit mode", 
        "name": "Modifier name", 
        "type": "(read-only)", 
        "show_render": "Use modifier during rendering", 
        "show_expanded": "Set modifier expanded in the user interface"
      }
    }, 
    "MeshStringPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "ControlFluidSettings": {
      "fields": {
        "attraction_radius": "Force field radius around the control object", 
        "start_time": "Time when the control particles are activated", 
        "attraction_strength": "Force strength for directional attraction towards the control object", 
        "velocity_radius": "Force field radius around the control object", 
        "use": "Object contributes to the fluid simulation", 
        "end_time": "Time when the control particles are deactivated", 
        "use_reverse_frames": "Reverse control object movement", 
        "velocity_strength": "Force strength of how much of the control object's velocity is influencing the fluid velocity", 
        "quality": "Quality which is used for object sampling (higher = better but slower)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "Addon": {
      "fields": {
        "preferences": "(read-only)", 
        "module": "Module name"
      }
    }, 
    "ShaderNodeTexNoise": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "CollectionProperty": {
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "InflowFluidSettings": {
      "fields": {
        "use_local_coords": "Use local coordinates for inflow (e.g. for rotating objects)", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "inflow_velocity": "Initial velocity of fluid", 
        "volume_initialization": "Volume initialization type", 
        "use": "Object contributes to the fluid simulation"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "LampTextureSlot": {
      "fields": {
        "use_map_shadow": "Let the texture affect the shadow color of the lamp", 
        "shadow_factor": "Amount texture affects shadow", 
        "color_factor": "Amount texture affects color values", 
        "use_map_color": "Let the texture affect the basic color of the lamp", 
        "object": "Object to use for mapping with Object texture coordinates"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "CompositorNodeDespeckle": {
      "fields": {
        "threshold": "Threshold for detecting pixels to despeckle", 
        "threshold_neighbour": "Threshold for the number of neighbor pixels that must match"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CyclesRenderSettings": {
      "fields": {
        "use_layer_samples": "How to use per render layer sample settings", 
        "seed": "Seed value for integrator to get different noise patterns", 
        "transparent_max_bounces": "Maximum number of transparent bounces", 
        "use_progressive_refine": "Instead of rendering each tile until it is finished, refine the whole image progressively (this renders somewhat slower, but time can be saved by manually stopping the render when the noise is low enough)", 
        "glossy_bounces": "Maximum number of glossy reflection bounces, bounded by total maximum", 
        "film_exposure": "Image brightness scale", 
        "shading_system": "Use Open Shading Language (CPU rendering only)", 
        "transmission_bounces": "Maximum number of transmission bounces, bounded by total maximum", 
        "use_cache": "Cache last built BVH to disk for faster re-render if no geometry changed", 
        "ao_samples": "Number of ambient occlusion samples to render for each AA sample", 
        "diffuse_samples": "Number of diffuse bounce samples to render for each AA sample", 
        "preview_start_resolution": "Resolution to start rendering preview at, progressively increasing it to the full viewport size", 
        "aa_samples": "Number of antialiasing samples to render for each pixel", 
        "sampling_pattern": "Random sampling pattern used by the integrator", 
        "transparent_min_bounces": "Minimum number of transparent bounces, setting this lower than the maximum enables probabilistic path termination (faster but noisier)", 
        "use_transparent_shadows": "Use transparency of surfaces for rendering shadows", 
        "feature_set": "Feature set to use for rendering", 
        "filter_type": "Pixel filter type", 
        "debug_use_spatial_splits": "Use BVH spatial splits: longer builder time, faster render", 
        "film_transparent": "World background is transparent with premultiplied alpha", 
        "max_bounces": "Total maximum number of bounces", 
        "min_bounces": "Minimum number of bounces, setting this lower than the maximum enables probabilistic path termination (faster but noisier)", 
        "preview_pause": "Pause all viewport preview renders", 
        "no_caustics": "Leave out caustics, resulting in a darker image with less noise", 
        "mesh_light_samples": "Number of mesh emission light samples to render for each AA sample", 
        "subsurface_samples": "Number of subsurface scattering samples to render for each AA sample", 
        "diffuse_bounces": "Maximum number of diffuse reflection bounces, bounded by total maximum", 
        "tile_order": "Tile order for rendering", 
        "sample_clamp": "If non-zero, the maximum value for a sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy", 
        "blur_glossy": "Adaptively blur glossy shaders after blurry bounces, to reduce noise at the cost of accuracy", 
        "glossy_samples": "Number of glossy bounce samples to render for each AA sample", 
        "samples": "Number of samples to render for each pixel", 
        "preview_samples": "Number of samples to render in the viewport, unlimited if 0", 
        "use_square_samples": "Square sampling values for easier artist control", 
        "filter_width": "Pixel filter width", 
        "preview_active_layer": "Preview active render layer in viewport", 
        "debug_bvh_type": "Choose between faster updates, or faster render", 
        "progressive": "Method to sample lights and materials", 
        "preview_aa_samples": "Number of antialiasing samples to render in the viewport, unlimited if 0", 
        "device": "Device to use for rendering", 
        "transmission_samples": "Number of transmission bounce samples to render for each AA sample"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "NodeSocketInterfaceVector": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketVectorEuler": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "MeshPolygon": {
      "fields": {
        "area": "(read-only)    Read only area of this polygon", 
        "normal": "(read-only)    Local space unit length normal vector for this polygon", 
        "vertices": "Vertex indices", 
        "center": "(read-only)    Center of this polygon", 
        "index": "(read-only)    Index of this polygon", 
        "loop_start": "Index of the first loop of this polygon", 
        "loop_total": "Number of loops used by this polygon"
      }
    }, 
    "NodeOutputFileSlotFile": {
      "fields": {
        "path": "Subpath used for this slot", 
        "format": "(read-only)"
      }
    }, 
    "NodeSocketInterfaceIntFactor": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "MeshLoop": {
      "fields": {
        "normal": "(read-only)    Local space unit length split normal vector of this vertex for this polygon (only computed on demand!)", 
        "index": "(read-only)    Index of this loop", 
        "edge_index": "Edge index", 
        "vertex_index": "Vertex index"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "principal": "Optical center of lens", 
        "pixel_aspect": "Pixel aspect ratio", 
        "focal_length": "Camera's focal length", 
        "k1": "First coefficient of third order polynomial radial distortion", 
        "sensor_width": "Width of CCD sensor in millimeters", 
        "k2": "Second coefficient of third order polynomial radial distortion", 
        "k3": "Third coefficient of third order polynomial radial distortion", 
        "units": "Units used for camera focal length", 
        "focal_length_pixels": "Camera's focal length"
      }
    }, 
    "PoseBoneConstraints": {
      "fields": {
        "active": "Active PoseChannel constraint"
      }
    }, 
    "BlendDataParticles": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "TextureSlot": {
      "fields": {
        "use_stencil": "Use this texture as a blending value on the next texture", 
        "use_rgb_to_intensity": "Convert texture RGB values to intensity (gray) values", 
        "color": "Default color for textures that don't return RGB or when RGB to intensity is enabled", 
        "invert": "Invert the values of the texture to reverse its effect", 
        "offset": "Fine tune of the texture mapping X, Y and Z locations", 
        "texture": "Texture datablock used by this texture slot", 
        "name": "(read-only)    Texture slot name", 
        "output_node": "Which output node to use, for node-based textures", 
        "scale": "Set scaling for the texture's X, Y and Z sizes", 
        "default_value": "Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard", 
        "blend_type": "Mode used to apply the texture"
      }
    }, 
    "ShaderNodeMapping": {
      "fields": {
        "min": "Minimum value for clipping", 
        "max": "Maximum value for clipping", 
        "vector_type": "Type of vector that the mapping transforms", 
        "use_min": "Whether to use minimum clipping value", 
        "use_max": "Whether to use maximum clipping value"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "MeshTexturePolyLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of UV map", 
        "active": "Set the map as active for display and editing", 
        "active_render": "Set the map as active for rendering", 
        "active_clone": "Set the map as active for cloning"
      }
    }, 
    "SteeringActuator": {
      "fields": {
        "acceleration": "Max acceleration", 
        "turn_speed": "Max turn speed", 
        "distance": "Relax distance", 
        "navmesh": "Navigation mesh", 
        "update_period": "Path update period", 
        "facing_axis": "Axis for automatic facing", 
        "facing": "Enable automatic facing", 
        "normal_up": "Use normal of the navmesh to set \"UP\" vector", 
        "velocity": "Velocity magnitude", 
        "self_terminated": "Terminate when target is reached", 
        "show_visualization": "Enable debug visualization for 'Path following'", 
        "target": "Target object"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "CastModifier": {
      "fields": {
        "cast_type": "Target object shape", 
        "size": "Size of projection shape (leave as 0 for auto)", 
        "vertex_group": "Vertex group name", 
        "radius": "Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)", 
        "use_transform": "Use object transform to control projection shape", 
        "use_radius_as_size": "Use radius as size of projection shape (0 = auto)", 
        "object": "Control object: if available, its location determines the center of the effect"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Node": {
      "fields": {
        "outputs": "(read-only)", 
        "parent": "Parent this node is attached to", 
        "select": "Node selection state", 
        "color": "Custom color of the node body", 
        "inputs": "(read-only)", 
        "label": "Optional custom node label", 
        "type": "(read-only)    Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)", 
        "use_custom_color": "Use custom color for the node", 
        "bl_label": "The node label", 
        "width_hidden": "Width of the node in hidden state", 
        "show_texture": "Draw node in viewport textured draw mode", 
        "bl_icon": "The node icon", 
        "bl_static_type": "Node type (deprecated, use with care)", 
        "name": "Unique node identifier", 
        "width": "Width of the node", 
        "internal_links": "(read-only)    Internal input-to-output connections for muting", 
        "dimensions": "(read-only)    Absolute bounding box dimensions of the node", 
        "height": "Height of the node"
      }
    }, 
    "Sculpt": {
      "fields": {
        "use_threaded": "Take advantage of multiple CPU cores to improve sculpting performance", 
        "detail_size": "Maximum edge length for dynamic topology sculpting (in pixels)", 
        "use_edge_collapse": "In dynamic-topology mode, collapse short edges in addition to subdividing long ones", 
        "radial_symmetry": "Number of times to copy strokes across the surface", 
        "show_diffuse_color": "Show diffuse color of object and overlay sculpt mask on top of it", 
        "use_smooth_shading": "Show faces in dynamic-topology mode with smooth shading rather than flat shaded", 
        "lock_z": "Disallow changes to the Z axis of vertices", 
        "use_symmetry_x": "Mirror brush across the X axis", 
        "lock_x": "Disallow changes to the X axis of vertices", 
        "use_symmetry_z": "Mirror brush across the Z axis", 
        "lock_y": "Disallow changes to the Y axis of vertices", 
        "use_symmetry_y": "Mirror brush across the Y axis", 
        "use_symmetry_feather": "Reduce the strength of the brush where it overlaps symmetrical daubs", 
        "use_deform_only": "Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)", 
        "symmetrize_direction": "Source and destination for symmetrize operator"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "ParticleHairKey": {
      "fields": {
        "co_local": "Location of the hair key in its local coordinate system, relative to the emitting face", 
        "weight": "Weight for cloth simulation", 
        "time": "Relative time of key over hair length", 
        "co": "Location of the hair key in object space"
      }
    }, 
    "CyclesCurveRenderSettings": {
      "fields": {
        "cull_backfacing": "Do not test the back-face of each strand", 
        "primitive": "Type of primitive used for hair rendering", 
        "shape": "Form of hair", 
        "use_curves": "Activate Cycles hair rendering for particle system", 
        "maximum_width": "Maximum extension that strand radius can be increased by", 
        "minimum_width": "Minimal pixel width for strands (0 - deactivated)", 
        "resolution": "Resolution of generated mesh", 
        "subdivisions": "Number of subdivisions used in Cardinal curve intersection (power of 2)"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "RenderResult": {
      "fields": {
        "resolution_y": "(read-only)", 
        "resolution_x": "(read-only)", 
        "layers": "(read-only)"
      }
    }, 
    "DriverTarget": {
      "fields": {
        "transform_type": "Driver variable type", 
        "id_type": "Type of ID-block that can be used", 
        "id": "ID-block that the specific property used can be found from (id_type property must be set first)", 
        "transform_space": "Space in which transforms are used", 
        "bone_target": "Name of PoseBone to use as target", 
        "data_path": "RNA Path (from ID-block) to property used"
      }
    }, 
    "RaySensor": {
      "fields": {
        "ray_type": "Toggle collision on material or property", 
        "material": "Only look for objects with this material (blank = all objects)", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "range": "Sense objects no farther than this distance", 
        "axis": "Along which axis the ray is cast", 
        "use_x_ray": "Toggle X-Ray option (see through objects that don't have the property)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "CompositorNodeTonemap": {
      "fields": {
        "intensity": "If less than zero, darkens image; otherwise, makes it brighter", 
        "offset": "Normally always 1, but can be used as an extra control to alter the brightness curve", 
        "contrast": "Set to 0 to use estimate from input image", 
        "adaptation": "If 0, global; if 1, based on pixel intensity", 
        "correction": "If 0, same for all channels; if 1, each independent", 
        "gamma": "If not used, set to 1", 
        "key": "The value the average luminance is mapped to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "MaskSequence": {
      "fields": {
        "use_translation": "Translate image before processing", 
        "use_float": "Convert input to float data", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)", 
        "mask": "Mask that this sequence uses"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "NodeSocketInterfaceInt": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "MaterialVolume": {
      "fields": {
        "density_scale": "Multiplier for the material's density", 
        "density": "The base density of the volume", 
        "reflection": "Multiplier to make out-scattered light brighter or darker (non-physically correct)", 
        "cache_resolution": "Resolution of the voxel grid, low resolutions are faster, high resolutions use more memory", 
        "step_method": "Method of calculating the steps through the volume", 
        "asymmetry": "Back scattering (-1.0) to Forward scattering (1.0) and the range in between", 
        "use_external_shadows": "Receive shadows from sources outside the volume (temporary)", 
        "ms_diffusion": "Diffusion factor, the strength of the blurring effect", 
        "emission_color": "Color of emitted light", 
        "reflection_color": "Color of light scattered out of the volume (does not affect transmission)", 
        "emission": "Amount of light that gets emitted by the volume", 
        "scattering": "Amount of light that gets scattered out by the volume - the more out-scattering, the shallower the light will penetrate", 
        "use_light_cache": "Pre-calculate the shading information into a voxel grid, speeds up shading at slightly less accuracy", 
        "ms_intensity": "Multiplier for multiple scattered light energy", 
        "ms_spread": "Proportional distance over which the light is diffused", 
        "transmission_color": "Result color of the volume, after other light has been scattered/absorbed", 
        "depth_threshold": "Stop ray marching early if transmission drops below this luminance - higher values give speedups in dense volumes at the expense of accuracy", 
        "light_method": "Method of shading, attenuating, and scattering light through the volume", 
        "step_size": "Distance between subsequent volume depth samples"
      }
    }, 
    "LineStyleGeometryModifier_Polygonalization": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "error": "Maximum distance between the original stroke and its polygonal approximation", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "RigidBodyObject": {
      "fields": {
        "mass": "How much the object 'weighs' irrespective of gravity", 
        "use_margin": "Use custom collision margin (some shapes will have a visible gap around them)", 
        "use_deactivation": "Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)", 
        "linear_damping": "Amount of linear velocity that is lost over time", 
        "type": "Role of object in Rigid Body Simulations", 
        "enabled": "Rigid Body actively participates to the simulation", 
        "friction": "Resistance of object to movement", 
        "kinematic": "Allow rigid body to be controlled by the animation system", 
        "deactivate_angular_velocity": "Angular Velocity below which simulation stops simulating object", 
        "deactivate_linear_velocity": "Linear Velocity below which simulation stops simulating object", 
        "restitution": "Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)", 
        "use_start_deactivated": "Deactivate rigid body at the start of the simulation", 
        "collision_groups": "Collision Groups Rigid Body belongs to", 
        "collision_margin": "Threshold of distance near surface where collisions are still considered (best results when non-zero)", 
        "angular_damping": "Amount of angular velocity that is lost over time", 
        "collision_shape": "Collision Shape of object in Rigid Body Simulations"
      }
    }, 
    "SceneGameData": {
      "fields": {
        "resolution_y": "Number of vertical pixels in the screen", 
        "physics_engine": "Physics engine used for physics simulation in the game engine", 
        "resolution_x": "Number of horizontal pixels in the screen", 
        "use_glsl_shaders": "Use shaders for GLSL rendering", 
        "use_desktop": "Use the current desktop resolution in fullscreen mode", 
        "show_debug_properties": "Show properties marked for debugging while the game runs", 
        "use_glsl_extra_textures": "Use extra textures like normal or specular maps for GLSL rendering", 
        "deactivation_angular_threshold": "Angular velocity that an object must be below before the deactivation timer can start", 
        "use_glsl_color_management": "Use color management for GLSL rendering", 
        "frequency": "Display clock frequency of fullscreen display", 
        "use_activity_culling": "Activity culling is enabled", 
        "use_display_lists": "Use display lists to speed up rendering by keeping geometry on the GPU", 
        "deactivation_time": "Amount of time (in seconds) after which objects with a velocity less than the given threshold will deactivate (0.0 means no deactivation)", 
        "show_physics_visualization": "Show a visualization of physics bounds and interactions", 
        "stereo_eye_separation": "Set the distance between the eyes - the camera focal distance/30 should be fine", 
        "use_deprecation_warnings": "Print warnings when using deprecated features in the python API", 
        "show_mouse": "Start player with a visible mouse cursor", 
        "deactivation_linear_threshold": "Linear velocity that an object must be below before the deactivation timer can start", 
        "vsync": "Change vsync settings", 
        "dome_text": "Custom Warp Mesh data file", 
        "use_frame_rate": "Respect the frame rate rather than rendering as many frames as possible", 
        "use_glsl_ramps": "Use ramps for GLSL rendering", 
        "frame_color": "Set color of the bars", 
        "frame_type": "Select the type of Framing you want", 
        "logic_step_max": "Maximum number of logic frame per game frame if graphics slows down the game, higher value allows better synchronization with physics", 
        "samples": "The number of AA Samples to use for MSAA", 
        "use_glsl_lights": "Use lights for GLSL rendering", 
        "dome_buffer_resolution": "Buffer Resolution - decrease it to increase speed", 
        "raster_storage": "Set the storage mode used by the rasterizer", 
        "recast_data": "(read-only)", 
        "dome_tessellation": "Tessellation level - check the generated mesh in wireframe mode", 
        "dome_tilt": "Camera rotation in horizontal axis", 
        "occlusion_culling_resolution": "Size of the occlusion buffer in pixel, use higher value for better precision (slower)", 
        "show_obstacle_simulation": "Enable debug visualization for obstacle simulation", 
        "use_material_caching": "Cache materials in the converter (this is faster, but can cause problems with older Singletexture and Multitexture games)", 
        "activity_culling_box_radius": "Radius of the activity bubble, in Manhattan length (objects outside the box are activity-culled)", 
        "show_framerate_profile": "Show framerate and profiling information while the game runs", 
        "use_animation_record": "Record animation to F-Curves", 
        "exit_key": "The key that exits the Game Engine", 
        "show_fullscreen": "Start player in a new fullscreen display", 
        "use_auto_start": "Automatically start game at load time", 
        "material_mode": "Material mode to use for rendering", 
        "physics_step_sub": "Number of simulation substep per physic timestep, higher value give better physics precision", 
        "dome_angle": "Field of View of the Dome - it only works in mode Fisheye and Truncated", 
        "use_restrict_animation_updates": "Restrict the number of animation updates to the animation FPS (this is better for performance, but can cause issues with smooth playback)", 
        "dome_mode": "Dome physical configurations", 
        "use_occlusion_culling": "Use optimized Bullet DBVT tree for view frustum and occlusion culling (more efficient, but it can waste unnecessary CPU if the scene doesn't have occluder objects)", 
        "use_glsl_nodes": "Use nodes for GLSL rendering", 
        "physics_gravity": "Gravitational constant used for physics simulation in the game engine", 
        "fps": "Nominal number of game frames per second (physics fixed timestep = 1/fps, independently of actual frame rate)", 
        "physics_step_max": "Maximum number of physics step per game frame if graphics slows down the game, higher value allows physics to keep up with realtime", 
        "use_glsl_shadows": "Use shadows for GLSL rendering", 
        "level_height": "Max difference in heights of obstacles to enable their interaction", 
        "depth": "Display bit depth of full screen display", 
        "obstacle_simulation": "Simulation used for obstacle avoidance in the game engine", 
        "stereo_mode": "Stereographic techniques"
      }
    }, 
    "ImageFormatSettings": {
      "fields": {
        "exr_codec": "Codec settings for OpenEXR", 
        "color_mode": "Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels", 
        "use_zbuffer": "Save the z-depth per pixel (32 bit unsigned int z-buffer)", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "use_jpeg2k_cinema_48": "Use Openjpeg Cinema Preset (48fps)", 
        "use_preview": "When rendering animations, save JPG preview images in same directory", 
        "cineon_black": "Log conversion reference blackpoint", 
        "jpeg2k_codec": "Codec settings for Jpek2000", 
        "quality": "Quality for image formats that support lossy compression", 
        "cineon_gamma": "Log conversion gamma", 
        "use_jpeg2k_ycc": "Save luminance-chrominance-chrominance channels instead of RGB colors", 
        "use_cineon_log": "Convert to logarithmic color space", 
        "color_depth": "Bit depth per channel", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "compression": "Compression level for formats that support lossless compression", 
        "cineon_white": "Log conversion reference whitepoint", 
        "file_format": "File format to save the rendered images as", 
        "use_jpeg2k_cinema_preset": "Use Openjpeg Cinema Preset"
      }
    }, 
    "UDKObjListPG": {
      "fields": {
        "otype": "This will be ignore when exported", 
        "bexport": "This will be ignore when exported", 
        "bselect": "This will be ignore when exported"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "VertexWeightEditModifier": {
      "fields": {
        "falloff_type": "How weights are mapped to their new values", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "default_weight": "Default weight a vertex will have if it is not in the vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "add_threshold": "Lower bound for a vertex's weight to be added to the vgroup", 
        "mask_tex_uv_layer": "UV map name", 
        "remove_threshold": "Upper bound for a vertex's weight to be removed from the vgroup", 
        "vertex_group": "Vertex group name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "map_curve": "(read-only)    Custom mapping curve", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "use_add": "Add vertices with weight over threshold to vgroup", 
        "use_remove": "Remove vertices with weight below threshold from vgroup"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ShaderNodeTexChecker": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "LineStyleAlphaModifier_Material": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "material_attribute": "Specify which material attribute is used", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "search_max": "Right-bottom corner of search area in normalized coordinates relative to marker position", 
        "pattern_corners": "Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position", 
        "search_min": "Left-bottom corner of search area in normalized coordinates relative to marker position", 
        "mute": "Is marker muted for current frame", 
        "co": "Marker position at frame in normalized coordinates", 
        "pattern_bound_box": "(read-only)    Pattern area bounding box in normalized coordinates", 
        "frame": "Frame number marker is keyframed on"
      }
    }, 
    "Mesh": {
      "fields": {
        "show_extra_indices": "Display the index numbers of selected vertices, edges, and faces", 
        "use_paint_mask": "Face selection masking for painting", 
        "show_extra_edge_angle": "Display selected edge angle, using global values when set in the transform panel", 
        "polygons": "(read-only)    Polygons of the mesh", 
        "show_edge_seams": "Display UV unwrapping seams", 
        "tessfaces": "(read-only)    Tessellated faces of the mesh (derived from polygons)", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "show_extra_edge_length": "Display selected edge lengths, using global values when set in the transform panel", 
        "tessface_vertex_colors": "(read-only)    All tessellated face colors (read-only, for use by renderers)", 
        "show_edge_crease": "Display creases created for subsurf weighting", 
        "uv_textures": "(read-only)    All UV maps", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "show_freestyle_edge_marks": "Display Freestyle edge marks, used with the Freestyle renderer", 
        "uv_texture_stencil": "UV map to mask the painted area", 
        "uv_layer_clone": "UV loop layer to be used as cloning source", 
        "show_edge_bevel_weight": "Display weights created for the Bevel modifier", 
        "use_mirror_x": "X Axis mirror editing", 
        "show_faces": "Display all faces as shades in the 3D view and UV editor", 
        "auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "show_double_sided": "Render/display the mesh with double or single sided lighting", 
        "auto_smooth_angle": "Maximum angle between face normals that 'Auto Smooth' will operate on", 
        "uv_texture_clone": "UV map to be used as cloning source", 
        "uv_texture_stencil_index": "Mask UV map index", 
        "materials": "(read-only)", 
        "polygon_layers_float": "(read-only)", 
        "uv_layer_clone_index": "Clone UV loop layer index", 
        "uv_texture_clone_index": "Clone UV map index", 
        "polygon_layers_int": "(read-only)", 
        "show_freestyle_face_marks": "Display Freestyle face marks, used with the Freestyle renderer", 
        "texspace_size": "Texture space size", 
        "show_normal_vertex": "Display vertex normals as lines", 
        "vertex_colors": "(read-only)    All vertex colors", 
        "use_auto_smooth": "Treat all set-smoothed faces with angles less than the specified angle as 'smooth' during render", 
        "use_mirror_topology": "Use topology based mirroring (for when both sides of mesh have matching, unique topology)", 
        "vertices": "(read-only)    Vertices of the mesh", 
        "polygon_layers_string": "(read-only)", 
        "tessface_uv_textures": "(read-only)    All UV maps for tessellated faces (read-only, for use by renderers)", 
        "texture_mesh": "Use another mesh for texture indices (vertex indices must be aligned)", 
        "shape_keys": "(read-only)", 
        "show_weight": "Draw weights in editmode", 
        "show_statvis": "Display statistical information about the mesh", 
        "show_edges": "Display selected edges using highlights in the 3D view and UV editor", 
        "show_edge_sharp": "Display sharp edges, used with the EdgeSplit modifier", 
        "uv_layer_stencil_index": "Mask UV loop layer index", 
        "uv_layer_stencil": "UV loop layer to mask the painted area", 
        "show_extra_face_angle": "Display the angles in the selected edges, using global values when set in the transform panel", 
        "show_normal_face": "Display face normals as lines", 
        "skin_vertices": "(read-only)    All skin vertices", 
        "total_face_sel": "(read-only)    Selected face count in editmode", 
        "edges": "(read-only)    Edges of the mesh", 
        "total_edge_sel": "(read-only)    Selected edge count in editmode", 
        "loops": "(read-only)    Loops of the mesh (polygon corners)", 
        "total_vert_sel": "(read-only)    Selected vertex count in editmode", 
        "texco_mesh": "Derive texture coordinates from another mesh", 
        "show_extra_face_area": "Display the area of selected faces, using global values when set in the transform panel", 
        "texspace_location": "Texture space location", 
        "uv_layers": "(read-only)    All UV loop layers", 
        "use_paint_mask_vertex": "Vertex selection masking for painting (weight paint only)", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "NodeTree": {
      "fields": {
        "active_input": "Index of the active input", 
        "outputs": "(read-only)    Node tree outputs", 
        "active_output": "Index of the active output", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "nodes": "(read-only)", 
        "bl_icon": "The node tree icon", 
        "grease_pencil": "Grease Pencil datablock", 
        "inputs": "(read-only)    Node tree inputs", 
        "view_center": "(read-only)", 
        "links": "(read-only)", 
        "type": "(read-only)    Node Tree type (deprecated, bl_idname is the actual node tree type identifier)", 
        "bl_label": "The node tree label"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LoopColors": {
      "fields": {
        "active_index": "Active vertex color index", 
        "active": "Active vertex color layer"
      }
    }, 
    "SpaceNodeEditorPath": {
      "fields": {
        "to_string": "(read-only)"
      }
    }, 
    "Header": {
      "fields": {
        "layout": "(read-only)    Structure of the header in the UI", 
        "bl_space_type": "The space where the header is going to be used in", 
        "bl_idname": "If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is \"OBJECT_HT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_HT_hello\""
      }
    }, 
    "RigidBodyConstraint": {
      "fields": {
        "object2": "Second Rigid Body Object to be constrained", 
        "limit_ang_z_upper": "Upper limit of Z axis rotation", 
        "object1": "First Rigid Body Object to be constrained", 
        "limit_ang_y_lower": "Lower limit of Y axis rotation", 
        "use_limit_ang_y": "Limit rotation around Y axis", 
        "use_limit_ang_z": "Limit rotation around Z axis", 
        "spring_damping_z": "Damping on the Z axis", 
        "limit_lin_x_upper": "Upper limit of X axis translation", 
        "spring_damping_y": "Damping on the Y axis", 
        "spring_damping_x": "Damping on the X axis", 
        "spring_stiffness_x": "Stiffness on the X axis", 
        "spring_stiffness_y": "Stiffness on the Y axis", 
        "spring_stiffness_z": "Stiffness on the Z axis", 
        "motor_lin_target_velocity": "Target linear motor velocity", 
        "type": "Type of Rigid Body Constraint", 
        "use_limit_ang_x": "Limit rotation around X axis", 
        "enabled": "Enable this constraint", 
        "use_spring_x": "Enable spring on X axis", 
        "use_spring_y": "Enable spring on Y axis", 
        "limit_lin_z_upper": "Upper limit of Z axis translation", 
        "motor_lin_max_impulse": "Maximum linear motor impulse", 
        "limit_lin_y_lower": "Lower limit of Y axis translation", 
        "limit_ang_x_upper": "Upper limit of X axis rotation", 
        "use_breaking": "Constraint can be broken if it receives an impulse above the threshold", 
        "motor_ang_target_velocity": "Target angular motor velocity", 
        "disable_collisions": "Disable collisions between constrained rigid bodies", 
        "use_limit_lin_z": "Limit translation on Z axis", 
        "limit_ang_z_lower": "Lower limit of Z axis rotation", 
        "limit_lin_x_lower": "Lower limit of X axis translation", 
        "motor_ang_max_impulse": "Maximum angular motor impulse", 
        "use_motor_lin": "Enable linear motor", 
        "use_override_solver_iterations": "Override the number of solver iterations for this constraint", 
        "use_spring_z": "Enable spring on Z axis", 
        "limit_lin_z_lower": "Lower limit of Z axis translation", 
        "breaking_threshold": "Impulse threshold that must be reached for the constraint to break", 
        "limit_ang_x_lower": "Lower limit of X axis rotation", 
        "limit_lin_y_upper": "Upper limit of Y axis translation", 
        "use_motor_ang": "Enable angular motor", 
        "limit_ang_y_upper": "Upper limit of Y axis rotation", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "use_limit_lin_y": "Limit translation on Y axis", 
        "use_limit_lin_x": "Limit translation on X axis"
      }
    }, 
    "GPencilLayer": {
      "fields": {
        "select": "Layer is selected for editing in the Dope Sheet", 
        "show_points": "Draw the points which make up the strokes (for debugging purposes)", 
        "color": "Color for all strokes in this layer", 
        "frames": "(read-only)    Sketches for this layer on different frames", 
        "line_width": "Thickness of strokes (in pixels)", 
        "ghost_range_max": "Maximum number of frames on either side of the active frame to show (0 = show the 'first' available sketch on either side)", 
        "use_onion_skinning": "Ghost frames on either side of frame", 
        "hide": "Set layer Visibility", 
        "show_x_ray": "Make the layer draw in front of objects", 
        "alpha": "Layer Opacity", 
        "lock": "Protect layer from further editing and/or frame changes", 
        "active_frame": "(read-only)    Frame currently being displayed for this layer", 
        "info": "Layer name", 
        "lock_frame": "Lock current frame displayed by layer"
      }
    }, 
    "CopyRotationConstraint": {
      "fields": {
        "use_z": "Copy the target's Z rotation", 
        "invert_x": "Invert the X rotation", 
        "use_x": "Copy the target's X rotation", 
        "use_offset": "Add original rotation into copied rotation", 
        "use_y": "Copy the target's Y rotation", 
        "invert_z": "Invert the Z rotation", 
        "invert_y": "Invert the Y rotation", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "SceneActuator": {
      "fields": {
        "camera": "Set this Camera (leave empty to refer to self object)", 
        "scene": "Scene to be added/removed/paused/resumed"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "RemeshModifier": {
      "fields": {
        "octree_depth": "Resolution of the octree; higher values give finer details", 
        "scale": "The ratio of the largest dimension of the model over the size of the grid", 
        "threshold": "If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "sharpness": "Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CyclesMaterialSettings": {
      "fields": {
        "sample_as_light": "Use multiple importance sampling for this material, disabling may reduce overall noise for large objects that emit little light compared to other light sources", 
        "use_transparent_shadow": "Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows", 
        "homogeneous_volume": "When using volume rendering, assume volume has the same density everywhere, for faster rendering"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "GlowSequence": {
      "fields": {
        "boost_factor": "Brightness multiplier", 
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "blur_radius": "Radius of glow effect", 
        "threshold": "Minimum intensity to trigger a glow", 
        "use_only_boost": "Show the glow buffer only", 
        "clamp": "Brightness limit of intensity", 
        "quality": "Accuracy of the blur effect"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Key": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this datablock", 
        "eval_time": "Evaluation time for absolute shape keys", 
        "key_blocks": "(read-only)    Shape keys", 
        "slurph": "Create a delay (in frames) in applying key positions, first vertex goes first", 
        "reference_key": "(read-only)", 
        "use_relative": "Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time", 
        "user": "(read-only)    Datablock using these shape keys"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "KeyingSet": {
      "fields": {
        "type_info": "(read-only)    Callback function defines for built-in Keying Sets", 
        "paths": "(read-only)    Keying Set Paths to define settings that get keyframed together", 
        "bl_description": "A short description of the keying set", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "bl_options": "Keying set options", 
        "is_path_absolute": "(read-only)    Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)"
      }
    }, 
    "Group": {
      "fields": {
        "objects": "(read-only)    A collection of this groups objects", 
        "layers": "Layers visible when this group is instanced as a dupli", 
        "dupli_offset": "Offset from the origin to use when instancing as DupliGroup"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "fields": {
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "amplitude": "Amplitude of the Perlin noise", 
        "expanded": "True if the modifier tab is expanded", 
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "angle": "Displacement direction", 
        "type": "(read-only)    Type of the modifier", 
        "frequency": "Frequency of the Perlin noise"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "NodeGroupInput": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "ConstraintTarget": {
      "fields": {
        "target": "Target Object"
      }
    }, 
    "ConstraintActuator": {
      "fields": {
        "angle_max": "Maximum angle (in degree) allowed with target direction (no correction is done if angle with target direction is between min and max)", 
        "fh_force": "Spring force within the force field area", 
        "fh_height": "Height of the force field area", 
        "distance": "Keep this distance to target", 
        "use_normal": "Set object axis along (local axis) or parallel (global axis) to the normal at hit position", 
        "range": "Maximum length of ray", 
        "damping": "Damping factor: time constant (in frame) of low pass filter", 
        "fh_damping": "Damping factor of the force field spring", 
        "direction_axis": "Select the axis to be aligned along the reference direction", 
        "direction_axis_pos": "Select the axis to be aligned along the reference direction", 
        "use_fh_paralel_axis": "Keep object axis parallel to normal", 
        "mode": "The type of the constraint", 
        "use_fh_normal": "Add a horizontal spring force on slopes", 
        "material": "Ray detects only Objects with this material", 
        "use_material_detect": "Detect material instead of property", 
        "rotation_max": "Reference Direction", 
        "use_local": "Set ray along object's axis or global axis", 
        "use_persistent": "Persistent actuator: stays active even if ray does not reach target", 
        "damping_rotation": "Use a different damping for orientation", 
        "property": "Ray detects only Objects with this property", 
        "time": "Maximum activation time in frame, 0 for unlimited", 
        "angle_min": "Minimum angle (in degree) to maintain with target direction (no correction is done if angle with target direction is between min and max)", 
        "use_force_distance": "Force distance of object to point of impact of ray", 
        "direction": "Direction of the ray"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "CompositorNodeTrackPos": {
      "fields": {
        "frame_relative": "Frame to be used for relative position", 
        "position": "Which marker position to use for output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "DynamicPaintModifier": {
      "fields": {
        "brush_settings": "(read-only)", 
        "canvas_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "NodeSocketVectorXYZ": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "Texture": {
      "fields": {
        "intensity": "Adjust the brightness of the texture", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "use_preview_alpha": "Show Alpha in Preview Render", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "color_ramp": "(read-only)", 
        "contrast": "Adjust the contrast of the texture", 
        "node_tree": "(read-only)    Node tree for node-based textures", 
        "use_nodes": "Make this a node-based texture", 
        "use_color_ramp": "Toggle color ramp operations"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ThemeOutliner": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "SplineIKConstraint": {
      "fields": {
        "chain_count": "How many bones are included in the chain", 
        "use_y_stretch": "Stretch the Y axis of the bones to fit the curve", 
        "use_curve_radius": "Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode", 
        "xz_scale_mode": "Method used for determining the scaling of the X and Z axes of the bones", 
        "use_even_divisions": "Ignore the relative lengths of the bones when fitting to the curve", 
        "use_chain_offset": "Offset the entire chain relative to the root joint", 
        "joint_bindings": "(EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages", 
        "target": "Curve that controls this relationship"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MaterialSubsurfaceScattering": {
      "fields": {
        "color": "Scattering color", 
        "color_factor": "Blend factor for SSS colors", 
        "use": "Enable diffuse subsurface scatting effects in a material", 
        "back": "Back scattering weight", 
        "scale": "Object scale factor", 
        "error_threshold": "Error tolerance (low values are slower and higher quality)", 
        "front": "Front scattering weight", 
        "radius": "Mean red/green/blue scattering path length", 
        "ior": "Index of refraction (higher values are denser)", 
        "texture_factor": "Texture scattering blend factor"
      }
    }, 
    "BoneGroup": {
      "fields": {
        "color_set": "Custom color set to use", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set"
      }
    }, 
    "TextureNodeCurveRGB": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "SunLamp": {
      "fields": {
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "sky": "(read-only)    Sky related settings for sun lamps", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "shadow_frustum_size": "Size of the frustum used for creating the shadow map", 
        "shadow_buffer_bias": "Shadow buffer sampling bias"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "SubtractSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "SimpleDeformModifier": {
      "fields": {
        "lock_x": "Do not allow deformation along the X axis", 
        "lock_y": "Do not allow deformation along the Y axis", 
        "origin": "Origin of modifier space coordinates", 
        "vertex_group": "Vertex group name", 
        "angle": "Angle of deformation", 
        "factor": "Amount to deform object", 
        "limits": "Lower/Upper limits for deform"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "RenderEngine": {
      "fields": {
        "resolution_y": "(read-only)", 
        "resolution_x": "(read-only)", 
        "camera_override": "(read-only)", 
        "render": "(read-only)"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "fields": {
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "amplitude": "Amplitude of the Perlin noise", 
        "expanded": "True if the modifier tab is expanded", 
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "angle": "Displacement direction", 
        "type": "(read-only)    Type of the modifier", 
        "frequency": "Frequency of the Perlin noise"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "CompositorNodeOutputFile": {
      "fields": {
        "active_input_index": "Active input index in details view list", 
        "format": "(read-only)", 
        "base_path": "Base output path for the image", 
        "file_slots": "(read-only)", 
        "layer_slots": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "Context": {
      "fields": {
        "area": "(read-only)", 
        "mode": "(read-only)", 
        "region_data": "(read-only)", 
        "blend_data": "(read-only)", 
        "tool_settings": "(read-only)", 
        "screen": "(read-only)", 
        "window": "(read-only)", 
        "region": "(read-only)", 
        "scene": "(read-only)", 
        "space_data": "(read-only)", 
        "user_preferences": "(read-only)", 
        "window_manager": "(read-only)"
      }
    }, 
    "NodeSocketInterfaceVectorAcceleration": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "Window": {
      "fields": {
        "width": "(read-only)    Window width", 
        "x": "(read-only)    Horizontal location of the window", 
        "screen": "Active screen showing in the window", 
        "y": "(read-only)    Vertical location of the window", 
        "height": "(read-only)    Window height"
      }
    }, 
    "NodeCustomGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node"
      ]
    }, 
    "LineStyleGeometryModifier_BezierCurve": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "error": "Maximum distance allowed between the new Bezier curve and the original backbone geometry", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "SmokeModifier": {
      "fields": {
        "domain_settings": "(read-only)", 
        "coll_settings": "(read-only)", 
        "flow_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "UVLoopLayers": {
      "fields": {
        "active_index": "Active UV loop layer index", 
        "active": "Active UV loop layer"
      }
    }, 
    "LineStyleThicknessModifier_DistanceFromCamera": {
      "fields": {
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "value_min": "Minimum output value of the mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property", 
        "expanded": "True if the modifier tab is expanded", 
        "value_max": "Maximum output value of the mapping", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "CompositorNodeBokehImage": {
      "fields": {
        "flaps": "Number of flaps", 
        "catadioptric": "Level of catadioptric of the bokeh", 
        "shift": "Shift of the lens components", 
        "angle": "Angle of the bokeh", 
        "rounding": "Level of rounding of the bokeh"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ThemeNodeEditor": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "noodle_curving": "Curving of the noodle", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "VoronoiTexture": {
      "fields": {
        "weight_1": "Voronoi feature weight 1", 
        "minkovsky_exponent": "Minkowski exponent", 
        "weight_2": "Voronoi feature weight 2", 
        "noise_intensity": "Scales the intensity of the noise", 
        "weight_3": "Voronoi feature weight 3", 
        "weight_4": "Voronoi feature weight 4", 
        "distance_metric": "Algorithm used to calculate distance of sample points to feature points", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "BlendDataLibraries": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "FluidSettings": {
      "fields": {
        "type": "Type of participation in the fluid simulation"
      }
    }, 
    "AlphaOverSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "ShaderNodeTexMusgrave": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeRGBCurve": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "Event": {
      "fields": {
        "mouse_region_x": "(read-only)    The region relative horizontal location of the mouse", 
        "ctrl": "(read-only)    True when the Ctrl key is held", 
        "shift": "(read-only)    True when the Shift key is held", 
        "alt": "(read-only)    True when the Alt/Option key is held", 
        "mouse_y": "(read-only)    The window relative vertical location of the mouse", 
        "mouse_x": "(read-only)    The window relative horizontal location of the mouse", 
        "oskey": "(read-only)    True when the Cmd key is held", 
        "mouse_region_y": "(read-only)    The region relative vertical location of the mouse", 
        "type": "(read-only)", 
        "mouse_prev_y": "(read-only)    The window relative vertical location of the mouse", 
        "mouse_prev_x": "(read-only)    The window relative horizontal location of the mouse", 
        "unicode": "(read-only)    Single unicode character for this event", 
        "ascii": "(read-only)    Single ASCII character for this event", 
        "value": "(read-only)    The type of event, only applies to some"
      }
    }, 
    "CompositorNodeEllipseMask": {
      "fields": {
        "rotation": "Rotation angle of the box", 
        "width": "Width of the box", 
        "x": "X position of the middle of the box", 
        "y": "Y position of the middle of the box", 
        "height": "Height of the box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ThemeLogicEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "SplinePoint": {
      "fields": {
        "hide": "Visibility status", 
        "select": "Selection status", 
        "weight_softbody": "Softbody goal weight", 
        "weight": "NURBS weight", 
        "tilt": "Tilt in 3D View", 
        "co": "Point coordinates", 
        "radius": "Radius for beveling"
      }
    }, 
    "ThemeConsole": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeUserInterface": {
      "fields": {
        "wcol_menu": "(read-only)", 
        "wcol_toggle": "(read-only)", 
        "wcol_box": "(read-only)", 
        "wcol_radio": "(read-only)", 
        "wcol_regular": "(read-only)", 
        "menu_shadow_width": "Width of menu shadows in standard pixels, set to zero to disable it", 
        "wcol_num": "(read-only)", 
        "wcol_menu_back": "(read-only)", 
        "wcol_option": "(read-only)", 
        "menu_shadow_fac": "Blending factor for menu shadows", 
        "wcol_numslider": "(read-only)", 
        "wcol_list_item": "(read-only)", 
        "wcol_pulldown": "(read-only)", 
        "icon_alpha": "Transparency of icons in the interface, to reduce contrast", 
        "wcol_scroll": "(read-only)", 
        "wcol_text": "(read-only)", 
        "wcol_progress": "(read-only)", 
        "wcol_tool": "(read-only)", 
        "wcol_tooltip": "(read-only)", 
        "wcol_menu_item": "(read-only)", 
        "wcol_state": "(read-only)"
      }
    }, 
    "ToolSettings": {
      "fields": {
        "use_mesh_automerge": "Automatically merge vertices moved to the same location", 
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones", 
        "vertex_paint": "(read-only)", 
        "snap_target": "Which part to snap onto the target", 
        "use_snap_project": "Project individual elements on the surface of other objects", 
        "double_threshold": "Limit for removing duplicates and 'Auto Merge'", 
        "etch_template": "Template armature that will be retargeted to the stroke", 
        "use_keyframe_insert_keyingset": "Automatic keyframe insertion using active Keying Set only", 
        "edge_path_live_unwrap": "Changing edges seam re-calculates UV unwrap", 
        "image_paint": "(read-only)", 
        "etch_side": "Text to replace &S with (e.g. 'Arm.&S' -> 'Arm.R' or 'Arm.Right')", 
        "use_grease_pencil_sessions": "Allow drawing multiple strokes at a time with Grease Pencil", 
        "use_proportional_edit_mask": "Proportional editing mask mode", 
        "use_snap_self": "Snap onto itself (editmode)", 
        "use_etch_overdraw": "Adjust strokes by drawing near them", 
        "statvis": "(read-only)", 
        "use_snap": "Snap during transform", 
        "use_keyframe_insert_auto": "Automatic keyframe insertion for Objects and Bones", 
        "vertex_group_subset": "Filter Vertex groups for Display", 
        "use_etch_quick": "Automatically convert and delete on stroke end", 
        "etch_number": "Text to replace &N with (e.g. 'Finger.&N' -> 'Finger.1' or 'Finger.One')", 
        "uv_sculpt_lock_borders": "Disable editing of boundary edges", 
        "use_record_with_nla": "Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking", 
        "normal_size": "Display size for normals in the 3D view", 
        "proportional_edit": "Proportional Editing mode, allows transforms with distance fall-off", 
        "proportional_size": "Display size for proportional editing circle", 
        "uv_sculpt_tool": "Select Tools for the UV sculpt brushes", 
        "use_etch_autoname": "Automatically generate values to replace &N and &S suffix placeholders in template names", 
        "use_uv_sculpt": "Enable brush for UV sculpting", 
        "vertex_group_weight": "Weight to assign in vertex groups", 
        "etch_roll_mode": "Method used to adjust the roll of bones when retargeting", 
        "use_proportional_edit_objects": "Proportional editing object mode", 
        "uv_sculpt_all_islands": "Brush operates on all islands", 
        "sculpt": "(read-only)", 
        "snap_element": "Type of element to snap to", 
        "vertex_group_user": "Display unweighted vertices (multi-paint overrides)", 
        "use_auto_normalize": "Ensure all bone-deforming vertex groups add up to 1.0 while weight painting", 
        "etch_convert_mode": "Method used to convert stroke to bones", 
        "snap_uv_element": "Type of element to snap to", 
        "weight_paint": "(read-only)", 
        "use_uv_select_sync": "Keep UV and edit mode mesh selection in sync", 
        "uv_sculpt": "(read-only)", 
        "use_snap_align_rotation": "Align rotation with the snapping target", 
        "use_snap_peel_object": "Consider objects as whole when finding volume center", 
        "edge_path_mode": "The edge flag to tag when selecting the shortest path", 
        "particle_edit": "(read-only)", 
        "etch_length_limit": "Maximum length of the subdivided bones", 
        "proportional_edit_falloff": "Falloff type for proportional editing mode", 
        "unified_paint_settings": "(read-only)", 
        "uv_relax_method": "Algorithm used for UV relaxation", 
        "uv_select_mode": "UV selection and display mode", 
        "etch_subdivision_number": "Number of bones in the subdivided stroke", 
        "use_multipaint": "Paint across all selected bones while weight painting", 
        "use_bone_sketching": "Use sketching to create and edit bones", 
        "show_uv_local_view": "Draw only faces with the currently displayed image assigned", 
        "snap_node_element": "Type of element to snap to", 
        "etch_adaptive_limit": "Correlation threshold for number of bones in the subdivided stroke", 
        "mesh_select_mode": "Which mesh elements selection works on"
      }
    }, 
    "SpaceNLA": {
      "fields": {
        "use_realtime_update": "When transforming strips, changes to the animation data are flushed to other views", 
        "show_strip_curves": "Show influence F-Curves on strips", 
        "show_seconds": "Show timing in seconds not frames", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "auto_snap": "Automatic time snapping settings for transformations"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "CameraSolverConstraint": {
      "fields": {
        "use_active_clip": "Use active clip defined in scene", 
        "clip": "Movie Clip to get tracking data from"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FFmpegSettings": {
      "fields": {
        "use_lossless_output": "Use lossless output for video streams", 
        "gopsize": "Distance between key frames", 
        "minrate": "Rate control: min rate (kb/s)", 
        "audio_channels": "Audio channel count", 
        "format": "Output file format", 
        "audio_bitrate": "Audio bitrate (kb/s)", 
        "audio_codec": "FFmpeg audio codec to use", 
        "buffersize": "Rate control: buffer size (kb)", 
        "muxrate": "Mux rate (bits/s(!))", 
        "codec": "FFmpeg codec to use", 
        "audio_volume": "Audio volume", 
        "audio_mixrate": "Audio samplerate(samples/s)", 
        "maxrate": "Rate control: max rate (kb/s)", 
        "packetsize": "Mux packet size (byte)", 
        "use_autosplit": "Autosplit output at 2GB boundary", 
        "video_bitrate": "Video bitrate (kb/s)"
      }
    }, 
    "Constraint": {
      "fields": {
        "error_rotation": "(read-only)    Amount of residual error in radians for constraints that work on orientation", 
        "is_valid": "(read-only)    Constraint has valid settings and can be evaluated", 
        "name": "Constraint name", 
        "active": "Constraint is the one being edited", 
        "is_proxy_local": "Constraint was added in this proxy instance (i.e. did not belong to source Armature)", 
        "mute": "Enable/Disable Constraint", 
        "target_space": "Space that target is evaluated in", 
        "error_location": "(read-only)    Amount of residual error in Blender space unit for constraints that work on position", 
        "type": "(read-only)", 
        "owner_space": "Space that owner is evaluated in", 
        "show_expanded": "Constraint's panel is expanded in UI", 
        "influence": "Amount of influence constraint will have on the final solution"
      }
    }, 
    "KeyingSetsAll": {
      "fields": {
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')", 
        "active": "Active Keying Set used to insert/delete keyframes"
      }
    }, 
    "CompositorNodeTransform": {
      "fields": {
        "filter_type": "Method to use to filter transform"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "VertexPaint": {
      "fields": {
        "use_all_faces": "Paint on all faces inside brush", 
        "use_normal": "Apply the vertex normal before painting", 
        "use_group_restrict": "Restrict painting to vertices in the group", 
        "use_spray": "Keep applying paint effect while holding mouse"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "NodeSocketFloatAngle": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "CompositorNodePremulKey": {
      "fields": {
        "mapping": "Conversion between premultiplied alpha and key alpha"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "SceneObjects": {
      "fields": {
        "active": "Active object for this scene"
      }
    }, 
    "ThemeFontStyle": {
      "fields": {
        "font_kerning_style": "Which style to use for font kerning", 
        "shadow": "Shadow size in pixels (0, 3 and 5 supported)", 
        "shadow_value": "Shadow color in gray value", 
        "shadow_offset_y": "Shadow offset in pixels", 
        "shadow_offset_x": "Shadow offset in pixels"
      }
    }, 
    "ShaderNodeTexEnvironment": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings", 
        "projection": "Projection of the input image", 
        "color_space": "Image file color space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "CompositorNodeViewer": {
      "fields": {
        "tile_order": "Tile order", 
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "DisplaceModifier": {
      "fields": {
        "strength": "Amount to displace geometry", 
        "mid_level": "Material value that gives no displacement", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "uv_layer": "UV map name", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VertexWeightMixModifier": {
      "fields": {
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mix_set": "Which vertices should be affected", 
        "vertex_group_b": "Second vertex group name", 
        "vertex_group_a": "First vertex group name", 
        "mix_mode": "How weights from vgroup B affect weights of vgroup A", 
        "default_weight_a": "Default weight a vertex will have if it is not in the first A vgroup", 
        "default_weight_b": "Default weight a vertex will have if it is not in the second B vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CurveModifier": {
      "fields": {
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "deform_axis": "The axis that the curve deforms along", 
        "object": "Curve object to deform with"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ThemeTextEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "MovieTrackingPlaneTracks": {
      "fields": {
        "active": "Active plane track in this tracking data object"
      }
    }, 
    "SpaceNodeEditor": {
      "fields": {
        "backdrop_y": "Backdrop Y offset", 
        "show_highlight": "Highlight nodes that are being calculated", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "backdrop_channels": "Channels of the image to draw", 
        "cursor_location": "Location for adding new nodes", 
        "shader_type": "Type of data to take shader from", 
        "path": "(read-only)    Path from the data block to the currently edited node tree", 
        "use_auto_render": "Re-render and composite changed layers on 3D edits", 
        "id_from": "(read-only)    Datablock from which the edited datablock is linked", 
        "show_backdrop": "Use active Viewer Node output as backdrop for compositing nodes", 
        "tree_type": "Node tree type to display and edit", 
        "pin": "Use the pinned node tree", 
        "use_hidden_preview": "Hide preview for newly creating nodes", 
        "edit_tree": "(read-only)    Node tree being displayed and edited", 
        "backdrop_x": "Backdrop X offset", 
        "node_tree": "Base node tree from context", 
        "id": "(read-only)    Datablock whose nodes are being edited", 
        "texture_type": "Type of data to take texture from", 
        "backdrop_zoom": "Backdrop zoom factor"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "EnumProperty": {
      "fields": {
        "default": "(read-only)    Default value for this enum", 
        "default_flag": "(read-only)    Default value for this enum", 
        "enum_items": "(read-only)    Possible values for the property"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "CompositorNodeBokehBlur": {
      "fields": {
        "blur_max": "Blur limit, maximum CoC radius", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CyclesCameraSettings": {
      "fields": {
        "aperture_type": "Use F/stop number or aperture radius", 
        "fisheye_fov": "Field of view for the fisheye lens", 
        "aperture_size": "Radius of the aperture for depth of field (higher values give more defocus)", 
        "aperture_fstop": "F/stop ratio (lower numbers give more defocus, higher numbers give a sharper image)", 
        "fisheye_lens": "Lens focal length (mm)", 
        "aperture_rotation": "Rotation of blades in aperture", 
        "panorama_type": "Distortion to use for the calculation", 
        "aperture_blades": "Number of blades in aperture for polygonal bokeh (at least 3)"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "NodeSocketFloatFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "MovieTrackingObject": {
      "fields": {
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "is_camera": "(read-only)    Object is used for camera tracking", 
        "name": "Unique name of object", 
        "reconstruction": "(read-only)", 
        "scale": "Scale of object solution in camera space", 
        "keyframe_a": "First keyframe used for reconstruction initialization", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object", 
        "keyframe_b": "Second keyframe used for reconstruction initialization"
      }
    }, 
    "PointerProperty": {
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "GameObjectSettings": {
      "fields": {
        "show_sensors": "Shows sensors for this object in the user interface", 
        "rotation_damping": "General rotation damping", 
        "use_all_states": "Set all state bits", 
        "use_rotate_from_normal": "Use face normal to rotate object, so that it points away from the surface", 
        "mass": "Mass of the object", 
        "velocity_max": "Clamp velocity to this maximum speed", 
        "friction_coefficients": "Relative friction coefficients in the in the X, Y and Z directions, when anisotropic friction is enabled", 
        "use_activity_culling": "Disable simulation of angular motion along the Z axis", 
        "actuators": "(read-only)    Game engine actuators to act on events", 
        "lock_rotation_x": "Disable simulation of angular motion along the X axis", 
        "collision_group": "The collision group of the object", 
        "lock_rotation_y": "Disable simulation of angular motion along the Y axis", 
        "lock_rotation_z": "Disable simulation of angular motion along the Z axis", 
        "step_height": "Maximum height of steps the character can run over", 
        "use_anisotropic_friction": "Enable anisotropic friction", 
        "jump_speed": "Upward velocity applied to the character when jumping", 
        "use_actor": "Object is detected by the Near and Radar sensor", 
        "controllers": "(read-only)    Game engine controllers to process events, connecting sensors to actuators", 
        "physics_type": "Select the type of physical representation", 
        "radius": "Radius of bounding sphere and material physics", 
        "collision_margin": "Extra margin around object for collision detection, small amount required for stability", 
        "states_initial": "Initial state when the game starts", 
        "soft_body": "(read-only)    Settings for Bullet soft body simulation", 
        "show_controllers": "Shows controllers for this object in the user interface", 
        "show_actuators": "Shows actuators for this object in the user interface", 
        "use_material_physics_fh": "React to force field physics settings in materials", 
        "obstacle_radius": "Radius of object representation in obstacle simulation", 
        "collision_mask": "The groups this object can collide with", 
        "lock_location_y": "Disable simulation of linear motion along the Y axis", 
        "collision_bounds_type": "Select the collision type", 
        "lock_location_x": "Disable simulation of linear motion along the X axis", 
        "damping": "General movement damping", 
        "use_ghost": "Object does not react to collisions, like a ghost", 
        "lock_location_z": "Disable simulation of linear motion along the Z axis", 
        "used_states": "(read-only)    States which are being used by controllers", 
        "sensors": "(read-only)    Game engine sensor to detect events", 
        "fall_speed": "Maximum speed at which the character will fall", 
        "show_state_panel": "Show state panel", 
        "use_collision_compound": "Add children to form a compound collision object", 
        "use_sleep": "Disable auto (de)activation in physics simulation", 
        "use_collision_bounds": "Specify a collision bounds type other than the default", 
        "form_factor": "Form factor scales the inertia tensor", 
        "properties": "(read-only)    Game engine properties", 
        "show_debug_state": "Print state debug info in the game engine", 
        "states_visible": "State determining which controllers are displayed", 
        "use_obstacle_create": "Create representation for obstacle simulation", 
        "velocity_min": "Clamp velocity to this minimum speed (except when totally still)"
      }
    }, 
    "LatticePoint": {
      "fields": {
        "select": "Selection status", 
        "weight_softbody": "Softbody goal weight", 
        "groups": "(read-only)    Weights for the vertex groups this point is member of", 
        "co": "(read-only)"
      }
    }, 
    "ShaderNodeWireframe": {
      "fields": {
        "use_pixel_size": "Use screen pixel size instead of world units"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "MaskParent": {
      "fields": {
        "parent": "Name of parent object in specified data block to which parenting happens", 
        "id_type": "Type of ID-block that can be used", 
        "id": "ID-block to which masking element would be parented to or to it's property", 
        "sub_parent": "Name of parent sub-object in specified data block to which parenting happens", 
        "type": "Parent Type"
      }
    }, 
    "CyclesMeshSettings": {
      "fields": {
        "displacement_method": "Method to use for the displacement", 
        "use_subdivision": "Subdivide mesh for rendering"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CompositorNodeChromaMatte": {
      "fields": {
        "lift": "Alpha lift", 
        "threshold": "Tolerance below which colors will be considered as exact matches", 
        "shadow_adjust": "Adjusts the brightness of any shadows captured", 
        "tolerance": "Tolerance for a color to be considered a keying color", 
        "gain": "Alpha falloff"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "AddSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "MaterialStrand": {
      "fields": {
        "use_blender_units": "Use Blender units for widths instead of pixels", 
        "tip_size": "End size of strands in pixels or Blender units", 
        "shape": "Positive values make strands rounder, negative ones make strands spiky", 
        "size_min": "Minimum size of strands in pixels", 
        "width_fade": "Transparency along the width of the strand", 
        "use_tangent_shading": "Use direction of strands as normal for tangent-shading", 
        "uv_layer": "Name of UV map to override", 
        "use_surface_diffuse": "(read-only)    Make diffuse shading more similar to shading the surface", 
        "blend_distance": "Worldspace distance over which to blend in the surface normal", 
        "root_size": "Start size of strands in pixels or Blender units"
      }
    }, 
    "BoolProperty": {
      "fields": {
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "BoidRuleFight": {
      "fields": {
        "distance": "Attack boids at max this distance", 
        "flee_distance": "Flee to this distance"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "MaterialPhysics": {
      "fields": {
        "fh_force": "Upward spring force, when inside the physics distance area", 
        "use_fh_normal": "Align dynamic game objects along the surface normal, when inside the physics distance area", 
        "elasticity": "Elasticity of collisions", 
        "fh_distance": "Distance of the physics area", 
        "fh_damping": "Damping of the spring force, when inside the physics distance area", 
        "friction": "Coulomb friction coefficient, when inside the physics distance area"
      }
    }, 
    "ShaderNodeTexCoord": {
      "fields": {
        "from_dupli": "Use the parent of the dupli object if possible"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ColorMapping": {
      "fields": {
        "saturation": "Adjust the saturation of colors in the texture", 
        "brightness": "Adjust the brightness of the texture", 
        "color_ramp": "(read-only)", 
        "contrast": "Adjust the contrast of the texture", 
        "use_color_ramp": "Toggle color ramp operations", 
        "blend_color": "Blend color to mix with texture output color", 
        "blend_type": "Mode used to mix with texture output color"
      }
    }, 
    "ArmatureSensor": {
      "fields": {
        "bone": "Identify the bone to check value from", 
        "constraint": "Identify the bone constraint to check value from", 
        "value": "Value to be used in comparison", 
        "test_type": "Type of value and test"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "IntProperty": {
      "fields": {
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size", 
        "hard_max": "(read-only)    Maximum value used by buttons"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "LineStyleGeometryModifier_BackboneStretcher": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "backbone_length": "Amount of backbone stretching"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "ThemeSequenceEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeTimeline": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ObstacleFluidSettings": {
      "fields": {
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type", 
        "use": "Object contributes to the fluid simulation", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "impact_factor": "This is an unphysical value for moving objects - it controls the impact an obstacle has on the fluid, =0 behaves a bit like outflow (deleting fluid), =1 is default, while >1 results in high forces (can be used to tweak total mass)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "Region": {
      "fields": {
        "view2d": "(read-only)    2D view of the region", 
        "width": "(read-only)    Region width", 
        "x": "(read-only)    The window relative vertical location of the region", 
        "y": "(read-only)    The window relative horizontal location of the region", 
        "id": "(read-only)    Unique ID for this region", 
        "type": "(read-only)    Type of this region", 
        "height": "(read-only)    Region height"
      }
    }, 
    "MeshTextureFaceLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of UV map", 
        "active": "Set the map as active for display and editing", 
        "active_render": "Set the map as active for rendering", 
        "active_clone": "Set the map as active for cloning"
      }
    }, 
    "IKParam": {
      "fields": {
        "ik_solver": "(read-only)    IK solver for which these parameters are defined"
      }
    }, 
    "UVWarpModifier": {
      "fields": {
        "bone_from": "Bone defining offset", 
        "object_from": "Object defining offset", 
        "axis_u": "Pole axis for rotation", 
        "uv_layer": "UV Layer name", 
        "center": "Center point for rotate/scale", 
        "vertex_group": "Vertex group name", 
        "axis_v": "Pole axis for rotation", 
        "bone_to": "Bone defining offset", 
        "object_to": "Object defining offset"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ThemeBoneColorSet": {
      "fields": {
        "normal": "Color used for the surface of bones", 
        "select": "Color used for selected bones", 
        "active": "Color used for active bones", 
        "show_colored_constraints": "Allow the use of colors indicating constraints/keyed status"
      }
    }, 
    "Operator": {
      "fields": {
        "layout": "(read-only)", 
        "has_reports": "(read-only)    Operator has a set of reports (warnings and errors) from last execution", 
        "name": "(read-only)", 
        "bl_options": "Options for this operator type", 
        "properties": "(read-only)"
      }
    }, 
    "Action": {
      "fields": {
        "id_root": "Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING", 
        "groups": "(read-only)    Convenient groupings of F-Curves", 
        "fcurves": "(read-only)    The individual F-Curves that make up the action", 
        "frame_range": "(read-only)    The final frame range of all F-Curves within this action", 
        "pose_markers": "(read-only)    Markers specific to this action, for labeling poses"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "TriangulateModifier": {
      "fields": {
        "use_beauty": "Subdivide across shortest diagonal"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "fields": {
        "pivot_u": "Pivot in terms of the stroke point parameter u (0 <= u <= 1)", 
        "scale_y": "Scaling factor that is applied along the Y axis", 
        "expanded": "True if the modifier tab is expanded", 
        "pivot_x": "2D X coordinate of the absolute pivot", 
        "pivot_y": "2D Y coordinate of the absolute pivot", 
        "scale_x": "Scaling factor that is applied along the X axis", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "angle": "Rotation angle", 
        "pivot": "Pivot of scaling and rotation operations", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "NodeSocketInterfaceVectorTranslation": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "MaskLayers": {
      "fields": {
        "active": "Active layer in this mask"
      }
    }, 
    "SoftBodySettings": {
      "fields": {
        "vertex_group_goal": "Control point weight values", 
        "use_edges": "Use Edges as springs", 
        "use_estimate_matrix": "Estimate matrix... split to COM, ROT, SCALE", 
        "mass": "General Mass value", 
        "use_auto_step": "Use velocities for automagic step sizes", 
        "aero": "Make edges 'sail'", 
        "speed": "Tweak timing for physics to control frequency and speed", 
        "use_goal": "Define forces for vertices to stick to animated position", 
        "location_mass_center": "Location of Center of mass", 
        "spring_length": "Alter spring length to shrink/blow up (unit %) 0 to disable", 
        "collision_type": "Choose Collision Type", 
        "bend": "Bending Stiffness", 
        "error_threshold": "The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed", 
        "scale_estimate": "Estimated scale matrix", 
        "step_max": "Maximal # solver steps/frame", 
        "fuzzy": "Fuzziness while on collision, high values make collision handling faster but less stable", 
        "ball_size": "Absolute ball size or factor if not manually adjusted", 
        "choke": "'Viscosity' inside collision target", 
        "use_face_collision": "Faces collide too, can be very slow", 
        "use_diagnose": "Turn on SB diagnose console prints", 
        "effector_weights": "(read-only)", 
        "shear": "Shear Stiffness", 
        "use_stiff_quads": "Add diagonal springs on 4-gons", 
        "goal_max": "Goal maximum, vertex weights are scaled to match this range", 
        "damping": "Edge spring friction", 
        "rotation_estimate": "Estimated rotation matrix", 
        "use_self_collision": "Enable naive vertex ball self collision", 
        "goal_default": "Default Goal (vertex target position) value, when no Vertex Group used", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "friction": "General media friction for point movements", 
        "push": "Edge spring stiffness when shorter than rest length", 
        "pull": "Edge spring stiffness when longer than rest length", 
        "plastic": "Permanent deform", 
        "use_edge_collision": "Edges collide too", 
        "vertex_group_spring": "Control point spring strength values", 
        "step_min": "Minimal # solver steps/frame", 
        "gravity": "Apply gravitation to point movement", 
        "goal_min": "Goal minimum, vertex weights are scaled to match this range", 
        "aerodynamics_type": "Method of calculating aerodynamic interaction", 
        "ball_damp": "Blending to inelastic collision", 
        "ball_stiff": "Ball inflating pressure", 
        "goal_friction": "Goal (vertex target position) friction", 
        "vertex_group_mass": "Control point mass values"
      }
    }, 
    "LimitDistanceConstraint": {
      "fields": {
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "distance": "Radius of limiting sphere", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TrackToConstraint": {
      "fields": {
        "use_target_z": "Target's Z axis, not World Z axis, will constraint the Up direction", 
        "up_axis": "Axis that points upward", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object", 
        "track_axis": "Axis that points to the target object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "Driver": {
      "fields": {
        "variables": "(read-only)    Properties acting as inputs for this driver", 
        "expression": "Expression to use for Scripted Expression", 
        "show_debug_info": "Show intermediate values for the driver calculations to allow debugging of drivers", 
        "is_valid": "Driver could not be evaluated in past, so should be skipped", 
        "type": "Driver type"
      }
    }, 
    "MotionPath": {
      "fields": {
        "use_bone_head": "(read-only)    For PoseBone paths, use the bone head location when calculating this path", 
        "length": "(read-only)    Number of frames cached", 
        "frame_end": "(read-only)    End frame of the stored range", 
        "frame_start": "(read-only)    Starting frame of the stored range", 
        "is_modified": "Path is being edited", 
        "points": "(read-only)    Cached positions per frame"
      }
    }, 
    "NodeSocketInterfaceBool": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "MeshEdge": {
      "fields": {
        "use_edge_sharp": "Sharp edge for the EdgeSplit modifier", 
        "is_loose": "Loose edge", 
        "vertices": "Vertex indices", 
        "use_seam": "Seam edge for UV unwrapping", 
        "bevel_weight": "Weight used by the Bevel modifier", 
        "crease": "Weight used by the Subsurf modifier for creasing", 
        "index": "(read-only)    Index of this edge"
      }
    }, 
    "ShrinkwrapConstraint": {
      "fields": {
        "project_axis_space": "Space for the projection axis", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "distance": "Distance to Target", 
        "project_axis": "Axis constrain to", 
        "shrinkwrap_type": "Select type of shrinkwrap algorithm for target position", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LineStyleThicknessModifier_DistanceFromObject": {
      "fields": {
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "value_min": "Minimum output value of the mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "influence": "Influence factor by which the modifier changes the property", 
        "target": "Target object from which the distance is measured", 
        "expanded": "True if the modifier tab is expanded", 
        "value_max": "Maximum output value of the mapping", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "KeyConfigurations": {
      "fields": {
        "default": "(read-only)    Default builtin key configuration", 
        "addon": "(read-only)    Key configuration that can be extended by addons, and is added to the active configuration when handling events", 
        "active": "Active key configuration (preset)", 
        "user": "(read-only)    Final key configuration that combines keymaps from the active and addon configurations, and can be edited by the user"
      }
    }, 
    "BlenderRNA": {
      "fields": {
        "structs": "(read-only)"
      }
    }, 
    "KeyingSetPath": {
      "fields": {
        "use_entire_array": "When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used", 
        "group_method": "Method used to define which Group-name to use", 
        "id_type": "Type of ID-block that can be used", 
        "bl_options": "Keying set options", 
        "id": "ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)", 
        "array_index": "Index to the specific setting if applicable", 
        "data_path": "Path to property setting", 
        "group": "Name of Action Group to assign setting(s) for this path to"
      }
    }, 
    "StretchToConstraint": {
      "fields": {
        "volume": "Maintain the object's volume as it stretches", 
        "rest_length": "Length at rest position", 
        "keep_axis": "Axis to maintain during stretch", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "bulge": "Factor between volume variation and stretching", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "NlaTrack": {
      "fields": {
        "select": "NLA Track is selected", 
        "is_solo": "NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)", 
        "active": "(read-only)    NLA Track is active", 
        "lock": "NLA Track is locked", 
        "mute": "NLA Track is not evaluated", 
        "strips": "(read-only)    NLA Strips on this NLA-track"
      }
    }, 
    "CompositorNodeInpaint": {
      "fields": {
        "distance": "Distance to inpaint (number of iterations)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "MaskLayer": {
      "fields": {
        "hide_select": "Restrict selection in the viewport", 
        "falloff": "Falloff type the feather", 
        "hide": "Restrict visibility in the viewport", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "invert": "Invert the mask black/white", 
        "blend": "Method of blending mask layers", 
        "hide_render": "Restrict renderability", 
        "alpha": "Render Opacity", 
        "name": "Unique name of layer", 
        "splines": "(read-only)    Collection of splines which defines this layer"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "cameras": "(read-only)    Collection of solved cameras", 
        "average_error": "(read-only)    Average error of reconstruction", 
        "is_valid": "(read-only)    Is tracking data contains valid reconstruction information"
      }
    }, 
    "ColorRampElement": {
      "fields": {
        "color": "Set color of selected color stop", 
        "position": "Set position of selected color stop"
      }
    }, 
    "EnvironmentMap": {
      "fields": {
        "clip_start": "Objects nearer than this are not visible to map", 
        "depth": "Number of times a map will be rendered recursively (mirror effects)", 
        "clip_end": "Objects further than this are not visible to map", 
        "viewpoint_object": "Object to use as the environment map's viewpoint location", 
        "is_valid": "(read-only)    True if this map is ready for use, False if it needs rendering", 
        "layers_ignore": "Hide objects on these layers when generating the Environment Map", 
        "resolution": "Pixel resolution of the rendered environment map"
      }
    }, 
    "MovieClipUser": {
      "fields": {
        "use_render_undistorted": "Render preview using undistorted proxy", 
        "frame_current": "Current frame number in movie or image sequence", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions"
      }
    }, 
    "GameFloatProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "LatticeModifier": {
      "fields": {
        "strength": "Strength of modifier effect", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "object": "Lattice object to deform with"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "TextLine": {
      "fields": {
        "body": "Text in the line"
      }
    }, 
    "NodeSocketInterfaceIntUnsigned": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "ObjectActuator": {
      "fields": {
        "use_character_jump": "Make the character jump using the settings in the physics properties", 
        "use_add_character_location": "Toggle between ADD and SET character location", 
        "integral_coefficient": "Low value (0.01) for slow response, high value (0.5) for fast response", 
        "torque": "Torque", 
        "reference_object": "Reference object for velocity calculation, leave empty for world reference", 
        "angular_velocity": "Angular velocity", 
        "force_min_y": "Lower limit for Y force", 
        "mode": "Specify the motion system", 
        "force_min_z": "Lower limit for Z force", 
        "linear_velocity": "Linear velocity (in Servo mode it sets the target relative linear velocity, it will be achieved by automatic application of force - Null velocity is a valid target)", 
        "derivate_coefficient": "Not required, high values can cause instability", 
        "offset_location": "Location", 
        "force_min_x": "Lower limit for X force", 
        "use_local_location": "Location is defined in local coordinates", 
        "use_local_rotation": "Rotation is defined in local coordinates", 
        "offset_rotation": "Rotation", 
        "damping": "Number of frames to reach the target velocity", 
        "use_local_torque": "Torque is defined in local coordinates", 
        "force_max_x": "Upper limit for X force", 
        "use_local_force": "Force is defined in local coordinates", 
        "force_max_y": "Upper limit for Y force", 
        "use_add_linear_velocity": "Toggles between ADD and SET linV", 
        "force_max_z": "Upper limit for Z force", 
        "use_local_linear_velocity": "Velocity is defined in local coordinates", 
        "use_servo_limit_x": "Set limit to force along the X axis", 
        "use_servo_limit_y": "Set limit to force along the Y axis", 
        "use_local_angular_velocity": "Angular velocity is defined in local coordinates", 
        "proportional_coefficient": "Typical value is 60x integral coefficient", 
        "force": "Force", 
        "use_servo_limit_z": "Set limit to force along the Z axis"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "CompositorNodeColorSpill": {
      "fields": {
        "use_unspill": "Compensate all channels (differently) by hand", 
        "unspill_blue": "Blue spillmap scale", 
        "unspill_green": "Green spillmap scale", 
        "unspill_red": "Red spillmap scale", 
        "ratio": "Scale limit by value"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "VertexWeightProximityModifier": {
      "fields": {
        "proximity_geometry": "Use the shortest computed distance to target object's geometry as weight", 
        "falloff_type": "How weights are mapped to their new values", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "max_dist": "Distance mapping to weight 1.0", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "target": "Object to calculate vertices distances from", 
        "mask_tex_uv_layer": "UV map name", 
        "proximity_mode": "Which distances to target object to use", 
        "vertex_group": "Vertex group name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "min_dist": "Distance mapping to weight 0.0"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CyclesLampSettings": {
      "fields": {
        "use_multiple_importance_sampling": "Use multiple importance sampling for the lamp, reduces noise for area lamps and sharp glossy materials", 
        "samples": "Number of light samples to render for each AA sample", 
        "cast_shadow": "Lamp casts shadows"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "Nodes": {
      "fields": {
        "active": "Active node in this tree"
      }
    }, 
    "NodeGroupOutput": {
      "fields": {
        "is_active_output": "True if this node is used as the active group output", 
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "OutflowFluidSettings": {
      "fields": {
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type", 
        "use": "Object contributes to the fluid simulation"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "CompositorNodeGlare": {
      "fields": {
        "streaks": "Total number of streaks", 
        "angle_offset": "Streak angle offset", 
        "fade": "Streak fade-out factor", 
        "size": "Glow/glare size (not actual size; relative to initial size of bright area of pixels)", 
        "color_modulation": "Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect", 
        "threshold": "The glare filter will only be applied to pixels brighter than this value", 
        "use_rotate_45": "Simple star filter: add 45 degree rotation offset", 
        "mix": "-1 is original image only, 0 is exact 50/50 mix, 1 is processed image only", 
        "quality": "If not set to high quality, the effect will be applied to a low-res copy of the source image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "NodeSocket": {
      "fields": {
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "is_linked": "(read-only)    True if the socket is connected", 
        "node": "(read-only)    Node owning this socket", 
        "hide": "Hide the socket", 
        "in_out": "(read-only)    Input or Output type", 
        "name": "Socket name", 
        "type": "Data type", 
        "enabled": "Enable the socket", 
        "link_limit": "Max number of links allowed for this socket", 
        "show_expanded": "Socket links are expanded in the user interface", 
        "hide_value": "Hide the socket input value"
      }
    }, 
    "CurveSplines": {
      "fields": {
        "active": "Active curve spline"
      }
    }, 
    "NodeSocketFloatTime": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "BrushCapabilities": {
      "fields": {
        "has_texture_angle_source": "(read-only)", 
        "has_spacing": "(read-only)", 
        "has_texture_angle": "(read-only)", 
        "has_overlay": "(read-only)", 
        "has_random_texture_angle": "(read-only)"
      }
    }, 
    "ObjectSolverConstraint": {
      "fields": {
        "use_active_clip": "Use active clip defined in scene", 
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "clip": "Movie Clip to get tracking data from", 
        "object": "Movie tracking object to follow"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "BlendDataGroups": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "Bone": {
      "fields": {
        "parent": "(read-only)    Parent bone (in same Armature)", 
        "use_deform": "Enable Bone to deform geometry", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "bbone_z": "B-Bone Z size", 
        "matrix": "3x3 bone matrix", 
        "use_inherit_scale": "Bone inherits scaling from parent bone", 
        "tail_local": "Location of tail end of the bone relative to armature", 
        "head": "Location of head end of the bone relative to its parent", 
        "hide_select": "Bone is able to be selected", 
        "use_relative_parent": "Object children will use relative transform, like deform", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "children": "(read-only)    Bones which are children of this bone", 
        "head_local": "Location of head end of the bone relative to armature", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "layers": "Layers bone exists in", 
        "bbone_out": "Length of second Bezier Handle (for B-Bones only)", 
        "use_local_location": "Bone location is set in local space", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "bbone_in": "Length of first Bezier Handle (for B-Bones only)", 
        "tail": "Location of tail end of the bone", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)", 
        "bbone_x": "B-Bone X size", 
        "hide": "Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "use_connect": "(read-only)    When bone has a parent, bone's head is stuck to the parent's tail", 
        "matrix_local": "4x4 bone matrix relative to armature"
      }
    }, 
    "ThemeGradientColors": {
      "fields": {
        "show_grad": "Do a gradient for the background of the viewport working area"
      }
    }, 
    "SPHFluidSettings": {
      "fields": {
        "factor_repulsion": "Repulsion is a factor of stiffness", 
        "rest_length": "Spring rest length (factor of particle radius)", 
        "spring_frames": "Create springs for this number of frames since particles birth (0 is always)", 
        "plasticity": "How much the spring rest length can change after the elastic limit is crossed", 
        "use_factor_density": "Density is calculated as a factor of default density (depends on particle size)", 
        "spring_force": "Spring force", 
        "stiffness": "How incompressible the fluid is (speed of sound)", 
        "buoyancy": "Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid", 
        "linear_viscosity": "Linear viscosity", 
        "factor_radius": "Interaction radius is a factor of 4 * particle size", 
        "rest_density": "Fluid rest density", 
        "yield_ratio": "How much the spring has to be stretched/compressed in order to change it's rest length", 
        "repulsion": "How strongly the fluid tries to keep from clustering (factor of stiffness)", 
        "use_initial_rest_length": "Use the initial length as spring rest length instead of 2 * particle size", 
        "factor_rest_length": "Spring rest length is a factor of 2 * particle size", 
        "factor_stiff_viscosity": "Stiff viscosity is a factor of normal viscosity", 
        "stiff_viscosity": "Creates viscosity for expanding fluid", 
        "fluid_radius": "Fluid interaction radius", 
        "use_viscoelastic_springs": "Use viscoelastic springs instead of Hooke's springs", 
        "solver": "The code used to calculate internal forces on particles"
      }
    }, 
    "BlendTexture": {
      "fields": {
        "use_flip_axis": "Flip the texture's X and Y axis", 
        "progression": "Style of the color blending"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "OceanTexture": {
      "fields": {
        "ocean": "(read-only)    The ocean data associated with this texture"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "Histogram": {
      "fields": {
        "mode": "Channels to display when drawing the histogram", 
        "show_line": "Display lines rather than filled shapes"
      }
    }, 
    "TextureNodeCurveTime": {
      "fields": {
        "curve": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "DynamicPaintCanvasSettings": {
      "fields": {
        "canvas_surfaces": "(read-only)    Paint surface list"
      }
    }, 
    "PoseBone": {
      "fields": {
        "parent": "(read-only)    Parent of this pose bone", 
        "matrix_basis": "Alternative access to location/scale/rotation relative to the parent and own rest bone", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "ik_rotation_weight": "Weight of rotation constraint for IK", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "ik_min_y": "Minimum angles for IK Limit", 
        "matrix": "Final 4x4 matrix after constraints and drivers are applied (object space)", 
        "constraints": "(read-only)    Constraints that act on this PoseChannel", 
        "ik_min_x": "Minimum angles for IK Limit", 
        "head": "(read-only)    Location of head of the channel's bone", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "ik_min_z": "Minimum angles for IK Limit", 
        "bone_group_index": "Bone Group this pose channel belongs to (0=no group)", 
        "custom_shape": "Object that defines custom draw type for this bone", 
        "bone_group": "Bone Group this pose channel belongs to", 
        "ik_linear_weight": "Weight of scale constraint for IK", 
        "ik_max_x": "Maximum angles for IK Limit", 
        "lock_scale": "Lock editing of scale in the interface", 
        "ik_max_y": "Maximum angles for IK Limit", 
        "ik_max_z": "Maximum angles for IK Limit", 
        "lock_ik_x": "Disallow movement around the X axis", 
        "tail": "(read-only)    Location of tail of the channel's bone", 
        "use_ik_limit_y": "Limit movement around the Y axis", 
        "use_ik_limit_z": "Limit movement around the Z axis", 
        "bone": "(read-only)    Bone associated with this PoseBone", 
        "lock_location": "Lock editing of location in the interface", 
        "rotation_euler": "Rotation in Eulers", 
        "ik_stiffness_x": "IK stiffness around the X axis", 
        "use_ik_linear_control": "Apply channel size as IK constraint if stretching is enabled", 
        "ik_stiffness_y": "IK stiffness around the Y axis", 
        "ik_stretch": "Allow scaling of the bone for IK", 
        "ik_stiffness_z": "IK stiffness around the Z axis", 
        "use_ik_limit_x": "Limit movement around the X axis", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "use_ik_rotation_control": "Apply channel rotation as IK constraint", 
        "lock_ik_y": "Disallow movement around the Y axis", 
        "matrix_channel": "(read-only)    4x4 matrix, before constraints", 
        "lock_ik_z": "Disallow movement around the Z axis", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "is_in_ik_chain": "(read-only)    Is part of an IK chain", 
        "child": "(read-only)    Child of this pose bone", 
        "custom_shape_transform": "Bone that defines the display transform of this custom shape"
      }
    }, 
    "Filter2DActuator": {
      "fields": {
        "motion_blur_factor": "Motion blur factor", 
        "use_motion_blur": "Enable/Disable Motion Blur", 
        "filter_pass": "Set filter order"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "SceneSequence": {
      "fields": {
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "use_translation": "Translate image before processing", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_float": "Convert input to float data", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "scene": "Scene that this sequence uses", 
        "proxy": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "scene_camera": "Override the scenes active camera", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "TexMapping": {
      "fields": {
        "min": "Minimum value for clipping", 
        "max": "Maximum value for clipping", 
        "vector_type": "Type of vector that the mapping transforms", 
        "use_min": "Whether to use minimum clipping value", 
        "use_max": "Whether to use maximum clipping value"
      }
    }, 
    "UVTextures": {
      "fields": {
        "active_index": "Active UV Map index", 
        "active": "Active UV Map"
      }
    }, 
    "ColorManagedSequencerColorspaceSettings": {
      "fields": {
        "name": "Color space that the sequencer operates in"
      }
    }, 
    "LimitRotationConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "max_z": "Highest Z value to allow", 
        "max_y": "Highest Y value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_limit_z": "Use the minimum Z value", 
        "min_y": "Lowest Y value to allow", 
        "use_limit_x": "Use the minimum X value", 
        "use_limit_y": "Use the minimum Y value"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FCurve": {
      "fields": {
        "select": "F-Curve is selected for editing", 
        "color": "Color of the F-Curve in the Graph Editor", 
        "color_mode": "Method used to determine color of F-Curve in Graph Editor", 
        "mute": "F-Curve is not evaluated", 
        "modifiers": "(read-only)    Modifiers affecting the shape of the F-Curve", 
        "sampled_points": "(read-only)    Sampled animation data", 
        "data_path": "RNA Path to property affected by F-Curve", 
        "hide": "F-Curve and its keyframes are hidden in the Graph Editor graphs", 
        "driver": "(read-only)    Channel Driver (only set for Driver F-Curves)", 
        "is_valid": "False when F-Curve could not be evaluated in past, so should be skipped when evaluating", 
        "keyframe_points": "(read-only)    User-editable keyframes", 
        "lock": "F-Curve's settings cannot be edited", 
        "array_index": "Index to the specific property affected by F-Curve if applicable", 
        "group": "Action Group that this F-Curve belongs to"
      }
    }, 
    "SpaceTimeline": {
      "fields": {
        "cache_cloth": "Show the active object's cloth point cache", 
        "show_only_selected": "Show keyframes for active Object and/or its selected bones only", 
        "cache_particles": "Show the active object's particle point cache", 
        "cache_softbody": "Show the active object's softbody point cache", 
        "show_seconds": "Show timing in seconds not frames", 
        "cache_rigidbody": "Show the active object's Rigid Body cache", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "cache_smoke": "Show the active object's smoke cache", 
        "cache_dynamicpaint": "Show the active object's Dynamic Paint cache", 
        "show_cache": "Show the status of cached frames in the timeline"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "LineStyleGeometryModifier_Blueprint": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "random_backbone": "Randomness of the backbone stretching", 
        "shape": "Select the shape of blueprint contour strokes", 
        "random_radius": "Randomness of the radius", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "random_center": "Randomness of the center", 
        "backbone_length": "Amount of backbone stretching", 
        "rounds": "Number of rounds in contour strokes"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "PropertyActuator": {
      "fields": {
        "property": "The name of the property", 
        "object_property": "Copy this property", 
        "value": "The name of the property or the value to use (use \"\" around strings)", 
        "object": "Copy from this Object"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "AreaSpaces": {
      "fields": {
        "active": "(read-only)    Space currently being displayed in this area"
      }
    }, 
    "OceanModifier": {
      "fields": {
        "wave_direction": "Main direction of the waves when they are (partially) aligned", 
        "is_cached": "(read-only)    Whether the ocean is using cached data or simulating", 
        "frame_end": "End frame of the ocean baking", 
        "resolution": "Resolution of the generated surface", 
        "frame_start": "Start frame of the ocean baking", 
        "filepath": "Path to a folder to store external baked images", 
        "wave_scale": "Scale of the displacement effect", 
        "use_normals": "Output normals for bump mapping - disabling can speed up performance if its not needed", 
        "spatial_size": "Size of the simulation domain (in meters), and of the generated geometry (in BU)", 
        "random_seed": "Seed of the random generator", 
        "foam_layer_name": "Name of the vertex color layer used for foam", 
        "wind_velocity": "Wind speed", 
        "repeat_y": "Repetitions of the generated surface in Y", 
        "geometry_mode": "Method of modifying geometry", 
        "repeat_x": "Repetitions of the generated surface in X", 
        "wave_scale_min": "Shortest allowed wavelength", 
        "wave_alignment": "How much the waves are aligned to each other", 
        "foam_coverage": "Amount of generated foam", 
        "damping": "Damp reflected waves going in opposite direction to the wind", 
        "depth": "Depth of the solid ground below the water surface", 
        "size": "Surface scale factor (does not affect the height of the waves)", 
        "bake_foam_fade": "How much foam accumulates over time (baked ocean only)", 
        "use_foam": "Generate foam mask as a vertex color channel", 
        "time": "Current time of the simulation", 
        "choppiness": "Choppiness of the wave's crest (adds some horizontal component to the displacement)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MaskSplinePoint": {
      "fields": {
        "handle_right": "Coordinates of the second handle", 
        "parent": "(read-only)", 
        "select": "Selection status", 
        "handle_type": "Handle type", 
        "feather_points": "(read-only)    Points defining feather", 
        "co": "Coordinates of the control point", 
        "handle_left": "Coordinates of the first handle"
      }
    }, 
    "RenderPass": {
      "fields": {
        "channels": "(read-only)", 
        "name": "(read-only)", 
        "type": "(read-only)", 
        "channel_id": "(read-only)"
      }
    }, 
    "SoundActuator": {
      "fields": {
        "volume": "Initial volume of the sound", 
        "distance_3d_max": "The maximum distance at which you can hear the sound", 
        "cone_outer_angle_3d": "The angle of the outer cone", 
        "use_sound_3d": "Enable/Disable 3D Sound", 
        "rolloff_factor_3d": "The influence factor on volume depending on distance", 
        "cone_outer_gain_3d": "The gain outside the outer cone (the gain in the outer cone will be interpolated between this value and the normal gain in the inner cone)", 
        "distance_3d_reference": "The distance where the sound has a gain of 1.0", 
        "gain_3d_max": "The maximum gain of the sound, no matter how near it is", 
        "gain_3d_min": "The minimum gain of the sound, no matter how far it is away", 
        "pitch": "Pitch of the sound", 
        "cone_inner_angle_3d": "The angle of the inner cone"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ThemeGraphEditor": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ArmatureBones": {
      "fields": {
        "active": "Armature's active bone"
      }
    }, 
    "BlendDataImages": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "EffectSequence": {
      "fields": {
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "use_translation": "Translate image before processing", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_float": "Convert input to float data", 
        "proxy": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "ThemeClipEditor": {
      "fields": {
        "path_after": "Color of path after current frame", 
        "path_before": "Color of path before current frame", 
        "active_marker": "Color of active marker", 
        "marker_outline": "Color of marker's outline", 
        "marker": "Color of marker", 
        "selected_marker": "Color of selected marker", 
        "space_list": "(read-only)    Settings for space list", 
        "locked_marker": "Color of locked marker", 
        "space": "(read-only)    Settings for space", 
        "disabled_marker": "Color of disabled marker"
      }
    }, 
    "UserPreferencesView": {
      "fields": {
        "use_global_scene": "Force the current Scene to be displayed in all Screens", 
        "use_mouse_depth_navigate": "Use the depth under the mouse to improve view pan/rotate/zoom functionality", 
        "open_sublevel_delay": "Time delay in 1/10 seconds before automatically opening sub level menus", 
        "show_tooltips_python": "Show Python references in tooltips", 
        "show_manipulator": "Use 3D transform manipulator", 
        "timecode_style": "Format of Time Codes displayed when not displaying timing in terms of frames", 
        "manipulator_handle_size": "Size of widget handles as percentage of widget radius", 
        "show_view_name": "Show the name of the view's direction in each 3D View", 
        "mini_axis_size": "The axes icon's size", 
        "use_rotate_around_active": "Use selection as the pivot point", 
        "object_origin_size": "Diameter in Pixels for Object/Lamp origin display", 
        "use_mouse_over_open": "Open menu buttons and pulldowns automatically when the mouse is hovering", 
        "use_zoom_to_mouse": "Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center", 
        "open_left_mouse_delay": "Time in 1/10 seconds to hold the Left Mouse Button before opening the toolbox", 
        "open_right_mouse_delay": "Time in 1/10 seconds to hold the Right Mouse Button before opening the toolbox", 
        "smooth_view": "Time to animate the view in milliseconds, zero to disable", 
        "rotation_angle": "Rotation step for numerical pad keys (2 4 6 8)", 
        "show_large_cursors": "Use large mouse cursors when available", 
        "use_global_pivot": "Lock the same rotation/scaling pivot in all 3D Views", 
        "manipulator_hotspot": "Pixel distance around the handles to accept mouse clicks", 
        "show_splash": "Display splash screen on startup", 
        "use_auto_perspective": "Automatically switch between orthographic and perspective when changing from top/front/side views", 
        "use_camera_lock_parent": "When the camera is locked to the view and in fly mode, transform the parent rather than the camera", 
        "mini_axis_brightness": "Brightness of the icon", 
        "use_quit_dialog": "Asks for confirmation when quitting through the window close button", 
        "show_object_info": "Display objects name and frame number in 3D view", 
        "use_mouse_depth_cursor": "Use the depth under the mouse when placing the cursor", 
        "view2d_grid_spacing_min": "Minimum number of pixels between each gridline in 2D Viewports", 
        "show_mini_axis": "Show a small rotating 3D axes in the bottom left corner of the 3D View", 
        "show_column_layout": "Use a column layout for toolbox", 
        "show_tooltips": "Display tooltips", 
        "use_directional_menus": "Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction", 
        "open_toplevel_delay": "Time delay in 1/10 seconds before automatically opening top level menus", 
        "manipulator_size": "Diameter of widget, in 10 pixel units", 
        "show_playback_fps": "Show the frames per second screen refresh rate, while animation is played back"
      }
    }, 
    "CompositorNodeScale": {
      "fields": {
        "frame_method": "How the image fits in the camera frame", 
        "offset_x": "Offset image horizontally (factor of image size)", 
        "offset_y": "Offset image vertically (factor of image size)", 
        "space": "Coordinate space to scale relative to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "Curve": {
      "fields": {
        "use_path": "Enable the curve to become a translation path", 
        "resolution_u": "Surface resolution in U direction", 
        "resolution_v": "Surface resolution in V direction", 
        "twist_mode": "The type of tilt calculation for 3D Curves", 
        "bevel_factor_end": "Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "shape_keys": "(read-only)", 
        "eval_time": "Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)", 
        "render_resolution_v": "Surface resolution in V direction used while rendering (zero skips this property)", 
        "twist_smooth": "Smoothing iteration for tangents", 
        "bevel_factor_start": "Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)", 
        "bevel_resolution": "Bevel resolution when depth is non-zero and no specific bevel object has been defined", 
        "render_resolution_u": "Surface resolution in U direction used while rendering (zero skips this property)", 
        "extrude": "Amount of curve extrusion when not using a bevel object", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "bevel_object": "Curve object name that defines the bevel shape", 
        "use_path_follow": "Make curve path children to rotate along the path", 
        "show_normal_face": "Display 3D curve normals in editmode", 
        "offset": "Offset the curve to adjust the width of a text", 
        "use_time_offset": "Children will use TimeOffs value as path distance offset", 
        "fill_mode": "Mode of filling curve", 
        "bevel_depth": "Bevel depth when not using a bevel object", 
        "use_radius": "Option for paths and curve-deform: apply the curve radius with path following it and deforming", 
        "use_stretch": "Option for curve-deform: make deformed child to stretch along entire path", 
        "path_duration": "The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting", 
        "splines": "(read-only)    Collection of splines in this curve data object", 
        "use_deform_bounds": "Option for curve-deform: Use the mesh bounds to clamp the deformation", 
        "taper_object": "Curve object name that defines the taper (width)", 
        "show_handles": "Display Bezier handles in editmode", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "use_map_taper": "Map effect of taper object on actually beveled curve", 
        "materials": "(read-only)", 
        "texspace_location": "Texture space location", 
        "use_fill_caps": "Fill caps for beveled curves", 
        "texspace_size": "Texture space size", 
        "use_fill_deform": "Fill curve after applying shape keys and all modifiers", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates", 
        "dimensions": "Select 2D or 3D curve type", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Mask": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this datablock", 
        "active_layer_index": "Index of active layer in list of all mask's layers", 
        "layers": "(read-only)    Collection of layers which defines this mask", 
        "frame_end": "Final frame of the mask (used for sequencer)", 
        "frame_start": "First frame of the mask (used for sequencer)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ParticleTarget": {
      "fields": {
        "system": "The index of particle system on the target object", 
        "is_valid": "Keyed particles target is valid", 
        "name": "(read-only)    Particle target name", 
        "object": "The object that has the target particle system (empty if same object)"
      }
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "use_shrink": "Process shrink effect (shrink paint areas)", 
        "wave_spring": "Spring force that pulls water level back to zero", 
        "image_resolution": "Output image resolution", 
        "use_dissolve_log": "Use logarithmic dissolve (makes high values to fade faster than low values)", 
        "wave_timescale": "Wave time scaling factor", 
        "frame_end": "Simulation end frame", 
        "init_color": "Initial color of the surface", 
        "shrink_speed": "How fast shrink effect moves on the canvas surface", 
        "spread_speed": "How fast spread effect moves on the canvas surface", 
        "brush_group": "Only use brush objects from this group", 
        "frame_start": "Simulation start frame", 
        "frame_substeps": "Do extra frames between scene frames to ensure smooth motion", 
        "use_dry_log": "Use logarithmic drying (makes high values to dry faster than low values)", 
        "use_spread": "Process spread effect (spread wet paint around surface)", 
        "dissolve_speed": "Approximately in how many frames should dissolve happen", 
        "image_output_path": "Directory to save the textures", 
        "use_output_a": "Save this output layer", 
        "use_output_b": "Save this output layer", 
        "use_color_preview": "(read-only)    Whether this surface has some color preview for 3D view", 
        "depth_clamp": "Maximum level of depth intersection in object space (use 0.0 to disable)", 
        "brush_radius_scale": "Adjust radius of proximity brushes or particles for this surface", 
        "use_drying": "Enable to make surface wetness dry over time", 
        "is_cache_user": "(read-only)", 
        "name": "Surface name", 
        "color_spread_speed": "How fast colors get mixed within wet paint", 
        "use_incremental_displace": "New displace is added cumulatively on top of existing", 
        "dry_speed": "Approximately in how many frames should drying happen", 
        "drip_acceleration": "How much surface acceleration affects dripping", 
        "use_premultiply": "Multiply color by alpha (recommended for Blender input)", 
        "wave_speed": "Wave propagation speed", 
        "use_antialiasing": "Use 5x multisampling to smooth paint edges", 
        "use_wave_open_border": "Pass waves through mesh edges", 
        "point_cache": "(read-only)", 
        "use_dissolve": "Enable to make surface changes disappear over time", 
        "wave_smoothness": "Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)", 
        "is_active": "Toggle whether surface is processed or ignored", 
        "effector_weights": "(read-only)", 
        "surface_format": "Surface Format", 
        "output_name_a": "Name used to save output from this surface", 
        "color_dry_threshold": "The wetness level when colors start to shift to the background", 
        "output_name_b": "Name used to save output from this surface", 
        "brush_influence_scale": "Adjust influence brush objects have on this surface", 
        "show_preview": "Display surface preview in 3D-views", 
        "wave_damping": "Wave damping factor", 
        "drip_velocity": "How much surface velocity affects dripping", 
        "use_drip": "Process drip effect (drip wet paint to gravity direction)", 
        "uv_layer": "UV map name", 
        "displace_factor": "Strength of displace when applied to the mesh", 
        "surface_type": "Surface Type"
      }
    }, 
    "UserSolidLight": {
      "fields": {
        "specular_color": "Color of the light's specular highlight", 
        "diffuse_color": "Diffuse color of the OpenGL light", 
        "use": "Enable this OpenGL light in solid draw mode", 
        "direction": "Direction that the OpenGL light is shining"
      }
    }, 
    "NodeSocketIntUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "KeyboardSensor": {
      "fields": {
        "log": "Property that indicates whether to log keystrokes as a string", 
        "modifier_key_2": "Modifier key code", 
        "modifier_key_1": "Modifier key code", 
        "use_all_keys": "Trigger this sensor on any keystroke", 
        "target": "Property that receives the keystrokes in case a string is logged"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "TextureNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "MetaSequence": {
      "fields": {
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "use_translation": "Translate image before processing", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_float": "Convert input to float data", 
        "sequences": "(read-only)", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "proxy": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "FreestyleLineStyle": {
      "fields": {
        "thickness_ratio": "A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness", 
        "use_same_object": "If true, only feature edges of the same object are joined", 
        "use_angle_max": "Split chains at points with angles larger than the maximum 2D angle", 
        "color": "Base line color, possibly modified by line color modifiers", 
        "split_length": "Curvilinear 2D length for chain splitting", 
        "thickness": "Base line thickness, possibly modified by line thickness modifiers", 
        "thickness_position": "Select the position of stroke thickness", 
        "geometry_modifiers": "(read-only)    List of stroke geometry modifiers", 
        "split_dash3": "Length of the 3rd dash for splitting", 
        "thickness_modifiers": "(read-only)    List of line thickness modifiers", 
        "split_dash1": "Length of the 1st dash for splitting", 
        "split_dash2": "Length of the 2nd dash for splitting", 
        "dash3": "Length of the 3rd dash for dashed lines", 
        "length_min": "Minimum curvilinear 2D length for the selection of chains", 
        "caps": "Select the shape of both ends of strokes", 
        "dash2": "Length of the 2nd dash for dashed lines", 
        "alpha_modifiers": "(read-only)    List of alpha transparency modifiers", 
        "use_chaining": "Enable chaining of feature edges", 
        "use_split_pattern": "Enable chain splitting by dashed line patterns", 
        "use_length_min": "Enable the selection of chains by a minimum 2D length", 
        "alpha": "Base alpha transparency, possibly modified by alpha transparency modifiers", 
        "split_gap1": "Length of the 1st gap for splitting", 
        "split_gap2": "Length of the 2nd gap for splitting", 
        "split_gap3": "Length of the 3rd gap for splitting", 
        "use_dashed_line": "Enable or disable dashed line", 
        "chaining": "Select the way how feature edges are jointed to form chains", 
        "panel": "Select the property panel to be shown", 
        "angle_max": "Maximum 2D angle for splitting chains", 
        "use_length_max": "Enable the selection of chains by a maximum 2D length", 
        "use_split_length": "Enable chain splitting by curvilinear 2D length", 
        "gap1": "Length of the 1st gap for dashed lines", 
        "gap2": "Length of the 2nd gap for dashed lines", 
        "material_boundary": "If true, chains of feature edges are split at material boundaries", 
        "gap3": "Length of the 3rd gap for dashed lines", 
        "use_angle_min": "Split chains at points with angles smaller than the minimum 2D angle", 
        "dash1": "Length of the 1st dash for dashed lines", 
        "color_modifiers": "(read-only)    List of line color modifiers", 
        "length_max": "Maximum curvilinear 2D length for the selection of chains", 
        "angle_min": "Minimum 2D angle for splitting chains", 
        "rounds": "Number of rounds in a sketchy multiple touch"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MeshCacheModifier": {
      "fields": {
        "eval_time": "Evaluation time in seconds", 
        "filepath": "Path to external displacements file", 
        "eval_factor": "Evaluation time in seconds", 
        "time_mode": "Method to control playback time", 
        "eval_frame": "The frame to evaluate (starting at 0)", 
        "factor": "Influence of the deformation", 
        "frame_scale": "Evaluation time in seconds", 
        "frame_start": "Add this to the start frame"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "NodeSocketIntFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "KeyConfig": {
      "fields": {
        "keymaps": "(read-only)    Key maps configured as part of this configuration", 
        "name": "Name of the key configuration", 
        "is_user_defined": "(read-only)    Indicates that a keyconfig was defined by the user"
      }
    }, 
    "Object": {
      "fields": {
        "active_material": "Active material being displayed", 
        "parent": "Parent Object", 
        "empty_image_offset": "Origin offset distance", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "select": "Object selection state", 
        "data": "Object data", 
        "dupli_frames_off": "Recurring frames to exclude from the Dupliframes", 
        "up_axis": "Axis that points in the upward direction (applies to DupliFrame when parent 'Follow' is enabled)", 
        "show_name": "Display the object's name", 
        "empty_draw_type": "Viewport display style for empties", 
        "particle_systems": "(read-only)    Particle systems emitted from the object", 
        "show_wire": "Add the object's wireframe over solid drawing", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "delta_rotation_quaternion": "Extra rotation added to the rotation of the object (when using Quaternion rotations)", 
        "type": "(read-only)    Type of Object", 
        "constraints": "(read-only)    Constraints affecting the transformation of the object", 
        "track_axis": "Axis that points in 'forward' direction (applies to DupliFrame when parent 'Follow' is enabled)", 
        "hide_select": "Restrict selection in the viewport", 
        "mode": "(read-only)    Object interaction mode", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "delta_scale": "Extra scaling added to the scale of the object", 
        "draw_bounds_type": "Object boundary display type", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "use_dynamic_topology_sculpting": "(read-only)", 
        "layers": "Layers the object is on", 
        "dupli_frames_end": "End frame for DupliFrames", 
        "use_extra_recalc_object": "Refresh this object again on frame changes, dependency graph hack", 
        "vertex_groups": "(read-only)    Vertex groups of the object", 
        "animation_visualization": "(read-only)    Animation data for this datablock", 
        "pass_index": "Index number for the IndexOB render pass", 
        "lock_scale": "Lock editing of scale in the interface", 
        "dupli_frames_on": "Number of frames to use between DupOff frames", 
        "matrix_world": "Worldspace transformation matrix", 
        "pose": "(read-only)    Current pose for armatures", 
        "proxy_group": "(read-only)    Library group duplicator object this proxy object controls", 
        "show_axis": "Display the object's origin and axes", 
        "use_extra_recalc_data": "Refresh this object's data again on frame changes, dependency graph hack", 
        "parent_type": "Type of parent relation", 
        "show_all_edges": "Display all edges for mesh objects", 
        "show_texture_space": "Display the object's texture space", 
        "use_dupli_vertices_rotation": "Rotate dupli according to vertex normal", 
        "collision": "(read-only)    Settings for using the object as a collider in physics simulation", 
        "proxy": "(read-only)    Library object this proxy object controls", 
        "show_only_shape_key": "Always show the current Shape for this Object", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "delta_location": "Extra translation added to the location of the object", 
        "dupli_frames_start": "Start frame for DupliFrames", 
        "field": "(read-only)    Settings for using the object as a field in physics simulation", 
        "use_dupli_frames_speed": "Set dupliframes to use the current frame instead of parent curve's evaluation time", 
        "material_slots": "(read-only)    Material slots in the object", 
        "rigid_body_constraint": "(read-only)    Constraint constraining rigid bodies", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "empty_draw_size": "Size of display for empties in the viewport", 
        "active_shape_key": "(read-only)    Current shape key", 
        "game": "(read-only)    Game engine related settings for the object", 
        "matrix_basis": "Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied", 
        "slow_parent_offset": "Delay in the parent relationship", 
        "use_slow_parent": "Create a delay in the parent relationship (beware: this isn't renderfarm safe and may be invalid after jumping around the timeline)", 
        "parent_bone": "Name of parent bone in case of a bone parenting relation", 
        "color": "Object color and alpha, used when faces have the ObColor mode enabled", 
        "use_dupli_faces_scale": "Scale dupli based on face size", 
        "layers_local_view": "(read-only)    3D local view layers the object is on", 
        "scale": "Scaling of the object", 
        "parent_vertices": "Indices of vertices in case of a vertex parenting relation", 
        "modifiers": "(read-only)    Modifiers affecting the geometric data of the object", 
        "matrix_parent_inverse": "Inverse of object's parent matrix at time of parenting", 
        "show_transparent": "Display material transparency in the object (unsupported for duplicator drawing)", 
        "active_shape_key_index": "Current shape key index", 
        "pose_library": "Action used as a pose library for armatures", 
        "show_bounds": "Display the object's bounds", 
        "is_duplicator": "(read-only)", 
        "soft_body": "(read-only)    Settings for soft body simulation", 
        "delta_rotation_euler": "Extra rotation added to the rotation of the object (when using Euler rotations)", 
        "dupli_type": "If not None, object duplication method to use", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "hide_render": "Restrict renderability", 
        "draw_type": "Maximum draw type to display object with in viewport", 
        "active_material_index": "Index of active material slot", 
        "lock_location": "Lock editing of location in the interface", 
        "rigid_body": "(read-only)    Settings for rigid body simulation", 
        "rotation_euler": "Rotation in Eulers", 
        "hide": "Restrict visibility in the viewport", 
        "dupli_list": "(read-only)    Object duplis", 
        "grease_pencil": "Grease Pencil datablock", 
        "dupli_faces_scale": "Scale the DupliFace objects", 
        "use_shape_key_edit_mode": "Apply shape keys in edit mode (for Meshes only)", 
        "show_x_ray": "Make the object draw in front of others (unsupported for duplicator drawing)", 
        "matrix_local": "Parent relative transformation matrix", 
        "bound_box": "(read-only)    Object's bounding box in object-space coordinates, all values are -1.0 when not available", 
        "location": "Location of the object", 
        "dupli_group": "Instance an existing group", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "dimensions": "Absolute bounding box dimensions of the object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "select": "Plane track is selected", 
        "name": "Unique name of track", 
        "use_auto_keying": "Automatic keyframe insertion when moving plane corners", 
        "markers": "(read-only)    Collection of markers in track"
      }
    }, 
    "SolidifyModifier": {
      "fields": {
        "material_offset_rim": "Offset material index of generated rim faces", 
        "thickness_clamp": "Offset clamp based on geometry scale", 
        "offset": "Offset the thickness from the center", 
        "use_even_offset": "Maintain thickness by adjusting for sharp corners (slow, disable when not needed)", 
        "thickness": "Thickness of the shell", 
        "thickness_vertex_group": "Thickness factor to use for zero vertex group influence", 
        "use_rim": "Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)", 
        "vertex_group": "Vertex group name", 
        "edge_crease_rim": "Assign a crease to the edges making up the rim", 
        "edge_crease_inner": "Assign a crease to inner edges", 
        "invert_vertex_group": "Invert the vertex group influence", 
        "use_flip_normals": "Invert the face direction", 
        "material_offset": "Offset material index of generated faces", 
        "use_quality_normals": "Calculate normals which result in more even thickness (slow, disable when not needed)", 
        "edge_crease_outer": "Assign a crease to outer edges"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ShaderNodeTexGradient": {
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings", 
        "gradient_type": "Style of the color blending"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "UserPreferences": {
      "fields": {
        "filepaths": "(read-only)    Default paths for external files", 
        "themes": "(read-only)", 
        "view": "(read-only)    Preferences related to viewing data", 
        "system": "(read-only)    Graphics driver and operating system settings", 
        "addons": "(read-only)", 
        "edit": "(read-only)    Settings for interacting with Blender data", 
        "active_section": "Active section of the user preferences shown in the user interface", 
        "inputs": "(read-only)    Settings for input devices", 
        "ui_styles": "(read-only)", 
        "autoexec_paths": "(read-only)"
      }
    }, 
    "EditBone": {
      "fields": {
        "parent": "Parent edit bone (in same Armature)", 
        "use_deform": "Enable Bone to deform geometry", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "roll": "Bone rotation around head-tail axis", 
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "bbone_z": "B-Bone Z size", 
        "matrix": "(read-only)    Read-only matrix calculated from the roll (armature space)", 
        "use_inherit_scale": "Bone inherits scaling from parent bone", 
        "head": "Location of head end of the bone", 
        "hide_select": "Bone is able to be selected", 
        "use_relative_parent": "Object children will use relative transform, like deform", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "layers": "Layers bone exists in", 
        "lock": "Bone is not able to be transformed when in Edit Mode", 
        "bbone_out": "Length of second Bezier Handle (for B-Bones only)", 
        "use_local_location": "Bone location is set in local space", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "bbone_in": "Length of first Bezier Handle (for B-Bones only)", 
        "tail": "Location of tail end of the bone", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)", 
        "bbone_x": "B-Bone X size", 
        "hide": "Bone is not visible when in Edit Mode", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "use_connect": "When bone has a parent, bone's head is stuck to the parent's tail"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "select_anchor": "Track's anchor point is selected", 
        "select": "Track is selected", 
        "color": "Color of the track in the Movie Clip Editor and the 3D viewport after a solve", 
        "use_custom_color": "Use custom color instead of theme-defined", 
        "average_error": "(read-only)    Average error of re-projection", 
        "use_blue_channel": "Use blue channel from footage for tracking", 
        "lock": "Track is locked and all changes to it are disabled", 
        "select_search": "Track's search area is selected", 
        "select_pattern": "Track's pattern area is selected", 
        "bundle": "(read-only)    Position of bundle reconstructed from this track", 
        "use_green_channel": "Use green channel from footage for tracking", 
        "pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "use_grayscale_preview": "Display what the tracking algorithm sees in the preview", 
        "margin": "Distance from image boundary at which marker stops tracking", 
        "use_brute": "Use a brute-force translation only pre-track before refinement", 
        "motion_model": "Default motion model to use for tracking", 
        "use_alpha_preview": "Apply track's mask on displaying preview", 
        "use_normalization": "Normalize light intensities while tracking. Slower", 
        "correlation_min": "Minimal value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "hide": "Track is hidden", 
        "use_red_channel": "Use red channel from footage for tracking", 
        "grease_pencil": "Grease pencil data for this track", 
        "name": "Unique name of track", 
        "use_mask": "Use a grease pencil datablock as a mask to use only specified areas of pattern when tracking", 
        "frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "markers": "(read-only)    Collection of markers in track", 
        "has_bundle": "(read-only)    True if track has a valid bundle"
      }
    }, 
    "GameIntProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "ShrinkwrapModifier": {
      "fields": {
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "auxiliary_target": "Additional mesh target to shrink to", 
        "use_positive_direction": "Allow vertices to move in the positive direction of axis", 
        "offset": "Distance to keep from the target", 
        "use_negative_direction": "Allow vertices to move in the negative direction of axis", 
        "vertex_group": "Vertex group name", 
        "subsurf_levels": "Number of subdivisions that must be performed before extracting vertices' positions and normals", 
        "cull_face": "Stop vertices from projecting to a face on the target when facing towards/away", 
        "target": "Mesh target to shrink to"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ActionPoseMarkers": {
      "fields": {
        "active_index": "Index of active pose marker", 
        "active": "Active pose marker for this action"
      }
    }, 
    "MaterialRaytraceMirror": {
      "fields": {
        "gloss_factor": "The shininess of the reflection (values < 1.0 give diffuse, blurry reflections)", 
        "gloss_samples": "Number of cone samples averaged for blurry reflections", 
        "fresnel": "Power of Fresnel for mirror reflection", 
        "gloss_anisotropic": "The shape of the reflection, from 0.0 (circular) to 1.0 (fully stretched along the tangent", 
        "depth": "Maximum allowed number of light inter-reflections", 
        "gloss_threshold": "Threshold for adaptive sampling (if a sample contributes less than this amount [as a percentage], sampling is stopped)", 
        "distance": "Maximum distance of reflected rays (reflections further than this range fade to sky color or material color)", 
        "reflect_factor": "Amount of mirror reflection for raytrace", 
        "use": "Enable raytraced reflections", 
        "fresnel_factor": "Blending factor for Fresnel", 
        "fade_to": "The color that rays with no intersection within the Max Distance take (material color can be best for indoor scenes, sky color for outdoor)"
      }
    }, 
    "PointCache": {
      "fields": {
        "frame_step": "Number of frames between cached frames", 
        "is_baked": "(read-only)", 
        "use_external": "Read cache from an external location", 
        "is_baking": "(read-only)", 
        "index": "Index number of cache files", 
        "frame_end": "Frame on which the simulation stops", 
        "frame_start": "Frame on which the simulation starts", 
        "is_outdated": "(read-only)", 
        "use_library_path": "Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)", 
        "filepath": "Cache file path", 
        "point_caches": "(read-only)    Point cache list", 
        "use_disk_cache": "Save cache files to disk (.blend file must be saved first)", 
        "name": "Cache name", 
        "frames_skipped": "(read-only)", 
        "compression": "Compression method to be used", 
        "info": "(read-only)    Info on current cache status"
      }
    }, 
    "CompositorNodeBlur": {
      "fields": {
        "use_bokeh": "Use circular filter (slower)", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input", 
        "aspect_correction": "Type of aspect correction to use", 
        "use_gamma_correction": "Apply filter on gamma corrected values", 
        "use_relative": "Use relative (percent) values to define blur radius"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "KeyingSetInfo": {
      "fields": {
        "bl_description": "A short description of the keying set", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "bl_options": "Keying set options"
      }
    }, 
    "UnitSettings": {
      "fields": {
        "system": "The unit system to use for button display", 
        "system_rotation": "Unit to use for displaying/editing rotation values", 
        "use_separate": "Display units in pairs (e.g. 1m 0cm)", 
        "scale_length": "Scale to use when converting between blender units and dimensions"
      }
    }, 
    "MeshVertex": {
      "fields": {
        "normal": "Vertex Normal", 
        "bevel_weight": "Weight used by the Bevel modifier 'Only Vertices' option", 
        "groups": "(read-only)    Weights for the vertex groups this vertex is member of", 
        "index": "(read-only)    Index of this vertex", 
        "undeformed_co": "(read-only)    For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates"
      }
    }, 
    "LineStyleThicknessModifier_Material": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "mapping": "Select the mapping type", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "value_min": "Minimum output value of the mapping", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "material_attribute": "Specify which material attribute is used", 
        "influence": "Influence factor by which the modifier changes the property"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "FloorConstraint": {
      "fields": {
        "use_rotation": "Use the target's rotation to determine floor", 
        "offset": "Offset of floor from object origin", 
        "floor_location": "Location of target that object will not pass through", 
        "use_sticky": "Immobilize object while constrained", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CurveMapPoint": {
      "fields": {
        "select": "Selection state of the curve point", 
        "handle_type": "Curve interpolation at this point: Bezier or vector", 
        "location": "X/Y coordinates of the curve point"
      }
    }, 
    "CompositorNodeVecBlur": {
      "fields": {
        "speed_max": "Maximum speed, or zero for none", 
        "speed_min": "Minimum speed for a pixel to be blurred (used to separate background from foreground)", 
        "use_curved": "Interpolate between frames in a Bezier curve, rather than linearly", 
        "factor": "Scaling factor for motion vectors (actually, 'shutter speed', in frames)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "KeyMap": {
      "fields": {
        "is_modal": "(read-only)    Indicates that a keymap is used for translate modal events for an operator", 
        "show_expanded_children": "Children expanded in the user interface", 
        "keymap_items": "(read-only)    Items in the keymap, linking an operator to an input event", 
        "space_type": "(read-only)    Optional space type keymap is associated with", 
        "name": "(read-only)    Name of the key map", 
        "show_expanded_items": "Expanded in the user interface", 
        "region_type": "(read-only)    Optional region type keymap is associated with", 
        "is_user_modified": "Keymap is defined by the user"
      }
    }, 
    "DomainFluidSettings": {
      "fields": {
        "surface_smooth": "Amount of surface smoothing (a value of 0 is off, 1 is normal smoothing and more than 1 is extra smoothing)", 
        "memory_estimate": "(read-only)    Estimated amount of memory needed for baking the domain", 
        "grid_levels": "Number of coarsened grids to use (-1 for automatic)", 
        "resolution": "Domain resolution in X,Y and Z direction", 
        "filepath": "Directory (and/or filename prefix) to store baked fluid simulation files in", 
        "render_display_mode": "How to display the mesh for rendering", 
        "tracer_particles": "Number of tracer particles to generate", 
        "use_reverse_frames": "Reverse fluid frames", 
        "viscosity_exponent": "Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)", 
        "use_speed_vectors": "Generate speed vectors for vector blur", 
        "use_time_override": "Use a custom start and end time (in seconds) instead of the scene's timeline", 
        "simulation_scale": "Size of the simulation domain in meters", 
        "preview_resolution": "Preview resolution in X,Y and Z direction", 
        "end_time": "Simulation time of the last blender frame (in seconds)", 
        "threads": "Override number of threads for the simulation, 0 is automatic", 
        "fluid_mesh_vertices": "(read-only)    Vertices of the fluid mesh generated by simulation", 
        "generate_particles": "Amount of particles to generate (0=off, 1=normal, >1=more)", 
        "viewport_display_mode": "How to display the mesh in the viewport", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "compressibility": "Allowed compressibility due to gravitational force for standing fluid (directly affects simulation step size)", 
        "simulation_rate": "Fluid motion rate (0 = stationary, 1 = normal speed)", 
        "use_surface_noobs": "Removes the air gap between fluid surface and obstacles - WARNING: Can result in a dissolving surface in other areas", 
        "frame_offset": "Offset when reading baked cache", 
        "start_time": "Simulation time of the first blender frame (in seconds)", 
        "gravity": "Gravity in X, Y and Z direction", 
        "surface_subdivisions": "Number of isosurface subdivisions (this is necessary for the inclusion of particles into the surface generation - WARNING: can lead to longer computation times !)", 
        "viscosity_base": "Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "LockedTrackConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "lock_axis": "Axis that points upward", 
        "target": "Target Object", 
        "track_axis": "Axis that points to the target object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "GPencilFrame": {
      "fields": {
        "strokes": "(read-only)    Freehand curves defining the sketch on this frame", 
        "select": "Frame is selected for editing in the Dope Sheet", 
        "is_edited": "Frame is being edited (painted on)", 
        "frame_number": "The frame on which this sketch appears"
      }
    }, 
    "MeshIntPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "ImageSequence": {
      "fields": {
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "use_translation": "Translate image before processing", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_float": "Convert input to float data", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "proxy": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "use_deinterlace": "For video movies to remove fields", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "elements": "(read-only)", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "LineStyleGeometryModifier_TipRemover": {
      "fields": {
        "tip_length": "Length of tips to be removed", 
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "Controller": {
      "fields": {
        "actuators": "(read-only)    The list containing the actuators connected to the controller", 
        "use_priority": "Mark controller for execution before all non-marked controllers (good for startup scripts)", 
        "show_expanded": "Set controller expanded in the user interface", 
        "states": "Set Controller state index (1 to 30)"
      }
    }, 
    "MeshPolygons": {
      "fields": {
        "active": "The active polygon for this mesh"
      }
    }, 
    "MotionPathVert": {
      "fields": {
        "select": "Path point is selected for editing"
      }
    }, 
    "ThemeStyle": {
      "fields": {
        "widget": "(read-only)", 
        "widget_label": "(read-only)", 
        "panel_title": "(read-only)"
      }
    }, 
    "SculptToolCapabilities": {
      "fields": {
        "has_accumulate": "(read-only)", 
        "has_persistence": "(read-only)", 
        "has_secondary_color": "(read-only)", 
        "has_random_texture_angle": "(read-only)", 
        "has_plane_offset": "(read-only)", 
        "has_sculpt_plane": "(read-only)", 
        "has_auto_smooth": "(read-only)", 
        "has_jitter": "(read-only)", 
        "has_smooth_stroke": "(read-only)", 
        "has_normal_weight": "(read-only)", 
        "has_pinch_factor": "(read-only)", 
        "has_strength": "(read-only)", 
        "has_space_attenuation": "(read-only)", 
        "has_height": "(read-only)"
      }
    }, 
    "BlendDataWindowManagers": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "LampSkySettings": {
      "fields": {
        "horizon_brightness": "Horizon brightness", 
        "atmosphere_extinction": "Extinction scattering contribution factor", 
        "atmosphere_inscattering": "Scatter contribution factor", 
        "use_atmosphere": "Apply sun effect on atmosphere", 
        "spread": "Horizon Spread", 
        "backscattered_light": "Backscattered light", 
        "sun_size": "Sun size", 
        "sky_blend": "Blend factor with sky", 
        "atmosphere_turbidity": "Sky turbidity", 
        "atmosphere_distance_factor": "Multiplier to convert blender units to physical distance", 
        "sun_intensity": "Sun intensity", 
        "sky_blend_type": "Blend mode for combining sun sky with world sky", 
        "sky_exposure": "Strength of sky shading exponential exposure correction", 
        "sky_color_space": "Color space to use for internal XYZ->RGB color conversion", 
        "use_sky": "Apply sun effect on sky", 
        "sun_brightness": "Sun brightness"
      }
    }, 
    "NodeSocketInterfaceString": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "MultiresModifier": {
      "fields": {
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "render_levels": "The subdivision level visible at render time", 
        "filepath": "Path to external displacements file", 
        "total_levels": "(read-only)    Number of subdivisions for which displacements are stored", 
        "sculpt_levels": "Number of subdivisions to use in sculpt mode", 
        "is_external": "(read-only)    Store multires displacements outside the .blend file, to save memory", 
        "use_subsurf_uv": "Use subsurf to subdivide UVs", 
        "levels": "Number of subdivisions to use in the viewport"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SkinModifier": {
      "fields": {
        "use_z_symmetry": "Avoid making unsymmetrical quads across the Z axis", 
        "use_x_symmetry": "Avoid making unsymmetrical quads across the X axis", 
        "use_y_symmetry": "Avoid making unsymmetrical quads across the Y axis", 
        "branch_smoothing": "Smooth complex geometry around branches", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BlendDataMetaBalls": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "CompositorNodeCurveVec": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "corners": "Array of coordinates which represents UI rectangle corners in frame normalized coordinates", 
        "mute": "Is marker muted for current frame", 
        "frame": "Frame number marker is keyframed on"
      }
    }, 
    "MessageSensor": {
      "fields": {
        "subject": "Optional subject filter: only accept messages with this subject, or empty to accept all"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "FollowPathConstraint": {
      "fields": {
        "forward_axis": "Axis that points forward along the path", 
        "use_curve_radius": "Object is scaled by the curve radius", 
        "offset": "Offset from the position corresponding to the time frame", 
        "up_axis": "Axis that points upward", 
        "offset_factor": "Percentage value defining target position along length of curve", 
        "use_fixed_location": "Object will stay locked to a single point somewhere along the length of the curve regardless of time", 
        "use_curve_follow": "Object will follow the heading and banking of the curve", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "SpaceOutliner": {
      "fields": {
        "filter_text": "Live search filtering string", 
        "display_mode": "Type of information to display", 
        "use_filter_complete": "Only use complete matches of search string", 
        "use_filter_case_sensitive": "Only use case sensitive matches of search string", 
        "show_restrict_columns": "Show column"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "FModifierCycles": {
      "fields": {
        "cycles_before": "Maximum number of cycles to allow before first keyframe (0 = infinite)", 
        "cycles_after": "Maximum number of cycles to allow after last keyframe (0 = infinite)", 
        "mode_after": "Cycling mode to use after last keyframe", 
        "mode_before": "Cycling mode to use before first keyframe"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "CompositorNodeLensdist": {
      "fields": {
        "use_projector": "Enable/disable projector mode (the effect is applied in horizontal direction only)", 
        "use_jitter": "Enable/disable jittering (faster, but also noisier)", 
        "use_fit": "For positive distortion factor only: scale image such that black areas are not visible"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "NodeSocketInterfaceFloatUnsigned": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatFactor": {
      "fields": {
        "min_value": "Minimum value", 
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "SceneBases": {
      "fields": {
        "active": "Active object base in the scene"
      }
    }, 
    "BlendDataObjects": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "StucciTexture": {
      "fields": {
        "noise_basis": "Noise basis used for turbulence", 
        "turbulence": "Turbulence of the noise", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "WorldLighting": {
      "fields": {
        "falloff_strength": "Attenuation falloff strength, the higher, the less influence distant objects have", 
        "indirect_bounces": "Number of indirect diffuse light bounces", 
        "adapt_to_speed": "Use the speed vector pass to reduce AO samples in fast moving pixels - higher values result in more aggressive sample reduction (requires Vec pass enabled, for Raytrace Adaptive QMC)", 
        "distance": "Length of rays, defines how far away other faces give occlusion effect", 
        "use_falloff": "Distance will be used to attenuate shadows", 
        "use_ambient_occlusion": "Use Ambient Occlusion to add shadowing based on distance between objects", 
        "threshold": "Samples below this threshold will be considered fully shadowed/unshadowed and skipped (for Raytrace Adaptive QMC)", 
        "use_cache": "Cache AO results in pixels and interpolate over neighboring pixels for speedup", 
        "indirect_factor": "Factor for how much surrounding objects contribute to light", 
        "sample_method": "Method for generating shadow samples (for Raytrace)", 
        "samples": "Amount of ray samples. Higher values give smoother results and longer rendering times", 
        "use_environment_light": "Add light coming from the environment", 
        "ao_factor": "Factor for ambient occlusion blending", 
        "environment_energy": "Defines the strength of environment light", 
        "passes": "Number of preprocessing passes to reduce over-occlusion", 
        "bias": "Bias (in radians) to prevent smoothed faces from showing banding (for Raytrace Constant Jittered)", 
        "use_indirect_light": "Add indirect light bouncing of surrounding objects", 
        "ao_blend_type": "Defines how AO mixes with material shading", 
        "environment_color": "Defines where the color of the environment light comes from", 
        "error_threshold": "Low values are slower and higher quality", 
        "correction": "Ad-hoc correction for over-occlusion due to the approximation"
      }
    }, 
    "SmokeCollSettings": {
      "fields": {
        "collision_type": "Collision type"
      }
    }, 
    "SpaceView3D": {
      "fields": {
        "transform_manipulators": "Transformation manipulators", 
        "lock_cursor": "3D View center is locked to the cursor's position", 
        "use_pivot_point_align": "Manipulate center points (object and pose mode only)", 
        "render_border_max_x": "Maximum X value for the render border", 
        "use_matcap": "Active Objects draw images mapped on normals, enhancing Solid Draw Mode", 
        "show_relationship_lines": "Show dashed lines indicating parent or constraint relationships", 
        "lock_object": "3D View center is locked to this object's position", 
        "cursor_location": "3D cursor location for this view (dependent on local view setting)", 
        "current_orientation": "(read-only)    Current transformation orientation", 
        "render_border_max_y": "Maximum Y value for the render border", 
        "use_render_border": "Use a region within the frame size for rendered viewport (when not viewing through the camera)", 
        "region_quadview": "(read-only)    3D region that defines the quad view settings", 
        "show_floor": "Show the ground plane grid in perspective view", 
        "grid_subdivisions": "Number of subdivisions between grid lines", 
        "layers": "Layers visible in this 3D View", 
        "render_border_min_y": "Minimum Y value for the render border", 
        "render_border_min_x": "Minimum X value to for the render border", 
        "show_background_images": "Display reference images behind objects in the 3D View", 
        "tracks_draw_type": "Viewport display style for tracks", 
        "show_bundle_names": "Show names for reconstructed tracks objects", 
        "transform_orientation": "Transformation orientation", 
        "background_images": "(read-only)    List of background images", 
        "layers_used": "(read-only)    Layers that contain something", 
        "show_reconstruction": "Display reconstruction data from active movie clip", 
        "show_textured_solid": "Display face-assigned textures in solid view", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_only_render": "Display only objects which will be rendered", 
        "clip_start": "3D View near clipping distance (perspective view only)", 
        "viewport_shade": "Method to display/shade objects in the 3D View", 
        "matcap_icon": "Image to use for Material Capture, active objects only", 
        "layers_local_view": "(read-only)    Local view layers visible in this 3D View", 
        "grid_scale_unit": "(read-only)    Grid cell size scaled by scene unit system settings", 
        "lens": "Viewport lens angle (mm)", 
        "local_view": "(read-only)    Display an isolated sub-set of objects, apart from the scene visibility", 
        "show_manipulator": "Use a 3D manipulator widget for controlling transforms", 
        "lock_bone": "3D View center is locked to this bone's position", 
        "region_3d": "(read-only)    3D region in this space, in case of quad view the camera region", 
        "clip_end": "3D View far clipping distance", 
        "grid_lines": "Number of grid lines to display in perspective view", 
        "show_all_objects_origin": "Show the object origin center dot for all (selected and unselected) objects", 
        "tracks_draw_size": "Display size of tracks from reconstructed data", 
        "show_backface_culling": "Use back face culling to hide the back side of faces", 
        "camera": "Active camera used in this view (when unlocked from the scene's active camera)", 
        "show_camera_path": "Show reconstructed camera path", 
        "lock_camera_and_layers": "Use the scene's active camera and layers in this view, rather than local layers", 
        "show_occlude_wire": "Use hidden wireframe display", 
        "lock_camera": "Enable view navigation within the camera view", 
        "show_axis_x": "Show the X axis line in perspective view", 
        "show_axis_y": "Show the Y axis line in perspective view", 
        "show_axis_z": "Show the Z axis line in perspective view", 
        "show_outline_selected": "Show an outline highlight around selected objects in non-wireframe views", 
        "use_occlude_geometry": "Limit selection to visible (clipped with depth buffer)", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "grid_scale": "Distance between 3D View grid lines"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "World": {
      "fields": {
        "color_range": "The color range that will be mapped to 0-1", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "zenith_color": "Color at the zenith", 
        "active_texture": "Active texture slot being displayed", 
        "cycles": "(read-only)    Cycles world settings", 
        "light_settings": "(read-only)    World lighting settings", 
        "use_sky_real": "Render background with a real horizon, relative to the camera angle", 
        "star_settings": "(read-only)    World stars settings", 
        "ambient_color": "Ambient color of the world", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "active_texture_index": "Index of active texture slot", 
        "exposure": "Amount of exponential color correction for light", 
        "horizon_color": "Color at the horizon", 
        "mist_settings": "(read-only)    World mist settings", 
        "use_sky_blend": "Render background with natural progression from horizon to zenith", 
        "node_tree": "(read-only)    Node tree for node based worlds", 
        "use_nodes": "Use shader nodes to render the world", 
        "use_sky_paper": "Flatten blend or texture coordinates"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_100": "Build proxy resolution 100% of the original footage dimension", 
        "build_free_run": "Build free run time code index", 
        "build_undistorted_25": "Build proxy resolution 25% of the original undistorted footage dimension", 
        "build_25": "Build proxy resolution 25% of the original footage dimension", 
        "directory": "Location to store the proxy files", 
        "build_undistorted_100": "Build proxy resolution 100% of the original undistorted footage dimension", 
        "quality": "JPEG quality of proxy images", 
        "build_undistorted_75": "Build proxy resolution 75% of the original undistorted footage dimension", 
        "build_undistorted_50": "Build proxy resolution 50% of the original undistorted footage dimension", 
        "build_50": "Build proxy resolution 50% of the original footage dimension", 
        "build_75": "Build proxy resolution 75% of the original footage dimension", 
        "build_record_run": "Build record run time code index", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time"
      }
    }, 
    "AnimVizMotionPaths": {
      "fields": {
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "show_keyframe_numbers": "Show frame numbers of Keyframes on Motion Paths", 
        "frame_step": "Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)", 
        "show_frame_numbers": "Show frame numbers on Motion Paths", 
        "bake_location": "When calculating Bone Paths, use Head or Tips", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "show_keyframe_highlight": "Emphasize position of keyframes on Motion Paths", 
        "show_keyframe_action_all": "For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)", 
        "frame_end": "End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "type": "Type of range to show for Motion Paths", 
        "frame_start": "Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)"
      }
    }, 
    "RenderLayers": {
      "fields": {
        "active_index": "Active index in render layer array", 
        "active": "Active Render Layer"
      }
    }, 
    "BlendDataNodeTrees": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "CompositorNodeTree": {
      "fields": {
        "chunk_size": "Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)", 
        "use_opencl": "Enable GPU calculations", 
        "edit_quality": "Quality when editing", 
        "render_quality": "Quality when rendering", 
        "use_groupnode_buffer": "Enable buffering of group nodes", 
        "use_viewer_border": "Use boundaries for viewer nodes and composite backdrop", 
        "use_two_pass": "Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes"
      }, 
      "inherits": [
        "ID", 
        "NodeTree"
      ]
    }, 
    "ImageTexture": {
      "fields": {
        "checker_distance": "Distance between checker tiles", 
        "extension": "How the image is extrapolated past its original bounds", 
        "use_checker_odd": "Odd checker tiles", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "filter_probes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "invert_alpha": "Invert all the alpha values in the image", 
        "use_alpha": "Use the alpha channel information in the image", 
        "use_calculate_alpha": "Calculate an alpha channel based on RGB values in the image", 
        "use_checker_even": "Even checker tiles", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "use_derivative_map": "Use red and green as derivative values", 
        "filter_type": "Texture filter to use for sampling image", 
        "crop_min_x": "Minimum X value to crop the image", 
        "crop_min_y": "Minimum Y value to crop the image", 
        "use_flip_axis": "Flip the texture's X and Y axis", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "repeat_y": "Repetition multiplier in the Y direction", 
        "repeat_x": "Repetition multiplier in the X direction", 
        "use_normal_map": "Use image RGB values for normal mapping", 
        "crop_max_x": "Maximum X value to crop the image", 
        "crop_max_y": "Maximum Y value to crop the image", 
        "use_mirror_y": "Mirror the image repetition on the Y direction", 
        "use_mirror_x": "Mirror the image repetition on the X direction", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps", 
        "use_interpolation": "Interpolate pixels using selected filter"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "CollisionModifier": {
      "fields": {
        "settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SequenceColorBalanceData": {
      "fields": {
        "lift": "Color balance lift (shadows)", 
        "gamma": "Color balance gamma (midtones)", 
        "gain": "Color balance gain (highlights)"
      }
    }, 
    "FreestyleModuleSettings": {
      "fields": {
        "use": "Enable or disable this style module during stroke rendering", 
        "script": "Python script to define a style module"
      }
    }, 
    "NodeSocketFloat": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "LineStyleGeometryModifier_2DOffset": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "start": "Displacement that is applied from the beginning of the stroke", 
        "x": "Displacement that is applied to the X coordinates of stroke vertices", 
        "y": "Displacement that is applied to the Y coordinates of stroke vertices", 
        "end": "Displacement that is applied from the end of the stroke", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "JoystickSensor": {
      "fields": {
        "axis_number": "Which axis pair to use, 1 is usually the main direction input", 
        "button_number": "Which button to use", 
        "event_type": "The type of event this joystick sensor is triggered on", 
        "hat_direction": "Hat direction", 
        "joystick_index": "Which joystick to use", 
        "hat_number": "Which hat to use", 
        "use_all_events": "Triggered by all events on this joystick's current type (axis/button/hat)", 
        "axis_threshold": "Precision of the axis", 
        "axis_direction": "The direction of the axis", 
        "single_axis_number": "Single axis (vertical/horizontal/other) to detect"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "DynamicPaintSurfaces": {
      "fields": {
        "active": "(read-only)    Active Dynamic Paint surface being displayed"
      }
    }, 
    "MaskSpline": {
      "fields": {
        "use_fill": "Make this spline filled", 
        "offset_mode": "The method used for calculating the feather offset", 
        "weight_interpolation": "The type of weight interpolation for spline", 
        "use_cyclic": "Make this spline a closed loop", 
        "use_self_intersection_check": "Prevent feather from self-intersections", 
        "points": "(read-only)    Collection of points"
      }
    }, 
    "CompositorNodeMixRGB": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range", 
        "use_alpha": "Include alpha of second input in this operation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "BoidRuleAvoidCollision": {
      "fields": {
        "use_avoid": "Avoid collision with other boids", 
        "use_avoid_collision": "Avoid collision with deflector objects", 
        "look_ahead": "Time to look ahead in seconds"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "GreasePencil": {
      "fields": {
        "layers": "(read-only)", 
        "use_stroke_endpoints": "Only use the first and last parts of the stroke for snapping"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "BlendDataBrushes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MovieTrackingObjectPlaneTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "BoidSettings": {
      "fields": {
        "strength": "Maximum caused damage on attack per second", 
        "accuracy": "Accuracy of attack", 
        "range": "Maximum distance from which a boid can attack", 
        "air_speed_max": "Maximum speed in air", 
        "land_stick_force": "How strong a force must be to start effecting a boid on land", 
        "land_smooth": "How smoothly the boids land", 
        "states": "(read-only)", 
        "bank": "Amount of rotation around velocity vector on turns", 
        "land_jump_speed": "Maximum speed for jumping", 
        "land_speed_max": "Maximum speed on land", 
        "pitch": "Amount of rotation around side vector", 
        "air_speed_min": "Minimum speed in air (relative to maximum speed)", 
        "height": "Boid height relative to particle size", 
        "air_personal_space": "Radius of boids personal space in air (% of particle size)", 
        "air_ave_max": "Maximum angular velocity in air (relative to 180 degrees)", 
        "land_ave_max": "Maximum angular velocity on land (relative to 180 degrees)", 
        "health": "Initial boid health when born", 
        "aggression": "Boid will fight this times stronger enemy", 
        "active_boid_state": "(read-only)", 
        "air_acc_max": "Maximum acceleration in air (relative to maximum speed)", 
        "land_acc_max": "Maximum acceleration on land (relative to maximum speed)", 
        "land_personal_space": "Radius of boids personal space on land (% of particle size)", 
        "use_flight": "Allow boids to move in air", 
        "use_climb": "Allow boids to climb goal objects", 
        "use_land": "Allow boids to move on land"
      }
    }, 
    "GameBooleanProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "NodeSocketIntPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "SmokeFlowSettings": {
      "fields": {
        "volume_density": "Factor for smoke emitted from inside the mesh volume", 
        "velocity_normal": "Amount of normal directional velocity", 
        "use_absolute": "Only allow given density value in emitter area", 
        "velocity_factor": "Multiplier of source velocity passed to smoke", 
        "texture_size": "Size of texture mapping", 
        "particle_size": "Particle size in simulation cells", 
        "texture_offset": "Z-offset of texture mapping", 
        "subframes": "Number of additional samples to take between frames to improve quality of fast moving flows", 
        "smoke_flow_source": "Change how smoke is emitted", 
        "density_vertex_group": "Name of vertex group which determines surface emission rate", 
        "surface_distance": "Maximum distance from mesh surface to emit smoke", 
        "velocity_random": "Amount of random velocity", 
        "texture_map_type": "Texture mapping type", 
        "use_texture": "Use a texture to control emission strength", 
        "use_initial_velocity": "Smoke has some initial velocity when it is emitted", 
        "uv_layer": "UV map name", 
        "smoke_color": "Color of smoke", 
        "smoke_flow_type": "Change how flow affects the simulation", 
        "temperature": "Temperature difference to ambient temperature", 
        "use_particle_size": "Set particle size in simulation cells or use nearest cell", 
        "noise_texture": "Texture that controls emission strength", 
        "particle_system": "Particle systems emitted from the object"
      }
    }, 
    "Sequence": {
      "fields": {
        "use_default_fade": "Fade effect using the built-in default (usually make transition as long as effect strip)", 
        "frame_final_duration": "The length of the contents of this strip after the handles are applied", 
        "frame_final_start": "Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame", 
        "frame_final_end": "End frame displayed in the sequence editor after offsets are applied", 
        "channel": "Y position of the sequence strip", 
        "lock": "Lock strip so that it can't be transformed", 
        "speed_factor": "Multiply the current speed of the sequence with this number or remap current frame to this frame", 
        "frame_duration": "(read-only)    The length of the contents of this strip before the handles are applied", 
        "modifiers": "(read-only)    Modifiers affecting this strip", 
        "type": "(read-only)", 
        "use_linear_modifiers": "Calculate modifiers in linear space instead of sequencer's space"
      }
    }, 
    "FreestyleSettings": {
      "fields": {
        "sphere_radius": "Sphere radius for computing curvatures", 
        "linesets": "(read-only)", 
        "use_suggestive_contours": "Enable suggestive contours", 
        "crease_angle": "Angular threshold for detecting crease edges", 
        "raycasting_algorithm": "Select the Freestyle raycasting algorithm", 
        "use_ridges_and_valleys": "Enable ridges and valleys", 
        "modules": "(read-only)    A list of style modules (to be applied from top to bottom)", 
        "mode": "Select the Freestyle control mode", 
        "kr_derivative_epsilon": "Kr derivative epsilon for computing suggestive contours", 
        "use_material_boundaries": "Enable material boundaries", 
        "use_smoothness": "Take face smoothness into account in view map calculation", 
        "use_advanced_options": "Enable advanced edge detection options (sphere radius and Kr derivative epsilon)", 
        "use_culling": "If enabled, out-of-view edges are ignored"
      }
    }, 
    "UVProjector": {
      "fields": {
        "object": "Object to use as projector transform"
      }
    }, 
    "CompositorNodeDiffMatte": {
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "BoidRuleGoal": {
      "fields": {
        "use_predict": "Predict target movement", 
        "object": "Goal object"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "TextCurve": {
      "fields": {
        "shear": "Italic angle of the characters", 
        "body_format": "(read-only)    Stores the style of each character", 
        "align": "Text align from the object center", 
        "body": "Content of this text object", 
        "underline_position": "Vertical position of underline", 
        "small_caps_scale": "Scale of small capitals", 
        "edit_format": "(read-only)    Editing settings character formatting", 
        "follow_curve": "Curve deforming text object", 
        "text_boxes": "(read-only)", 
        "family": "Use Blender Objects as font characters (give font objects a common name followed by the character they represent, eg. family_a, family_b, etc, and turn on Verts Duplication)", 
        "offset_x": "Horizontal offset from the object origin", 
        "use_fast_edit": "Don't fill polygons while editing", 
        "offset_y": "Vertical offset from the object origin", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID", 
        "Curve"
      ]
    }, 
    "CyclesVisibilitySettings": {
      "fields": {
        "transmission": "Object visibility for transmission rays", 
        "shadow": "Object visibility for shadow rays", 
        "glossy": "Object visibility for glossy reflection rays", 
        "diffuse": "Object visibility for diffuse reflection rays", 
        "camera": "Object visibility for camera rays"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "BlendData": {
      "fields": {
        "armatures": "(read-only)    Armature datablocks", 
        "worlds": "(read-only)    World datablocks", 
        "lamps": "(read-only)    Lamp datablocks", 
        "textures": "(read-only)    Texture datablocks", 
        "objects": "(read-only)    Object datablocks", 
        "metaballs": "(read-only)    Metaball datablocks", 
        "shape_keys": "(read-only)    Shape Key datablocks", 
        "cameras": "(read-only)    Camera datablocks", 
        "filepath": "(read-only)    Path to the .blend file", 
        "is_saved": "(read-only)    Has the current session been saved to disk as a .blend file", 
        "sounds": "(read-only)    Sound datablocks", 
        "fonts": "(read-only)    Vector font datablocks", 
        "screens": "(read-only)    Screen datablocks", 
        "speakers": "(read-only)    Speaker datablocks", 
        "movieclips": "(read-only)    Movie Clip datablocks", 
        "particles": "(read-only)    Particle datablocks", 
        "scripts": "(read-only)    Script datablocks (DEPRECATED)", 
        "meshes": "(read-only)    Mesh datablocks", 
        "images": "(read-only)    Image datablocks", 
        "window_managers": "(read-only)    Window manager datablocks", 
        "libraries": "(read-only)    Library datablocks", 
        "groups": "(read-only)    Group datablocks", 
        "is_dirty": "(read-only)    Have recent edits been saved to disk", 
        "linestyles": "(read-only)    Line Style datablocks", 
        "masks": "(read-only)    Masks datablocks", 
        "node_groups": "(read-only)    Node group datablocks", 
        "curves": "(read-only)    Curve datablocks", 
        "grease_pencil": "(read-only)    Grease Pencil datablocks", 
        "texts": "(read-only)    Text datablocks", 
        "materials": "(read-only)    Material datablocks", 
        "scenes": "(read-only)    Scene datablocks", 
        "brushes": "(read-only)    Brush datablocks", 
        "lattices": "(read-only)    Lattice datablocks", 
        "actions": "(read-only)    Action datablocks"
      }
    }, 
    "VectorFont": {
      "fields": {
        "packed_file": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "VisibilityActuator": {
      "fields": {
        "apply_to_children": "Set all the children of this object to the same visibility/occlusion recursively", 
        "use_occlusion": "Set the object to occlude objects behind it (initialized from the object type in physics button)", 
        "use_visible": "Set the objects visible (initialized from the object render restriction toggle in physics button)"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "FModifierEnvelope": {
      "fields": {
        "reference_value": "Value that envelope's influence is centered around / based on", 
        "control_points": "(read-only)    Control points defining the shape of the envelope", 
        "default_min": "Lower distance from Reference Value for 1:1 default influence", 
        "default_max": "Upper distance from Reference Value for 1:1 default influence"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "SpaceSequenceEditor": {
      "fields": {
        "draw_overexposed": "Show overexposed areas with zebra stripes", 
        "display_channel": "The channel number shown in the image preview. 0 is the result of all strips combined", 
        "overlay_type": "Overlay draw type", 
        "display_mode": "View mode to use for displaying sequencer output", 
        "show_seconds": "Show timing in seconds not frames", 
        "use_marker_sync": "Transform markers as well as strips", 
        "view_type": "Type of the Sequencer view (sequencer, preview or both)", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_safe_margin": "Draw title safe margins in preview", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions", 
        "show_separate_color": "Separate color channels in preview", 
        "grease_pencil": "Grease pencil data for this space", 
        "show_frames": "Draw frames rather than seconds", 
        "preview_channels": "Channels of the preview to draw", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "BlendDataScenes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "VertexGroups": {
      "fields": {
        "active_index": "Active index in vertex group array", 
        "active": "(read-only)    Vertex groups of the object"
      }
    }, 
    "BlendDataArmatures": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "NodeSocketVectorAcceleration": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "CompositorNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "sampling": "New sampling value to be used for subsequent modifiers", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "CompositorNodeChannelMatte": {
      "fields": {
        "limit_min": "Values lower than this setting are 100% keyed", 
        "limit_method": "Algorithm to use to limit channel", 
        "matte_channel": "Channel used to determine matte", 
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_channel": "Limit by this channel's value"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "Screen": {
      "fields": {
        "show_fullscreen": "(read-only)    An area is maximized, filling this screen", 
        "is_animation_playing": "(read-only)    Animation playback is active", 
        "areas": "(read-only)    Areas the screen is subdivided into", 
        "scene": "Active scene to be edited in the screen"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Macro": {
      "fields": {
        "name": "(read-only)", 
        "bl_options": "Options for this operator type", 
        "properties": "(read-only)"
      }
    }, 
    "PointLamp": {
      "fields": {
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "falloff_type": "Intensity Decay with distance", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "use_sphere": "Set light intensity to zero beyond lamp distance", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "linear_attenuation": "Linear distance attenuation"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "UVProjectModifier": {
      "fields": {
        "projectors": "(read-only)", 
        "uv_layer": "UV map name", 
        "use_image_override": "Override faces' current images with the given image", 
        "projector_count": "Number of projectors to use"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CopyLocationConstraint": {
      "fields": {
        "use_z": "Copy the target's Z location", 
        "invert_x": "Invert the X location", 
        "use_x": "Copy the target's X location", 
        "use_offset": "Add original location into copied location", 
        "use_y": "Copy the target's Y location", 
        "invert_z": "Invert the Z location", 
        "invert_y": "Invert the Y location", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ShaderNodeTangent": {
      "fields": {
        "axis": "Axis for radial tangents", 
        "uv_map": "UV Map for tangent generated from UV", 
        "direction_type": "Method to use for the tangent"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "BlendDataCameras": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "Struct": {
      "fields": {
        "name_property": "(read-only)    Property that gives the name of the struct", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "functions": "(read-only)", 
        "name": "(read-only)    Human readable name", 
        "description": "(read-only)    Description of the Struct's purpose", 
        "nested": "(read-only)    Struct in which this struct is always nested, and to which it logically belongs", 
        "properties": "(read-only)    Properties in the struct", 
        "translation_context": "(read-only)    Translation context of the struct's name", 
        "base": "(read-only)    Struct definition this is derived from"
      }
    }, 
    "LineStyleGeometryModifier_SpatialNoise": {
      "fields": {
        "octaves": "Number of octaves (i.e., the amount of detail of the spatial noise)", 
        "amplitude": "Amplitude of the spatial noise", 
        "expanded": "True if the modifier tab is expanded", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "name": "Name of the modifier", 
        "scale": "Scale of the spatial noise", 
        "use_pure_random": "If true, the spatial noise does not show any coherence", 
        "type": "(read-only)    Type of the modifier", 
        "smooth": "If true, the spatial noise is smooth"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "WipeSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "blur_width": "Width of the blur edge, in percentage relative to the image size", 
        "input_1": "First input for the effect strip", 
        "angle": "Edge angle", 
        "direction": "Wipe direction"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "TextureNodeMixRGB": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range", 
        "use_alpha": "Include alpha of second input in this operation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "GameProperty": {
      "fields": {
        "name": "Available as GameObject attributes in the game engine's python API", 
        "show_debug": "Print debug information for this property"
      }
    }, 
    "Actuator": {
      "fields": {
        "pin": "Display when not linked to a visible states controller", 
        "show_expanded": "Set actuator expanded in the user interface"
      }
    }, 
    "NodeSocketVectorVelocity": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "FieldSettings": {
      "fields": {
        "use_max_distance": "Use a maximum distance for the field to work", 
        "seed": "Seed of the noise", 
        "strength": "Strength of force field", 
        "linear_drag": "Drag component proportional to velocity", 
        "distance_max": "Maximum distance for the field to work", 
        "texture_nabla": "Defines size of derivative offset used for calculating gradient and curl", 
        "use_min_distance": "Use a minimum distance for the field's fall-off", 
        "type": "Type of field", 
        "guide_kink_frequency": "The frequency of the offset (1/total length)", 
        "falloff_power": "Falloff power (real gravitational falloff = 2)", 
        "use_guide_path_weight": "Use curve weights to influence the particle influence along the curve", 
        "use_absorption": "Force gets absorbed by collision objects", 
        "use_object_coords": "Use object/global coordinates for texture", 
        "guide_kink_shape": "Adjust the offset to the beginning/end", 
        "distance_min": "Minimum distance for the field's fall-off", 
        "guide_kink_amplitude": "The amplitude of the offset", 
        "use_global_coords": "Use effector/global coordinates for turbulence", 
        "noise": "Amount of noise for the force strength", 
        "radial_min": "Minimum radial distance for the field's fall-off", 
        "quadratic_drag": "Drag component proportional to the square of velocity", 
        "flow": "Convert effector force into air flow velocity", 
        "use_guide_path_add": "Based on distance/falloff it adds a portion of the entire path", 
        "guide_clump_shape": "Shape of clumping", 
        "use_smoke_density": "Adjust force strength based on smoke density", 
        "guide_minimum": "The distance from which particles are affected fully", 
        "rest_length": "Rest length of the harmonic force", 
        "shape": "Which direction is used to calculate the effector force", 
        "use_radial_max": "Use a maximum radial distance for the field to work", 
        "z_direction": "Effect in full or only positive/negative Z direction", 
        "guide_clump_amount": "Amount of clumping", 
        "texture": "Texture to use as force", 
        "guide_kink_axis": "Which axis to use for offset", 
        "texture_mode": "How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)", 
        "use_multiple_springs": "Every point is effected by multiple springs", 
        "guide_free": "Guide-free time from particle life's end", 
        "apply_to_location": "Effect particles' location", 
        "radial_max": "Maximum radial distance for the field to work", 
        "use_radial_min": "Use a minimum radial distance for the field's fall-off", 
        "size": "Size of the turbulence", 
        "use_2d_force": "Apply force only in 2D", 
        "guide_kink_type": "Type of periodic offset on the curve", 
        "radial_falloff": "Radial falloff power (real gravitational falloff = 2)", 
        "use_root_coords": "Texture coordinates from root particle locations", 
        "inflow": "Inwards component of the vortex force", 
        "source_object": "Select domain object of the smoke simulation", 
        "apply_to_rotation": "Effect particles' dynamic rotation", 
        "harmonic_damping": "Damping of the harmonic force"
      }
    }, 
    "BuildModifier": {
      "fields": {
        "seed": "Seed for random if used", 
        "use_random_order": "Randomize the faces or edges during build", 
        "frame_duration": "Total time the build effect requires", 
        "frame_start": "Start frame of the effect"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ArmatureActuator": {
      "fields": {
        "weight": "Weight of this constraint", 
        "bone": "Bone on which the constraint is defined", 
        "constraint": "Name of the constraint to control", 
        "secondary_target": "Set this object as the secondary target of the constraint (only IK polar target at the moment)", 
        "influence": "Influence of this constraint", 
        "target": "Set this object as the target of the constraint"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "BlendDataSpeakers": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ShaderNodeScript": {
      "fields": {
        "bytecode": "Compile bytecode for shader script node", 
        "filepath": "Shader script path", 
        "use_auto_update": "Automatically update the shader when the .osl file changes (external scripts only)", 
        "script": "Internal shader script to define the shader", 
        "bytecode_hash": "Hash of compile bytecode, for quick equality checking"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "TessfaceUVTextures": {
      "fields": {
        "active_index": "Active UV Map index", 
        "active": "(read-only)    Active UV Map"
      }
    }, 
    "MarbleTexture": {
      "fields": {
        "noise_basis": "Noise basis used for turbulence", 
        "noise_depth": "Depth of the cloud calculation", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "BlendDataMeshes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "DupliObject": {
      "fields": {
        "uv": "(read-only)    UV coordinates in parent object space", 
        "hide": "(read-only)    Don't show dupli object in viewport or render", 
        "persistent_id": "(read-only)    Persistent identifier for inter-frame matching of objects with motion blur", 
        "index": "(read-only)    Index in the lowest-level dupli list", 
        "orco": "(read-only)    Generated coordinates in parent object space", 
        "matrix": "(read-only)    Object duplicate transformation matrix", 
        "type": "(read-only)    Duplicator type that generated this dupli object", 
        "matrix_original": "(read-only)    The original matrix of this object before it was duplicated", 
        "particle_system": "(read-only)    Particle system that this dupli object was instanced from", 
        "object": "(read-only)    Object being duplicated"
      }
    }, 
    "ShaderNodeTexImage": {
      "fields": {
        "projection_blend": "For box projection, amount of blend to use between sides", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings", 
        "projection": "Method to project 2D image on object with a 3D texture vector", 
        "color_space": "Image file color space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "SequenceEditor": {
      "fields": {
        "sequences": "(read-only)", 
        "active_strip": "Sequencer's active strip", 
        "meta_stack": "(read-only)    Meta strip stack, last is currently edited meta strip", 
        "sequences_all": "(read-only)", 
        "show_overlay": "Partial overlay on top of the sequencer"
      }
    }, 
    "GameTimerProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "ParticleBrush": {
      "fields": {
        "use_puff_volume": "Apply puff to unselected end-points (helps maintain hair volume when puffing root)", 
        "size": "Radius of the brush in pixels", 
        "strength": "Brush strength", 
        "curve": "(read-only)", 
        "count": "Particle count", 
        "steps": "Brush steps"
      }
    }, 
    "SpaceFileBrowser": {
      "fields": {
        "active_operator": "(read-only)", 
        "params": "(read-only)    Parameters and Settings for the Filebrowser", 
        "operator": "(read-only)"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "ColorManagedDisplaySettings": {
      "fields": {
        "display_device": "Display device name"
      }
    }, 
    "Lattice": {
      "fields": {
        "points_u": "Point in U direction (can't be changed when there are shape keys)", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "points_v": "Point in V direction (can't be changed when there are shape keys)", 
        "points_w": "Point in W direction (can't be changed when there are shape keys)", 
        "vertex_group": "Vertex group to apply the influence of the lattice", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "use_outside": "Only draw, and take into account, the outer vertices", 
        "points": "(read-only)    Points of the lattice", 
        "shape_keys": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ChildOfConstraint": {
      "fields": {
        "use_rotation_y": "Use Y Rotation of Parent", 
        "use_rotation_z": "Use Z Rotation of Parent", 
        "use_location_x": "Use X Location of Parent", 
        "use_location_y": "Use Y Location of Parent", 
        "use_scale_x": "Use X Scale of Parent", 
        "use_scale_y": "Use Y Scale of Parent", 
        "use_scale_z": "Use Z Scale of Parent", 
        "inverse_matrix": "Transformation matrix to apply before", 
        "use_location_z": "Use Z Location of Parent", 
        "target": "Target Object", 
        "use_rotation_x": "Use X Rotation of Parent"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ShaderNodeVectorCurve": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeNormalMap": {
      "fields": {
        "uv_map": "UV Map for tangent space maps", 
        "space": "Space of the input normal"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "TextureNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "Timer": {
      "fields": {
        "time_step": "(read-only)", 
        "time_duration": "(read-only)    Time since last step in seconds", 
        "time_delta": "(read-only)    Time since last step in seconds"
      }
    }, 
    "Scopes": {
      "fields": {
        "histogram": "(read-only)    Histogram for viewing image statistics", 
        "waveform_alpha": "Opacity of the points", 
        "accuracy": "Proportion of original image source pixel lines to sample", 
        "use_full_resolution": "Sample every pixel of the image", 
        "vectorscope_alpha": "Opacity of the points"
      }
    }, 
    "DopeSheet": {
      "fields": {
        "show_missing_nla": "Include animation data blocks with no NLA data (NLA editor only)", 
        "show_meshes": "Include visualization of mesh related animation data", 
        "show_lattices": "Include visualization of lattice related animation data", 
        "show_cameras": "Include visualization of camera related animation data", 
        "show_only_matching_fcurves": "Only include F-Curves with names containing search text", 
        "source": "(read-only)    ID-Block representing source data, usually ID_SCE (i.e. Scene)", 
        "show_only_group_objects": "Only include channels from objects in the specified group", 
        "show_textures": "Include visualization of texture related animation data", 
        "show_particles": "Include visualization of particle related animation data", 
        "show_scenes": "Include visualization of scene related animation data", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "show_shapekeys": "Include visualization of shape key related animation data", 
        "filter_group": "Group that included object should be a member of", 
        "show_armatures": "Include visualization of armature related animation data", 
        "show_curves": "Include visualization of curve related animation data", 
        "show_summary": "Display an additional 'summary' line (Dope Sheet editors only)", 
        "show_modifiers": "Include visualization of animation data related to datablocks linked to modifiers", 
        "show_expanded_summary": "Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)", 
        "show_worlds": "Include visualization of world related animation data", 
        "show_hidden": "Include channels from objects/bone that are not visible", 
        "show_materials": "Include visualization of material related animation data", 
        "show_speakers": "Include visualization of speaker related animation data", 
        "show_datablock_filters": "Show options for whether channels related to certain types of data are included", 
        "show_only_errors": "Only include F-Curves and drivers that are disabled or have errors", 
        "show_linestyles": "Include visualization of Line Style related Animation data", 
        "show_transforms": "Include visualization of object-level animation data (mostly transforms)", 
        "show_metaballs": "Include visualization of metaball related animation data", 
        "show_lamps": "Include visualization of lamp related animation data", 
        "filter_fcurve_name": "F-Curve live filtering string", 
        "show_nodes": "Include visualization of node related animation data"
      }
    }, 
    "NodeLink": {
      "fields": {
        "is_hidden": "(read-only)    Link is hidden due to invisible sockets", 
        "from_node": "(read-only)", 
        "to_socket": "(read-only)", 
        "to_node": "(read-only)", 
        "from_socket": "(read-only)"
      }
    }, 
    "ThemeProperties": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ShaderNodeVectorTransform": {
      "fields": {
        "convert_from": "Space to convert from", 
        "convert_to": "Space to convert to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "CompositorNodeMapRange": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "OverDropSequence": {
      "fields": {
        "input_count": "(read-only)", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "SpaceDopeSheetEditor": {
      "fields": {
        "mode": "Editing context being displayed", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views", 
        "show_seconds": "Show timing in seconds not frames", 
        "use_marker_sync": "Sync Markers with keyframe edits", 
        "action": "Action displayed and edited in this space", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_group_colors": "Draw groups and channels with colors matching their corresponding groups", 
        "show_pose_markers": "Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "auto_snap": "Automatic time snapping settings for transformations"
      }, 
      "inherits": [
        "Space"
      ]
    }
  }, 
  "module": "DNA", 
  "source": "Blender Python API", 
  "version": "2.69"
}