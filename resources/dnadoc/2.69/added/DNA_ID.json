{
	"system" : "Blender",
	"module" : "DNA",
	"version" : "2.69",
	"authors" : [
		"Holger Machens"
	],
	"includes" : [ "DNA_listBase.json"],
	"structs" : {
		"ID" : {
			"inherits" : [ 
				"Link" 
			],
			"doc" : "Represents the ID of any element in DNA which 
					 is stored in a library (see {@link Library}). Those 
					 elements are instances of structs which contain an 
					 embedded member of type ID as their first element.<br/>
					 IDs of the same element type are linked in linked list (see {@link Link})",
			"fields" : {
				"newid" : "",
				"lib" : "Reference on the library this library element belongs to.",
				"name" : "The name of the element. Names follow a certain convention. 
				    <p>
				    Names of library elements which have an specific block code, such as 
				    Mesh (ME) and Tex (ME), always have the first two ASCII characters of
				    the block code as its prefix. Data of blocks with unspecified block 
				    code (i.e. {@link BlockCodes#ID_DATA}) have other names.
				    </p>
				    <b>A few examples of names:</b>
					<table border=\"1\">
					<tr><th>Element type</th><th>Name prefix</th><tr>
					<tr><td>{@link BlenderObject}</td><td>\"OB\"</td></tr>
					<tr><td>{@link Mesh}</td><td>\"ME\"</td></tr>
					<tr><td>{@link Material}</td><td>\"MA\"</td></tr>
					<tr><td>{@link Tex}</td><td>\"TE\"</td></tr>
					<tr><td>{@link CustomDataLayer} for {@link MPoly}</td><td>\"NGon Face\"</td></tr>
					<tr><td>{@link CustomDataLayer} for {@link MLoop}</td><td>\"NGon Face-Vertex\"</td></tr>
					</table>",
				"pad" : "padding for alignment",
				"us" : "Reference counter, counts number of references on the corresponding element. If 0, the element will not be stored in a file.",
				"flag" : "In files usually 1024. One of: <table border=\"1\">
					<tr><td>LIB_LOCAL</td><td>0</td><td></td><tr>
					<tr><td>LIB_EXTERN</td><td>1</td><td></td><tr>
					<tr><td>LIB_INDIRECT</td><td>2</td><td></td><tr>
					<tr><td>LIB_NEED_EXPAND</td><td>8</td><td></td><tr>
					<tr><td>LIB_TESTEXT</td><td>(LIB_NEED_EXPAND | LIB_EXTERN)</td><td></td><tr>
					<tr><td>LIB_TESTIND</td><td>(LIB_NEED_EXPAND | LIB_INDIRECT)</td><td></td><tr>
					<tr><td>LIB_READ</td><td>16</td><td></td><tr>
					<tr><td>LIB_NEED_LINK</td><td>32</td><td></td><tr>
					<tr><td>LIB_NEW</td><td>256</td><td></td><tr>
					<tr><td>LIB_FAKEUSER</td><td>512</td><td></td><tr>
					<tr><td>LIB_DOIT</td><td>1024</td><td>free test flag</td><tr>
					<tr><td>LIB_PRE_EXISTING</td><td>2048</td><td>tag existing data before linking so we know what is new</td><tr>
					<tr><td>LIB_ID_RECALC</td><td>4096</td><td>runtime</td><tr>
					<tr><td>LIB_ID_RECALC_DATA</td><td>8192</td><td>runtime</td><tr>
					</table>
				",
				"icon_id" : "Always 0 in files. Will be recalculated base on the library element type when loaded.",
				"pad2" : "padding for alignment",
				"properties" : "List of associated properties."
			}
		},
		"IDProperty" : {
			"doc" : "ID properties are a generic method to store a linked 
					list of additional information at IDs (see {@link ID}.",
			"inherits" : [ 
				"Link" 
			],
			"fields" : {
				"type" : "Type of the property data. One of
						<pre>
								IDP_STRING		0
								IDP_INT			1
								IDP_FLOAT		2
								IDP_ARRAY		5
								IDP_GROUP		6
								IDP_ID			7
								IDP_DOUBLE		8
								IDP_IDPARRAY	9
								IDP_NUMTYPES	10
						</pre>",
				"subtype" : "Subtype of the property data. One of
						<pre>
							IDP_STRING_SUB_UTF8  0 ( default )
							IDP_STRING_SUB_BYTE  1 ( arbitrary byte array, _not_ null terminated )
						</pre>",
				"name" : "properties' name",
				"saved" : "saved is used to indicate if this struct has been saved yet.",
				"data" : "properties' data. note, alignment for 64 bits",
				"len" : "array length, also (this is important!) string length + 1.
	          			the idea is to be able to reuse array realloc functions on strings.",
	          	"totallen" : "totallen is total length of allocated array/string, including a buffer.
	 							Note that the buffering is mild; the code comes from python's list 
	 							implementation. Strings and arrays are both buffered, though the buffer
								isn't saved."
			}
		}
			         
	}
		
}