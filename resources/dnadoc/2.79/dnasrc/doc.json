{
  "module": "DNA", 
  "source": "Blender Source Code", 
  "structs": {
    "AnimData": {
      "doc": "<p>{@link AnimData}  -------------------------------<mdash/><mdash/>  Animation data for some {@link ID}  block (adt)</p><p> This block of data is used to provide all of the necessary animation data for a datablock. Currently, this data will not be reusable, as there shouldn't be any need to do so.</p><p> This information should be made available for most if not all ID-blocks, which should enable all of its settings to be animatable locally. Animation from 'higher-up' ID-AnimData blocks may override local settings.</p><p> This datablock should be placed immediately after the {@link ID}  block where it is used, so that the code which retrieves this data can do so in an easier manner. See blenkernel/intern/anim_sys.c for details. </p>", 
      "fields": {
        "act_blendmode": "<p> settings for active action evaluation (based on NLA strip settings) accumulation mode for active action </p>", 
        "act_extendmode": "<p> extrapolation mode for active action </p>", 
        "act_influence": "<p> influence for active action </p>", 
        "act_track": "<p> active NLA-track (only set/used during tweaking, so no need to worry about dangling pointers) </p>", 
        "action": "<p> active action - acts as the 'tweaking track' for the NLA </p>", 
        "actstrip": "<p> active NLA-strip (only set/used during tweaking, so no need to worry about dangling pointers) </p>", 
        "drivers": "<p> 'drivers' for this ID-block's settings - FCurves, but are completely separate from those for animation datastandard user-created Drivers/Expressions (used as part of a rig) </p>", 
        "flag": "<p> settings for animation evaluation user-defined settings </p>", 
        "nla_tracks": "<p> nla-tracks </p>", 
        "overrides": "<p> temp storage ({@link AnimOverride} ) of values for settings that are animated (but the value hasn't been keyframed) </p>", 
        "recalc": "<p> depsgraph recalculation flags </p>", 
        "remap": "<p> remapping-info for active action - should only be used if needed (for 'foreign' actions that aren't working correctly) </p>", 
        "tmpact": "<p> temp-storage for the 'real' active action (i.e. the one used before the tweaking-action took over to be edited in the Animation Editors) </p>"
      }
    }, 
    "AnimMapPair": {
      "doc": "<p><hr/> \n 'Action' Datatypes NOTE: Although these are part of the Animation System, they are not stored here... see {@link DNA_action_types.h}  instead************************************************ Animation Reuse - i.e. users of Actions Retargetting -----------------------------<mdash/><mdash/>  Retargetting Pair</p><p> Defines what parts of the paths should be remapped from 'abc' to 'xyz'. TODO:<ul><li><p> Regrex (possibly provided through PY, though having our own module might be faster) would be important to have at some point. Current replacements are just simple string matches... </p></li></ul> \nRegrex (possibly provided through PY, though having our own module might be faster) would be important to have at some point. Current replacements are just simple string matches... \n</p>", 
      "fields": {
        "from": "<p> part of path to bed replaced </p>", 
        "to": "<p> part of path to replace with </p>"
      }
    }, 
    "AnimMapper": {
      "doc": "<p> FIXME: will this be too clumsy or slow? If we're using RNA paths anyway, we'll have to accept such consequences... </p><p> Retargetting Information for Actions</p><p> This should only be used if it is strictly necessary (i.e. user will need to explicitly add this when they find that some channels do not match, or motion is not going to right places). When executing an action, this will be checked to see if it provides any useful remaps for the given paths.</p><p> NOTE: we currently don't store this in the Action itself, as that causes too many problems. </p>", 
      "fields": {
        "mappings": "<p> remapping table (bAnimMapPair) </p>", 
        "target": "<p> target action </p>"
      }
    }, 
    "AnimOverride": {
      "doc": "<p><hr/> \n Animation Data {@link AnimOverride}  -------------------------------<mdash/><mdash/>  Animation Override (aor)</p><p> This is used to as temporary storage of values which have been changed by the user, but not yet keyframed (thus, would get overwritten by the animation system before the user had a chance to see the changes that were made).</p><p> It is probably not needed for overriding keyframed values in most cases, as those will only get evaluated on frame-change now. That situation may change in future. </p>", 
      "fields": {
        "array_index": "<p> if applicable, the index of the RNA-array item to get </p>", 
        "rna_path": "<p> RNA-path to use to resolve data-access </p>", 
        "value": "<p> value to override setting with </p>"
      }
    }, 
    "ARegion": {
      "fields": {
        "alignment": "<p> how it should split </p>", 
        "do_draw": "<p> private, cached notifier events </p>", 
        "do_draw_overlay": "<p> private, cached notifier events </p>", 
        "drawrct": "<p> runtime for partial redraw, same or smaller than winrct </p>", 
        "flag": "<p> hide, ... </p>", 
        "flagfullscreen": "<p> temporary copy of flag settings for clean fullscreen </p>", 
        "fsize": "<p> current split size in float (unused) </p>", 
        "handlers": "<p> wmEventHandler </p>", 
        "headerstr": "<p> use this string to draw info </p>", 
        "overlap": "<p> private, set for indicate drawing overlapped </p>", 
        "panels": "<p>{@link Panel}  </p>", 
        "panels_category": "<p>{@link Panel}  categories runtime </p>", 
        "panels_category_active": "<p> Stack of panel categories </p>", 
        "regiondata": "<p> XXX 2.50, need spacedata equivalent? </p>", 
        "regiontimer": "<p> blend in/out </p>", 
        "regiontype": "<p> window, header, etc. identifier for drawing </p>", 
        "sizey": "<p> current split size in pixels (if zero it uses regiontype) </p>", 
        "swap": "<p> private, indicator to survive swap-exchange </p>", 
        "type": "<p> callbacks for this region type </p>", 
        "ui_lists": "<p>{@link uiList}  </p>", 
        "ui_previews": "<p>{@link uiPreview}  </p>", 
        "uiblocks": "<p> uiBlock </p>", 
        "v2d": "<p> 2D-View scrolling/zoom info (most regions are 2d anyways) </p>", 
        "winrct": "<p> coordinates of region </p>", 
        "winy": "<p> size </p>"
      }
    }, 
    "ArmatureModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "multi": "<p> deformflag replaces armature->deformflag </p>", 
        "prevCos": "<p> stored input of previous modifier, for vertexgroup blending </p>"
      }
    }, 
    "ArrayModifierData": {
      "fields": {
        "count": "<p> the number of duplicates to generate for MOD_ARR_FIXEDCOUNT </p>", 
        "curve_ob": "<p> the curve object to use for MOD_ARR_FITCURVE </p>", 
        "end_cap": "<p> the object with which to cap the end of the array </p>", 
        "fit_type": "<p> determines how duplicate count is calculated; one of:<ul><li><p> MOD_ARR_FIXEDCOUNT -> fixed</p></li><li><p> MOD_ARR_FITLENGTH -> calculated to fit a set length</p></li><li><p> MOD_ARR_FITCURVE -> calculated to fit the length of a {@link Curve}  object </p></li></ul> \nMOD_ARR_FIXEDCOUNT -> fixedMOD_ARR_FITLENGTH -> calculated to fit a set lengthMOD_ARR_FITCURVE -> calculated to fit the length of a Curve object \n</p>", 
        "flags": "<p> general flags: MOD_ARR_MERGE -> merge vertices in adjacent duplicates </p>", 
        "length": "<p> the length over which to distribute the duplicates </p>", 
        "merge_dist": "<p> the limit below which to merge vertices in adjacent duplicates </p>", 
        "offset": "<p> a constant duplicate offset; 1 means the duplicates are 1 unit apart </p>", 
        "offset_ob": "<p> the object to use for object offset </p>", 
        "offset_type": "<p> flags specifying how total offset is calculated; binary OR of:<ul><li><p> MOD_ARR_OFF_CONST -> total offset += offset</p></li><li><p> MOD_ARR_OFF_RELATIVE -> total offset += relative * object width</p></li><li><p> MOD_ARR_OFF_OBJ -> total offset += offset_ob's matrix total offset is the sum of the individual enabled offsets </p></li></ul> \nMOD_ARR_OFF_CONST -> total offset += offsetMOD_ARR_OFF_RELATIVE -> total offset += relative * object widthMOD_ARR_OFF_OBJ -> total offset += offset_ob's matrix total offset is the sum of the individual enabled offsets \n</p>", 
        "scale": "<p> a scaled factor for duplicate offsets; 1 means the duplicates are 1 object-width apart </p>", 
        "start_cap": "<p> the object with which to cap the start of the array </p>"
      }
    }, 
    "AssetUUID": {
      "doc": "<p> Used to communicate with asset engines outside of 'import' context. </p>"
    }, 
    "AudioData": {
      "doc": "<p><hr/> \n Audio </p>"
    }, 
    "AviCodecData": {
      "doc": "<p><hr/> \n Output Format Data </p>", 
      "fields": {
        "cbFormat": "<p> size of lpFormat buffer </p>", 
        "cbParms": "<p> size of lpParms buffer </p>", 
        "dwBytesPerSecond": "<p> bytes per second </p>", 
        "dwFlags": "<p> flags... see below </p>", 
        "dwInterleaveEvery": "<p> for non-video streams only </p>", 
        "dwKeyFrameEvery": "<p> keyframe rate </p>", 
        "dwQuality": "<p> compress quality 0-10,000 </p>", 
        "fccHandler": "<p> compressor </p>", 
        "fccType": "<p> stream type, for consistency </p>", 
        "lpFormat": "<p> save format </p>", 
        "lpParms": "<p> compressor options </p>"
      }
    }, 
    "bAction": {
      "doc": "<p> Actions --------------------------------<mdash/><mdash/>  Action - reusable F-Curve 'bag' (act)</p><p> This contains F-Curves that may affect settings from more than one {@link ID}  blocktype and/or datablock (i.e. sub-data linked/used directly to the {@link ID}  block that the animation data is linked to), but with the restriction that the other unrelated data (i.e. data that is not directly used or linked to by the source {@link ID}  block).</p><p> It serves as a 'unit' of reusable animation information (i.e. keyframes/motion data), that affects a group of related settings (as defined by the user). </p>", 
      "fields": {
        "active_marker": "<p> index of the active marker </p>", 
        "chanbase": "<p><p> legacy data - Action Channels ({@link bActionChannel} ) in pre-2.5 animation system </p>\n@deprecated\n Deprecatedlegacy data - Action Channels (bActionChannel) in pre-2.5 animation system </p>", 
        "curves": "<p> function-curves ({@link FCurve} ) </p>", 
        "flag": "<p> settings for this action </p>", 
        "groups": "<p> groups of function-curves ({@link bActionGroup} ) </p>", 
        "id": "<p> -serialisation for relinking </p>", 
        "idroot": "<p> type of ID-blocks that action can be assigned to (if 0, will be set to whatever {@link ID}  first evaluates it) </p>", 
        "markers": "<p> markers local to the Action (used to provide Pose-Libraries) </p>"
      }
    }, 
    "bActionActuator": {
      "fields": {
        "act": "<p> Pointer to action </p>", 
        "blend_mode": "<p> Layer blending mode </p>", 
        "blendin": "<p> Number of frames of blending </p>", 
        "end": "<p> Start & End frames </p>", 
        "end_reset": "<p> Ending the actuator (negative pulse) wont reset the action to its starting frame </p>", 
        "flag": "<p> Playback type </p>", 
        "frameProp": "<p> Set this property to the actions current frame, MAX_NAME </p>", 
        "layer": "<p> Animation layer </p>", 
        "layer_weight": "<p> not in use </p><p> How much of the previous layer to use for blending. (<0 = disable, 0 = add mode) </p>", 
        "name": "<p> For property-driven playback, MAX_NAME </p>", 
        "priority": "<p> Execution priority </p>", 
        "sta": "<p> not in use </p>", 
        "strideaxis": "<p> Displacement axis </p>", 
        "stridelength": "<p> Displacement incurred by cycle </p>"
      }
    }, 
    "bActionChannel": {
      "doc": "<p><hr/> \n Legacy Data WARNING: Action Channels are now deprecated... they were part of the old animation system! (ONLY USED FOR DO_VERSIONS...)</p><p> Action Channels belong to Actions. They are linked with an IPO block, and can also own Constraint Channels in certain situations.</p><p> Action-Channels can only belong to one group at a time, but they still live the Action's list of achans (to preserve backwards compatibility, and also minimize the code that would need to be recoded). Grouped achans are stored at the start of the list, according to the position of the group in the list, and their position within the group. </p>", 
      "fields": {
        "constraintChannels": "<p> Constraint Channels (when Action Channel represents an {@link Object}  or {@link Bone} ) </p>", 
        "flag": "<p> settings accessed via bitmapping </p>", 
        "grp": "<p> Action {@link Group}  this Action Channel belongs to </p>", 
        "ipo": "<p> IPO block this action channel references </p>", 
        "name": "<p> channel name, MAX_NAME </p>", 
        "temp": "<p> temporary setting - may be used to indicate group that channel belongs to during syncing </p>"
      }
    }, 
    "bActionConstraint": {
      "doc": "<p> Action Constraint </p>", 
      "fields": {
        "local": "<p> was used in versions prior to the Constraints recode </p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "type": "<p> what transform 'channel' drives the result </p>"
      }
    }, 
    "bActionGroup": {
      "doc": "<p><hr/> \n Action Groups --------------------------------<mdash/><mdash/>  Action-Channel {@link Group}  (agrp)</p><p> These are stored as a list per-Action, and are only used to group that Action's channels in an Animation Editor.</p><p> Even though all FCurves live in a big list per Action, each group they are in also holds references to the achans within that list which belong to it. Care must be taken to ensure that action-groups never end up being the sole 'owner' of a channel.</p><p> This is also exploited for bone-groups. Bone-Groups are stored per {@link bPose} , and are used primarily to color bones in the 3d-view. There are other benefits too, but those are mostly related to Action-Groups.</p><p> Note that these two uses each have their own RNA 'ActionGroup' and 'BoneGroup'. </p>", 
      "fields": {
        "channels": "<p> Note: this must not be touched by standard listbase functions which would clear links to other channels </p>", 
        "cs": "<p> color set to use when customCol == -1 </p>", 
        "customCol": "<p> index of custom color set to use when used for bones (0=default - used for all old files, -1=custom set) </p>", 
        "flag": "<p> settings for this action-group </p>", 
        "name": "<p> name of the group </p>"
      }
    }, 
    "bActionModifier": {
      "doc": "<p> simple uniform modifier structure, assumed it can hold all type info </p>", 
      "fields": {
        "no_rot_axis": "<p> path deform modifier </p>", 
        "noisesize": "<p> noise modifier </p>"
      }
    }, 
    "bActionStrip": {
      "doc": "<p> #define ACTSTRIP_MOD_DEFORM 0 #define ACTSTRIP_MOD_NOISE 1 </p><p> NLA-Modifier Types (UNUSED) </p>", 
      "fields": {
        "act": "<p> The action referenced by this strip </p>", 
        "actend": "<p> The range of frames taken from the action </p>", 
        "actoffs": "<p> Offset within action, for cycles and striding </p>", 
        "blendout": "<p> The number of frames on either end of the strip's length to fade in/out </p>", 
        "curmod": "<p> current modifier for buttons </p>", 
        "end": "<p> The range of frames covered by this strip </p>", 
        "ipo": "<p> Blending ipo - was used for some old NAN era experiments. Non-functional currently. </p>", 
        "modifiers": "<p> modifier stack </p>", 
        "object": "<p> For groups, the actual object being nla'ed </p>", 
        "offs_bone": "<p> if repeat, use this bone/channel for defining offset </p>", 
        "repeat": "<p> The number of times to repeat the action range </p>", 
        "scale": "<p> The amount the action range is scaled by </p>", 
        "stride_axis": "<p> axis 0=x, 1=y, 2=z </p>", 
        "stridechannel": "<p> Instead of stridelen, it uses an action channel </p>", 
        "stridelen": "<p> The stridelength (considered when flag & ACT_USESTRIDE) </p>"
      }
    }, 
    "bActuator": {
      "fields": {
        "data": "<p>  must point to an object actuator type struct. </p>", 
        "flag": "<p> Tells what type of actuator data {@link data}  holds. </p>", 
        "name": "<p> MAX_NAME </p>", 
        "ob": "<p> For ipo's and props: to find out which object the actuator belongs to </p>"
      }
    }, 
    "bActuatorSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bAddObjectActuator": {
      "doc": "<p> ****************** ACTUATORS ********************* unused now, moved to editobjectactuator in 2.02. Still needed for dna </p>"
    }, 
    "bAddon": {
      "doc": "<p> for the moment only the name. may want to store options with this later </p>", 
      "fields": {
        "prop": "<p> User-Defined Properties on this Addon (for storing preferences) </p>"
      }
    }, 
    "BakeData": {
      "fields": {
        "cage": "<p> MAX_NAME </p>", 
        "filepath": "<p> FILE_MAX </p>"
      }
    }, 
    "bAnimVizSettings": {
      "doc": "<p> Visualization General ------------------<mdash/><mdash/><mdash/>  for Objects or Poses (but NOT PoseChannels) Animation Visualization Settings (avs) </p>", 
      "fields": {
        "ghost_ac": "<p> number of frames before/after current frame to show </p>", 
        "ghost_ef": "<p> start and end frames of ghost-drawing range (only used for GHOST_TYPE_RANGE) </p>", 
        "ghost_flag": "<p> eOnionSkin_Flag </p>", 
        "ghost_sf": "<p> Onion-Skinning Settings --------------<mdash/>  </p>", 
        "ghost_step": "<p> number of frames between each ghost shown (not for GHOST_TYPE_KEYS) </p>", 
        "ghost_type": "<p> eOnionSkin_Types </p>", 
        "path_ac": "<p> number of frames before/after current frame to show </p>", 
        "path_bakeflag": "<p> eMotionPaths_BakeFlag </p>", 
        "path_ef": "<p> start and end frames of path-calculation range </p>", 
        "path_step": "<p> number of frames between points indicated on the paths </p>", 
        "path_type": "<p> Motion {@link Path}  Settings -------------<mdash/><mdash/>  eMotionPath_Types </p>", 
        "path_viewflag": "<p> eMotionPaths_ViewFlag </p>", 
        "recalc": "<p> General Settings ------------------<mdash/><mdash/>  eAnimViz_RecalcFlags </p>"
      }
    }, 
    "bArmature": {
      "fields": {
        "act_bone": "<p> active bones should work like active object where possible<ul><li><p> active and selection are unrelated</p></li><li><p> active & hidden is not allowed</p></li><li><p> from the user perspective active == last selected</p></li><li><p> active should be ignored when not visible (hidden layer) active bone </p></li></ul> \nactive and selection are unrelatedactive & hidden is not allowedfrom the user perspective active == last selectedactive should be ignored when not visible (hidden layer) active bone \n</p>", 
        "act_edbone": "<p> active editbone (in editmode) </p>", 
        "edbo": "<p> editbone listbase, we use pointer so we can check state </p>", 
        "gevertdeformer": "<p> how vertex deformation is handled in the ge </p>", 
        "ghostef": "<p> start and end frames of ghost-drawing range </p>", 
        "ghostep": "<p> XXX deprecated... old animaton system (armature only viz) <mdash/> . </p>", 
        "ghostsize": "<p> number of frames to ghosts to show, and step between them </p>", 
        "layer_protected": "<p> for buttons to work, both variables in this order together </p>", 
        "layer_used": "<p> for UI, to show which layers are there </p>", 
        "pathac": "<p> number of frames before/after current frame of path-calculation for all bones </p>", 
        "pathef": "<p> start and end frames of path-calculation range for all bones </p>", 
        "pathsize": "<p> ghost drawing options and number of frames between points of path </p>", 
        "sketch": "<p> sketch struct for etch-a-ton </p>"
      }
    }, 
    "bArmatureActuator": {
      "fields": {
        "constraint": "<p> MAX_NAME </p>", 
        "posechannel": "<p> MAX_NAME </p>", 
        "type": "<p> 0=run, 1=enable, 2=disable, 3=set target, 4=set weight </p>"
      }
    }, 
    "bArmatureSensor": {
      "fields": {
        "constraint": "<p> MAX_NAME </p>", 
        "posechannel": "<p> MAX_NAME </p>"
      }
    }, 
    "Base": {
      "doc": "<p><hr/> \n {@link Scene}  Data {@link Base}  - Wrapper for referencing Objects in a {@link Scene}  </p>"
    }, 
    "bCameraSolverConstraint": {
      "doc": "<p>{@link Camera}  Solver constraints </p>"
    }, 
    "bChildOfConstraint": {
      "doc": "<p> Child Of Constraint </p>", 
      "fields": {
        "flag": "<p> settings </p>", 
        "invmat": "<p> parent-inverse matrix to use </p>", 
        "subtarget": "<p> string to specify a subobject target, MAX_ID_NAME-2 </p>", 
        "tar": "<p> object which will act as parent (or target comes from) </p>"
      }
    }, 
    "bClampToConstraint": {
      "doc": "<p> Clamp-To Constraint </p>", 
      "fields": {
        "flag": "<p> which axis/plane to compare owner's location on </p>", 
        "flag2": "<p> for legacy reasons, this is flag2. used for any extra settings </p>", 
        "tar": "<p> 'target' must be a curve </p>"
      }
    }, 
    "bCollisionSensor": {
      "fields": {
        "damptimer": "<p> struct {@link Material}  *ma; ////< XXX remove materialName </p>", 
        "materialName": "<p> material </p>", 
        "mode": "<p> flag to choose material or property </p>", 
        "name": "<p> property name. MAX_NAME </p>"
      }
    }, 
    "bConstraint": {
      "doc": "<p> A Constraint </p>", 
      "fields": {
        "data": "<p> Constraint data (a valid constraint type) </p>", 
        "enforce": "<p> Amount of influence exherted by constraint (0.0-1.0) </p>", 
        "flag": "<p> Flag - General Settings </p>", 
        "headtail": "<p> Point along subtarget bone where the actual target is. 0=head (default for all), 1=tail </p>", 
        "ipo": "<p><p> local influence ipo or driver </p>\n@deprecated\n Deprecatedlocal influence ipo or driver </p>", 
        "lin_error": "<p> old animation system, deprecated for 2.5 below are readonly fields that are set at runtime by the solver for use in the GE (only IK atm) residual error on constraint expressed in blender unit </p>", 
        "name": "<p> Constraint name, MAX_NAME </p>", 
        "ownspace": "<p> Space that owner should be evaluated in </p>", 
        "rot_error": "<p> residual error on constraint expressed in radiant </p>", 
        "tarspace": "<p> Space that target should be evaluated in (only used if 1 target) </p>", 
        "type": "<p> Constraint type </p>"
      }
    }, 
    "bConstraintActuator": {
      "fields": {
        "matprop": "<p> MAX_NAME </p>"
      }
    }, 
    "bConstraintChannel": {
      "doc": "<p> XXX deprecated... old AnimSys. </p><p> channels reside in {@link Object}  or Action ({@link ListBase} ) constraintChannels </p>"
    }, 
    "bConstraintTarget": {
      "doc": "<p> Multiple-target constraints ---------------<mdash/><mdash/>  This struct defines a constraint target. It is used during constraint solving regardless of how many targets the constraint has. </p>", 
      "fields": {
        "flag": "<p> runtime settings (for editor, etc.) </p>", 
        "matrix": "<p> matrix used during constraint solving - should be cleared before each use </p>", 
        "rotOrder": "<p> rotation order for target (as defined in BLI_math.h) </p>", 
        "space": "<p> space that target should be evaluated in (overrides bConstraint->tarspace) </p>", 
        "subtarget": "<p> subtarget - pchan or vgroup name, MAX_ID_NAME-2 </p>", 
        "tar": "<p> object to use as target </p>", 
        "type": "<p> type of target (B_CONSTRAINT_OB_TYPE) </p>"
      }
    }, 
    "bDampTrackConstraint": {
      "doc": "<p> Damped Tracking constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bDeformGroup": {
      "doc": "<p> Vertex Groups - Name Info </p>", 
      "fields": {
        "flag": "<p> need this flag for locking weights </p>", 
        "name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "bDistLimitConstraint": {
      "doc": "<p> Limit Distance Constraint </p>", 
      "fields": {
        "dist": "<p> distance (radius of clamping sphere) from target </p>", 
        "flag": "<p> settings </p>", 
        "mode": "<p> how to limit in relation to clamping sphere </p>", 
        "soft": "<p> distance from clamping-sphere to start applying 'fade' </p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bDopeSheet": {
      "doc": "<p><hr/> \n Action/Dopesheet Editor Storage for Dopesheet/Grease-Pencil Editor data </p>", 
      "fields": {
        "chanbase": "<p> cache for channels (only initialized when pinned) </p>", 
        "filter_grp": "<p> XXX not used! </p><p> object group for ADS_FILTER_ONLYOBGROUP filtering option </p>", 
        "filterflag": "<p> flags to use for filtering data </p>", 
        "flag": "<p> standard flags </p>", 
        "renameIndex": "<p> index+1 of channel to rename - only gets set by renaming operator </p>", 
        "searchstr": "<p> string to search for in displayed names of F-Curves for ADS_FILTER_BY_FCU_NAME filtering option </p>", 
        "source": "<p> currently ID_SCE (for Dopesheet), and ID_SC (for Grease Pencil) </p>"
      }
    }, 
    "bEditObjectActuator": {
      "fields": {
        "angVelocity": "<p> initial ang. velocity on creation </p>", 
        "linVelocity": "<p> initial lin. velocity on creation </p>", 
        "localflag": "<p> flag for the lin & ang. vel: apply locally </p>", 
        "name": "<p> MAX_NAME </p>", 
        "trackflag": "<p> flag for up axis and track axis </p>"
      }
    }, 
    "BevelModifierData": {
      "fields": {
        "bevel_angle": "<p> if the MOD_BEVEL_ANGLE is set, this will be how \"sharp\" an edge must be before it gets beveled </p>", 
        "defgrp_name": "<p> if the MOD_BEVEL_VWEIGHT option is set, this will be the name of the vert group, MAX_VGROUP_NAME </p>", 
        "e_flags": "<p> flags to direct how edge weights are applied to verts </p>", 
        "flags": "<p> general option flags </p>", 
        "lim_flags": "<p> flags to tell the tool how to limit the bevel </p>", 
        "mat": "<p> material index if >= 0, else material inherited from surrounding faces </p>", 
        "profile": "<p> controls profile shape (0->1, .5 is round) </p>", 
        "res": "<p> the resolution (as originally coded, it is the number of recursive bevels) </p>", 
        "val_flags": "<p> used to interpret the bevel value </p>", 
        "value": "<p> the \"raw\" bevel value (distance/amount to bevel) </p>"
      }
    }, 
    "BevList": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "bevpoints": "<p> over-alloc </p>"
      }
    }, 
    "BevPoint": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "cosa": "<p> 2D Only </p>", 
        "quat": "<p> 3D Only </p>"
      }
    }, 
    "bExpressionCont": {
      "doc": "<p> ****************** CONTROLLERS ********************* </p>"
    }, 
    "BezTriple": {
      "doc": "<p> Keyframes on F-Curves (allows code reuse of Bezier eval code) and Points on Bezier Curves/Paths are generally BezTriples</p><p><h2>Note</h2><p> alfa location in struct is abused by {@link Key}  system</p> alfa location in struct is abused by Key system\n<h2>Note</h2><p> vec in {@link BezTriple}  looks like this:<ul><li><p> vec[0][0] = x location of handle 1</p></li><li><p> vec[0][1] = y location of handle 1</p></li><li><p> vec[0][2] = z location of handle 1 (not used for {@link FCurve}  Points(2d))</p></li><li><p> vec[1][0] = x location of control point</p></li><li><p> vec[1][1] = y location of control point</p></li><li><p> vec[1][2] = z location of control point</p></li><li><p> vec[2][0] = x location of handle 2</p></li><li><p> vec[2][1] = y location of handle 2</p></li><li><p> vec[2][2] = z location of handle 2 (not used for {@link FCurve}  Points(2d)) </p></li></ul> \nvec[0][0] = x location of handle 1vec[0][1] = y location of handle 1vec[0][2] = z location of handle 1 (not used for FCurve Points(2d))vec[1][0] = x location of control pointvec[1][1] = y location of control pointvec[1][2] = z location of control pointvec[2][0] = x location of handle 2vec[2][1] = y location of handle 2vec[2][2] = z location of handle 2 (not used for FCurve Points(2d)) \n</p> vec in BezTriple looks like this:\nvec[0][0] = x location of handle 1vec[0][1] = y location of handle 1vec[0][2] = z location of handle 1 (not used for FCurve Points(2d))vec[1][0] = x location of control pointvec[1][1] = y location of control pointvec[1][2] = z location of control pointvec[2][0] = x location of handle 2vec[2][1] = y location of handle 2vec[2][2] = z location of handle 2 (not used for FCurve Points(2d)) \n\n</p>", 
      "fields": {
        "back": "<p> BEZT_IPO_BACK </p>", 
        "easing": "<p> easing: easing type for interpolation mode (eBezTriple_Easing) </p>", 
        "f3": "<p> f1, f2, f3: used for selection status </p>", 
        "h2": "<p> h1, h2: the handle type of the two handles </p>", 
        "hide": "<p> hide: used to indicate whether {@link BezTriple}  is hidden (3D), type of keyframe (eBezTriple_KeyframeTypes) </p>", 
        "ipo": "<p> ipo: interpolation mode for segment from this {@link BezTriple}  to the next </p>", 
        "period": "<p> BEZT_IPO_ELASTIC </p>", 
        "radius": "<p> alfa: tilt in 3D View, weight: used for softbody goal weight, radius: for bevel tapering </p>"
      }
    }, 
    "bFollowPathConstraint": {
      "doc": "<p> Follow {@link Path}  constraints </p>", 
      "fields": {
        "offset": "<p> Offset in time on the path (in frames), when NOT using 'fixed position' </p>", 
        "offset_fac": "<p> Parametric offset factor defining position along path, when using 'fixed position' </p>", 
        "tar": "<p> Must be path object </p>"
      }
    }, 
    "bFollowTrackConstraint": {
      "doc": "<p> Follow Track constraints </p>", 
      "fields": {
        "object": "<p> MAX_NAME </p>", 
        "track": "<p> MAX_NAME </p>"
      }
    }, 
    "bGPdata": {
      "doc": "<p> Grease-Pencil Annotations - 'DataBlock' </p>", 
      "fields": {
        "adt": "<p> animation data - for animating draw settings </p>", 
        "flag": "<p> settings for this datablock </p>", 
        "id": "<p> Grease Pencil data is a datablock </p>", 
        "layers": "<p> saved Grease-Pencil data bGPDlayers </p>", 
        "pad": "<p> padding for compiler alignment error </p>", 
        "palettes": "<p> saved palettes </p>", 
        "sbuffer": "<p> stroke buffer (can hold GP_STROKE_BUFFER_MAX) </p>", 
        "sbuffer_sflag": "<p> flags for stroke that cache represents </p>", 
        "sbuffer_size": "<p> not-saved stroke buffer data (only used during paint-session)<ul><li><p> buffer must be initialized before use, but freed after whole paint operation is overnumber of elements currently in cache </p></li></ul> \nbuffer must be initialized before use, but freed after whole paint operation is overnumber of elements currently in cache \n</p>", 
        "scolor": "<p> buffer color using palettes </p>", 
        "sflag": "<p> settings for palette color </p>"
      }
    }, 
    "bGPDbrush": {
      "doc": "<p> GP brush (used for new strokes) </p>", 
      "fields": {
        "draw_angle": "<p> angle when the brush has full thickness </p>", 
        "draw_angle_factor": "<p> factor to apply when angle change (only 90 degrees) </p>", 
        "draw_jitter": "<p> amount of jitter to apply to newly created strokes </p>", 
        "draw_random_press": "<p> factor of randomness for sensitivity and strength </p>", 
        "draw_random_sub": "<p> factor of randomness for subdivision </p>", 
        "draw_sensitivity": "<p> amount of sensivity to apply to newly created strokes </p>", 
        "draw_smoothfac": "<p> amount of smoothing to apply to newly created strokes </p>", 
        "draw_smoothlvl": "<p> number of times to apply smooth factor to new strokes </p>", 
        "draw_strength": "<p> amount of alpha strength to apply to newly created strokes </p>", 
        "info": "<p>{@link Brush}  name. Must be unique. </p>", 
        "sublevel": "<p> number of times to subdivide new strokes </p>", 
        "thickness": "<p> thickness to apply to strokes </p>"
      }
    }, 
    "bGPDframe": {
      "doc": "<p> Grease-Pencil Annotations - 'Frame' -> Acts as storage for the 'image' formed by strokes </p>", 
      "fields": {
        "flag": "<p> temp settings </p>", 
        "framenum": "<p> frame number of this frame </p>", 
        "key_type": "<p> keyframe type (eBezTriple_KeyframeType) </p>", 
        "strokes": "<p> list of the simplified 'strokes' that make up the frame's data </p>"
      }
    }, 
    "bGPDlayer": {
      "doc": "<p> Grease-Pencil Annotations - 'Layer' </p>", 
      "fields": {
        "actframe": "<p> active frame (should be the frame that is currently being displayed) </p>", 
        "color": "<p> Color for strokes in layers (replaced by palettecolor). Only used for ruler (which uses GPencil internally) </p>", 
        "fill": "<p> Fill color for strokes in layers. Not used and replaced by palettecolor fill </p>", 
        "flag": "<p> settings for layer </p>", 
        "frames": "<p> list of annotations to display for frames ({@link bGPDframe}  list) </p>", 
        "gcolor_next": "<p> optional color for ghosts after the active frame </p>", 
        "gcolor_prev": "<p> optional color for ghosts before the active frame </p>", 
        "gstep": "<p> Ghosts Before: max number of ghost frames to show between active frame and the one before it (0 = only the ghost itself) </p>", 
        "gstep_next": "<p> Ghosts After: max number of ghost frames to show after active frame and the following it (0 = only the ghost itself) </p>", 
        "info": "<p> optional reference info about this layer (i.e. \"director's comments, 12/3\") this is used for the name of the layer too and kept unique. </p>", 
        "inverse": "<p> inverse matrix (only used if parented) </p>", 
        "opacity": "<p> Opacity of the layer </p>", 
        "parent": "<p> parent object </p>", 
        "parsubstr": "<p> String describing subobject info, MAX_ID_NAME-2 </p>", 
        "thickness": "<p> current thickness to apply to strokes </p>", 
        "tintcolor": "<p> Color used to tint layer, alpha value is used as factor </p>"
      }
    }, 
    "bGPDpalette": {
      "doc": "<p> palette of colors </p>", 
      "fields": {
        "colors": "<p> pointer to individual colours </p>", 
        "info": "<p>{@link Palette}  name. Must be unique. </p>", 
        "pad": "<p> padding for compiler alignment error </p>"
      }
    }, 
    "bGPDpalettecolor": {
      "doc": "<p> color of palettes </p>", 
      "fields": {
        "fill": "<p> color that should be used for drawing \"fills\" for strokes </p>", 
        "flag": "<p> settings for palette color </p>", 
        "info": "<p> Color name. Must be unique. </p>", 
        "pad": "<p> padding for compiler alignment error </p>"
      }
    }, 
    "bGPDspoint": {
      "doc": "<p> Grease-Pencil Annotations - 'Stroke Point' -> Coordinates may either be 2d or 3d depending on settings at the time -> Coordinates of point on stroke, in proportions of window size This assumes that the bottom-left corner is (0,0) </p>", 
      "fields": {
        "flag": "<p> additional options (NOTE: can shrink this field down later if needed) </p>", 
        "pressure": "<p> pressure of input device (from 0 to 1) at this point </p>", 
        "strength": "<p> color strength (used for alpha factor) </p>", 
        "time": "<p> seconds since start of stroke </p>", 
        "z": "<p> co-ordinates of point (usually 2d, but can be 3d as well) </p>"
      }
    }, 
    "bGPDstroke": {
      "doc": "<p> Grease-Pencil Annotations - 'Stroke' -> A stroke represents a (simplified version) of the curve drawn by the user in one 'mousedown'->'mouseup' operation </p>", 
      "fields": {
        "colorname": "<p> The pointer to color is only used during drawing, but not saved colorname is the join with the palette, but when draw, the pointer is update if the value is NULL to speed up the drawingcolor name </p>", 
        "inittime": "<p> Init time of stroke </p>", 
        "pad": "<p> various settings about this stroke </p>", 
        "palcolor": "<p> current palette color </p>", 
        "points": "<p> array of data-points for stroke </p>", 
        "thickness": "<p> thickness of stroke </p>", 
        "tmp_layerinfo": "<p> temporary layer name only used during copy/paste to put the stroke in the original layer </p>", 
        "tot_triangles": "<p> number of triangles in array </p>", 
        "totpoints": "<p> number of data-points in array </p>", 
        "triangles": "<p> tesselated triangles for GP Fill </p>"
      }
    }, 
    "bGPDtriangle": {
      "doc": "<p> Grease-Pencil Annotations - 'Triangle' -> A triangle contains the index of three vertices for filling the stroke This is only used if high quality fill is enabled </p>", 
      "fields": {
        "v3": "<p> indices for tesselated triangle used for GP Fill </p>"
      }
    }, 
    "BGpic": {
      "doc": "<p> This is needed to not let VC choke on near and far... old proprietary MS extensions... ******************************** The near/far thing is a Win EXCEPTION. Thus, leave near/far in the code, and patch for windows. Background Picture in 3D-View </p>"
    }, 
    "bGroupActuator": {
      "fields": {
        "butend": "<p> not referenced, can remove? </p>", 
        "name": "<p> property or groupkey, MAX_NAME </p>"
      }
    }, 
    "bIKParam": {
      "doc": "<p> header for all bPose->ikparam structures </p>"
    }, 
    "bIpoActuator": {
      "doc": "<p> deprecated, handled by {@link bActionActuator}  now </p>", 
      "fields": {
        "frameProp": "<p> Set this property to the actions current frame, MAX_NAME </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bItasc": {
      "doc": "<p> bPose->ikparam when bPose->iksolver=1 </p>", 
      "fields": {
        "dampeps": "<p> threshold of singular value from which the damping start progressively </p>", 
        "dampmax": "<p> maximum damping for DLS solver </p>", 
        "maxvel": "<p> max velocity to SDLS solver </p>"
      }
    }, 
    "bJoystickSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bKeyboardSensor": {
      "fields": {
        "targetName": "<p> Name of the target propertyMAX_NAME </p>", 
        "toggleName": "<p> Name of the toggle propertyMAX_NAME </p>"
      }
    }, 
    "bKinematicConstraint": {
      "doc": "<p> Inverse-Kinematics (IK) constraint This constraint supports a variety of mode determine by the type field according to B_CONSTRAINT_IK_TYPE. Some fields are used by all types, some are specific to some types This is indicated in the comments for each field </p>", 
      "fields": {
        "dist": "<p> Distance: distance (radius of clamping sphere) from target </p>", 
        "flag": "<p> All & CopyPose: some options Like CONSTRAINT_IK_TIP </p>", 
        "grabtarget": "<p> CopyPose: for target-less IK </p>", 
        "iterations": "<p> All: Maximum number of iterations to try </p>", 
        "max_rootbone": "<p> CopyPose: for auto-ik, maximum length of chain </p>", 
        "mode": "<p> Distance: how to limit in relation to clamping sphere: LIMITDIST_.. </p>", 
        "orientweight": "<p> CopyPose: Amount of rotation a target applies on chain </p>", 
        "poleangle": "<p> All: Pole vector rest angle </p>", 
        "polesubtarget": "<p> All: Pole vector sub-object target, MAX_ID_NAME-2 </p>", 
        "poletar": "<p> All: Pole vector target </p>", 
        "rootbone": "<p> All: index to rootbone, if zero go all the way to mother bone </p>", 
        "subtarget": "<p> All: String to specify sub-object target, MAX_ID_NAME-2 </p>", 
        "tar": "<p> All: target object in case constraint needs a target </p>", 
        "type": "<p> subtype of IK constraint: B_CONSTRAINT_IK_TYPE </p>", 
        "weight": "<p> All: Weight of constraint in IK tree </p>"
      }
    }, 
    "bLocateLikeConstraint": {
      "doc": "<p> Copy Location Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bLockTrackConstraint": {
      "doc": "<p> Locked Axis Tracking constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bLocLimitConstraint": {
      "doc": "<p> transform limiting constraints - zero target ----------------------<mdash/><mdash/>  Limit Location Constraint </p>"
    }, 
    "bMessageActuator": {
      "fields": {
        "body": "<p> Either User Defined {@link Text}  or our PropName to send value of, MAX_NAME </p>", 
        "pad1": "<p> bodyType is either 'User defined text' or PropName </p>", 
        "subject": "<p> Message Subject to send. MAX_NAME. </p>", 
        "toObject": "<p> (Possible future use) pointer to a single destination object. </p>", 
        "toPropName": "<p> Send to all objects with this propertyname. Empty to broadcast. MAX_NAME. </p>"
      }
    }, 
    "bMessageSensor": {
      "fields": {
        "body": "<p> (Possible future use) body to filter on </p>", 
        "fromObject": "<p> (Possible future use) pointer to a single sender object </p>", 
        "subject": "<p> Can be used to filter on subjects like this </p>"
      }
    }, 
    "bMinMaxConstraint": {
      "doc": "<p> Floor Constraint </p>", 
      "fields": {
        "pad2": "<p> for backward compatibility </p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bMotionPath": {
      "doc": "<p> ........ Motion {@link Path}  data cache (mpath)<ul><li><p> for elements providing transforms (i.e. Objects or PoseChannels) </p></li></ul> \nfor elements providing transforms (i.e. Objects or PoseChannels) \n</p>", 
      "fields": {
        "color": "<p> optional custom color </p>", 
        "end_frame": "<p> for drawing paths, the end frame number </p>", 
        "flag": "<p> baking settings - eMotionPath_Flag </p>", 
        "length": "<p> the number of cached verts </p>", 
        "line_thickness": "<p> line thickness </p>", 
        "points": "<p> path samples </p>", 
        "start_frame": "<p> for drawing paths, the start frame number </p>"
      }
    }, 
    "bMotionPathVert": {
      "doc": "<p><hr/> \n Visualization Motion Paths ---------------------------<mdash/><mdash/><mdash/>  (used for Pose Channels and Objects) Data point for motion path (mpv) </p>", 
      "fields": {
        "co": "<p> coordinates of point in 3D-space </p>", 
        "flag": "<p> quick settings </p>"
      }
    }, 
    "bMouseActuator": {
      "fields": {
        "type": "<p> 0=Visibility, 1=Look </p>"
      }
    }, 
    "bMouseSensor": {
      "doc": "<p> Defines the settings of a mouse sensor. </p>", 
      "fields": {
        "mode": "<p> flag to choose material or property </p>", 
        "type": "<p> The type of key this sensor listens to. </p>"
      }
    }, 
    "bNearSensor": {
      "doc": "<p> ****************** SENSORS ********************* </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bNode": {
      "doc": "<p> limit data in {@link bNode}  to what we want to see saved? </p>", 
      "fields": {
        "anim_init_locx": "<p> initial locx for insert offset animation </p>", 
        "anim_ofsx": "<p> offset that will be added to locx for insert offset animation </p>", 
        "block": "<p> runtime during drawing </p>", 
        "butr": "<p> optional buttons area </p>", 
        "color": "<p> custom user-defined color </p>", 
        "custom2": "<p> to be abused for buttons </p>", 
        "exec": "<p> need_exec is set as UI execution event, exec is flag during exec </p>", 
        "height": "<p> node custom width and height </p>", 
        "id": "<p> optional link to libdata </p>", 
        "idname": "<p> runtime type identifier </p>", 
        "internal_links": "<p> list of cached internal links (input to output), for muted nodes and operators </p>", 
        "label": "<p> custom user-defined label, MAX_NAME </p>", 
        "level": "<p> both for dependency and sorting </p>", 
        "locy": "<p> root offset for drawing (parent space) </p>", 
        "menunr": "<p> lasty: check preview render status, menunr: browse {@link ID}  blocks </p>", 
        "miniwidth": "<p> node width if hidden </p>", 
        "name": "<p> MAX_NAME </p>", 
        "nr": "<p> number of this node in list, used for UI exec events </p>", 
        "offsety": "<p> additional offset from loc </p>", 
        "original": "<p> the original node in the tree (for localized tree) </p>", 
        "parent": "<p> parent node </p>", 
        "preview_xsize": "<p> XXX TODO Node totr size depends on the prvr size, which in turn is determined from preview size. In earlier versions {@link bNodePreview}  was stored directly in nodes, but since now there can be multiple instances using different preview images it is possible that required node size varies between instances. preview_xsize, preview_ysize defines a common reserved size for preview rect for now, could be replaced by more accurate node instance drawing, but that requires removing totr from DNA and replacing all uses with per-instance data. </p>", 
        "preview_ysize": "<p> reserved size of the preview rect </p>", 
        "prop": "<p> user-defined properties </p>", 
        "prvr": "<p> optional preview area </p>", 
        "stack_index": "<p> for groupnode, offset in global caller stack </p>", 
        "storage": "<p> custom data, must be struct, for storage in file </p>", 
        "threaddata": "<p> optional extra storage for use in thread (read only then!) </p>", 
        "totr": "<p> entire boundbox (worldspace) </p>", 
        "typeinfo": "<p> runtime type information </p>", 
        "update": "<p> update flags </p>"
      }
    }, 
    "bNodeInstanceHashEntry": {
      "doc": "<p>{@link Base}  struct for entries in node instance hash. WARNING: pointers are cast to this struct internally, it must be first member in hash entry structs! </p>", 
      "fields": {
        "tag": "<p> tags for cleaning the cache </p>"
      }
    }, 
    "bNodeInstanceKey": {
      "doc": "<p> Unique hash key for identifying node instances Defined as a struct because DNA does not support other typedefs. </p>"
    }, 
    "bNodePreview": {
      "fields": {
        "hash_entry": "<p> must be first </p>"
      }
    }, 
    "bNodeSocket": {
      "fields": {
        "cache": "<p> cached data from execution </p>", 
        "default_value": "<p> default input value used for unlinked sockets </p>", 
        "groupsock": "<p> XXX deprecated, still forward compatible since verification restores pointer from matching own_index. \n@deprecated\n Deprecated</p>", 
        "identifier": "<p> unique identifier for mapping </p>", 
        "idname": "<p> runtime type identifier </p>", 
        "in_out": "<p> input/output type </p>", 
        "limit": "<p> max. number of links </p>", 
        "link": "<p> a link pointer, set in ntreeUpdateTree </p>", 
        "name": "<p> MAX_NAME </p>", 
        "ns": "<p> XXX deprecated, socket input values are stored in default_value now. kept for forward compatibility <p> custom data for inputs, only UI writes in this </p>\n@deprecated\n Deprecatedcustom data for inputs, only UI writes in this </p>", 
        "own_index": "<p> internal data to retrieve relations and groups DEPRECATED, now uses the generic identifier string instead<p> group socket identifiers, to find matching pairs after reading files </p>\n@deprecated\n Deprecatedgroup socket identifiers, to find matching pairs after reading files </p>", 
        "prop": "<p> user-defined properties </p>", 
        "stack_index": "<p> execution data local stack index </p>", 
        "stack_type": "<p> XXX deprecated, kept for forward compatibility \n@deprecated\n Deprecated</p>", 
        "storage": "<p> XXX deprecated, only used for the {@link Image}  and OutputFile nodes, should be removed at some point.custom storage </p>", 
        "to_index": "<p> XXX deprecated, only used for restoring old group node links \n@deprecated\n Deprecated</p>", 
        "typeinfo": "<p> runtime type information </p>"
      }
    }, 
    "bNodeSocketValueFloat": {
      "fields": {
        "subtype": "<p> RNA subtype </p>"
      }
    }, 
    "bNodeSocketValueInt": {
      "doc": "<p> socket value structs for input buttons DEPRECATED now using {@link ID}  properties </p>", 
      "fields": {
        "subtype": "<p> RNA subtype </p>"
      }
    }, 
    "bNodeSocketValueString": {
      "fields": {
        "value": "<p> 1024 = FILEMAX </p>"
      }
    }, 
    "bNodeSocketValueVector": {
      "fields": {
        "subtype": "<p> RNA subtype </p>"
      }
    }, 
    "bNodeStack": {
      "fields": {
        "datatype": "<p> type of data pointer </p>", 
        "external": "<p> data is used by external nodes (no freeing) </p>", 
        "hasinput": "<p> when input has link, tagged before executing </p>", 
        "hasoutput": "<p> when output is linked, tagged before executing </p>", 
        "is_copy": "<p> data is a copy of external data (no freeing) </p>", 
        "sockettype": "<p> type of socket stack comes from, to remap linking different sockets </p>"
      }
    }, 
    "bNodeTree": {
      "doc": "<p> the basis for a Node tree, all links and nodes reside internal here only re-usable node trees are in the library though, materials and textures allocate own tree struct </p>", 
      "fields": {
        "active_viewer_key": "<p> Defines the node tree instance to use for the \"active\" context, in case multiple different editors are used and make context ambiguous. </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "chunksize": "<p> tile size for compositor engine </p>", 
        "cur_index": "<p> sockets in groups have unique identifiers, adding new sockets always will increase this counter </p>", 
        "done": "<p> generic temporary flag for recursion check (DFS/BFS) </p>", 
        "edit_quality": "<p> Quality setting when editing </p>", 
        "execdata": "<p> execution data XXX It would be preferable to completely move this data out of the underlying node tree, so node tree execution could finally run independent of the tree itself. This would allow node trees to be merely linked by other data (materials, textures, etc.), as {@link ID}  data is supposed to. Execution data is generated from the tree once at execution start and can then be used as long as necessary, even while the tree is being modified. </p>", 
        "gpd": "<p> grease pencil data </p>", 
        "idname": "<p> runtime type identifier </p>", 
        "init": "<p> set init on fileread </p>", 
        "inputs": "<p> Lists of {@link bNodeSocket}  to hold default values and own_index. Warning! Don't make links to these sockets, input/output nodes are used for that. These sockets are used only for generating external interfaces. </p>", 
        "interface_type": "<p> runtime RNA type of the group interface </p>", 
        "is_updating": "<p> flag to prevent reentrant update calls </p>", 
        "nodetype": "<p><p> specific node type this tree is used for </p>\n@deprecated\n Deprecatedspecific node type this tree is used for </p>", 
        "previews": "<p> Node preview hash table Only available in base node trees (e.g. scene->node_tree) </p>", 
        "progress": "<p> callbacks </p>", 
        "render_quality": "<p> Quality setting when rendering </p>", 
        "stats_draw": "<p><h2>Warning</h2><p> may be called by different threads </p> may be called by different threads \n</p>", 
        "typeinfo": "<p> runtime type information </p>", 
        "update": "<p> update flags </p>", 
        "view_center": "<p> node tree stores own offset for consistent editor view </p>"
      }
    }, 
    "bNodeTreePath": {
      "doc": "<p> Nodes Editor =========================================== Node Editor </p>", 
      "fields": {
        "node_name": "<p> MAX_NAME </p>", 
        "parent_key": "<p> base key for nodes in this tree instance </p>", 
        "view_center": "<p> v2d center point, so node trees can have different offsets in editors </p>"
      }
    }, 
    "bObjectActuator": {
      "fields": {
        "drot": "<p> angle in radians </p>"
      }
    }, 
    "bObjectSolverConstraint": {
      "doc": "<p>{@link Camera}  Solver constraints </p>", 
      "fields": {
        "invmat": "<p> parent-inverse matrix to use </p>", 
        "object": "<p> MAX_NAME </p>"
      }
    }, 
    "BoidRuleGoalAvoid": {
      "fields": {
        "signal_id": "<p> signals </p>"
      }
    }, 
    "BoidSettings": {
      "doc": "<p> planned for near future typedef struct BoidSignal { struct BoidSignal *next, *prev; float loc[3]; float volume, falloff; int id; } BoidSignal; typedef struct BoidSignalDefine { struct BoidSignalDefine *next, *prev; int id, rt; char name[32]; } BoidSignalDefine; </p><p> typedef struct BoidSimulationData { {@link ListBase}  signal_defines;// list of defined signals  {@link ListBase}  signals[20]; // gathers signals from all channels  struct KDTree *signaltrees[20]; char channel_names[20][32]; int last_signal_id; // used for incrementing signal ids  int flag; // switches for drawing stuff  } BoidSimulationData; </p>", 
      "fields": {
        "air_min_speed": "<p> flying related </p>", 
        "land_jump_speed": "<p> walk/run related </p>"
      }
    }, 
    "BoidState": {
      "fields": {
        "ruleset_type": "<p> rules </p>", 
        "signal_id": "<p> signal </p>"
      }
    }, 
    "Bone": {
      "doc": "<p> this system works on different transformation space levels;</p><p> 1) {@link Bone}  Space; with each {@link Bone}  having own (0,0,0) origin 2) Armature Space; the rest position, in {@link Object}  space, Bones Spaces are applied hierarchical 3) Pose Space; the animation position, in {@link Object}  space 4) {@link World}  Space; {@link Object}  matrix applied to Pose or Armature space </p>", 
      "fields": {
        "arm_mat": "<p> matrix: (bonemat(b)+head(b))*arm_mat(b-1), rest pos </p>", 
        "arm_roll": "<p> roll in Armature Space (rest pos) </p>", 
        "arm_tail": "<p> head/tail in Armature Space (rest pos) </p>", 
        "bone_mat": "<p> rotation derived from head/tail/roll </p>", 
        "childbase": "<p> Children </p>", 
        "ease2": "<p> length of bezier handles </p>", 
        "layer": "<p> layers that bone appears on </p>", 
        "name": "<p> Name of the bone - must be unique within the armature, MAXBONENAME </p>", 
        "parent": "<p> Parent (ik parent if appropriate flag is set </p>", 
        "prev": "<p> Next/prev elements within this list </p>", 
        "prop": "<p> User-Defined Properties on this {@link Bone}  </p>", 
        "rad_tail": "<p> radius for head/tail sphere, defining deform as well, parent->rad_tip overrides rad_head </p>", 
        "roll": "<p> roll is input for editmode, length calculated </p>", 
        "roll2": "<p> curved bones settings - these define the \"restpose\" for a curved bone </p>", 
        "segments": "<p> for B-bones </p>", 
        "size": "<p> patch for upward compat, UNUSED! </p>", 
        "tail": "<p> head/tail and roll in {@link Bone}  Space </p>", 
        "weight": "<p> dist, weight: for non-deformgroup deforms </p>", 
        "zwidth": "<p> width: for block bones. keep in this order, transform! </p>"
      }
    }, 
    "BoundBox": {
      "doc": "<p> The following illustrates the orientation of the bounding box in local space</p><p><pre></pre></p><p><pre> Z  Y\n| /\n|/\n.--<mdash/></pre></p><p><pre><pre>2----------6\n</pre> 2----------6\n\n   /|         /|\n  / |        / |\n 1-------<mdash/> 5  |\n |  |       |  |\n |  3----<mdash/> |<ndash/> 7\n | /        | /\n |/         |/\n 0-------<mdash/></pre>  </p>"
    }, 
    "bPathCompare": {
      "fields": {
        "path": "<p> FILE_MAXDIR </p>"
      }
    }, 
    "bPivotConstraint": {
      "doc": "<p> Pivot Constraint </p>", 
      "fields": {
        "flag": "<p> General flags ePivotConstraint_Flag </p>", 
        "offset": "<p> offset from the target to use, regardless of whether it exists </p>", 
        "rotAxis": "<p> Rotation-driven activation: This option provides easier one-stop setups for footrollsrotation axes to consider for this (ePivotConstraint_Axis) </p>", 
        "subtarget": "<p> subtarget name (optional), MAX_ID_NAME-2 </p>", 
        "tar": "<p> Pivot Point: Either target object + offset, or just offset is usedtarget object (optional) </p>"
      }
    }, 
    "BPoint": {
      "doc": "<p> note; alfa location in struct is abused by {@link Key}  system </p>", 
      "fields": {
        "hide": "<p> f1: selection status, hide: is point hidden or not </p>", 
        "pad": "<p> user-set radius per point for beveling etc </p>", 
        "weight": "<p> alfa: tilt in 3D View, weight: used for softbody goal weight </p>"
      }
    }, 
    "bPose": {
      "doc": "<p> Pose ------------------------------<mdash/><mdash/>  Pose-Object.</p><p> It is only found under ob->pose. It is not library data, even though there is a define for it (hack for the outliner). </p>", 
      "fields": {
        "active_group": "<p> index of active group (starts from 1) </p>", 
        "agroups": "<p> list of bActionGroups </p>", 
        "avs": "<p> settings for visualization of bone animation </p>", 
        "chanbase": "<p> list of pose channels, PoseBones in RNA </p>", 
        "chanhash": "<p> ghash for quicker string lookups </p>", 
        "ctime": "<p> local action time of this pose </p>", 
        "cyclic_offset": "<p> result of match and cycles, applied in BKE_pose_where_is() </p>", 
        "ikdata": "<p> temporary IK data, depends on the IK solver. Not saved in file </p>", 
        "ikparam": "<p> IK solver parameters, structure depends on iksolver </p>", 
        "iksolver": "<p> ik solver to use, see ePose_IKSolverType </p>", 
        "proxy_act_bone": "<p> proxy active bone name, MAXBONENAME </p>", 
        "proxy_layer": "<p> proxy layer: copy from armature, gets synced </p>", 
        "stride_offset": "<p> applied to object </p>"
      }
    }, 
    "bPoseChannel": {
      "doc": "<p><hr/> \n Poses PoseChannel ------------------------------<mdash/><mdash/>  PoseChannel</p><p> A PoseChannel stores the results of Actions and transform information with respect to the restposition of Armature bones </p>", 
      "fields": {
        "agrp_index": "<p> index of action-group this bone belongs to (0 = default/no group) </p>", 
        "bbone_prev": "<p> next/prev bones to use as handle references when calculating bbones (optional) </p>", 
        "bone": "<p> set on read file or rebuild pose </p>", 
        "chan_mat": "<p> matrix result of loc/quat/size, and where we put deform in, see next line </p>", 
        "child": "<p> set on read file or rebuild pose, the 'ik' child, for b-bones </p>", 
        "constflag": "<p> for quick detecting which constraints affect this channel </p>", 
        "constinv": "<p> inverse result of constraints. doesn't include effect of restposition, parent, and local transform </p>", 
        "constraints": "<p> Constraints that act on this PoseChannel </p>", 
        "custom": "<p> draws custom object instead of default bone shape </p>", 
        "custom_tx": "<p> odd feature, display with another bones transform. needed in rare cases for advanced rigs, since the alternative is highly complicated - campbell </p>", 
        "eul": "<p> rotations - written in by actions or transform (but only one representation gets used at any time) euler rotation </p>", 
        "flag": "<p> dynamic, for detecting transform changes </p>", 
        "ikflag": "<p> settings for IK bones </p>", 
        "iklinweight": "<p> weight of joint stretch constraint </p>", 
        "ikrotweight": "<p> weight of joint rotation constraint </p>", 
        "iktree": "<p> \"IK trees\" - only while evaluating pose </p>", 
        "limitmax": "<p> DOF constraint, note! - these are stored in degrees, not radians </p>", 
        "loc": "<p> transforms - written in by actions or transform </p>", 
        "mpath": "<p> motion path cache for this bone </p>", 
        "name": "<p> need to match bone name length: MAXBONENAME </p>", 
        "parent": "<p> set on read file or rebuild pose </p>", 
        "pose_head": "<p> actually pose_mat[3] </p>", 
        "pose_mat": "<p> constraints accumulate here. in the end, pose_mat = bone->arm_mat * chan_mat this matrix is object space </p>", 
        "pose_tail": "<p> also used for drawing help lines... </p>", 
        "prop": "<p> User-Defined Properties on this PoseChannel </p>", 
        "protectflag": "<p> protect channels from being transformed </p>", 
        "quat": "<p> quaternion rotation </p>", 
        "roll1": "<p> curved bones settings - these are for animating, and are applied on top of the copies in pchan->bone </p>", 
        "rotAngle": "<p> axis-angle rotation </p>", 
        "rotmode": "<p> eRotationModes - rotation representation to use </p>", 
        "selectflag": "<p> copy of bone flag, so you can work with library armatures, not for runtime use </p>", 
        "siktree": "<p> Spline-IK \"trees\" - only while evaluating pose </p>", 
        "stiffness": "<p> DOF stiffness </p>", 
        "temp": "<p> use for outliner </p>"
      }
    }, 
    "bProperty": {
      "doc": "<p> ********************* PROPERTY ************************ </p>", 
      "fields": {
        "data": "<p> data should be 4 bytes to store int,float stuff </p>", 
        "name": "<p> MAX_NAME </p>", 
        "poin": "<p> references data unless its a string which is malloc'd </p>"
      }
    }, 
    "bPropertyActuator": {
      "fields": {
        "value": "<p> MAX_NAME </p>"
      }
    }, 
    "bPropertySensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bPythonConstraint": {
      "doc": "<p> Python {@link Script}  Constraint </p>", 
      "fields": {
        "flag": "<p> general settings/state indicators accessed by bitmapping </p>", 
        "prop": "<p> 'id-properties' used to store custom properties for constraint </p>", 
        "subtarget": "<p> subtarger from previous implentation (version-patch sets this to \"\" on file-load), MAX_ID_NAME-2 </p>", 
        "tar": "<p> target from previous implementation (version-patch sets this to NULL on file-load) </p>", 
        "targets": "<p> a list of targets that this constraint has (bConstraintTarget-s) </p>", 
        "tarnum": "<p> number of targets - usually only 1-3 are needed </p>", 
        "text": "<p> text-buffer (containing script) to execute </p>"
      }
    }, 
    "bPythonCont": {
      "fields": {
        "flag": "<p> only used for debug now </p>"
      }
    }, 
    "bRadarSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bRandomActuator": {
      "doc": "<p> I added a few extra fields here, to facilitate conversions </p>", 
      "fields": {
        "propname": "<p> MAX_NAME </p>"
      }
    }, 
    "bRandomSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bRaySensor": {
      "fields": {
        "mode": "<p> struct {@link Material}  *ma; ////< XXX remove materialName </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bRigidBodyJointConstraint": {
      "doc": "<p> Rigid Body constraint </p>"
    }, 
    "bRotateLikeConstraint": {
      "doc": "<p> Copy Rotation Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bRotLimitConstraint": {
      "doc": "<p> Limit Rotation Constraint </p>"
    }, 
    "Brush": {
      "fields": {
        "alpha": "<p> opacity </p>", 
        "blend": "<p> blend mode </p>", 
        "curve": "<p> falloff curve </p>", 
        "fill_threshold": "<p> fill tool </p>", 
        "flag": "<p> general purpose flag </p>", 
        "gradient": "<p> color gradient </p>", 
        "gradient_fill_mode": "<p> source for fill tool color gradient application </p>", 
        "gradient_stroke_mode": "<p> source for stroke color gradient application </p>", 
        "height": "<p> affectable height of brush (layer height for layer tool, i.e.) </p>", 
        "icon_filepath": "<p> 1024 = FILE_MAX </p>", 
        "imagepaint_tool": "<p> active image paint tool </p>", 
        "jitter": "<p> jitter the position of the brush </p>", 
        "jitter_absolute": "<p> absolute jitter in pixels </p>", 
        "mask_pressure": "<p> pressure influence for mask </p>", 
        "mask_tool": "<p> enum BrushMaskTool, only used if sculpt_tool is SCULPT_TOOL_MASK </p>", 
        "ob_mode": "<p> & with ob->mode to see if the brush is compatible, use for display only. </p>", 
        "plane_offset": "<p> offset for plane brushes (clay, flatten, fill, scrape) </p>", 
        "rake_factor": "<p> rake actual data (not texture), used for sculpt </p>", 
        "rate": "<p> paint operations / second (airbrush) </p>", 
        "rgb": "<p> color </p>", 
        "sculpt_plane": "<p> the direction of movement for sculpt vertices </p>", 
        "sculpt_tool": "<p> active sculpt tool </p>", 
        "secondary_rgb": "<p> background color </p>", 
        "sharp_threshold": "<p> soften/sharpen </p>", 
        "size": "<p> brush diameter </p>", 
        "smooth_stroke_factor": "<p> higher values limit fast changes in the stroke direction </p>", 
        "smooth_stroke_radius": "<p> turning radius (in pixels) for smooth stroke </p>", 
        "spacing": "<p> spacing of paint operations </p>", 
        "texture_overlay_alpha": "<p> overlay </p>", 
        "vertexpaint_tool": "<p> active vertex/weight paint blend mode (poorly named) </p>", 
        "weight": "<p> brush weight </p>"
      }
    }, 
    "BrushClone": {
      "fields": {
        "image": "<p> image for clone tool </p>", 
        "offset": "<p> offset of clone image from canvas </p>", 
        "pad": "<p> transparency for drawing of clone image </p>"
      }
    }, 
    "bSameVolumeConstraint": {
      "doc": "<p> Maintain Volume Constraint </p>"
    }, 
    "bScreen": {
      "fields": {
        "animtimer": "<p> if set, screen has timer handler added in window </p>", 
        "context": "<p> context callback </p>", 
        "do_draw": "<p> notifier for drawing edges </p>", 
        "do_draw_drag": "<p> notifier for dragging draw. </p>", 
        "do_draw_gesture": "<p> notifier for gesture draw. </p>", 
        "do_draw_paintcursor": "<p> notifier for paint cursor draw. </p>", 
        "do_refresh": "<p> notifier for scale screen, changed screen, etc </p>", 
        "mainwin": "<p> screensize subwindow, for screenedges and global menus </p>", 
        "newscene": "<p> temporary when switching </p>", 
        "redraws_flag": "<p> user-setting for which editors get redrawn during anim playback (used to be time->redraws) </p>", 
        "regionbase": "<p> screen level regions (menus), runtime only </p>", 
        "scrubbing": "<p> set when scrubbing to avoid some costly updates </p>", 
        "skip_handling": "<p> set to delay screen handling after switching back from maximized area </p>", 
        "state": "<p> temp screen for image render display or fileselect </p>", 
        "subwinactive": "<p> active subwindow </p>", 
        "swap": "<p> indicator to survive swap-exchange systems </p>", 
        "temp": "<p> temp screen in a temp window, don't save (like user prefs) </p>", 
        "vertbase": "<p> screens have vertices/edges to define areas </p>", 
        "winid": "<p> winid from WM, starts with 1 </p>"
      }
    }, 
    "bSensor": {
      "fields": {
        "invert": "<p> just add here, to avoid align errors... Whether or not to invert the output. </p>", 
        "level": "<p> Whether the sensor is level base (edge by default) </p>", 
        "name": "<p> MAX_NAME </p>", 
        "pad2": "<p> freq makes reference to skipped ticks between 2 active pulses </p>", 
        "type": "<p> pulse and freq are the bool toggle and frame count for pulse mode </p>"
      }
    }, 
    "bShrinkwrapConstraint": {
      "doc": "<p> ShrinkWrap Constraint </p>", 
      "fields": {
        "dist": "<p> distance to kept from target </p>", 
        "projAxis": "<p> axis to project/constrain </p>", 
        "projAxisSpace": "<p> space to project axis in </p>", 
        "projLimit": "<p> distance to search </p>", 
        "shrinkType": "<p> shrink type (look on MOD shrinkwrap for values) </p>"
      }
    }, 
    "bSizeLikeConstraint": {
      "doc": "<p> Copy Scale Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bSizeLimitConstraint": {
      "doc": "<p> Limit Scale Constraint </p>"
    }, 
    "bSound": {
      "fields": {
        "cache": "<p> unused currently int type; struct {@link bSound}  *child_sound; The audaspace handle for cache. </p>", 
        "handle": "<p> The handle for audaspace. </p>", 
        "name": "<p> The path to the sound file.1024 = FILE_MAX </p>", 
        "newpackedfile": "<p> Deprecated; used for loading pre 2.5 files. </p>", 
        "packedfile": "<p> The packed file. </p>", 
        "playback_handle": "<p> The audaspace handle that should actually be played back. Should be cache if cache != NULL; otherwise it's handle </p>", 
        "spinlock": "<p> spinlock for asynchronous loading of sounds </p>", 
        "waveform": "<p> Waveform display data. </p>"
      }
    }, 
    "bSplineIKConstraint": {
      "doc": "<p> Spline IK Constraint Aligns 'n' bones to the curvature defined by the curve, with the chain ending on the bone that owns this constraint, and starting on the nth parent. </p>", 
      "fields": {
        "bulge": "<p> volume preservation settings </p>", 
        "chainlen": "<p> number of bones ('n') that are in the chain </p>", 
        "flag": "<p> settings general settings for constraint </p>", 
        "numpoints": "<p> number of points to bound in points array </p>", 
        "points": "<p> binding details array of numpoints items, denoting parametric positions along curve that joints should follow </p>", 
        "tar": "<p> target(s) curve object (with follow path enabled) which drives the bone chain </p>", 
        "xzScaleMode": "<p> method used for determining the x & z scaling of the bones </p>"
      }
    }, 
    "bStateActuator": {
      "fields": {
        "mask": "<p> the bits to change </p>", 
        "type": "<p> 0=Set, 1=Add, 2=Rem, 3=Chg </p>"
      }
    }, 
    "bStats": {
      "doc": "<p><hr/> \n Assorted {@link Scene}  Data -------------------------------------<mdash/><mdash/>  Stats (show in Info header) </p>", 
      "fields": {
        "totobj": "<p> scene totals for visible layers </p>"
      }
    }, 
    "bSteeringActuator": {
      "fields": {
        "type": "<p> 0=seek, 1=flee, 2=path following </p>"
      }
    }, 
    "bStretchToConstraint": {
      "doc": "<p> Stretch to constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bTheme": {
      "doc": "<p> A theme </p>", 
      "fields": {
        "active_theme_area": "<p>{@link ThemeWireColor}  tobj[20]; </p>", 
        "tarm": "<p> 20 sets of bone colors for this theme </p>", 
        "tbuts": "<p> Individual Spacetypes note: ensure UI_THEMESPACE_END is updated when adding </p>"
      }
    }, 
    "bTouchSensor": {
      "doc": "<p> DEPRECATED </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bTrackToConstraint": {
      "doc": "<p> Single-target subobject constraints ---------------<mdash/><mdash/>  Track To Constraint </p>", 
      "fields": {
        "reserved1": "<p> I'll be using reserved1 and reserved2 as Track and Up flags, not sure if that's what they were intended for anyway. Not sure either if it would create backward incompatibility if I were to rename them.<ul><li><p> theeth </p></li></ul> \ntheeth \n</p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bTransformCacheConstraint": {
      "doc": "<p> Transform matrix cache constraint </p>", 
      "fields": {
        "object_path": "<p> FILE_MAX </p>"
      }
    }, 
    "bTransformConstraint": {
      "doc": "<p> Generic Transform->Transform Constraint </p>", 
      "fields": {
        "expo": "<p> extrapolate motion? if 0, confine to ranges </p>", 
        "from_max": "<p> to map on to to_min/max range. </p>", 
        "from_max_rot": "<p> to map on to to_min/max range. </p>", 
        "from_max_scale": "<p> to map on to to_min/max range. </p>", 
        "from_min": "<p> from_min/max defines range of target transform </p>", 
        "from_min_rot": "<p> from_min/max defines range of target transform </p>", 
        "from_min_scale": "<p> from_min/max defines range of target transform </p>", 
        "map": "<p> defines which target-axis deform is copied by each owner-axis </p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "tar": "<p> target (i.e. 'driver' object/bone) </p>", 
        "to": "<p> can be loc(0), rot(1) or size(2) </p>", 
        "to_min": "<p> range of motion on owner caused by target </p>", 
        "to_min_rot": "<p> range of motion on owner caused by target </p>", 
        "to_min_scale": "<p> range of motion on owner caused by target </p>"
      }
    }, 
    "bTransLikeConstraint": {
      "doc": "<p> Copy Transform Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "bTwoDFilterActuator": {
      "fields": {
        "flag": "<p> (flag == 0) means 2D filter is activate and (flag != 0) means 2D filter is inactive </p>", 
        "float_arg": "<p> a float argument </p>", 
        "type": "<p> Tells what type of 2D Filter </p>"
      }
    }, 
    "BuildModifierData": {
      "fields": {
        "randomize": "<p> (bool) whether order of vertices is randomized - legacy files (for readfile conversion) </p>", 
        "seed": "<p> (int) random seed </p>"
      }
    }, 
    "BulletSoftBody": {
      "fields": {
        "angStiff": "<p> angular stiffness 0..1 </p>", 
        "citerations": "<p> Cluster solver iterations </p>", 
        "collisionflags": "<p> Vertex/Face or Signed Distance Field(SDF) or Clusters, Soft versus Soft or Rigid </p>", 
        "diterations": "<p> Drift solver iterations </p>", 
        "flag": "<p> various boolean options </p>", 
        "kAHR": "<p> Anchors hardness [0,1] </p>", 
        "kCHR": "<p> Rigid contacts hardness [0,1] </p>", 
        "kDF": "<p> Dynamic friction coefficient [0,1] </p>", 
        "kDG": "<p> Drag coefficient [0,+inf] </p>", 
        "kDP": "<p> Damping coefficient [0,1] </p>", 
        "kKHR": "<p> Kinetic contacts hardness [0,1] </p>", 
        "kLF": "<p> Lift coefficient [0,+inf] </p>", 
        "kMT": "<p> Pose matching coefficient [0,1] </p>", 
        "kPR": "<p> Pressure coefficient [-inf,+inf] </p>", 
        "kSHR": "<p> Soft contacts hardness [0,1] </p>", 
        "kSK_SPLT_CL": "<p> Soft vs rigid impulse split [0,1] (cluster only) </p>", 
        "kSKHR_CL": "<p> Soft vs kinetic hardness [0,1] (cluster only) </p>", 
        "kSR_SPLT_CL": "<p> Soft vs rigid impulse split [0,1] (cluster only) </p>", 
        "kSRHR_CL": "<p> Soft vs rigid hardness [0,1] (cluster only) </p>", 
        "kSS_SPLT_CL": "<p> Soft vs rigid impulse split [0,1] (cluster only) </p>", 
        "kSSHR_CL": "<p> Soft vs soft hardness [0,1] (cluster only) </p>", 
        "kVC": "<p> Volume conversation coefficient [0,+inf] </p>", 
        "kVCF": "<p> Velocities correction factor (Baumgarte) </p>", 
        "linStiff": "<p> linear stiffness 0..1 </p>", 
        "margin": "<p> margin specific to softbody </p>", 
        "numclusteriterations": "<p> number of iterations to refine collision clusters </p>", 
        "piterations": "<p> Positions solver iterations </p>", 
        "viterations": "<p> Velocities solver iterations </p>", 
        "volume": "<p> volume preservation 0..1 </p>", 
        "welding": "<p> welding limit to remove duplicate/nearby vertices, 0.0..0.01 </p>"
      }
    }, 
    "bVisibilityActuator": {
      "fields": {
        "flag": "<p> bit 0: Is this object visible? bit 1: Apply recursively bit 2: Is this object an occluder? </p>"
      }
    }, 
    "CacheFile": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>", 
        "flag": "<p> Animation flag. </p>", 
        "frame": "<p> The frame/time to lookup in the cache file. </p>", 
        "object_paths": "<p> Paths of the objects inside of the Alembic archive referenced by this {@link CacheFile} . </p>"
      }
    }, 
    "Camera": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "dtx": "<p> draw type extra </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "stereo": "<p> Stereo settings </p>", 
        "type": "<p> CAM_PERSP, CAM_ORTHO or CAM_PANO </p>", 
        "YF_dofdist": "<p> yafray: dof params qdn: yafray var 'YF_dofdist' now enabled for defocus composite node as well. The name was not changed so that no other files need to be modified </p>"
      }
    }, 
    "CameraStereoSettings": {
      "doc": "<p><hr/> \n Stereo Settings </p>", 
      "fields": {
        "pole_merge_angle_from": "<p> Cut-off angle at which interocular distance start to fade down. </p>", 
        "pole_merge_angle_to": "<p> Cut-off angle at which interocular distance stops to fade down. </p>"
      }
    }, 
    "CastModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "ChannelDriver": {
      "doc": "<p><hr/> \n Channel Driver (i.e. Drivers / Expressions) (driver)</p><p> Channel Drivers are part of the dependency system, and are executed in addition to normal user-defined animation. They take the animation result of some channel(s), and use that (optionally combined with its own F-Curve for modification of results) to define the value of some setting semi-procedurally.</p><p> Drivers are stored as part of F-Curve data, so that the F-Curve's RNA-path settings (for storing what setting the driver will affect). The order in which they are stored defines the order that they're evaluated in. This order is set by the Depsgraph's sorting stuff. </p>", 
      "fields": {
        "curval": "<p> result of previous evaluation </p>", 
        "expr_comp": "<p> PyObject - compiled expression, don't save this </p>", 
        "expression": "<p> python expression to execute (may call functions defined in an accessory file) which relates the target 'variables' in some way to yield a single usable valueexpression to compile for evaluation </p>", 
        "flag": "<p> settings of driver </p>", 
        "influence": "<p> influence of driver on result </p>", 
        "type": "<p> XXX to be implemented... this is like the constraint influence setting. </p><p> general settings type of driver </p>", 
        "variables": "<p> targets for this driver (i.e. list of {@link DriverVar} ) </p>"
      }
    }, 
    "CharInfo": {
      "fields": {
        "mat_nr": "<p> index start at 1, unlike mesh & nurbs </p>"
      }
    }, 
    "ChildParticle": {
      "doc": "<p> Child particles are created around or between parent particles </p>", 
      "fields": {
        "foffset": "<p> face vertex weights and offset </p>", 
        "pa": "<p> nearest particles to the child, used for the interpolation </p>", 
        "parent": "<p> num is face index on the final derived mesh </p>", 
        "w": "<p> interpolation weights for the above particles </p>"
      }
    }, 
    "ClothCollSettings": {
      "fields": {
        "collision_list": "<p> e.g. pointer to temp memory for collisions </p>", 
        "damping": "<p> Collision restitution on contact with other object. </p>", 
        "epsilon": "<p> min distance for collisions. </p>", 
        "flags": "<p> collision flags defined in BKE_cloth.h </p>", 
        "friction": "<p> Friction/damping applied on contact with other object. </p>", 
        "group": "<p> Only use colliders from this group of objects </p>", 
        "loop_count": "<p> How many iterations for the collision loop. </p>", 
        "self_friction": "<p> Fiction/damping with self contact. </p>", 
        "self_loop_count": "<p> How many iterations for the selfcollision loop </p>", 
        "selfepsilon": "<p> for selfcollision </p>", 
        "vgroup_selfcol": "<p> vgroup to paint which vertices are used for self collisions </p>"
      }
    }, 
    "ClothModifierData": {
      "fields": {
        "clothObject": "<p> The internal data structure for cloth. </p>", 
        "coll_parms": "<p> definition is in {@link DNA_cloth_types.h}  </p>", 
        "hair_grid_min": "<p> grid geometry values of hair continuum </p>", 
        "hairdata": "<p> XXX nasty hack, remove once hair can be separated from cloth modifier data </p>", 
        "point_cache": "<p> definition is in {@link DNA_object_force.h}  </p>", 
        "scene": "<p> the context, time etc is here </p>", 
        "sim_parms": "<p> definition is in {@link DNA_cloth_types.h}  </p>"
      }
    }, 
    "ClothSimSettings": {
      "doc": "<p> This struct contains all the global data required to run a simulation. At the time of this writing, this structure contains data appropriate to run a simulation as described in Deformation Constraints in a Mass-Spring Model to Describe Rigid Cloth Behavior by Xavier Provot.</p><p> I've tried to keep similar, if not exact names for the variables as are presented in the paper. Where I've changed the concept slightly, as in stepsPerFrame compared to the time step in the paper, I've used variables with different names to minimize confusion. </p>", 
      "fields": {
        "avg_spring_len": "<p> used for normalized springs </p>", 
        "bending": "<p> Flexion spring stiffness. </p>", 
        "bending_damping": "<p> XXX various hair stuff should really be separate, this struct is a horrible mess alreadydamping of bending springs </p>", 
        "cache": "<p> UNUSED atm </p>", 
        "Cdis": "<p> Mechanical damping of springs. </p>", 
        "collider_friction": "<p> friction with colliders </p>", 
        "Cvi": "<p> Viscous/fluid damping. </p>", 
        "density_strength": "<p> influence of hair density </p>", 
        "density_target": "<p> minimum density for hair </p>", 
        "dt": "<p> This is the duration of our time step, computed. </p>", 
        "eff_force_scale": "<p> Scaling of effector forces (see softbody_calc_forces). </p>", 
        "eff_wind_scale": "<p> Scaling of effector wind (see softbody_calc_forces). </p>", 
        "flags": "<p> flags, see CSIMSETT_FLAGS enum above. </p>", 
        "gravity": "<p> Gravity/external force vector. </p>", 
        "mass": "<p> The mass of the entire cloth. </p>", 
        "max_bend": "<p> max bending scaling value, min is \"bending\" </p>", 
        "max_sewing": "<p> max sewing force </p>", 
        "max_shear": "<p> max shear scaling value, UNUSED </p>", 
        "max_struct": "<p> max structural scaling value, min is \"structural\" </p>", 
        "maxgoal": "<p> see SB </p>", 
        "maxspringlen": "<p> in percent!; if tearing enabled, a spring will get cut </p>", 
        "mingoal": "<p> see SB </p>", 
        "preroll": "<p><p> How many frames of simulation to do before we start. </p>\n@deprecated\n DeprecatedHow many frames of simulation to do before we start. </p>", 
        "presets": "<p> used for presets on GUI </p>", 
        "shapekey_rest": "<p> vertex group for scaling structural stiffness </p>", 
        "shear": "<p> Shear spring stiffness. </p>", 
        "shrink_max": "<p> max amount to shrink cloth by 0.0f (no shrink) - 1.0f (shrink to nothing) </p>", 
        "shrink_min": "<p> min amount to shrink cloth by 0.0f (no shrink) - 1.0f (shrink to nothing) </p>", 
        "solver_type": "<p> which solver should be used? txold </p>", 
        "stepsPerFrame": "<p> Number of time steps per frame. </p>", 
        "structural": "<p> Structural spring stiffness. </p>", 
        "time_scale": "<p> multiplies cloth speed </p>", 
        "timescale": "<p> parameter how fast cloth runs </p>", 
        "vel_damping": "<p> damp the velocity to speed up getting to the resting position </p>", 
        "velocity_smooth": "<p> smoothing of velocities for hair </p>", 
        "vgroup_bend": "<p> vertex group for scaling bending stiffness </p>", 
        "vgroup_mass": "<p> optional vertexgroup name for assigning weight. </p>", 
        "vgroup_shrink": "<p> vertex group for shrinking cloth </p>", 
        "vgroup_struct": "<p> vertex group for scaling structural stiffness </p>", 
        "voxel_cell_size": "<p> size of voxel grid cells for continuum dynamics </p>"
      }
    }, 
    "CollisionModifierData": {
      "fields": {
        "bvhtree": "<p> bounding volume hierarchy for this cloth object </p>", 
        "current_v": "<p> (xnew - x) at the actual inter-frame step </p>", 
        "current_x": "<p> position at the actual inter-frame step </p>", 
        "current_xnew": "<p> new position at the actual inter-frame step </p>", 
        "is_static": "<p> collider doesn't move this frame, i.e. x[].co==xnew[].co </p>", 
        "time_xnew": "<p> cfra time of modifier </p>", 
        "x": "<p> position at the beginning of the frame </p>", 
        "xnew": "<p> position at the end of the frame </p>", 
        "xold": "<p> unused atm, but was discussed during sprint </p>"
      }
    }, 
    "ColorBand": {
      "doc": "<p> 32 = MAXCOLORBAND note that this has to remain a single struct, for {@link UserDef}  </p>"
    }, 
    "ColorManagedColorspaceSettings": {
      "fields": {
        "name": "<p> MAX_COLORSPACE_NAME </p>"
      }
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "curve_mapping": "<p> pre-display RGB curves transform </p>", 
        "exposure": "<p> fstop exposure </p>", 
        "gamma": "<p> post-display gamma transform </p>", 
        "look": "<p> look which is being applied when displaying buffer on the screen (prior to view transform) </p>", 
        "view_transform": "<p> view transform which is being applied when displaying buffer on the screen </p>"
      }
    }, 
    "ConsoleLine": {
      "doc": "<p> Console ================================================ Console content </p>", 
      "fields": {
        "len": "<p> real len - strlen() </p>", 
        "len_alloc": "<p> keep these 3 vars so as to share free, realloc funcs allocated length </p>", 
        "type": "<p> only for use when in the 'scrollback' listbase </p>"
      }
    }, 
    "CorrectiveSmoothModifierData": {
      "fields": {
        "bind_coords": "<p> positions set during 'bind' operator use for MOD_CORRECTIVESMOOTH_RESTSOURCE_BIND </p>", 
        "bind_coords_num": "<p> note: -1 is used to bind </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "delta_cache": "<p> runtime-only cache (delta's between), delta's between the original positions and the smoothed positions </p>"
      }
    }, 
    "Curve": {
      "fields": {
        "actnu": "<p> edit, index in nurb list </p>", 
        "actvert": "<p> edit, index in active nurb ({@link BPoint}  or {@link BezTriple} ) </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "ctime": "<p> font part end current evaltime - for use by Objects parented to curves </p>", 
        "editnurb": "<p> edited data, not in file, use pointer so we can check for it </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "len": "<p> number of bytes (str - utf8) </p>", 
        "len_wchar": "<p> text data number of characters (strinfo) </p>", 
        "lines": "<p> font part </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "nurb": "<p> actual data, called splines in rna </p>", 
        "pos": "<p> copy of EditFont vars (wchar_t aligned), warning! don't use in editmode (storage only) </p>", 
        "resolu": "<p> default </p>", 
        "texflag": "<p> keep a short because of BKE_object_obdata_texspace_get() </p>", 
        "type": "<p> creation-time type of curve datablock </p>"
      }
    }, 
    "CurveMap": {
      "fields": {
        "curve": "<p> actual curve </p>", 
        "ext_out": "<p> for extrapolated curves, the direction vector </p>", 
        "maxtable": "<p> the x-axis range for the table </p>", 
        "premul_ext_in": "<p> for RGB curves, premulled extrapolation vector </p>", 
        "premultable": "<p> for RGB curves, premulled table </p>", 
        "range": "<p> quick multiply value for reading table </p>", 
        "table": "<p> display and evaluate table </p>"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "bwmul": "<p> black/white point multiply value, for speed </p>", 
        "clipr": "<p> current rect, clip rect (is default rect too) </p>", 
        "cm": "<p> max 4 builtin curves per mapping struct now </p>", 
        "cur": "<p> cur; for buttons, to show active curve </p>", 
        "sample": "<p> sample values, if flag set it draws line and intersection </p>", 
        "white": "<p> black/white point (black[0] abused for current frame) </p>"
      }
    }, 
    "CurveMapPoint": {
      "fields": {
        "shorty": "<p> shorty for result lookup </p>"
      }
    }, 
    "CurveModifierData": {
      "fields": {
        "defaxis": "<p> axis along which curve deforms </p>", 
        "name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "CustomData": {
      "doc": "<p> structure which stores custom element data associated with mesh elements (vertices, edges or faces). The custom data is organized into a series of layers, each with a data type (e.g. {@link MTFace} , {@link MDeformVert} , etc.). </p>", 
      "fields": {
        "external": "<p> external file storing customdata layers </p>", 
        "layers": "<p> CustomDataLayers, ordered by type </p>", 
        "maxlayer": "<p> number of layers, size of layers array </p>", 
        "pool": "<p> (BMesh Only): Memory pool for allocation of blocks </p>", 
        "totsize": "<p> in editmode, total size of all data layers </p>", 
        "typemap": "<p> runtime only! - maps types to indices of first layer of that type, MUST be >= CD_NUMTYPES, but we cant use a define here. Correct size is ensured in CustomData_update_typemap assert() </p>"
      }
    }, 
    "CustomDataExternal": {
      "fields": {
        "filename": "<p> FILE_MAX </p>"
      }
    }, 
    "CustomDataLayer": {
      "doc": "<p> descriptor and storage for a custom data layer </p>", 
      "fields": {
        "active": "<p> number of the active layer of this type </p>", 
        "active_clone": "<p> number of the layer to render </p>", 
        "active_mask": "<p> number of the layer to render </p>", 
        "active_rnd": "<p> number of the layer to render </p>", 
        "data": "<p> layer data </p>", 
        "flag": "<p> general purpose flag </p>", 
        "name": "<p> layer name, MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "offset": "<p> in editmode, offset of layer in block </p>", 
        "type": "<p> type of data in layer </p>", 
        "uid": "<p> shape keyblock unique id reference </p>"
      }
    }, 
    "DataTransferModifierData": {
      "fields": {
        "data_types": "<p> See DT_TYPE_ enum in ED_object.h </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "layers_select_dst": "<p> DT_MULTILAYER_INDEX_MAX; See DT_TOLAYERS_ enum in ED_object.h </p>", 
        "layers_select_src": "<p> DT_MULTILAYER_INDEX_MAX; See DT_FROMLAYERS_ enum in ED_object.h </p>", 
        "mix_mode": "<p> See CDT_MIX_ enum in BKE_customdata.h </p>", 
        "vmap_mode": "<p> See MREMAP_MODE_ enum in BKE_mesh_mapping.h </p>"
      }
    }, 
    "DecimateModifierData": {
      "fields": {
        "angle": "<p> (mode == MOD_DECIM_MODE_DISSOLVE) </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "delimit": "<p> (mode == MOD_DECIM_MODE_DISSOLVE) </p>", 
        "face_count": "<p> runtime only </p>", 
        "iter": "<p> (mode == MOD_DECIM_MODE_UNSUBDIV) </p>", 
        "percent": "<p> (mode == MOD_DECIM_MODE_COLLAPSE) </p>", 
        "symmetry_axis": "<p> (mode == MOD_DECIM_MODE_COLLAPSE) </p>"
      }
    }, 
    "DisplaceModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "strength": "<p> end {@link MappingInfoModifierData}  </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "DisplaySafeAreas": {
      "doc": "<p><hr/> \n Safe Area options used in {@link Camera}  View & VSE </p>", 
      "fields": {
        "action": "<p> Image/Graphics Safe </p>", 
        "title": "<p> each value represents the (x,y) margins as a multiplier. 'center' in this context is just the name for a different kind of safe-area Title Safe </p>", 
        "title_center": "<p> use for alternate aspect ratio </p>"
      }
    }, 
    "DriverTarget": {
      "doc": "<p> Drivers --------------------------------<mdash/><mdash/>  Driver Target (dtar)</p><p> Defines how to access a dependency needed for a driver variable. </p>", 
      "fields": {
        "flag": "<p> flags for the validity of the target (NOTE: these get reset every time the types change) </p>", 
        "id": "<p> ID-block which owns the target, no user count </p>", 
        "idtype": "<p> type of ID-block that this target can use </p>", 
        "pchan_name": "<p> name of the posebone to use (for vars where DTAR_FLAG_STRUCT_REF is used) - MAX_ID_NAME-2 </p>", 
        "rna_path": "<p> RNA path defining the setting to use (for DVAR_TYPE_SINGLE_PROP) </p>", 
        "transChan": "<p> transform channel index (for DVAR_TYPE_TRANSFORM_CHAN) </p>"
      }
    }, 
    "DriverVar": {
      "doc": "<p> Driver Variable (dvar)</p><p> A 'variable' for use as an input for the driver evaluation. Defines a way of accessing some channel to use, that can be referred to in the expression as a variable, thus simplifying expressions and also Depsgraph building. </p>", 
      "fields": {
        "curval": "<p> result of previous evaluation </p>", 
        "flag": "<p> validation tags, etc. (eDriverVar_Flags) </p>", 
        "name": "<p> name of the variable to use in py-expression (must be valid python identifier) - MAX_ID_NAME-2 </p>", 
        "num_targets": "<p> number of targets actually used by this variable </p>", 
        "targets": "<p> MAX_DRIVER_TARGETS, target slots </p>", 
        "type": "<p> type of driver variable (eDriverVar_Types) </p>"
      }
    }, 
    "DupliObject": {
      "doc": "<p> runtime only, but include here for rna access </p>", 
      "fields": {
        "particle_system": "<p> particle this dupli was generated from </p>", 
        "persistent_id": "<p> persistent identifier for a dupli object, for inter-frame matching of objects with motion blur, or inter-update matching for syncing 2*MAX_DUPLI_RECUR </p>", 
        "type": "<p> from Object.transflag </p>"
      }
    }, 
    "DynamicPaintBrushSettings": {
      "doc": "<p>{@link Brush}  settings </p>", 
      "fields": {
        "paint_ramp": "<p> color ramps Proximity paint falloff </p>", 
        "pmd": "<p> for fast RNA access </p>", 
        "vel_ramp": "<p> Velocity paint ramp </p>"
      }
    }, 
    "DynamicPaintCanvasSettings": {
      "doc": "<p> Canvas settings </p>", 
      "fields": {
        "error": "<p> Bake error description </p>", 
        "pmd": "<p> for fast RNA access </p>"
      }
    }, 
    "DynamicPaintModifierData": {
      "fields": {
        "type": "<p> ui display: canvas / brush </p>"
      }
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "canvas": "<p> for fast RNA access </p>", 
        "effect_ui": "<p> ui selection box </p>", 
        "image_output_path": "<p> 1024 = FILE_MAX </p>", 
        "influence_scale": "<p> per surface brush settings </p>", 
        "init_color": "<p> initial color </p>", 
        "init_layername": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "name": "<p> surface </p>", 
        "output_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "output_name2": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "pointcache": "<p> cache </p>", 
        "preview_id": "<p> surface output id to preview </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "wave_damping": "<p> wave settings </p>"
      }
    }, 
    "EdgeSplitModifierData": {
      "fields": {
        "split_angle": "<p> angle above which edges should be split </p>"
      }
    }, 
    "Editing": {
      "fields": {
        "act_imagedir": "<p> 1024 = FILE_MAX </p>", 
        "act_seq": "<p> Context vars, used to be static </p>", 
        "act_sounddir": "<p> 1024 = FILE_MAX </p>", 
        "proxy_dir": "<p> 1024 = FILE_MAX </p>", 
        "seqbase": "<p> pointer to the top-most seq's </p>", 
        "seqbasep": "<p> pointer to the current list of seq's being edited (can be within a meta strip) </p>"
      }
    }, 
    "EditNurb": {
      "fields": {
        "keyindex": "<p> index data for shape keys </p>", 
        "nurbs": "<p> base of nurbs' list (old Curve->editnurb) </p>", 
        "shapenr": "<p> shape key being edited </p>"
      }
    }, 
    "EffectorWeights": {
      "fields": {
        "group": "<p> only use effectors from this group of objects </p>", 
        "weight": "<p> effector type specific weights </p>"
      }
    }, 
    "EnvMap": {
      "fields": {
        "cube": "<p> these images are dynamic, not part of the main struct </p>", 
        "ima": "<p> type ENV_LOAD </p>", 
        "viewscale": "<p> viewscale is for planar envmaps to zoom in or out </p>"
      }
    }, 
    "ExplodeModifierData": {
      "fields": {
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "FCM_EnvelopeData": {
      "doc": "<p> envelope modifier - envelope data </p>", 
      "fields": {
        "f1": "<p> settings for 'min' control point </p>", 
        "f2": "<p> settings for 'max' control point </p>", 
        "max": "<p> min/max values for envelope at this point (absolute values) </p>", 
        "time": "<p> time for that this sample-point occurs </p>"
      }
    }, 
    "FCurve": {
      "doc": "<p> 'Function-Curve' - defines values over time for a given setting (fcu) </p>", 
      "fields": {
        "array_index": "<p> RNA - data link if applicable, the index of the RNA-array item to get </p>", 
        "bezt": "<p> motion data user-editable keyframes (array) </p>", 
        "color": "<p> the last-color this curve took </p>", 
        "color_mode": "<p> curve coloring (for editor) coloring method to use (eFCurve_Coloring) </p>", 
        "curval": "<p> value cache + settings value stored from last time curve was evaluated (not threadsafe, debug display only!) </p>", 
        "driver": "<p> driver settings only valid for drivers (i.e. stored in {@link AnimData}  not Actions) </p>", 
        "extend": "<p> value-extending mode for this curve (does not cover </p>", 
        "flag": "<p> user-editable settings for this curve </p>", 
        "fpt": "<p> 'baked/imported' motion samples (array) </p>", 
        "grp": "<p> group group that F-Curve belongs to </p>", 
        "modifiers": "<p> evaluation settings {@link FCurve}  Modifiers </p>", 
        "rna_path": "<p> RNA-path to resolve data-access </p>", 
        "totvert": "<p> total number of points which define the curve (i.e. size of arrays in FPoints) </p>"
      }
    }, 
    "FFMpegCodecData": {
      "fields": {
        "ffmpeg_preset": "<p> see FFMpegPreset </p>", 
        "max_b_frames": "<p> only used if FFMPEG_USE_MAX_B_FRAMES flag is set. </p>"
      }
    }, 
    "FileDirEntry": {
      "doc": "<p> Container for mere direntry, with additional asset-related data. </p>", 
      "fields": {
        "blentype": "<p>{@link ID}  type, in case typeflag has FILE_TYPE_BLENDERLIB set. </p>", 
        "entry": "<p> Either point to active variant/revision if available, or own entry (in mere filebrowser case). </p>", 
        "poin": "<p> TODO: make this a real {@link ID}  pointer? </p>", 
        "tags": "<p> Tags are for info only, most of filtering is done in asset engine. </p>", 
        "typeflag": "<p> eFileSel_File_Types </p>"
      }
    }, 
    "FileDirEntryArr": {
      "doc": "<p> Array of direntries. This struct is used in various, different contexts. In Filebrowser UI, it stores the total number of available entries, the number of visible (filtered) entries, and a subset of those in 'entries' {@link ListBase} , from idx_start (included) to idx_end (excluded). In AssetEngine context (i.e. outside of 'browsing' context), entries contain all needed data, there is no filtering, so nbr_entries_filtered, entry_idx_start and entry_idx_end should all be set to -1. </p>", 
      "fields": {
        "root": "<p> FILE_MAX </p>"
      }
    }, 
    "FileDirEntryRevision": {
      "doc": "<p> Container for a revision, only relevant in asset context. </p>", 
      "fields": {
        "size_str": "<p> Temp caching of UI-generated strings... </p>"
      }
    }, 
    "FileDirEntryVariant": {
      "doc": "<p> Container for a variant, only relevant in asset context. In case there are no variants, a single one shall exist, with NULL name/description. </p>"
    }, 
    "FileGlobal": {
      "doc": "<p>{@link FileGlobal}  stores a part of the current user-interface settings at the moment of saving, and the file-specific settings. </p>", 
      "fields": {
        "build_commit_timestamp": "<p> commit timestamp from buildinfo </p>", 
        "build_hash": "<p> hash from buildinfo </p>", 
        "filename": "<p> file path where this was saved, for recover 1024 = FILE_MAX </p>", 
        "subvstr": "<p> needs to be here, for human fileformat recognition </p>"
      }
    }, 
    "FileSelectParams": {
      "doc": "<p> File Selector ========================================== Config and Input for File Selector </p>", 
      "fields": {
        "active_file": "<p> active file used for keyboard navigation </p>", 
        "dir": "<p> directory, FILE_MAX_LIBEXTRA, 1024 + 66, this is for extreme case when 1023 length path needs to be linked in, where foo.blend/Armature need adding </p>", 
        "display": "<p> display mode flag </p>", 
        "f_fp": "<p> XXX <mdash/>  still unused <ndash/>  show font preview </p>", 
        "file": "<p> file </p>", 
        "filter": "<p> filter when (flags & FILE_FILTER) is true </p>", 
        "filter_glob": "<p> list of filetypes to filter </p>", 
        "filter_id": "<p> same as filter, but for {@link ID}  types (aka library groups). </p>", 
        "filter_search": "<p> text items' name must match to be shown. </p>", 
        "flag": "<p> settings for filter, hiding dots files,... </p>", 
        "fp_str": "<p> string to use for font preview </p>", 
        "highlight_file": "<p> file under cursor </p>", 
        "recursion_level": "<p> max number of levels in dirtree to show at once, 0 to disable recursion. </p>", 
        "renameedit": "<p> annoying but the first is only used for initialization </p>", 
        "sort": "<p> sort order </p>", 
        "title": "<p> title, also used for the text of the execute button </p>", 
        "type": "<p> short XXXXX for now store type here, should be moved to the operator </p>"
      }
    }, 
    "FluidsimModifierData": {
      "fields": {
        "fss": "<p> definition is in {@link DNA_object_fluidsim.h}  </p>", 
        "point_cache": "<p> definition is in {@link DNA_object_force.h}  </p>"
      }
    }, 
    "FluidsimSettings": {
      "fields": {
        "animRate": "<p> Simulation/flow rate control (i.e. old \"Fac-Time\") </p>", 
        "animStart": "<p> anim start end time (in seconds) </p>", 
        "bakeStart": "<p> bake start end time (in blender frames) </p>", 
        "bbStart": "<p> store start coords of axis aligned bounding box together with size values are inited during derived mesh display </p>", 
        "cpsTimeStart": "<p> Fluid control settings </p>", 
        "domainNovecgen": "<p> switch off velocity genration, volume init type for fluid/obstacles (volume=1, shell=2, both=3) </p>", 
        "farFieldSize": "<p> testing vars </p>", 
        "flag": "<p> GUI flags </p>", 
        "fmd": "<p> for fast RNA access </p>", 
        "frameOffset": "<p> offset for baked frames </p>", 
        "generateParticles": "<p> particle generation - on if >0, then determines amount (experimental...) </p>", 
        "generateTracers": "<p> number of tracers to generate </p>", 
        "grav": "<p> gravity strength </p>", 
        "gstar": "<p> g star param (LBM compressibility) </p>", 
        "guiDisplayMode": "<p> show original meshes, preview or final sim </p>", 
        "iniVelx": "<p> fluid object type settings gravity strength </p>", 
        "ipo": "<p> animated params </p>", 
        "maxRefine": "<p> activate refinement? </p>", 
        "meshVelocities": "<p> vertex velocities of simulated fluid mesh </p>", 
        "particleInfSize": "<p> particle display - size scaling, and alpha influence </p>", 
        "partSlipValue": "<p> boundary \"stickiness\" for part slip values </p>", 
        "realsize": "<p> size of the domain in real units (meters along largest resolution x, y, z extent) </p>", 
        "resolutionxyz": "<p> domain object settings resolutions </p>", 
        "show_advancedoptions": "<p> display advanced options in fluid sim tab (on=1, off=0) </p>", 
        "surfaceSmoothing": "<p> smooth fluid surface? </p>", 
        "surfaceSubdivs": "<p> number of surface subdivisions </p>", 
        "surfdataPath": "<p> store output path, and file prefix for baked fluid surface strlens; 256= FILE_MAXFILE, 768= FILE_MAXDIR </p>", 
        "threads": "<p> threadcont the calculation is done with </p>", 
        "totvert": "<p> number of vertices in simulated fluid mesh </p>", 
        "type": "<p> domain, fluid or obstacle </p>", 
        "typeFlags": "<p> additional flags depending on the type, lower short contains flags to check validity, higher short additional flags </p>", 
        "viscosityMode": "<p>\n@deprecated\n Deprecated</p>", 
        "viscosityValue": "<p> fluid properties </p>"
      }
    }, 
    "FMod_Cycles": {
      "doc": "<p> TODO: we can only do complete cycles... </p><p> cycling/repetition modifier data </p>", 
      "fields": {
        "after_cycles": "<p> number of 'cycles' after last keyframe to do </p>", 
        "after_mode": "<p> extrapolation mode to use after last keyframe </p>", 
        "before_cycles": "<p> number of 'cycles' before first keyframe to do </p>", 
        "before_mode": "<p> extrapolation mode to use before first keyframe </p>"
      }
    }, 
    "FMod_Envelope": {
      "doc": "<p> envelope-like adjustment to values (for fade in/out) </p>", 
      "fields": {
        "data": "<p> data-points defining envelope to apply (array) </p>", 
        "max": "<p> distances from 'middle-value' for 1:1 envelope influence </p>", 
        "midval": "<p> value that envelope's influence is centered around / based on </p>", 
        "totvert": "<p> number of envelope points </p>"
      }
    }, 
    "FMod_FunctionGenerator": {
      "doc": "<p> 'Built-In Function' Generator modifier data</p><p> This uses the general equation for equations: y = amplitude * fn(phase_multiplier*x + phase_offset) + y_offset</p><p> where amplitude, phase_multiplier/offset, y_offset are user-defined coefficients, x is the evaluation 'time', and 'y' is the resultant value </p>", 
      "fields": {
        "amplitude": "<p> coefficients for general equation (as above) </p>", 
        "flag": "<p> eFMod_Generator_flags </p>", 
        "type": "<p> flags eFMod_Generator_Functions </p>"
      }
    }, 
    "FMod_Generator": {
      "doc": "<p><hr/> \n Generator modifier data </p>", 
      "fields": {
        "arraysize": "<p> size of the coefficients array </p>", 
        "coefficients": "<p> general generator information coefficients array </p>", 
        "flag": "<p> settings settings </p>", 
        "mode": "<p> which 'generator' to use eFMod_Generator_Modes </p>", 
        "poly_order": "<p> order of polynomial generated (i.e. 1 for linear, 2 for quadratic) </p>"
      }
    }, 
    "FMod_Limits": {
      "doc": "<p> limits modifier data </p>", 
      "fields": {
        "flag": "<p> settings for limiting </p>", 
        "rect": "<p> rect defining the min/max values </p>"
      }
    }, 
    "FMod_Noise": {
      "doc": "<p> noise modifier data </p>"
    }, 
    "FMod_Python": {
      "doc": "<p> Python-script modifier data </p>", 
      "fields": {
        "prop": "<p> ID-properties to provide 'custom' settings </p>", 
        "script": "<p> text buffer containing script to execute </p>"
      }
    }, 
    "FMod_Stepped": {
      "doc": "<p> stepped modifier data </p>", 
      "fields": {
        "end_frame": "<p> end frame of the frame range that modifier works in </p>", 
        "flag": "<p> various settings </p>", 
        "offset": "<p> Reference frame number that stepping starts from </p>", 
        "start_frame": "<p> start frame of the frame range that modifier works in </p>", 
        "step_size": "<p> Number of frames each interpolated value should be held </p>"
      }
    }, 
    "FModifier": {
      "doc": "<p><hr/> \n F-Curve DataTypes Modifiers --------------------------------<mdash/><mdash/>  F-Curve Modifiers (fcm)</p><p> These alter the way F-Curves behave, by altering the value that is returned when evaluating the curve's data at some time (t). </p>", 
      "fields": {
        "blendin": "<p> number of frames from sfra before modifier takes full influence </p>", 
        "blendout": "<p> number of frames from efra before modifier fades out </p>", 
        "data": "<p> pointer to modifier data </p>", 
        "efra": "<p> end frame of restricted frame-range </p>", 
        "flag": "<p> settings for the modifier </p>", 
        "influence": "<p> the amount that the modifier should influence the value </p>", 
        "name": "<p> user-defined description for the modifier - MAX_ID_NAME-2 </p>", 
        "sfra": "<p> start frame of restricted frame-range </p>", 
        "type": "<p> type of f-curve modifier </p>"
      }
    }, 
    "FPoint": {
      "doc": "<p> F-Curves --------------------------------<mdash/><mdash/>  {@link FPoint}  (fpt)</p><p> This is the bare-minimum data required storing motion samples. Should be more efficient than using BPoints, which contain a lot of other unnecessary data... </p>", 
      "fields": {
        "flag": "<p> selection info </p>", 
        "vec": "<p> time + value </p>"
      }
    }, 
    "FreestyleConfig": {
      "fields": {
        "crease_angle": "<p> in radians! </p>", 
        "flags": "<p> suggestive contours, ridges/valleys, material boundaries </p>", 
        "mode": "<p> scripting, editor </p>", 
        "raycasting_algorithm": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "FreestyleLineSet": {
      "fields": {
        "exclude_edge_types": "<p> feature edge types </p>", 
        "group": "<p> group of target objects </p>", 
        "name": "<p> line set name, MAX_NAME </p>", 
        "qi": "<p> quantitative invisibility </p>", 
        "selection": "<p> selection criteria </p>"
      }
    }, 
    "FreestyleLineStyle": {
      "fields": {
        "max_angle": "<p> in radians, for splitting </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "nodetree": "<p> nodes </p>", 
        "panel": "<p> for UI </p>"
      }
    }, 
    "FSMenuEntry": {
      "doc": "<p>{@link FSMenuEntry} 's without paths indicate separators </p>", 
      "fields": {
        "name": "<p> FILE_MAXFILE </p>"
      }
    }, 
    "GameData": {
      "fields": {
        "activityBoxRadius": "<p> Radius of the activity bubble, in Manhattan length. Objects outside the box are activity-culled. </p>", 
        "dome": "<p> stereo/dome mode </p>", 
        "flag": "<p> bit 3: (gameengine): Activity culling is enabled. bit 5: (gameengine) : enable Bullet DBVT tree for view frustum culling </p>", 
        "framing": "<p> standalone player </p>", 
        "gravity": "<p> physics (it was in world) Gravitation constant for the game world </p>", 
        "lodflag": "<p>{@link Scene}  LoD </p>", 
        "occlusionRes": "<p> resolution of occlusion Z buffer in pixel </p>", 
        "vsync": "<p> Controls vsync: off, on, or adaptive (if supported) </p>"
      }
    }, 
    "GameDome": {
      "doc": "<p><hr/> \n Game Engine - Dome </p>"
    }, 
    "GameFraming": {
      "doc": "<p><hr/> \n Game Engine </p>"
    }, 
    "GameSettings": {
      "doc": "<p> Game Engine Options (old Texface mode, transp and flag) </p>"
    }, 
    "GlowVars": {
      "fields": {
        "bNoComp": "<p> SHOW/HIDE glow buffer </p>", 
        "dDist": "<p> Radius of glow blurring </p>", 
        "fBoost": "<p> Amount to multiply glow intensity </p>", 
        "fMini": "<p> Minimum intensity to trigger a glow </p>"
      }
    }, 
    "GP_BrushEdit_Settings": {
      "doc": "<p> GPencil Stroke Sculpting Settings </p>", 
      "fields": {
        "alpha": "<p> alpha factor for selection color </p>", 
        "brush": "<p> TOT_GP_EDITBRUSH_TYPES </p>", 
        "brushtype": "<p> eGP_EditBrush_Types </p>", 
        "flag": "<p> eGP_BrushEdit_SettingsFlag </p>", 
        "lock_axis": "<p> lock drawing to one axis </p>", 
        "paintcursor": "<p> runtime </p>"
      }
    }, 
    "GP_EditBrush_Data": {
      "doc": "<p> Settings for a GPencil Stroke Sculpting {@link Brush}  </p>", 
      "fields": {
        "flag": "<p> eGP_EditBrush_Flag </p>", 
        "size": "<p> radius of brush </p>", 
        "strength": "<p> strength of effect </p>"
      }
    }, 
    "GP_Interpolate_Settings": {
      "doc": "<p> Settings for GP Interpolation Operators </p>", 
      "fields": {
        "back": "<p> BEZT_IPO_BACK </p>", 
        "custom_ipo": "<p> custom interpolation curve (for use with GP_IPO_CURVEMAP) </p>", 
        "easing": "<p> eBezTriple_Easing - Easing mode (if easing equation used) </p>", 
        "flag": "<p> eGP_Interpolate_SettingsFlag </p>", 
        "period": "<p> BEZT_IPO_ELASTIC </p>", 
        "type": "<p> eGP_Interpolate_Type - Interpolation Mode </p>"
      }
    }, 
    "GPUDOFSettings": {
      "doc": "<p> properties for dof effect </p>", 
      "fields": {
        "focus_distance": "<p> focal distance for depth of field </p>"
      }
    }, 
    "GPUFXSettings": {
      "fields": {
        "fx_flag": "<p> eGPUFXFlags </p>"
      }
    }, 
    "GPUSSAOSettings": {
      "doc": "<p> properties for SSAO effect </p>", 
      "fields": {
        "samples": "<p> ray samples, we use presets here for easy control instead of </p>"
      }
    }, 
    "GridPaintMask": {
      "fields": {
        "data": "<p> The data array contains gridsize*gridsize elements </p>", 
        "level": "<p> The maximum multires level associated with this grid </p>"
      }
    }, 
    "Group": {
      "fields": {
        "gobject": "<p>{@link GroupObject}  </p>", 
        "layer": "<p> Bad design, since layers stored in the scenes '{@link Base} ' the objects that show in the group can change depending on the last used scene </p>"
      }
    }, 
    "GroupObject": {
      "fields": {
        "lampren": "<p> used while render </p>", 
        "recalc": "<p> copy of ob->recalc, used to set animated groups OK </p>"
      }
    }, 
    "HairKey": {
      "fields": {
        "co": "<p> location of hair vertex </p>", 
        "editflag": "<p> saved particled edit mode flags </p>", 
        "time": "<p> time along hair, default 0-100 </p>", 
        "weight": "<p> softbody weight </p>"
      }
    }, 
    "Histogram": {
      "fields": {
        "co": "<p> sample line only image coords src -> dst </p>"
      }
    }, 
    "HookModifierData": {
      "fields": {
        "cent": "<p> visualization of hook </p>", 
        "falloff": "<p> if not zero, falloff is distance where influence zero </p>", 
        "falloff_type": "<p> use enums from WarpModifier (exact same functionality) </p>", 
        "indexar": "<p> if NULL, it's using vertexgroup </p>", 
        "name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "parentinv": "<p> matrix making current transform unmodified </p>", 
        "subtarget": "<p> optional name of bone target, MAX_ID_NAME-2 </p>"
      }
    }, 
    "ID": {
      "doc": "<p> There's a nasty circular dependency here.... 'void *' to the rescue! I really wonder why this is needed. </p>", 
      "fields": {
        "flag": "<p> LIB_... flags report on status of the datablock this {@link ID}  belongs to (persistent, saved to and read from .blend). </p>", 
        "name": "<p> MAX_ID_NAME </p>", 
        "tag": "<p> LIB_TAG_... tags (runtime only, cleared at read time). </p>"
      }
    }, 
    "IdAdtTemplate": {
      "doc": "<p>{@link Base}  Struct for Anim -------------------------------<mdash/><mdash/>  Used for BKE_animdata_from_id() All ID-datablocks which have their own 'local' {@link AnimData}  should have the same arrangement in their structs. </p>"
    }, 
    "IDProperty": {
      "fields": {
        "data": "<p> note, alignment for 64 bits </p>", 
        "len": "<p> array length, also (this is important!) string length + 1. the idea is to be able to reuse array realloc functions on strings. </p>", 
        "name": "<p> MAX_IDPROP_NAME </p>", 
        "saved": "<p> saved is used to indicate if this struct has been saved yet. seemed like a good idea as a pad var was needed anyway :) </p>", 
        "totallen": "<p> Strings and arrays are both buffered, though the buffer isn't saved. totallen is total length of allocated array/string, including a buffer. Note that the buffering is mild; the code comes from python's list implementation. </p>"
      }
    }, 
    "IDPropertyData": {
      "fields": {
        "val2": "<p> note, we actually fit a double into these two ints </p>"
      }
    }, 
    "Image": {
      "fields": {
        "anims": "<p> sources from: </p>", 
        "aspx": "<p> display aspect - for UV editing images resized for faster openGL display </p>", 
        "bindcode": "<p> only for current image... 2 = TEXTARGET_COUNT </p>", 
        "cache": "<p> not written in file </p>", 
        "colorspace_settings": "<p> color management </p>", 
        "eye": "<p> Multiview for viewer node stereoscopy </p>", 
        "gen_x": "<p> for generated images </p>", 
        "gputexture": "<p> not written in file 2 = TEXTARGET_COUNT </p>", 
        "lastupdate": "<p> game engine tile animation </p>", 
        "name": "<p> file path, 1024 = FILE_MAX </p>", 
        "packedfile": "<p><p> deprecated </p>\n@deprecated\n Deprecateddeprecated </p>", 
        "render_slots": "<p> 8 = IMA_MAX_RENDER_SLOT </p>", 
        "renders": "<p> IMA_MAX_RENDER_SLOT </p>", 
        "repbind": "<p> for repeat of parts of images </p>", 
        "tpageflag": "<p> texture page </p>", 
        "views": "<p>{@link ImageView}  </p>"
      }
    }, 
    "ImageFormatData": {
      "doc": "<p><hr/> \n Generic image format settings, this is used for {@link NodeImageFile}  and IMAGE_OT_save_as operator too.</p><p> note: its a bit strange that even though this is an image format struct the imtype can still be used to select video formats. RNA ensures these enum's are only selectable for render output. </p>", 
      "fields": {
        "cineon_flag": "<p> Cineon </p>", 
        "compress": "<p> (0 - 100), eg: png compression </p>", 
        "depth": "<p> note, video types should only ever be set from this structure when used from {@link RenderData}  bits per channel, R_IMF_CHAN_DEPTH_8 -> 32, not a flag, only set 1 at a time </p>", 
        "exr_codec": "<p><mdash/>  format specific <mdash/>  OpenEXR </p>", 
        "flag": "<p> generic options for all image types, alpha zbuffer </p>", 
        "imtype": "<p> R_IMF_IMTYPE_PNG, R_... </p>", 
        "jp2_flag": "<p> Jpeg2000 </p>", 
        "planes": "<p><ul><li><p> R_IMF_PLANES_BW, R_IMF_PLANES_RGB, R_IMF_PLANES_RGBA </p></li></ul> \nR_IMF_PLANES_BW, R_IMF_PLANES_RGB, R_IMF_PLANES_RGBA \n</p>", 
        "quality": "<p> (0 - 100), eg: jpeg quality </p>", 
        "tiff_codec": "<p> TIFF </p>", 
        "view_settings": "<p> color management </p>", 
        "views_format": "<p> Multiview </p>"
      }
    }, 
    "ImagePackedFile": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "ImagePaintSettings": {
      "doc": "<p><hr/> \n {@link Image}  {@link Paint}  Texture/Image Editor </p>", 
      "fields": {
        "canvas": "<p> canvas when the explicit system is used for painting </p>", 
        "clone": "<p> clone layer for image mode for projective texture painting </p>", 
        "dither": "<p> dither amount used when painting on byte images </p>", 
        "mode": "<p> mode used for texture painting </p>", 
        "paintcursor": "<p> wm handle </p>", 
        "screen_grab_size": "<p> capture size for re-projection </p>", 
        "seam_bleed": "<p> for projection painting only </p>", 
        "stencil": "<p> workaround until we support true layer masks </p>"
      }
    }, 
    "ImageUser": {
      "doc": "<p>{@link ImageUser}  is in Texture, in Nodes, Background {@link Image} , {@link Image}  Window, .... should be used in conjunction with an {@link ID}  * to {@link Image} . </p>", 
      "fields": {
        "cycl": "<p> fields/image in movie, cyclic flag </p>", 
        "framenr": "<p> movies, sequences: current to display </p>", 
        "frames": "<p> total amount of frames to use </p>", 
        "layer": "<p> listbase indices, for menu browsing or retrieve buffer </p>", 
        "multiview_eye": "<p> multiview current eye - for internal use of drawing routines </p>", 
        "scene": "<p> to retrieve render result </p>", 
        "sfra": "<p> offset within movie, start frame in global time </p>"
      }
    }, 
    "ImageView": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "Ipo": {
      "doc": "<p><mdash/>  ID-Datablock <mdash/>  IPO Data-Block </p>", 
      "fields": {
        "cur": "<p> Rect defining extents of keyframes? </p>", 
        "curve": "<p> A list of {@link IpoCurve}  structs in a linked list. </p>", 
        "pad": "<p> muteipo: either 0 or 1 (whether ipo block is muted) </p>", 
        "showkey": "<p> blocktype: self-explanatory; showkey: either 0 or 1 (show vertical yellow lines for editing) </p>"
      }
    }, 
    "IpoCurve": {
      "doc": "<p><mdash/>  IPO {@link Curve}  <mdash/>  IPO {@link Curve}  </p>", 
      "fields": {
        "bezt": "<p> array of BezTriples (sizeof(BezTriple) * totvert) - i.e. user-editable keyframes </p>", 
        "bitmask": "<p> ??? </p>", 
        "bp": "<p> array of BPoints (sizeof(BPoint) * totvert) - i.e. baked/imported data </p>", 
        "curval": "<p> value of ipo-curve for current frame </p>", 
        "driver": "<p> pointer to ipo-driver for this curve </p>", 
        "extrap": "<p> interpolation and extrapolation modes </p>", 
        "rt": "<p> flag= settings; rt= ??? </p>", 
        "slide_max": "<p> minimum/maximum values for sliders (in action editor) </p>", 
        "totrct": "<p> bounding boxes </p>", 
        "totvert": "<p> total number of BezTriples (i.e. keyframes) on curve </p>", 
        "vartype": "<p> blocktype= ipo-blocktype; adrcode= type of ipo-curve; vartype= 'format' of data </p>", 
        "ymax": "<p> minimum/maximum y-extents for curve </p>"
      }
    }, 
    "IpoDriver": {
      "doc": "<p> -----------------<mdash/><mdash/><mdash/>  Type Defines ------------------<mdash/><mdash/><mdash/>  <mdash/>  IPO {@link Curve}  Driver <mdash/>  IPO {@link Curve}  Driver </p>", 
      "fields": {
        "adrcode": "<p> sub-channel to use </p>", 
        "flag": "<p> driver settings </p>", 
        "name": "<p> bone, or python expression here </p>", 
        "ob": "<p> target/driver ob </p>"
      }
    }, 
    "Key": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "block": "<p> list of {@link KeyBlock} 's </p>", 
        "ctime": "<p> only used when (Key->type == KEY_NORMAL), this value is used as a time slider, rather then using the scenes time, this value can be animated to give greater control </p>", 
        "elemsize": "<p> size of each element in {@link KeyBlock.data} , use for allocation and stride </p>", 
        "elemstr": "<p> this is not a regular string, although it is \\0 terminated this is an array of (element_array_size, element_type) pairs (each one char) used for calculating shape key-blocks </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "refkey": "<p><em></em>  'key->block.first', perhaps later on it could be defined as some other {@link KeyBlock}  - campbell </p>", 
        "totkey": "<p> (totkey == BLI_listbase_count(&key->block)) </p>", 
        "type": "<p> absolute or relative shape key </p>", 
        "uidgen": "<p> can never be 0, this is used for detecting old data current free uid for keyblocks </p>"
      }
    }, 
    "KeyBlock": {
      "fields": {
        "curval": "<p> influence (typically [0 - 1] but can be more), (Key->type == KEY_RELATIVE) only. </p>", 
        "data": "<p> array of shape key values, size is (Key->elemsize * KeyBlock->totelem) </p>", 
        "name": "<p> MAX_NAME (unique name, user assigned) </p>", 
        "pos": "<p> point in time (Key->type == KEY_NORMAL) only, for historic reasons this is relative to (Key->ctime / 100), so this value increments by 0.1f per frame. </p>", 
        "relative": "<p> relative == 0 means first key is reference, otherwise the index of Key->blocks </p>", 
        "slidermin": "<p> ranges, for RNA and UI only to clamp 'curval' </p>", 
        "totelem": "<p> total number if items in the keyblock (compare with mesh/curve verts to check we match) </p>", 
        "type": "<p> interpolation type (Key->type == KEY_NORMAL) only. </p>", 
        "uid": "<p> for meshes only, match the unique number with the customdata layer </p>", 
        "vgroup": "<p> MAX_VGROUP_NAME (optional vertex group), array gets allocated into 'weights' when set </p>"
      }
    }, 
    "KeyingSet": {
      "doc": "<p><hr/> \n {@link KeyingSet}  definition (ks)</p><p> A {@link KeyingSet}  defines a group of properties that should be keyframed together, providing a convenient way for animators to insert keyframes without resorting to Auto-Keyframing.</p><p> A few 'generic' (non-absolute and dependent on templates) KeyingSets are defined 'built-in' to facilitate easy animating for the casual animator without the need to add extra steps to the rigging process. </p>", 
      "fields": {
        "active_path": "<p> index of the active path </p>", 
        "description": "<p> (RNA_DYN_DESCR_MAX) short help text. </p>", 
        "flag": "<p> settings for {@link KeyingSet}  </p>", 
        "idname": "<p> unique name (for search, etc.) - MAX_ID_NAME-2 </p>", 
        "keyingflag": "<p> (eInsertKeyFlags) settings to supply insertkey() with </p>", 
        "keyingoverride": "<p> (eInsertKeyFlags) for each flag set, the relevant keyingflag bit overrides the default </p>", 
        "name": "<p> user-viewable name for {@link KeyingSet}  (for menus, etc.) - MAX_ID_NAME-2 </p>", 
        "paths": "<p> ({@link KS_Path} ) paths to keyframe to </p>", 
        "typeinfo": "<p> name of the typeinfo data used for the relative paths - MAX_ID_NAME-2 </p>"
      }
    }, 
    "KS_Path": {
      "doc": "<p><hr/> \n {@link KeyingSet}  Datatypes {@link Path}  for use in {@link KeyingSet}  definitions (ksp)</p><p> Paths may be either specific (specifying the exact sub-ID dynamic data-block - such as PoseChannels - to act upon, ala Maya's 'Character Sets' and XSI's 'Marking Sets'), or they may be generic (using various placeholder template tags that will be replaced with appropriate information from the context). </p>", 
      "fields": {
        "array_index": "<p> index that path affects </p>", 
        "flag": "<p> various settings, etc. </p>", 
        "group": "<p> name of the group to add to - MAX_ID_NAME-2 </p>", 
        "groupmode": "<p> group naming (eKSP_Grouping) </p>", 
        "id": "<p>{@link ID}  block that keyframes are for </p>", 
        "idtype": "<p> -type that path can be used on </p>", 
        "keyingflag": "<p> (eInsertKeyFlags) settings to supply insertkey() with </p>", 
        "keyingoverride": "<p> (eInsertKeyFlags) for each flag set, the relevant keyingflag bit overrides the default </p>", 
        "rna_path": "<p> dynamically (or statically in the case of predefined sets) path </p>"
      }
    }, 
    "Lamp": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "att2": "<p> Quad1 and Quad2 attenuation </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "nodetree": "<p> nodes </p>", 
        "preview": "<p> preview </p>", 
        "shadow_frustum_size": "<p> BGE Only </p>", 
        "sun_effect_type": "<p> sun/sky </p>", 
        "texact": "<p> texact is for buttons </p>"
      }
    }, 
    "LaplacianDeformModifierData": {
      "fields": {
        "anchor_grp_name": "<p> MAX_VGROUP_NAME </p>", 
        "cache_system": "<p> runtime only </p>"
      }
    }, 
    "LaplacianSmoothModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "Lattice": {
      "fields": {
        "actbp": "<p> active element index, unset with LT_ACTBP_NONE </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "vgroup": "<p> multiply the influence, MAX_VGROUP_NAME </p>"
      }
    }, 
    "LatticeModifierData": {
      "fields": {
        "name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "Library": {
      "doc": "<p> For each library file used, a {@link Library}  struct is added to Main WARNING: readfile.c, expand_doit() reads this struct without DNA check! </p>", 
      "fields": {
        "filepath": "<p> absolute filepath, this is only for convenience, 'name' is the real path used on file read but in some cases its useful to access the absolute one. This is set on file read. Use BKE_library_filepath_set() rather than setting 'name' directly and it will be kept in sync - campbell </p>", 
        "name": "<p> path name used for reading, can be relative and edited in the outliner </p>", 
        "parent": "<p> set for indirectly linked libs, used in the outliner and while reading </p>", 
        "subversionfile": "<p> see BLENDER_VERSION, BLENDER_SUBVERSION, needed for do_versions </p>", 
        "temp_index": "<p> Temp data needed by read/write code. </p>"
      }
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "doc": "<p> Along Stroke modifiers </p>"
    }, 
    "LineStyleColorModifier_CreaseAngle": {
      "doc": "<p> Crease Angle modifiers </p>"
    }, 
    "LineStyleColorModifier_Curvature_3D": {
      "doc": "<p> 3D curvature modifiers </p>"
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "doc": "<p> Distance from {@link Camera}  modifiers </p>"
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "doc": "<p> Distance from {@link Object}  modifiers </p>"
    }, 
    "LineStyleColorModifier_Noise": {
      "doc": "<p> Noise modifiers (for color, alpha and thickness) </p>"
    }, 
    "LineStyleColorModifier_Tangent": {
      "doc": "<p> Tangent modifiers </p>"
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "fields": {
        "angle": "<p> in radians! </p>"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "fields": {
        "angle": "<p> in radians! </p>"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "fields": {
        "angle": "<p> in radians! </p>"
      }
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "doc": "<p> Geometry modifiers </p>"
    }, 
    "LineStyleModifier": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "doc": "<p> Calligraphic thickness modifier </p>", 
      "fields": {
        "orientation": "<p> in radians! </p>"
      }
    }, 
    "Link": {
      "doc": "<p> generic - all structs which are put into linked lists begin with this </p>"
    }, 
    "LinkData": {
      "doc": "<p> simple subclass of {@link Link} <ndash/> use this when it is not worth defining a custom one... </p>"
    }, 
    "ListBase": {
      "doc": "<p> never change the size of this! genfile.c detects pointerlen with it </p>"
    }, 
    "MappingInfoModifierData": {
      "doc": "<p> not a real modifier </p>", 
      "fields": {
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "Mask": {
      "fields": {
        "efra": "<p> frames, used by the sequencer </p>", 
        "flag": "<p> for anim info </p>", 
        "masklay_act": "<p> index of active mask layer (-1 == None) </p>", 
        "masklay_tot": "<p> total number of mask layers </p>", 
        "masklayers": "<p> mask layers </p>"
      }
    }, 
    "MaskLayer": {
      "fields": {
        "act_point": "<p> active point </p>", 
        "act_spline": "<p> active spline </p>", 
        "alpha": "<p> blending options </p>", 
        "flag": "<p> for animation </p>", 
        "name": "<p> name of the mask layer (64 = MAD_ID_NAME - 2) </p>", 
        "restrictflag": "<p> matching '{@link Object} ' flag of the same name - eventually use in the outliner </p>", 
        "splines": "<p> list of splines which defines this mask layer </p>"
      }
    }, 
    "MaskLayerShape": {
      "doc": "<p> one per frame </p>", 
      "fields": {
        "data": "<p> u coordinate along spline segment and weight of this point </p>", 
        "flag": "<p> animation flag </p>", 
        "frame": "<p> different flags of this point </p>", 
        "tot_vert": "<p> to ensure no buffer overruns's: alloc size is (tot_vert * MASK_OBJECT_SHAPE_ELEM_SIZE) </p>"
      }
    }, 
    "MaskModifierData": {
      "doc": "<p>{@link Mask}  Modifier </p>", 
      "fields": {
        "flag": "<p> flags for various things </p>", 
        "mode": "<p> using armature or hardcoded vgroup </p>", 
        "ob_arm": "<p> armature to use to in place of hardcoded vgroup </p>", 
        "vgroup": "<p> name of vertex group to use to mask, MAX_VGROUP_NAME </p>"
      }
    }, 
    "MaskParent": {
      "fields": {
        "id": "<p>{@link ID}  block of entity to which mask/spline is parented to in case of parenting to movie tracking data set to {@link MovieClip}  datablock </p>", 
        "id_type": "<p> int flag; // parenting flags  // not used  </p><p> type of parenting </p>", 
        "parent": "<p> entity of parent to which parenting happened in case of parenting to movie tracking data contains name of layer </p>", 
        "parent_corners_orig": "<p> Original corners of plane track at the moment of parenting </p>", 
        "parent_orig": "<p> track location at the moment of parenting, stored in mask space </p>", 
        "sub_parent": "<p> sub-entity of parent to which parenting happened in case of parenting to movie tracking data contains name of track </p>", 
        "type": "<p> type of parenting </p>"
      }
    }, 
    "MaskSpaceInfo": {
      "fields": {
        "draw_flag": "<p> draw options </p>", 
        "mask": "<p> **** mask editing **** </p>"
      }
    }, 
    "MaskSpline": {
      "fields": {
        "flag": "<p> defferent spline flag (closed, ...) </p>", 
        "offset_mode": "<p> feather offset method </p>", 
        "parent": "<p> parenting information of the whole spline </p>", 
        "points": "<p> points which defines spline itself </p>", 
        "points_deform": "<p> deformed copy of 'points' {@link BezTriple}  data - not saved </p>", 
        "tot_point": "<p> total number of points </p>", 
        "weight_interp": "<p> weight interpolation </p>"
      }
    }, 
    "MaskSplinePoint": {
      "fields": {
        "bezt": "<p> actual point coordinates and it's handles </p>", 
        "parent": "<p> parenting information of particular spline point </p>", 
        "tot_uw": "<p> number of uv feather values </p>", 
        "uw": "<p> feather UV values </p>"
      }
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "flag": "<p> different flags of this point </p>", 
        "w": "<p> u coordinate along spline segment and weight of this point </p>"
      }
    }, 
    "Material": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "diff_shader": "<p> shaders </p>", 
        "filter": "<p> filter added, for raytrace transparency and transmissivity </p>", 
        "friction": "<p> dynamic properties </p>", 
        "gpumaterial": "<p> runtime </p>", 
        "group": "<p> light group </p>", 
        "index": "<p> custom index for render passes </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "lbias": "<p> factor to multiply lampbias with (0.0 = no mult) </p>", 
        "line_col": "<p> Freestyle line settings </p>", 
        "mapflag": "<p> mapping </p>", 
        "mapto_textured": "<p> render-time cache to optimize texture lookups </p>", 
        "ml_flag": "<p> ml_flag is for disable base material </p>", 
        "mode2_l": "<p> additional mode flags </p>", 
        "mode_l": "<p> mode_l is the or-ed result of all layer modes </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "nmap_tangent_names": "<p> multiple tangent (Normal Map node) [MAX_MTFACE+1][MAX_NAME]; +1 for empty name </p>", 
        "paint_active_slot": "<p> texture painting </p>", 
        "param": "<p> XXX param[4] needs review and improvement (shader system as whole anyway) This is nasty reused variable for different goals and not easy to RNAify nicely. -jesterKing size, smooth, size, smooth, for toonshader, 0 (fac) and 1 (fresnel) also for fresnel shader </p>", 
        "r": "<p> note, keep this below synced with render_types.h </p>", 
        "ramp_col": "<p> ramp colors </p>", 
        "rgbsel": "<p> for buttons and render </p>", 
        "sbias": "<p> shadow bias to prevent terminator prob </p>", 
        "shad_alpha": "<p> in use for irregular shadowbuffer </p>", 
        "shade_flag": "<p> like Cubic interpolation </p>", 
        "shadowonly_flag": "<p> \"shadowsonly\" type </p>", 
        "sss_radius": "<p> subsurface scattering </p>", 
        "strand_uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "texco": "<p> runtime - OR'd from 'mtex' </p>", 
        "texpaintslot": "<p> cached slot for painting. Make sure to recalculate before use with refresh_texpaint_image_cache </p>", 
        "vol": "<p> end synced with render_types.h </p>"
      }
    }, 
    "MCol": {
      "doc": "<p> tessellation vertex color data. at the moment alpha is abused for vertex painting and not used for transparency, note that red and blue are swapped </p>"
    }, 
    "MDeformVert": {
      "fields": {
        "flag": "<p> flag only in use for weightpaint now </p>"
      }
    }, 
    "MDisps": {
      "fields": {
        "hidden": "<p> Used for hiding parts of a multires mesh. Essentially the multires equivalent of MVert.flag's ME_HIDE bit. NOTE: This is a bitmap, keep in sync with type used in BLI_bitmap.h </p>", 
        "totdisp": "<p> Strange bug in {@link SDNA} : if disps pointer comes first, it fails to see totdisp </p>"
      }
    }, 
    "Mesh": {
      "fields": {
        "act_face": "<p> END BMESH ONLY the last selected vertex/edge/face are used for the active face however this means the active face must always be selected, this is to keep track of the last selected face and is similar to the old active face flag where the face does not need to be selected, -1 is inactive </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "cd_flag": "<p> customdata flag, for bevel-weight and crease, which are now optional </p>", 
        "dvert": "<p> deformgroup vertices </p>", 
        "edit_btmesh": "<p> When the object is available, the preferred access method is: BKE_editmesh_from_object(ob) not saved in file! </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "ldata": "<p> BMESH ONLY </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "mcol": "<p> array of colors for the tessellated faces, must be number of tessellated faces * 4 in length </p>", 
        "medge": "<p> array of edges </p>", 
        "mface": "<p> END BMESH ONLY mface stores the tessellation (triangulation) of the mesh, real faces are now stored in nface. array of mesh object mode faces for tessellation </p>", 
        "mpoly": "<p> BMESH ONLY new face structures </p>", 
        "mr": "<p><p> deprecated multiresolution modeling data, only keep for loading old files </p>\n@deprecated\n Deprecateddeprecated multiresolution modeling data, only keep for loading old files </p>", 
        "mtface": "<p> store tessellation face UV's and texture here </p>", 
        "mvert": "<p> array of verts </p>", 
        "subdiv": "<p>\n@deprecated\n Deprecated</p>", 
        "subdivr": "<p>\n@deprecated\n Deprecated</p>", 
        "subsurftype": "<p><p> only kept for backwards compat, not used anymore </p>\n@deprecated\n Deprecatedonly kept for backwards compat, not used anymore </p>", 
        "tface": "<p><p> deprecated, use mtface </p>\n@deprecated\n Deprecateddeprecated, use mtface </p>", 
        "totpoly": "<p> BMESH ONLY </p>", 
        "totvert": "<p> END BMESH ONLY </p>"
      }
    }, 
    "MeshCacheModifierData": {
      "doc": "<p> cache modifier </p>", 
      "fields": {
        "eval_frame": "<p> play_mode == MOD_MESHCACHE_PLAY_EVAL we could use one float for all these but their purpose is very different </p>", 
        "filepath": "<p> FILE_MAX </p>", 
        "forward_axis": "<p> axis conversion </p>", 
        "frame_start": "<p> play_mode == MOD_MESHCACHE_PLAY_CFEA </p>", 
        "type": "<p> file format </p>"
      }
    }, 
    "MeshDeformModifierData": {
      "fields": {
        "bindcagecos": "<p> coordinates that cage was bound with </p>", 
        "bindcos": "<p> deprecated storage of cage coords </p>", 
        "bindfunc": "<p> runtime </p>", 
        "bindinfluences": "<p> result of static binding influences </p>", 
        "bindmat": "<p> matrix of cage at binding time </p>", 
        "bindoffsets": "<p> offsets into influences array </p>", 
        "bindweights": "<p> deprecated storage deprecated inefficient storage </p>", 
        "defgrp_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "dyncellmin": "<p> offset of the dynamic bind grid </p>", 
        "dyncellwidth": "<p> width of dynamic bind cell </p>", 
        "dyngrid": "<p> result of dynamic binding grid with dynamic binding cell points </p>", 
        "dyngridsize": "<p> size of the dynamic bind grid </p>", 
        "dyninfluences": "<p> dynamic binding vertex influences </p>", 
        "dynverts": "<p> is this vertex bound or not? </p>", 
        "object": "<p> mesh object </p>", 
        "totcagevert": "<p> total vertices in mesh and cage </p>", 
        "totinfluence": "<p> total number of vertex influences </p>"
      }
    }, 
    "MeshSeqCacheModifierData": {
      "fields": {
        "object_path": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "MeshStatVis": {
      "doc": "<p><hr/> \n Stats Stats for Meshes </p>", 
      "fields": {
        "distort_min": "<p> distort </p>", 
        "overhang_axis": "<p> overhang </p>", 
        "sharp_min": "<p> sharp </p>", 
        "thickness_min": "<p> thickness </p>"
      }
    }, 
    "MetaBall": {
      "fields": {
        "editelems": "<p> not saved in files, note we use pointer for editmode check </p>", 
        "flag2": "<p> flag is enum for updates, flag2 is bitflags for settings </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "lastelem": "<p> used in editmode {@link ListBase}  edit_elems; </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "mat": "<p> material of the mother ball will define the material used of all others </p>", 
        "pad": "<p> used to store MB_AUTOSPACE </p>", 
        "rendersize": "<p> display and render res </p>", 
        "thresh": "<p> bias elements to have an offset volume. mother ball changes will effect other objects thresholds, but these may also have their own thresh as an offset </p>"
      }
    }, 
    "MetaElem": {
      "fields": {
        "bb": "<p> Bound Box of {@link MetaElem}  </p>", 
        "expx": "<p> dimension parameters, used for some types like cubes </p>", 
        "imat": "<p> matrix and inverted matrix </p>", 
        "len": "<p> old, only used for backwards compat. use dimensions now </p>", 
        "quat": "<p> Rotation of {@link MetaElem}  (MUST be kept normalized) </p>", 
        "rad": "<p> radius of the meta element </p>", 
        "rad2": "<p> temp field, used only while processing </p>", 
        "s": "<p> stiffness, how much of the element to fill </p>", 
        "z": "<p> Position of center of {@link MetaElem}  </p>"
      }
    }, 
    "MetaStack": {
      "fields": {
        "disp_range": "<p> the startdisp/enddisp when entering the meta </p>"
      }
    }, 
    "MFace": {
      "doc": "<p> tessellation face, see MLoop/MPoly for the real face data </p>", 
      "fields": {
        "flag": "<p> we keep edcode, for conversion to edges draw flags in old files </p>"
      }
    }, 
    "MFloatProperty": {
      "doc": "<p> Custom Data Properties </p>"
    }, 
    "MirrorModifierData": {
      "fields": {
        "axis": "<p><p> deprecated, use flag instead </p>\n@deprecated\n Deprecateddeprecated, use flag instead </p>"
      }
    }, 
    "MLoop": {
      "doc": "<p> the e here is because we want to move away from relying on edge hashes. </p>", 
      "fields": {
        "e": "<p> edge index </p>", 
        "v": "<p> vertex index </p>"
      }
    }, 
    "MLoopCol": {
      "doc": "<p><em></em>  be initialized to 255 Mostly its not used for transparency... (except for blender-internal rendering, see [#34096]).</p><p><h2>Note</h2><p><em></em>  swapped, as they are with {@link MCol}  </p> red and blue are not swapped, as they are with MCol \n</p>"
    }, 
    "MLoopTri": {
      "doc": "<p>{@link MLoopTri} 's are lightweight triangulation data, for functionality that doesn't support ngons ({@link MPoly} ). This is cache data created from ({@link MPoly} , {@link MLoop}  & {@link MVert}  arrays). There is no attempt to maintain this data's validity over time, any changes to the underlying mesh invalidate the {@link MLoopTri}  array, which will need to be re-calculated.</p><p> Users normally access this via #DerivedMesh.getLoopTriArray. In rare cases its calculated directly, with #BKE_mesh_recalc_looptri.</p><p> Typical usage includes:<ul><li><p> OpenGL drawing.</p></li><li><p> #BVHTree creation.</p></li><li><p> Physics/collision detection.</p></li></ul> \nOpenGL drawing.#BVHTree creation.Physics/collision detection.\n</p><p> Storing loop indices (instead of vertex indices) allows us to directly access UV's, vertex-colors as well as vertices. The index of the source polygon is stored as well, giving access to materials and polygon normals.</p><p><h2>Note</h2><p> This data is runtime only, never written to disk.</p> This data is runtime only, never written to disk.\nUsage examples: <code>       material. ///accessoriginalmaterial.\n short short       mpoly[lt->poly].mat_nr; mat_nr=mpoly[lt->poly].mat_nr;\n\n       locations. ///accessvertexlocations.\n float float       { *vtri_co[3]={\n         mvert[mloop[lt->tri[0]].v].co, mvert[mloop[lt->tri[0]].v].co,\n         mvert[mloop[lt->tri[1]].v].co, mvert[mloop[lt->tri[1]].v].co,\n         mvert[mloop[lt->tri[2]].v].co, mvert[mloop[lt->tri[2]].v].co,\n }; };\n\n                       etc). ///accessUVcoordinates(worksforallloopdata,vertexcolors...etc).\n float float       { *uvtri_co[3]={\n         mloopuv[lt->tri[0]].uv, mloopuv[lt->tri[0]].uv,\n         mloopuv[lt->tri[1]].uv, mloopuv[lt->tri[1]].uv,\n         mloopuv[lt->tri[2]].uv, mloopuv[lt->tri[2]].uv,\n }; };\n</code> ///accessoriginalmaterial.\nshortmat_nr=mpoly[lt->poly].mat_nr;\n\n///accessvertexlocations.\nfloat*vtri_co[3]={\nmvert[mloop[lt->tri[0]].v].co,\nmvert[mloop[lt->tri[1]].v].co,\nmvert[mloop[lt->tri[2]].v].co,\n};\n\n///accessUVcoordinates(worksforallloopdata,vertexcolors...etc).\nfloat*uvtri_co[3]={\nmloopuv[lt->tri[0]].uv,\nmloopuv[lt->tri[1]].uv,\nmloopuv[lt->tri[2]].uv,\n};\n</p><p>{@link MLoopTri} 's are allocated in an array, where each polygon's {@link MLoopTri} 's are stored contiguously, the number of triangles for each polygon is guaranteed to be ({@link MPoly.totloop}  - 2), even for degenerate geometry. See {@link ME_POLY_TRI_TOT}  macro.</p><p> It's also possible to perform a reverse lookup (find all {@link MLoopTri} 's for any given {@link MPoly} ).</p><p><code>                   i ///loopoveralllooptri'sforagivenpolygon:i\n{@link MPoly}       &mpoly[i]; *mp=&mpoly[i];\n{@link MLoopTri}         mp->{@link loopstart} )]; MLoopTri*lt=&looptri[poly_to_tri_count(i,mp->loopstart)];\n int int        {@link ME_POLY_TRI_TOT} (mp); j,lt_tot=ME_POLY_TRI_TOT(mp);\n\n for for                   { (j=0;j<lt_tot;j++,lt++){\n         unsigned unsigned   int int       { vtri[3]={\n                 mloop[lt->tri[0]].v, mloop[lt->tri[0]].v,\n                 mloop[lt->tri[1]].v, mloop[lt->tri[1]].v,\n                 mloop[lt->tri[2]].v, mloop[lt->tri[2]].v,\n         }; };\n         printf( printf(       %u\\n\" \"tri%u%u%u\\n\"       vtri[2]); ,vtri[0],vtri[1],vtri[2]);\n }; };\n</code> ///loopoveralllooptri'sforagivenpolygon:i\nMPoly*mp=&mpoly[i];\nMLoopTri*lt=&looptri[poly_to_tri_count(i,mp->loopstart)];\nintj,lt_tot=ME_POLY_TRI_TOT(mp);\n\nfor(j=0;j<lt_tot;j++,lt++){\nunsignedintvtri[3]={\nmloop[lt->tri[0]].v,\nmloop[lt->tri[1]].v,\nmloop[lt->tri[2]].v,\n};\nprintf(\"tri%u%u%u\\n\",vtri[0],vtri[1],vtri[2]);\n};\n</p><p> It may also be useful to check whether or not two vertices of a triangle form an edge in the underlying mesh.</p><p> This can be done by checking the edge of the referenced loop ({@link MLoop.e} ), the winding of the {@link MLoopTri}  and the {@link MLoop} 's will always match, however the order of vertices in the edge is undefined.</p><p><code>               lt ///printrealedgesfromanMLoopTri:lt\n int int     j_next; j,j_next;\n for for                           { (j=2,j_next=0;j_next<3;j=j_next++){\n        {@link MEdge}       &medge[mloop[lt->tri[j]].e]; *ed=&medge[mloop[lt->tri[j]].e];\n         unsigned unsigned   int int           mloop[lt->tri[j_next]].v}; tri_edge[2]={mloop[lt->tri[j]].v,mloop[lt->tri[j_next]].v};\n\n         if if                 || (((ed->v1==tri_edge[0])&&(ed->v1==tri_edge[1]))||\n                             tri_edge[0]))) ((ed->v1==tri_edge[1])&&(ed->v1==tri_edge[0])))\n         { {\n                 printf( printf(         %u\\n\" \"realedgefound%u%u\\n\"     tri_edge[1]); ,tri_edge[0],tri_edge[1]);\n         } }\n } }\n</code> ///printrealedgesfromanMLoopTri:lt\nintj,j_next;\nfor(j=2,j_next=0;j_next<3;j=j_next++){\nMEdge*ed=&medge[mloop[lt->tri[j]].e];\nunsignedinttri_edge[2]={mloop[lt->tri[j]].v,mloop[lt->tri[j_next]].v};\n\nif(((ed->v1==tri_edge[0])&&(ed->v1==tri_edge[1]))||\n((ed->v1==tri_edge[1])&&(ed->v1==tri_edge[0])))\n{\nprintf(\"realedgefound%u%u\\n\",tri_edge[0],tri_edge[1]);\n}\n}\n</p><p><h2>Note</h2><p> A {@link MLoopTri}<b></b>  edges. </p> A MLoopTri may be in the middle of an ngon and not reference any edges. \n</p>"
    }, 
    "ModifierData": {
      "fields": {
        "name": "<p> MAX_NAME </p>", 
        "scene": "<p> XXX for timing info set by caller... solve later? (ton) </p>"
      }
    }, 
    "MovieClip": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "anim": "<p> movie source data </p>", 
        "aspy": "<p> display aspect </p>", 
        "cache": "<p> cache for different stuff, not in file </p>", 
        "colorspace_settings": "<p> from a file. affects only a way how scene frame is mapping to a file name and not touches other data associated with a clip color management </p>", 
        "frame_offset": "<p> affects all data which is associated with a clip such as motion tracking, camera reconstruciton and so offset which is adding to a file number when reading frame </p>", 
        "gpd": "<p> grease pencil data </p>", 
        "lastframe": "<p> last accessed frame number </p>", 
        "lastsize": "<p> size of last accessed frame </p>", 
        "len": "<p> length of movie </p>", 
        "name": "<p> file path, 1024 = FILE_MAX </p>", 
        "proxy": "<p> proxy to clip data </p>", 
        "source": "<p> sequence or movie </p>", 
        "start_frame": "<p> scene frame number footage starts playing at </p>", 
        "tracking": "<p> data for SfM tracking </p>", 
        "tracking_context": "<p> context of tracking job used to synchronize data like framenumber in {@link SpaceClip}  clip user </p>"
      }
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_size_flag": "<p> size flags (see below) of all proxies to build </p>", 
        "build_tc_flag": "<p> time code flags (see below) of all tc indices to build </p>", 
        "dir": "<p> 768=FILE_MAXDIR custom directory for index and proxy files (defaults to BL_proxy) </p>", 
        "quality": "<p> proxy build quality </p>", 
        "tc": "<p> time code in use </p>"
      }
    }, 
    "MovieClipScopes": {
      "fields": {
        "frame_height": "<p> width and height of frame for which scopes are calculated </p>", 
        "framenr": "<p> frame number scopes are created for </p>", 
        "marker": "<p> marker scopes are created for </p>", 
        "ok": "<p> 1 means scopes are ok and recalculation is unneeded </p>", 
        "slide_scale": "<p> scale used for sliding from previewe area </p>", 
        "track": "<p> track scopes are created for </p>", 
        "track_disabled": "<p> active track is disabled, special notifier should be drawn </p>", 
        "track_locked": "<p> active track is locked, no transformation should be allowed </p>", 
        "track_pos": "<p> sub-pizel position of marker in track ImBuf </p>", 
        "track_preview": "<p> ImBuf displayed in track preview </p>", 
        "track_preview_height": "<p> height of track preview widget </p>", 
        "track_search": "<p> search area of a track </p>", 
        "undist_marker": "<p> undistorted position of marker used for pattern sampling </p>", 
        "use_track_mask": "<p> whether track's mask should be applied on preview </p>"
      }
    }, 
    "MovieClipUser": {
      "fields": {
        "framenr": "<p> current frame number </p>", 
        "render_flag": "<p> proxy render size </p>"
      }
    }, 
    "MovieTracking": {
      "fields": {
        "act_plane_track": "<p> active plane track </p>", 
        "act_track": "<p> active track </p>", 
        "camera": "<p> camera intrinsics </p>", 
        "dopesheet": "<p> dopesheet data </p>", 
        "plane_tracks": "<p> list of plane tracks used by camera object </p>", 
        "reconstruction": "<p> reconstruction data for camera object </p>", 
        "settings": "<p> different tracking-related settings </p>", 
        "stabilization": "<p> stabilization data </p>", 
        "stats": "<p> statistics displaying in clip editor </p>", 
        "tot_object": "<p> index of active object and total number of objects </p>", 
        "tracks": "<p> list of tracks used for camera object </p>"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "division_k1": "<p> Division distortion model coefficients </p>", 
        "focal": "<p> focal length </p>", 
        "intrinsics": "<p> intrinsics handle </p>", 
        "k1": "<p> Polynomial distortion </p>", 
        "k3": "<p> polynomial radial distortion </p>", 
        "pixel_aspect": "<p> pixel aspect ratio </p>", 
        "principal": "<p> principal point </p>", 
        "sensor_width": "<p> width of CCD sensor </p>", 
        "units": "<p> units of focal length user is working with </p>"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "channels": "<p> detailed </p>", 
        "coverage_segments": "<p> ** runtime stuff ** summary </p>", 
        "flag": "<p> dopesheet building flag such as inverted order of sort </p>", 
        "ok": "<p> flag if dopesheet information is still relevant </p>", 
        "sort_method": "<p> method to be used to sort tracks </p>"
      }
    }, 
    "MovieTrackingDopesheetChannel": {
      "fields": {
        "name": "<p> name of channel </p>", 
        "segments": "<p> tracked segments </p>", 
        "tot_segment": "<p> total number of segments </p>", 
        "total_frames": "<p> longest segment length and total number of tracked frames </p>", 
        "track": "<p> motion track for which channel is created </p>"
      }
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "flag": "<p> Marker's flag (alive, ...) </p>", 
        "framenr": "<p> number of frame marker is associated with </p>", 
        "pattern_corners": "<p> corners of pattern in the following order: <pre> Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</pre>  Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</p><p> the coordinates are stored relative to pos. </p>", 
        "pos": "<p> 2d position of marker on frame (in unified 0..1 space) </p>", 
        "search_min": "<p> positions of left-bottom and right-top corners of search area (in unified 0..1 units, relative to marker->pos </p>"
      }
    }, 
    "MovieTrackingObject": {
      "fields": {
        "keyframe1": "<p> reconstruction options </p>", 
        "keyframe2": "<p> two keyframes for reconstruction initialization </p>", 
        "name": "<p> Name of tracking object, MAX_NAME </p>", 
        "plane_tracks": "<p> list of plane tracks used by this object </p>", 
        "reconstruction": "<p> reconstruction data for this object </p>", 
        "scale": "<p> scale of object solution in amera space </p>", 
        "tracks": "<p> list of tracks use to tracking this object </p>"
      }
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "corners": "<p> Corners of the plane in the following order: <pre> Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</pre>  Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</p><p> The coordinates are stored in frame normalized coordinates. </p>", 
        "flag": "<p> Marker's flag (alive, ...) </p>", 
        "framenr": "<p> Number of frame plane marker is associated with </p>"
      }
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "flag": "<p> flags (selection, ...) </p>", 
        "image": "<p>{@link Image}  displaying during editing </p>", 
        "image_opacity": "<p> Opacity of the image </p>", 
        "last_marker": "<p> Runtime data Most recently used marker </p>", 
        "markers": "<p> Markers in the plane track </p>", 
        "markersnr": "<p> Count of markers in track (size of markers array) </p>", 
        "name": "<p> MAX_NAME </p>", 
        "pad": "<p> Number of tracks in point_tracks array. </p>", 
        "point_tracks": "<p> Array of point tracks used to define this plane. Each element is a pointer to {@link MovieTrackingTrack} . </p>"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "cameras": "<p> reconstructed cameras </p>", 
        "camnr": "<p> number of reconstructed cameras </p>", 
        "error": "<p> average error of reconstruction </p>", 
        "last_camera": "<p> most recently used camera </p>"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "clean_frames": "<p> cleanup </p>", 
        "default_algorithm_flag": "<p> flags for the tracking algorithm (use brute, use esm, use pyramid, etc </p>", 
        "default_flag": "<p> default flags like color channels used by default </p>", 
        "default_frames_limit": "<p> number of frames to be tarcked during single tracking session (if TRACKING_FRAMES_LIMIT is set) </p>", 
        "default_margin": "<p> margin from frame boundaries </p>", 
        "default_minimum_correlation": "<p> minimal correlation which is still treated as successful tracking </p>", 
        "default_motion_model": "<p> ** default tracker settings model of the motion for this track </p>", 
        "default_pattern_match": "<p> re-adjust every N frames </p>", 
        "default_pattern_size": "<p> size of pattern area for new tracks </p>", 
        "default_search_size": "<p> size of search area for new tracks </p>", 
        "default_weight": "<p> default weight of the track </p>", 
        "dist": "<p> ** tool settings ** set scale distance between two bundles used for scene scaling </p>", 
        "keyframe1": "<p> ** reconstruction settings ** \n@deprecated\n Deprecated</p>", 
        "keyframe2": "<p><p> two keyframes for reconstruction initialization were moved to per-tracking object settings </p>\n@deprecated\n Deprecatedtwo keyframes for reconstruction initialization were moved to per-tracking object settings </p>", 
        "motion_flag": "<p> flags describes motion type </p>", 
        "object_distance": "<p> set object scale distance between two bundles used for object scaling </p>", 
        "refine_camera_intrinsics": "<p> which camera intrinsics to refine. uses on the REFINE_* flags </p>", 
        "speed": "<p> ** common tracker settings ** speed of tracking </p>"
      }
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "act_rot_track": "<p> total number of rotation tracks and index of active track in list </p>", 
        "act_track": "<p> total number of translation tracks and index of active track in list </p>", 
        "anchor_frame": "<p> reference point to anchor stabilization offset </p>", 
        "filter": "<p> filter used for pixel interpolation </p>", 
        "maxscale": "<p> 2d stabilization max auto-scale factor </p>", 
        "ok": "<p> initialization and run-time data <p> Without effect now, we initialize on every frame. Formerly used for caching of init values </p>\n@deprecated\n DeprecatedWithout effect now, we initialize on every frame. Formerly used for caching of init values </p>", 
        "rot_track": "<p><p> use TRACK_USE_2D_STAB_ROT on individual tracks instead </p>\n@deprecated\n Deprecateduse TRACK_USE_2D_STAB_ROT on individual tracks instead </p>", 
        "rotinf": "<p> influence on location, scale and rotation </p>", 
        "scale": "<p> zoom factor known to be present on original footage. Also used for autoscale </p>", 
        "target_pos": "<p> expected target position of frame after raw stabilization, will be subtracted </p>", 
        "target_rot": "<p> expected target rotation of frame after raw stabilization, will be compensated </p>"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "algorithm_flag": "<p> flags for the tracking algorithm (use brute, use esm, use pyramid, etc </p>", 
        "bundle_pos": "<p> ** reconstruction data ** reconstructed position </p>", 
        "color": "<p> custom color for track </p>", 
        "error": "<p> average track reprojection error </p>", 
        "flag": "<p> ** UI editing ** </p>", 
        "frames_limit": "<p> ** control how tracking happens number of frames to be tarcked during single tracking session (if TRACKING_FRAMES_LIMIT is set) </p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "last_marker": "<p> most recently used marker </p>", 
        "margin": "<p> margin from frame boundaries </p>", 
        "markers": "<p> markers in track </p>", 
        "markersnr": "<p> ** track ** count of markers in track </p>", 
        "minimum_correlation": "<p> minimal correlation which is still treated as successful tracking </p>", 
        "motion_model": "<p> tracking parameters model of the motion for this track </p>", 
        "name": "<p> MAX_NAME </p>", 
        "offset": "<p> offset to \"parenting\" point </p>", 
        "pat_max": "<p>\n@deprecated\n Deprecated</p>", 
        "pat_min": "<p> ** setings ** positions of left-bottom and right-top corners of pattern (in unified 0..1 units, relative to marker->pos) moved to marker's corners since planar tracking implementation\n@deprecated\n Deprecated</p>", 
        "pattern_match": "<p> re-adjust every N frames </p>", 
        "search_flag": "<p> flags (selection, ...) </p>", 
        "search_max": "<p>\n@deprecated\n Deprecated</p>", 
        "search_min": "<p> positions of left-bottom and right-top corners of search area (in unified 0..1 units, relative to marker->pos moved to marker since affine tracking implementation\n@deprecated\n Deprecated</p>", 
        "weight": "<p> Weight of this track.</p><p> Weight defines how much the track affects on the final reconstruction, usually gets animated in a way so when track has just appeared it's weight is zero and then it gets faded up.</p><p> Used to prevent jumps of the camera when tracks are appearing or disappearing. </p>", 
        "weight_stab": "<p> track weight especially for 2D stabilization </p>"
      }
    }, 
    "MPoly": {
      "doc": "<p> new face structure, replaces {@link MFace} , which is now only used for storing tessellations. </p>", 
      "fields": {
        "loopstart": "<p> offset into loop array and number of loops in the face </p>", 
        "totloop": "<p> keep signed since we need to subtract when getting the previous loop </p>"
      }
    }, 
    "MRecast": {
      "doc": "<p> End {@link Multires}  </p>"
    }, 
    "MSelect": {
      "fields": {
        "type": "<p> ME_VSEL/ME_ESEL/ME_FSEL </p>"
      }
    }, 
    "MTex": {
      "fields": {
        "colfac": "<p> common </p>", 
        "norfac": "<p> material </p>", 
        "shadowfac": "<p> lamp </p>", 
        "timefac": "<p> particles </p>", 
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "zenupfac": "<p> world </p>"
      }
    }, 
    "MTFace": {
      "doc": "<p> tessellation uv face data </p>"
    }, 
    "Multires": {
      "fields": {
        "vdata": "<p> Special level 1 data that cannot be modified from other levels </p>"
      }
    }, 
    "MultiresCol": {
      "doc": "<p>{@link Multires}  structs kept for compatibility with old files </p>"
    }, 
    "MultiresColFace": {
      "fields": {
        "col": "<p> vertex colors </p>"
      }
    }, 
    "MultiresLevel": {
      "fields": {
        "verts": "<p> Kept for compatibility with even older files </p>"
      }
    }, 
    "MVertSkin": {
      "fields": {
        "flag": "<p> MVertSkinFlag </p>", 
        "radius": "<p> Radii of the skin, define how big the generated frames are. Currently only the first two elements are used. </p>"
      }
    }, 
    "NlaStrip": {
      "doc": "<p><hr/> \n NLA - Non-Linear Animation NLA Strips -------------------------------<mdash/><mdash/>  NLA {@link Strip}  (strip)</p><p> A NLA {@link Strip}  is a container for the reuse of Action data, defining parameters to control the remapping of the Action data to some destination. </p>", 
      "fields": {
        "act": "<p> Action that is referenced by this strip (strip is 'user' of the action) </p>", 
        "actend": "<p> range of the action to use </p>", 
        "blendmode": "<p> strip blending mode (layer-based mixing) </p>", 
        "blendout": "<p> strip blending length (only used when there are no F-Curves) </p>", 
        "end": "<p> extents of the strip </p>", 
        "extendmode": "<p> strip extrapolation mode (time-based mixing) </p>", 
        "fcurves": "<p> F-Curves for controlling this strip's influence and timing </p>", 
        "flag": "<p> settings </p>", 
        "influence": "<p> Influence of strip </p>", 
        "modifiers": "<p> TODO: move out? </p><p> F-Curve modifiers to be applied to the entire strip's referenced F-Curves </p>", 
        "name": "<p> User-Visible Identifier for {@link Strip}  - MAX_ID_NAME-2 </p>", 
        "remap": "<p> Remapping info this strip (for tweaking correspondence of action with context) </p>", 
        "repeat": "<p> The number of times to repeat the action range (only when no F-Curves) </p>", 
        "scale": "<p> The amount the action range is scaled by (only when no F-Curves) </p>", 
        "speaker_handle": "<p> handle for speaker objects </p>", 
        "strip_time": "<p> Current 'time' within action being used (automatically evaluated, but can be overridden) </p>", 
        "strips": "<p> 'Child' strips (used for 'meta' strips) </p>", 
        "type": "<p> type of NLA strip </p>"
      }
    }, 
    "NlaTrack": {
      "doc": "<p> NLA Tracks -------------------------------<mdash/><mdash/>  NLA Track (nlt)</p><p> A track groups a bunch of 'strips', which should form a continuous set of motion, on top of which other such groups can be layered. This should allow for animators to work in a non-destructive manner, layering tweaks, etc. over 'rough' blocks of their work. </p>", 
      "fields": {
        "flag": "<p> settings for this track </p>", 
        "index": "<p> index of the track in the stack (NOTE: not really useful, but we need a pad var anyways!) </p>", 
        "name": "<p> short user-description of this track - MAX_ID_NAME-2 </p>", 
        "strips": "<p> bActionStrips in this track </p>"
      }
    }, 
    "NodeBlurData": {
      "fields": {
        "image_in_height": "<p> needed for absolute/relative conversions </p>"
      }
    }, 
    "NodeColorBalance": {
      "fields": {
        "lift": "<p> LGG parameters </p>", 
        "slope": "<p> ASC CDL parameters </p>"
      }
    }, 
    "NodeDefocus": {
      "doc": "<p> qdn: Defocus blur node </p>"
    }, 
    "NodeGeometry": {
      "fields": {
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "NodeGlare": {
      "doc": "<p> qdn: glare node </p>", 
      "fields": {
        "angle": "<p> XXX angle is only kept for backward/forward compatibility, was used for two different things, see T50736. \n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeHueSat": {
      "doc": "<p> NOTE: Only for do-version code. </p>"
    }, 
    "NodeImageAnim": {
      "doc": "<p> this one has been replaced with {@link ImageUser} , keep it for do_versions() </p>", 
      "fields": {
        "cyclic": "<p>\n@deprecated\n Deprecated</p>", 
        "frames": "<p>\n@deprecated\n Deprecated</p>", 
        "movie": "<p>\n@deprecated\n Deprecated</p>", 
        "nr": "<p>\n@deprecated\n Deprecated</p>", 
        "sfra": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeImageFile": {
      "fields": {
        "name": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "NodeImageLayer": {
      "doc": "<p> layer info for image node outputs </p>", 
      "fields": {
        "pass_index": "<p> index in the Image->layers->passes lists \n@deprecated\n Deprecated</p>", 
        "pass_name": "<p> render pass name amount defined in openexr_multi.h </p>"
      }
    }, 
    "NodeImageMultiFile": {
      "doc": "<p> XXX first struct fields should match {@link NodeImageFile}  to ensure forward compatibility </p>", 
      "fields": {
        "active_input": "<p> selected input in details view list </p>", 
        "base_path": "<p> 1024 = FILE_MAX </p>", 
        "efra": "<p><p> XXX old frame rand values from {@link NodeImageFile}  for forward compatibility </p>\n@deprecated\n DeprecatedXXX old frame rand values from NodeImageFile for forward compatibility </p>", 
        "sfra": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeImageMultiFileSocket": {
      "fields": {
        "layer": "<p> multilayer output EXR_TOT_MAXNAME-2 ('.' and channel char are appended) </p>", 
        "path": "<p> 1024 = FILE_MAX </p>", 
        "use_node_format": "<p> use overall node image format </p>", 
        "use_render_format": "<p> single layer file output \n@deprecated\n Deprecated</p>"
      }
    }, 
    "NodeLensDist": {
      "doc": "<p> qdn: lens distortion node </p>"
    }, 
    "NodeScriptDict": {
      "fields": {
        "dict": "<p> for PyObject *dict </p>", 
        "node": "<p> for BPy_Node *node </p>"
      }
    }, 
    "NodeShaderScript": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "NodeShaderTexPointDensity": {
      "fields": {
        "pd": "<p> Used at runtime only by sampling RNA API. </p>", 
        "vertex_attribute_name": "<p> vertex attribute layer for color source, MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "NodeTonemap": {
      "doc": "<p> qdn: tonemap node </p>"
    }, 
    "NormalEditModifierData": {
      "doc": "<p> Set Split Normals modifier </p>", 
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "target": "<p> Source of normals, or center of ellipsoid. </p>"
      }
    }, 
    "Nurb": {
      "doc": "<p><h2>Note</h2><p>{@link Nurb}  name is misleading, since it can be used for polygons too, also, it should be NURBS ({@link Nurb}  isn't the singular of Nurbs). </p>  name is misleading, since it can be used for polygons too, also, it should be NURBS (Nurb isn't the singular of Nurbs). \n</p>", 
      "fields": {
        "charidx": "<p> only used for dynamically generated Nurbs created from OB_FONT's </p>", 
        "mat_nr": "<p> index into material list </p>", 
        "pntsv": "<p> number of points in the U or V directions </p>", 
        "prev": "<p> multiple nurbs per curve object are allowed </p>", 
        "resolv": "<p> tessellation resolution in the U or V directions </p>", 
        "tilt_interp": "<p> KEY_LINEAR, KEY_CARDINAL, KEY_BSPLINE </p>"
      }
    }, 
    "ObHook": {
      "doc": "<p> Warning, this is not used anymore because hooks are now modifiers </p>", 
      "fields": {
        "active": "<p> active is only first hook, for button menu </p>", 
        "cent": "<p> visualization of hook </p>", 
        "curindex": "<p> curindex is cache for fast lookup </p>", 
        "falloff": "<p> if not zero, falloff is distance where influence zero </p>", 
        "mat": "<p> temp matrix while hooking </p>", 
        "name": "<p> MAX_NAME </p>", 
        "parentinv": "<p> matrix making current transform unmodified </p>"
      }
    }, 
    "Object": {
      "fields": {
        "actcol": "<p> currently selected material in the UI </p>", 
        "actdef": "<p> current deformation group, note: index starts at 1 </p>", 
        "actuators": "<p> game logic actuators </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "avs": "<p> settings for visualization of object-transform animation </p>", 
        "bb": "<p> struct {@link Path}  *path; axis aligned boundbox (in localspace) </p>", 
        "body_type": "<p> for now used to temporarily holds the type of collision object </p>", 
        "boundtype": "<p> bounding box use for drawing </p>", 
        "bsoft": "<p> settings for game engine bullet soft body </p>", 
        "col": "<p> object color </p>", 
        "col_group": "<p> Collision mask settings </p>", 
        "colbits": "<p><p> deprecated, use 'matbits' </p>\n@deprecated\n Deprecateddeprecated, use 'matbits' </p>", 
        "collision_boundtype": "<p> bounding box type used for collision </p>", 
        "constinv": "<p> inverse result of constraints. doesn't include effect of parent or object local transform </p>", 
        "constraints": "<p> object constraints </p>", 
        "controllers": "<p> game logic controllers </p>", 
        "curve_cache": "<p> Runtime valuated curve-specific data, not stored in the file </p>", 
        "customdata_mask": "<p> (extra) custom data layer mask to use for creating derivedmesh, set by depsgraph </p>", 
        "data": "<p> pointer to objects data - an '{@link ID} ' or NULL </p>", 
        "defbase": "<p> list of {@link bDeformGroup}  (vertex groups) names and flag only </p>", 
        "dquat": "<p> quaternion rotation </p>", 
        "drot": "<p> euler rotation </p>", 
        "drotAngle": "<p> axis angle rotation - angle part </p>", 
        "drotAxis": "<p> axis angle rotation - axis part </p>", 
        "dscale": "<p> ack!, changing </p>", 
        "dsize": "<p><p> DEPRECATED, 2.60 and older only </p>\n@deprecated\n DeprecatedDEPRECATED, 2.60 and older only </p>", 
        "dt": "<p> viewport draw type </p>", 
        "dtx": "<p> viewport draw extra settings </p>", 
        "dup_group": "<p> object duplicator for group </p>", 
        "dupfacesca": "<p> dupliface scale </p>", 
        "duplilist": "<p> for temporary dupli list storage, only for use by RNA API </p>", 
        "dupon": "<p> dupli-frame settings </p>", 
        "flag": "<p> copy of {@link Base}  </p>", 
        "fluidsimSettings": "<p> if fluidsim enabled, store additional settings </p>", 
        "formfactor": "<p> The form factor k is introduced to give the user more control and to fix incompatibility problems. For rotational symmetric objects, the inertia value can be expressed as: Theta = k * m * r^2 where m = Mass, r = Radius For a Sphere, the form factor is by default = 0.4 </p>", 
        "gpd": "<p> Grease Pencil data </p>", 
        "gpulamp": "<p> runtime, for glsl lamp display only </p>", 
        "ima_ofs": "<p> offset for image empties </p>", 
        "imat": "<p> inverse matrix of 'obmat' for any other use than rendering! </p>", 
        "imat_ren": "<p> note: this isn't assured to be valid as with 'obmat', before using this value you should do... invert_m4_m4(ob->imat, ob->obmat); Previously 'imat' was used at render time, but as other places use it too the interactive ui of 2.5 creates problems. So now only 'imat_ren' should be used when ever the inverse of ob->obmat * re->viewmat is needed! - jahka </p>", 
        "index": "<p> custom index, for renderpasses </p>", 
        "init_state": "<p> bit masks of initial state as recorded by the users </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "iuser": "<p> must be non-null when oject is an empty image </p>", 
        "lastDataMask": "<p> the custom data layer mask that was last used to calculate derivedDeform and derivedFinal </p>", 
        "lastNeedMapping": "<p> did last modifier stack generation need mapping support? bool </p>", 
        "lay": "<p> copy of {@link Base} 's layer in the scene </p>", 
        "loc": "<p> rot en drot have to be together! (transform('r' en 's')) </p>", 
        "lodlevels": "<p> contains data for levels of detail </p>", 
        "mass": "<p> during realtime note that inertia is only called inertia for historical reasons and is not changed to avoid DNA surgery. It actually reflects the Size value in the GameButtons (= radius) </p>", 
        "mat": "<p> materials material slots </p>", 
        "matbits": "<p> a boolean field, with each byte 1 if corresponding material is linked to object </p>", 
        "max_angvel": "<p> clamp the maximum angular velocity, 0.0 is disabled </p>", 
        "max_vel": "<p> clamp the maximum velocity 0.0 is disabled </p>", 
        "min_angvel": "<p> clamp the minimum angular velocity, 0.0 is disabled </p>", 
        "min_vel": "<p> clamp the minimum velocity 0.0 is disabled </p>", 
        "mode": "<p> Local object mode </p>", 
        "modifiers": "<p> list of {@link ModifierData}  structures </p>", 
        "mpath": "<p> motion path cache for this object </p>", 
        "nlaflag": "<p> used for DopeSheet filtering settings (expanded/collapsed) </p>", 
        "obmat": "<p> final worldspace matrix with constraints & animsys applied </p>", 
        "par3": "<p> can be vertexnrs </p>", 
        "parentinv": "<p> inverse result of parent, so that object doesn't 'stick' to parent </p>", 
        "parsubstr": "<p> String describing subobject info, MAX_ID_NAME-2 </p>", 
        "particlesystem": "<p> particle systems </p>", 
        "pd": "<p> particle deflector/attractor/collision data </p>", 
        "pose": "<p> pose data, armature objects only </p>", 
        "prop": "<p> game logic property list (not to be confused with IDProperties) </p>", 
        "protectflag": "<p> transformation settings and transform locks </p>", 
        "proxy": "<p> if ob->proxy (or proxy_group), this object is proxy for object ob->proxy proxy_from is set in target back to the proxy. </p>", 
        "recalc": "<p> dependency flag </p>", 
        "restore_mode": "<p> Keep track of what mode to return to after toggling a mode </p>", 
        "restrictflag": "<p> for restricting view, select, render etc. accessible in outliner </p>", 
        "rigidbody_constraint": "<p> settings for Bullet constraint </p>", 
        "rigidbody_object": "<p> settings for Bullet rigid body </p>", 
        "rotmode": "<p> rotation mode - uses defines set out in {@link DNA_action_types.h}  for PoseChannel rotations... </p>", 
        "scaflag": "<p> ui state for game logic </p>", 
        "scavisflag": "<p> more display settings for game logic </p>", 
        "sensors": "<p> game logic sensors </p>", 
        "sf": "<p> sf is time-offset </p>", 
        "shapeflag": "<p> flag for pinning </p>", 
        "shapenr": "<p> current shape key for menu or pinned </p>", 
        "size": "<p> scale in fact </p>", 
        "smoothresh": "<p> smoothresh is phong interpolation ray_shadow correction in render </p>", 
        "soft": "<p> if exists, saved in file </p>", 
        "softflag": "<p> softbody settings </p>", 
        "state": "<p> bit masks of game controllers that are active </p>", 
        "step_height": "<p> \"Character\" physics properties </p>", 
        "totcol": "<p> copy of mesh, curve & meta struct member of same name (keep in sync) </p>"
      }
    }, 
    "OceanModifierData": {
      "fields": {
        "cachepath": "<p> FILE_MAX </p>", 
        "foamlayername": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "Paint": {
      "doc": "<p>{@link Paint}  Tool {@link Base}  </p>", 
      "fields": {
        "cavity_curve": "<p> cavity curve </p>", 
        "flags": "<p> enum PaintFlags </p>", 
        "num_input_samples": "<p>{@link Paint}  stroke can use up to PAINT_MAX_INPUT_SAMPLES inputs to smooth the stroke </p>", 
        "paint_cursor": "<p> WM {@link Paint}  cursor </p>", 
        "symmetry_flags": "<p> flags used for symmetry </p>"
      }
    }, 
    "PaintCurve": {
      "fields": {
        "add_index": "<p> index where next point will be added </p>", 
        "points": "<p> points of curve </p>"
      }
    }, 
    "PaintCurvePoint": {
      "fields": {
        "bez": "<p> bezier handle </p>", 
        "pressure": "<p> pressure on that point </p>"
      }
    }, 
    "Palette": {
      "fields": {
        "colors": "<p> pointer to individual colours </p>"
      }
    }, 
    "PaletteColor": {
      "fields": {
        "rgb": "<p> two values, one to store rgb, other to store values for sculpt/weight </p>"
      }
    }, 
    "Panel": {
      "fields": {
        "activedata": "<p> runtime for panel manipulation </p>", 
        "drawname": "<p> panelname is identifier for restoring location </p>", 
        "layout": "<p> runtime for drawing </p>", 
        "next": "<p> the part from uiBlock that needs saved in file </p>", 
        "paneltab": "<p> this panel is tabbed in *paneltab </p>", 
        "sortorder": "<p> panels are aligned according to increasing sortorder </p>", 
        "tabname": "<p> defined as UI_MAX_NAME_STR </p>", 
        "type": "<p> runtime </p>"
      }
    }, 
    "PanelCategoryDyn": {
      "doc": "<p> Notes on {@link Panel}  Catogories:</p><p> ar->panels_category ({@link PanelCategoryDyn} ) is a runtime only list of categories collected during draw.</p><p> ar->panels_category_active ({@link PanelCategoryStack} ) is basically a list of strings (category id's).</p><p> Clicking on a tab moves it to the front of ar->panels_category_active, If the context changes so this tab is no longer displayed, then the first-most tab in ar->panels_category_active is used.</p><p> This way you can change modes and always have the tab you last clicked on.region level tabs </p>"
    }, 
    "PanelCategoryStack": {
      "doc": "<p> region stack of active tabs </p>"
    }, 
    "PartDeflect": {
      "fields": {
        "absorption": "<p> used for forces </p>", 
        "clump_fac": "<p> guide curve, same as for particle child effects </p>", 
        "deflect": "<p> Deflection flag - does mesh deflect particles </p>", 
        "f_damp": "<p> Damping ratio of the harmonic effector. </p>", 
        "f_flow": "<p> How much force is converted into \"air flow\", i.e. </p>", 
        "f_noise": "<p> noise of force </p>", 
        "f_power": "<p> fall-off The power law - real gravitation is 2 (square) </p>", 
        "f_power_r": "<p> radial fall-off power </p>", 
        "f_size": "<p> force used as the velocity of surrounding medium. Noise size for noise effector, restlength for harmonic effector </p>", 
        "f_source": "<p> force source object </p>", 
        "f_strength": "<p> Main effector values The strength of the force (+ or - ) </p>", 
        "falloff": "<p> fall-off type </p>", 
        "flag": "<p> general settings flag </p>", 
        "forcefield": "<p> Force field type, do the vertices attract / repel particles? </p>", 
        "kink_axis": "<p> for curve guide </p>", 
        "maxdist": "<p> if indicated, use this maximum </p>", 
        "maxrad": "<p> radial versions of above </p>", 
        "mindist": "<p> if indicated, use this minimum </p>", 
        "pdef_damp": "<p> particle collisions Damping factor for particle deflection </p>", 
        "pdef_frict": "<p> Friction factor for particle deflection </p>", 
        "pdef_perm": "<p> Chance of particle passing through mesh </p>", 
        "pdef_rdamp": "<p> Random element of damping for deflection </p>", 
        "pdef_rfrict": "<p> Random element of friction for deflection </p>", 
        "pdef_sbdamp": "<p> softbody collisions Damping factor for softbody deflection </p>", 
        "pdef_sbift": "<p> inner face thickness for softbody deflection </p>", 
        "pdef_sboft": "<p> outer face thickness for softbody deflection </p>", 
        "pdef_stickness": "<p> surface particle stickiness </p>", 
        "rng": "<p> effector noise random noise generator for e.g. wind </p>", 
        "seed": "<p> noise random seed </p>", 
        "shape": "<p> point, plane or surface </p>", 
        "tex": "<p> Texture of the texture effector </p>", 
        "tex_mode": "<p> texture effector </p>", 
        "tex_nabla": "<p> texture effector Used for calculating partial derivatives </p>"
      }
    }, 
    "PartEff": {
      "fields": {
        "imat": "<p> inverse matrix of parent {@link Object}  </p>", 
        "vgroupname_v": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "ParticleBrushData": {
      "doc": "<p><hr/> \n {@link Particle}  Edit Settings for a {@link Particle}  {@link Editing}  {@link Brush}  </p>", 
      "fields": {
        "count": "<p> for specific brushes only </p>", 
        "size": "<p> common setting </p>"
      }
    }, 
    "ParticleData": {
      "fields": {
        "alive": "<p> the life state of a particle </p>", 
        "boid": "<p> boids data </p>", 
        "dietime": "<p> particles can die unnaturally (collision) </p>", 
        "foffset": "<p> coordinates on face/edge number \"num\" and depth along </p>", 
        "hair": "<p> hair vertices </p>", 
        "keys": "<p> keyed keys </p>", 
        "lifetime": "<p> dietime is not nescessarily time+lifetime as </p>", 
        "num": "<p> WARNING! Those two indices, when not affected to vertices, are for !!! TESSELLATED FACES !!!, not POLYGONS! index to vert/edge/face </p>", 
        "num_dmcache": "<p> index to derived mesh data (face) to avoid slow lookups </p>", 
        "prev_state": "<p> previous state </p>", 
        "size": "<p> face normal for volume emission size and multiplier so that we can update size when ever </p>", 
        "sphdensity": "<p> density of sph particle </p>", 
        "state": "<p> current global coordinates </p>", 
        "totkey": "<p> amount of hair or keyed keys </p>"
      }
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "rt": "<p> only updated on file save and used on file load </p>"
      }
    }, 
    "ParticleEditSettings": {
      "doc": "<p>{@link Particle}  Edit Mode Settings </p>", 
      "fields": {
        "brush": "<p> 7 = PE_TOT_BRUSH </p>", 
        "paintcursor": "<p> runtime </p>"
      }
    }, 
    "ParticleKey": {
      "fields": {
        "ave": "<p> angular velocity </p>", 
        "co": "<p> when changed update size of struct to copy_particleKey()!! location </p>", 
        "rot": "<p> rotation quaternion </p>", 
        "time": "<p> when this key happens </p>", 
        "vel": "<p> velocity </p>"
      }
    }, 
    "ParticleSettings": {
      "fields": {
        "acc": "<p> global physical properties </p>", 
        "adapt_angle": "<p> adaptive path rendering </p>", 
        "bb_align": "<p> billboards </p>", 
        "bending_random": "<p> hair dynamics </p>", 
        "branch_thres": "<p> branching </p>", 
        "child_flag": "<p> children </p>", 
        "clength": "<p> length </p>", 
        "clumpfac": "<p> clumping </p>", 
        "color_vec_max": "<p> draw color </p>", 
        "draw_line": "<p> drawing stuff </p>", 
        "draw_step": "<p> number of path segments, power of 2 except </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "keyed_loops": "<p> keyed particles </p>", 
        "kink_amp": "<p> kink </p>", 
        "mass": "<p> physical properties </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "normfac": "<p> initial velocity factors </p>", 
        "parting_fac": "<p> parting </p>", 
        "phystype": "<p> physics modes </p>", 
        "randlength": "<p> length </p>", 
        "rotfrom": "<p>\n@deprecated\n Deprecated</p>", 
        "rough1": "<p> rough </p>", 
        "simplify_flag": "<p> simplification </p>", 
        "sta": "<p> time and emission </p>", 
        "use_modifier_stack": "<p> modified dm support </p>"
      }
    }, 
    "ParticleSystem": {
      "fields": {
        "bb_uvname": "<p> billboard uv name, MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "bvhtree": "<p> used for interactions with self and other systems </p>", 
        "child": "<p> child particles </p>", 
        "childcache": "<p> child cache (runtime) </p>", 
        "childcachebufs": "<p> buffers for the above </p>", 
        "clmd": "<p> cloth simulation for hair </p>", 
        "dt_frac": "<p> current time step, as a fraction of a frame </p>", 
        "edit": "<p> particle editmode (runtime) </p>", 
        "free_edit": "<p> free callback </p>", 
        "hair_out_dm": "<p> input/output for cloth simulation </p>", 
        "imat": "<p> used for duplicators </p>", 
        "lattice_deform_data": "<p> run-time only lattice deformation data </p>", 
        "lattice_strength": "<p> influence of the lattice modifier </p>", 
        "name": "<p> particle system name, MAX_NAME </p>", 
        "next": "<p> note1: make sure all (runtime) are NULL's in 'copy_particlesystem' XXX, this function is no more! - need to invstigate note2: make sure any uses of this struct in DNA are accounted for in 'BKE_object_copy_particlesystems' </p>", 
        "parent": "<p> particles from global space -> parent space </p>", 
        "part": "<p> particle settings </p>", 
        "particles": "<p> (parent) particles </p>", 
        "pathcache": "<p> path cache (runtime) </p>", 
        "pointcache": "<p> point cache </p>", 
        "renderdata": "<p> temporary storage during render </p>", 
        "rt3": "<p> vertex groups, 0==disable, 1==starting index </p>", 
        "targets": "<p> used for keyed and boid physics </p>", 
        "tree": "<p> used for interactions with self and other systems </p>", 
        "vgroup": "<p> if you change these remember to update array lengths to PSYS_TOT_VG! </p>"
      }
    }, 
    "ParticleSystemModifierData": {
      "fields": {
        "dm_deformed": "<p> Deformed-onle DM - its topology is same as orig mesh one. </p>", 
        "dm_final": "<p> Final DM - its topology may differ from orig mesh. </p>"
      }
    }, 
    "Path": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "PathPoint": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "vec": "<p> grr, cant get rid of tilt yet </p>"
      }
    }, 
    "PhysicsSettings": {
      "doc": "<p><hr/> \n Global/Common Physics Settings </p>"
    }, 
    "PointCache": {
      "fields": {
        "cached_frames": "<p> array of length endframe-startframe+1 with flags to indicate cached frames </p>", 
        "editframe": "<p> frame being edited (runtime only) </p>", 
        "endframe": "<p> simulation end frame </p>", 
        "flag": "<p> generic flag </p>", 
        "free_edit": "<p> free callback </p>", 
        "index": "<p> modifier stack index </p>", 
        "last_exact": "<p> last exact frame that's cached </p>", 
        "last_valid": "<p> used for editing cache - what is the last baked frame </p>", 
        "mem_cache": "<p> can be later used for other per frame flags too if needed </p>", 
        "path": "<p> file path, 1024 = FILE_MAX </p>", 
        "simframe": "<p> current frame of simulation (only if SIMULATION_VALID) </p>", 
        "startframe": "<p> simulation start frame </p>", 
        "step": "<p> The number of frames between cached frames. This should probably be an upper bound for a per point adaptive step in the future, buf for now it's the same for all points. Without adaptivity this can effect the perceived simulation quite a bit though. If for example particles are colliding with a horizontal plane (with high damping) they quickly come to a stop on the plane, however there are still forces acting on the particle (gravity and collisions), so the particle velocity isn't necessarily zero for the whole duration of the frame even if the particle seems stationary. If all simulation frames aren't cached (step > 1) these velocities are interpolated into movement for the non-cached frames. The result will look like the point is oscillating around the collision location. So for now cache step should be set to 1 for accurate reproduction of collisions. </p>", 
        "totpoint": "<p> for external cache files number of cached points </p>"
      }
    }, 
    "PointDensity": {
      "fields": {
        "coba": "<p> for time -> color </p>", 
        "color_source": "<p> psys_color_source </p>", 
        "falloff_curve": "<p> falloff density curve </p>", 
        "ob_cache_space": "<p> cache points in worldspace, object space, ... ? </p>", 
        "object": "<p> for '{@link Object} ' or '{@link Particle}  system' type - source object </p>", 
        "point_data": "<p> dynamically allocated extra for extra information, like particle age </p>", 
        "point_tree": "<p> the acceleration tree containing points </p>", 
        "psys": "<p> index+1 in ob.particlesystem, non-ID pointer not allowed </p>", 
        "psys_cache_space": "<p> cache points in worldspace, object space, ... ? </p>", 
        "vertex_attribute_name": "<p> vertex attribute layer for color source, MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "PreviewImage": {
      "fields": {
        "gputexture": "<p> Runtime-only data. </p>", 
        "icon_id": "<p> Used by previews outside of {@link ID}  context. </p>", 
        "tag": "<p> Runtime data. </p>", 
        "w": "<p> All values of 2 are really NUM_ICON_SIZES </p>"
      }
    }, 
    "PTCacheMem": {
      "fields": {
        "cur": "<p> BPHYS_TOT_DATA </p>", 
        "data": "<p> BPHYS_TOT_DATA </p>"
      }
    }, 
    "QuicktimeCodecData": {
      "fields": {
        "cdParms": "<p> Old quicktime implementation compatibility fields, read only in 2.5 - deprecated codec/compressor options </p>", 
        "cdSize": "<p> size of cdParms buffer </p>", 
        "pad": "<p> padding </p>", 
        "pad2": "<p> padding </p>"
      }
    }, 
    "QuicktimeCodecSettings": {
      "fields": {
        "audiocodecType": "<p> Audio Codec settings </p>", 
        "bitRate": "<p> bitrate in bps </p>", 
        "codec": "<p> Settings not available in current QTKit API </p>", 
        "codecSpatialQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>", 
        "codecTemporalQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>", 
        "codecType": "<p> Codec settings detailed for 2.5 implementation Types defined in quicktime_export.h </p>", 
        "minSpatialQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>", 
        "minTemporalQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>"
      }
    }, 
    "rctf": {
      "doc": "<p> float rectangle. </p>"
    }, 
    "rcti": {
      "doc": "<p> typedef struct vec3d { double x, y, z; } vec3d;</p><p> typedef struct vec4i { int x, y, z, w; } vec4i;</p><p> typedef struct vec4f { float x, y, z, w; } vec4f;</p><p> typedef struct vec4d { double x, y, z, w; } vec4d;integer rectangle. </p>"
    }, 
    "RegionView3D": {
      "doc": "<p><hr/> \n </p>", 
      "fields": {
        "camdy": "<p> camera view offsets, 1.0 = viewplane moves entire width/height </p>", 
        "camzoom": "<p> viewport zoom on the camera frame, see BKE_screen_view3d_zoom_to_fac </p>", 
        "clip": "<p> user defined clipping planes </p>", 
        "clip_local": "<p> clip in object space, means we can test for clipping in editmode without first going into worldspace </p>", 
        "dist": "<p> distance from 'ofs' along -viewinv[2] vector, where result is negative as is 'ofs' </p>", 
        "is_persp": "<p> check if persp/ortho view, since 'persp' cant be used for this since it can have cameras assigned as well. (only set in view3d_winmatrix_set) </p>", 
        "localvd": "<p> allocated backup of its self while in localview </p>", 
        "lview": "<p> lpersp can never be set to 'RV3D_CAMOB' </p>", 
        "lviewquat": "<p> last view (use when switching out of camera view) </p>", 
        "ofs": "<p> view center & orbit pivot, negative of worldspace location, also matches -viewinv[3][0:3] in ortho mode. </p>", 
        "ofs_lock": "<p> normalized offset for locked view: (-1, -1) bottom left, (1, 1) upper right </p>", 
        "persinv": "<p> inverse of persmat </p>", 
        "persmat": "<p> viewmat*winmat </p>", 
        "pixsize": "<p> runtime only </p>", 
        "rot_angle": "<p> active rotation from NDOF or elsewhere </p>", 
        "sms": "<p> animated smooth view </p>", 
        "tw_idot": "<p> manipulator runtime: (1 - dot) product with view vector (used to check view alignment) </p>", 
        "twmat": "<p> transform widget matrix </p>", 
        "viewcamtexcofac": "<p> offset/scale for camera glsl texcoords </p>", 
        "viewinv": "<p> inverse of viewmat </p>", 
        "viewlock_quad": "<p> options for quadview (store while out of quad view) </p>", 
        "viewmat": "<p> GL_MODELVIEW matrix </p>", 
        "viewmatob": "<p> viewmat/persmat multiplied with object matrix, while drawing and selection </p>", 
        "viewquat": "<p> view rotation, must be kept normalized </p>", 
        "winmat": "<p> GL_PROJECTION matrix </p>"
      }
    }, 
    "RemeshModifierData": {
      "fields": {
        "depth": "<p> octree depth </p>", 
        "scale": "<p> ratio between size of model and grid </p>", 
        "threshold": "<p> floodfill option, controls how small components can be before they are removed </p>"
      }
    }, 
    "RenderData": {
      "doc": "<p><hr/> \n Render Data </p>", 
      "fields": {
        "alphamode": "<p> What to do with the sky/background. Picks sky/premul/key blending for the background </p>", 
        "attrib": "<p>\n@deprecated\n Deprecated</p>", 
        "bake": "<p> Cycles baking </p>", 
        "bake_osa": "<p> Bake Render options </p>", 
        "cineonwhite": "<p> cineon \n@deprecated\n Deprecated</p>", 
        "color_mgt_flag": "<p> color management settings - color profiles, gamma correction, etc </p>", 
        "debug_pass_type": "<p> Type of the debug pass to use. Only used when built with debug passes support. </p>", 
        "depth": "<p> XXX deprecated since 2.5. </p><p> standalone player\n@deprecated\n Deprecated</p>", 
        "dimensionspreset": "<p> XXX deprecated since 2.5. </p><p> for the dimensions presets menu </p>", 
        "displaymode": "<p> Render to image editor, fullscreen or to new window. </p>", 
        "dither_intensity": "<p> Dither noise intensity </p>", 
        "domeangle": "<p>\n@deprecated\n Deprecated</p>", 
        "domeres": "<p> XXX deprecated since 2.5. </p><p> Dome variables\n@deprecated\n Deprecated</p>", 
        "edgeR": "<p> For UR edge rendering: give the edges this color </p>", 
        "efra": "<p> frames as in 'images' </p>", 
        "engine": "<p> render engine </p>", 
        "fg_stamp": "<p> foreground/background color. </p>", 
        "filtertype": "<p> filter is box, tent, gauss, mitch, etc </p>", 
        "frame_step": "<p> frames to jump during render/playback </p>", 
        "freqplay": "<p>\n@deprecated\n Deprecated</p>", 
        "fullscreen": "<p> XXX deprecated since 2.5. </p><p> standalone player\n@deprecated\n Deprecated</p>", 
        "gauss": "<p> Value used to define filter size for all filter options </p>", 
        "imtype": "<p>\n@deprecated\n Deprecated</p>", 
        "jp2_preset": "<p> jpeg2000 \n@deprecated\n Deprecated</p>", 
        "layers": "<p> information on different layers to be rendered </p>", 
        "line_thickness_mode": "<p> Freestyle line thickness options </p>", 
        "maximsize": "<p><p> max in Kb </p>\n@deprecated\n Deprecatedmax in Kb </p>", 
        "mblur_samples": "<p> number of mblur samples </p>", 
        "mblur_shutter_curve": "<p> Motion blur shutter </p>", 
        "mode": "<p> Flags for render settings. Use bit-masking to access the settings. </p>", 
        "ocres": "<p> octree resolution </p>", 
        "osa": "<p> The number of samples to use per pixel. </p>", 
        "pad3": "<p> select one of blenders bitmap fonts </p>", 
        "pefra": "<p> start+end frames of preview range </p>", 
        "pic": "<p> path to render output 1024 = FILE_MAX </p>", 
        "planes": "<p>\n@deprecated\n Deprecated</p>", 
        "postgamma": "<p> post-production settings. deprecated, but here for upwards compat (initialized to 1) </p>", 
        "quality": "<p> ! </p>", 
        "raytrace_options": "<p> Flags for raytrace settings. Use bit-masking to access the settings. </p>", 
        "raytrace_structure": "<p> Raytrace acceleration structure </p>", 
        "safety": "<p> safety, border and display rect </p>", 
        "scemode": "<p> Flags for render settings. Use bit-masking to access the settings. </p>", 
        "seq_flag": "<p> flag use for sequence render/draw </p>", 
        "seq_prev_type": "<p> sequencer options </p>", 
        "seq_rend_type": "<p> UNUSED! </p>", 
        "simplify_flag": "<p> render simplify </p>", 
        "size": "<p> size in % </p>", 
        "stamp": "<p> stamps flags. </p>", 
        "stamp_udata": "<p> stamp info user data. </p>", 
        "stereomode": "<p><p> standalone player stereo settings </p>\n@deprecated\n Deprecatedstandalone player stereo settings </p>", 
        "subframe": "<p> subframe offset from cfra, in 0.0-1.0 </p>", 
        "subimtype": "<p>\n@deprecated\n Deprecated</p>", 
        "tilex": "<p> render tile dimensions </p>", 
        "unit_line_thickness": "<p> in pixels </p>", 
        "views": "<p> MultiView {@link SceneRenderView}  </p>", 
        "xasp": "<p> Adjustment factors for the aspect ratio in the x direction, was a short in 2.45 </p>", 
        "xparts": "<p> The number of part to use in the x direction\n@deprecated\n Deprecated</p>", 
        "xplay": "<p>\n@deprecated\n Deprecated</p>", 
        "xsch": "<p> from buttons: The desired number of pixels in the x direction </p>", 
        "yparts": "<p> The number of part to use in the y direction\n@deprecated\n Deprecated</p>", 
        "yplay": "<p>\n@deprecated\n Deprecated</p>", 
        "ysch": "<p> The desired number of pixels in the y direction </p>"
      }
    }, 
    "RenderProfile": {
      "doc": "<p><hr/> \n Render Conversion/Simplfication Settings control render convert and shading engine </p>"
    }, 
    "RenderSlot": {
      "fields": {
        "name": "<p> 64 = MAX_NAME </p>"
      }
    }, 
    "Report": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "len": "<p> strlen(message), saves some time calculating the word wrap </p>", 
        "type": "<p> ReportType </p>"
      }
    }, 
    "ReportList": {
      "doc": "<p> saved in the wm, don't remove </p>", 
      "fields": {
        "printlevel": "<p> ReportType </p>", 
        "storelevel": "<p> ReportType </p>"
      }
    }, 
    "ReportTimerInfo": {
      "doc": "<p> timer customdata to control reports display These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "RigidBodyCon": {
      "doc": "<p><hr/> \n RigidBody Constraint RigidBodyConstraint (rbc)</p><p> Represents an constraint connecting two rigid bodies. </p>", 
      "fields": {
        "breaking_threshold": "<p> breaking impulse threshold </p>", 
        "flag": "<p> (eRigidBodyCon_Flag) </p>", 
        "limit_ang_x_lower": "<p> rotation limits </p>", 
        "limit_lin_x_lower": "<p> limits translation limits </p>", 
        "motor_ang_max_impulse": "<p> maximum force used to reach angular target velocity </p>", 
        "motor_ang_target_velocity": "<p> angular velocity the motor tries to hold </p>", 
        "motor_lin_max_impulse": "<p> maximum force used to reach linear target velocity </p>", 
        "motor_lin_target_velocity": "<p> motor settings linear velocity the motor tries to hold </p>", 
        "num_solver_iterations": "<p> number of constraint solver iterations made per simulation step </p>", 
        "ob1": "<p> First object influenced by the constraint </p>", 
        "ob2": "<p> Second object influenced by the constraint </p>", 
        "physics_constraint": "<p> References to Physics Sim object. Exist at runtime only Physics object representation (i.e. btTypedConstraint) </p>", 
        "spring_damping_x": "<p> amount of velocity lost over time </p>", 
        "spring_stiffness_x": "<p> spring settings resistance to deformation </p>", 
        "type": "<p> General Settings for this {@link RigidBodyCon}  (eRigidBodyCon_Type) role of RigidBody in sim </p>"
      }
    }, 
    "RigidBodyOb": {
      "doc": "<p><hr/> \n RigidBody {@link Object}  RigidBodyObject (rbo)</p><p> Represents an object participating in a RigidBody sim. This is attached to each object that is currently participating in a sim. </p>", 
      "fields": {
        "ang_damping": "<p> damping for angular velocities </p>", 
        "ang_sleep_thresh": "<p> deactivation threshold for angular velocities </p>", 
        "col_groups": "<p> Collision groups that determines wich rigid bodies can collide with each other </p>", 
        "flag": "<p> (eRigidBodyOb_Flag) </p>", 
        "friction": "<p> resistance of object to movement </p>", 
        "lin_damping": "<p> damping for linear velocities </p>", 
        "lin_sleep_thresh": "<p> deactivation threshold for linear velocities </p>", 
        "margin": "<p> tolerance for detecting collisions </p>", 
        "mass": "<p> Physics Parameters how much object 'weighs' (i.e. absolute 'amount of stuff' it holds) </p>", 
        "mesh_source": "<p> (eRigidBody_MeshSource) mesh source for mesh based collision shapes </p>", 
        "orn": "<p> rigid body orientation </p>", 
        "physics_object": "<p> References to Physics Sim objects. Exist at runtime only Physics object representation (i.e. btRigidBody) </p>", 
        "physics_shape": "<p> Collision shape used by physics sim (i.e. btCollisionShape) </p>", 
        "pos": "<p> rigid body position </p>", 
        "restitution": "<p> how 'bouncy' object is when it collides </p>", 
        "shape": "<p> (eRigidBody_Shape) collision shape to use </p>", 
        "type": "<p> General Settings for this {@link RigidBodyOb}  (eRigidBodyOb_Type) role of RigidBody in sim </p>"
      }
    }, 
    "RigidBodyWorld": {
      "doc": "<p><hr/> \n RigidBody {@link World}  {@link RigidBodyWorld}  (rbw)</p><p> Represents a \"simulation scene\" existing within the parent scene. </p>", 
      "fields": {
        "constraints": "<p>{@link Group}  containing objects to use for Rigid Body Constraints </p>", 
        "effector_weights": "<p> Sim {@link World}  Settings -------------------------------------------------------<mdash/><mdash/>  effectors info </p>", 
        "flag": "<p> (eRigidBodyWorld_Flag) settings for this {@link RigidBodyWorld}  </p>", 
        "group": "<p>{@link Group}  containing objects to use for Rigid Bodies </p>", 
        "ltime": "<p> last frame world was evaluated for (internal) </p>", 
        "num_solver_iterations": "<p> number of constraint solver iterations made per simulation step </p>", 
        "numbodies": "<p> number of objects in rigid body group </p>", 
        "objects": "<p> Array to access group objects by index, only used at runtime </p>", 
        "physics_world": "<p> References to Physics Sim objects. Exist at runtime only ----------------<mdash/><mdash/>  Physics sim world (i.e. btDiscreteDynamicsWorld) </p>", 
        "pointcache": "<p> cache </p>", 
        "steps_per_second": "<p> number of simulation steps thaken per second </p>", 
        "time_scale": "<p> used to speed up or slow down the simulation </p>"
      }
    }, 
    "Scene": {
      "doc": "<p><hr/> \n {@link Scene}  ID-Block </p>", 
      "fields": {
        "active_keyingset": "<p> User-Defined KeyingSets index of the active {@link KeyingSet} . first {@link KeyingSet}  has index 1, 'none' active is 0, 'add new' is -1 </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "basact": "<p> active base </p>", 
        "clip": "<p> Movie Tracking active movie clip </p>", 
        "cursor": "<p> 3d cursor location </p>", 
        "customdata_mask": "<p> XXX. runtime flag for drawing, actually belongs in the window, only used by BKE_object_handle_update() </p>", 
        "customdata_mask_modal": "<p> XXX. same as above but for temp operator use (gl renders) </p>", 
        "depsgraph": "<p> none of the dependency graph vars is mean to be saved </p>", 
        "ed": "<p> sequence editor data is allocated here </p>", 
        "flag": "<p> various settings </p>", 
        "fps_info": "<p> (runtime) info/cache used for presenting playback framerate info to the user </p>", 
        "framing": "<p> Game Settings </p>", 
        "gpd": "<p> Grease Pencil </p>", 
        "keyingsets": "<p> s for this scene </p>", 
        "lay": "<p> bitflags for layer visibility </p>", 
        "lay_updated": "<p> runtime flag, has layer ever been updated since load? </p>", 
        "layact": "<p> active layer </p>", 
        "obedit": "<p> name replaces old G.obedit </p>", 
        "physics_settings": "<p> Physics simulation settings </p>", 
        "r": "<p> migrate or replace? depends on some internal things... no, is on the right place (ton) </p>", 
        "rigidbody_world": "<p> RigidBody simulation world+settings </p>", 
        "stats": "<p> default allocated now </p>", 
        "toolsettings": "<p> default allocated now </p>", 
        "twcent": "<p> center for transform widget </p>", 
        "twmax": "<p> boundbox of selection for transform widget </p>", 
        "unit": "<p> Units </p>", 
        "view_settings": "<p> Color Management </p>"
      }
    }, 
    "SceneRenderLayer": {
      "doc": "<p><hr/> \n Render Layers Render Layer </p>", 
      "fields": {
        "lay": "<p> scene->lay itself has priority over this </p>", 
        "lay_exclude": "<p> not used by internal, exclude </p>", 
        "lay_zmask": "<p> has to be after lay, this is for Z-masking </p>", 
        "name": "<p> MAX_NAME </p>", 
        "passflag": "<p> pass_xor has to be after passflag </p>"
      }
    }, 
    "SceneRenderView": {
      "doc": "<p> note, srl->passflag is treestore element 'nr' in outliner, short still... View - MultiView </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>", 
        "suffix": "<p> MAX_NAME </p>"
      }
    }, 
    "ScrArea": {
      "fields": {
        "actionzones": "<p> AZone </p>", 
        "butspacetype": "<p> SPACE_..., butspacetype is button arg </p>", 
        "do_refresh": "<p> private, for spacetype refresh callback </p>", 
        "full": "<p> if area==full, this is the parent </p>", 
        "handlers": "<p> wmEventHandler </p>", 
        "headertype": "<p> OLD! 0=no header, 1= down, 2= up </p>", 
        "region_active_win": "<p> index of last used region of 'RGN_TYPE_WINDOW' runtime variable, updated by executing operators </p>", 
        "regionbase": "<p> NOTE: This region list is the one from the active/visible editor (first item in spacedata list). Use {@link SpaceLink.regionbase}  if it's inactive (but only then)!ARegion </p>", 
        "spacedata": "<p> A list of space links (editors) that were open in this area before. When changing the editor type, we try to reuse old editor data from this list. The first item is the active/visible one.SpaceLink </p>", 
        "totrct": "<p> rect bound by v1 v2 v3 v4 </p>", 
        "type": "<p> callbacks for this space type </p>", 
        "v4": "<p> ordered (bl, tl, tr, br) </p>", 
        "winy": "<p> size </p>"
      }
    }, 
    "ScrEdge": {
      "fields": {
        "border": "<p> 1 when at edge of screen </p>"
      }
    }, 
    "Script": {
      "doc": "<p>{@link Script}  View (Obsolete) ================================== {@link Script}  Runtime Data - Obsolete (pre 2.5) </p>", 
      "fields": {
        "scriptarg": "<p> 1024 = FILE_MAX </p>", 
        "scriptname": "<p> store the script file here so we can re-run it on loading blender, if \"Enable Scripts\" is on 1024 = FILE_MAX </p>"
      }
    }, 
    "ScrVert": {
      "fields": {
        "flag": "<p> first one used internally, second one for tools </p>"
      }
    }, 
    "Sculpt": {
      "doc": "<p><hr/> \n {@link Sculpt}  {@link Sculpt}  </p>", 
      "fields": {
        "constant_detail": "<p> scale for constant detail size Constant detail resolution (Blender unit / constant_detail) </p>", 
        "detail_size": "<p> Maximum edge length for dynamic topology sculpting (in pixels) </p>", 
        "flags": "<p> float pivot[3]; XXX not used? </p><p> For rotating around a pivot point </p>", 
        "gravity_factor": "<p> gravity factor for sculpting </p>", 
        "radial_symm": "<p> char tablet_size, tablet_strength; XXX not used? </p><p> Control tablet input </p>", 
        "symmetrize_direction": "<p> Direction used for SCULPT_OT_symmetrize operator </p>"
      }
    }, 
    "SDNA": {
      "fields": {
        "data": "<p> full copy of 'encoded' data (when data_alloc is set, otherwise borrowed). </p>", 
        "datalen": "<p> length of data </p>", 
        "names": "<p> struct member names </p>", 
        "nr_names": "<p> total number of struct members </p>", 
        "nr_structs": "<p> number of struct types </p>", 
        "nr_types": "<p> number of basic types + struct types </p>", 
        "pointerlen": "<p> size of a pointer in bytes </p>", 
        "structs": "<p> sp = structs[a] is the address of a struct definition sp[0] is struct type number, sp[1] amount of members</p><p> (sp[2], sp[3]), (sp[4], sp[5]), .. are the member type and name numbers respectively </p>", 
        "structs_map": "<p> ghash for faster lookups, requires WITH_DNA_GHASH to be used for now </p>", 
        "typelens": "<p> type lengths </p>", 
        "types": "<p> type names </p>"
      }
    }, 
    "Sequence": {
      "doc": "<p> The sequence structure is the basic struct used by any strip. each of the strips uses a different sequence structure.</p><p><h2>Warning</h2><p> The first part identical to {@link ID}  (for use in ipo's) the commend above is historic, probably we can drop the {@link ID}  compatibility, but take care making this change.</p> The first part identical to ID (for use in ipo's) the commend above is historic, probably we can drop the ID compatibility, but take care making this change.\n<h2>Warning</h2><p> This is really a '{@link Strip} ' in the UI!, name is highly confusing. </p> This is really a 'Strip' in the UI!, name is highly confusing. \n</p>", 
      "fields": {
        "anim_endofs": "<p> is subtle different to startofs / endofs </p>", 
        "anim_startofs": "<p> only use part of animation file </p>", 
        "anims": "<p> for MOVIE strips </p>", 
        "clip": "<p> for MOVIECLIP strips </p>", 
        "clip_flag": "<p> MOVIECLIP render flags </p>", 
        "depth": "<p> machine - the strip channel, depth - the depth in the sequence when dealing with metastrips </p>", 
        "effectdata": "<p> Struct pointer for effect settings </p>", 
        "enddisp": "<p> starting and ending points of the strip in the sequence </p>", 
        "endofs": "<p> frames after the first frame where display starts, frames before the last frame where display ends </p>", 
        "endstill": "<p> frames that use the first frame before data begins, frames that use the last frame after data ends </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "len": "<p> the length of the contents of this strip - before handles are applied </p>", 
        "lib": "<p> needed (to be like ipo), else it will raise libdata warnings, this should never be used </p>", 
        "mask": "<p> for MASK strips </p>", 
        "modifiers": "<p> modifiers </p>", 
        "multicam_source": "<p> for multicam source selection </p>", 
        "name": "<p> SEQ_NAME_MAXSTR - name, set by default and needs to be unique, for RNA paths </p>", 
        "pan": "<p> pitch (-0.1..10), pan -2..2 </p>", 
        "scene": "<p> these {@link ID}  vars should never be NULL but can be when linked libs fail to load, so check on access </p>", 
        "scene_camera": "<p> override scene camera </p>", 
        "seq1": "<p> pointers for effects: </p>", 
        "seqbase": "<p> list of strips for metastrips </p>", 
        "sfra": "<p> is sfra needed anymore? - it looks like its only used in one place starting frame according to the timeline of the scene. </p>", 
        "sound": "<p> the linked \"bSound\" object </p>", 
        "start": "<p> start frame of contents of strip in absolute frame coordinates. For metastrips start of first strip startdisp </p>", 
        "streamindex": "<p> streamindex for movie or sound files with several streams </p>", 
        "tmp": "<p> tmp var for copying, and tagging for linked selection </p>", 
        "type": "<p> flags bitmap (see below) and the type of sequence </p>", 
        "views_format": "<p> Multiview </p>"
      }
    }, 
    "SequenceModifierData": {
      "doc": "<p> ***************** {@link Sequence}  modifiers ****************** </p>", 
      "fields": {
        "mask_input_type": "<p> mask input, either sequence or mask {@link ID}  </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "SequencerScopes": {
      "doc": "<p> ***************** {@link Scopes}  ****************** </p>"
    }, 
    "ShrinkwrapModifierData": {
      "fields": {
        "auxTarget": "<p> additional shrink target </p>", 
        "keepDist": "<p> distance offset to keep from mesh/projection point </p>", 
        "projAxis": "<p> axis to project over </p>", 
        "projLimit": "<p> limit the projection ray cast </p>", 
        "shrinkOpts": "<p> shrink options </p>", 
        "shrinkType": "<p> shrink type projection </p>", 
        "subsurfLevels": "<p> If using projection over vertex normal this controls the level of subsurface that must be done before getting the vertex coordinates and normal </p>", 
        "target": "<p> shrink target </p>", 
        "vgroup_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "SimpleDeformModifierData": {
      "fields": {
        "axis": "<p> lock axis (for taper and strech) </p>", 
        "factor": "<p> factors to control simple deforms </p>", 
        "limit": "<p> lower and upper limit </p>", 
        "mode": "<p> deform function </p>", 
        "origin": "<p> object to control the origin of modifier space coordinates </p>", 
        "vgroup_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "SkinModifierData": {
      "doc": "<p> Skin modifier </p>"
    }, 
    "SmokeCollSettings": {
      "doc": "<p> struct BVHTreeFromMesh *bvh; float mat[4][4]; float mat_old[4][4]; </p><p> collision objects (filled with smoke) </p>", 
      "fields": {
        "smd": "<p> for fast RNA access </p>"
      }
    }, 
    "SmokeDomainSettings": {
      "fields": {
        "active_color": "<p> monitor color situation of simulation </p>", 
        "adapt_margin": "<p> user settings </p>", 
        "amplify": "<p> wavelet amplification </p>", 
        "base_res": "<p> initial \"non-adapted\" resolution </p>", 
        "border_collisions": "<p> How domain border collisions are handled </p>", 
        "burning_rate": "<p> flame parameters </p>", 
        "cache_comp": "<p> point cache options </p>", 
        "cell_size": "<p> size of simulation cell in local space </p>", 
        "coba_field": "<p> simulation field used for the color mapping </p>", 
        "diss_speed": "<p> in frames </p>", 
        "dp0": "<p> difference from object center to grid start point </p>", 
        "dx": "<p> 1.0f / res </p>", 
        "flags": "<p> show up-res or low res, etc </p>", 
        "fluidmat": "<p> low res fluid matrix </p>", 
        "fluidmat_wt": "<p> high res fluid matrix </p>", 
        "global_size": "<p> global size of domain axises </p>", 
        "imat": "<p> domain object imat </p>", 
        "maxres": "<p> longest axis on the BB gets this resolution assigned </p>", 
        "noise": "<p> noise type: wave, curl, anisotropic </p>", 
        "obj_shift_f": "<p> how much object has shifted since previous smoke frame (used to \"lock\" domain while drawing) </p>", 
        "obmat": "<p> domain obmat </p>", 
        "openvdb_comp": "<p> OpenVDB cache options </p>", 
        "p0": "<p> simulation data start point of BB in local space (includes sub-cell shift for adaptive domain) </p>", 
        "p1": "<p> end point of BB in local space </p>", 
        "point_cache": "<p> Smoke uses only one cache from now on (index [0]), but keeping the array for now for reading old files. definition is in {@link DNA_object_force.h}  </p>", 
        "res": "<p> data resolution (res_max-res_min) </p>", 
        "res_max": "<p> cell max </p>", 
        "res_min": "<p> cell min </p>", 
        "scale": "<p> largest domain size </p>", 
        "shift": "<p> current domain shift in simulation cells </p>", 
        "shift_f": "<p> exact domain shift </p>", 
        "slice_method": "<p> Display settings </p>", 
        "smd": "<p> for fast RNA access </p>"
      }
    }, 
    "SmokeFlowSettings": {
      "fields": {
        "density": "<p> emission </p>", 
        "flags": "<p> absolute emission etc </p>", 
        "smd": "<p> for fast RNA access </p>", 
        "surface_distance": "<p> maximum emission distance from mesh surface </p>", 
        "temp": "<p> delta temperature (temp - ambient temp) </p>", 
        "texture_size": "<p> texture control </p>", 
        "type": "<p> smoke, flames, both, outflow </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "verts_old": "<p> initial velocity previous vertex positions in domain space </p>", 
        "volume_density": "<p> density emitted within mesh volume </p>"
      }
    }, 
    "SmokeModifierData": {
      "fields": {
        "coll": "<p> collision objects </p>", 
        "flow": "<p> inflow, outflow, smoke objects </p>", 
        "type": "<p> domain, inflow, outflow, ... </p>"
      }
    }, 
    "SmoothModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "SoftBody": {
      "fields": {
        "balldamp": "<p> cooling down collision response </p>", 
        "ballstiff": "<p> pressure the ball is loaded with </p>", 
        "bpoint": "<p> not saved in file </p>", 
        "bspring": "<p> not saved in file </p>", 
        "colball": "<p> self collision fixed collision ball size if > 0 </p>", 
        "defgoal": "<p> default goal for vertices without vgroup </p>", 
        "fuzzyness": "<p> starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613 </p>", 
        "goalfrict": "<p> softbody goal springs friction </p>", 
        "goalspring": "<p> goal softbody goal springs </p>", 
        "grav": "<p> along with it introduce mass painting starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613 softbody amount of gravitaion to apply </p>", 
        "infrict": "<p> softbody inner springs friction </p>", 
        "inspring": "<p> springs softbody inner springs </p>", 
        "keys": "<p><ndash/>  these must be kept for backwards compatibility <ndash/>  array of size totpointkey </p>", 
        "lcom": "<p> reverse esimated obmatrix .. no need to store in blend file .. how ever who cares </p>", 
        "mediafrict": "<p> friction to env </p>", 
        "mingoal": "<p> quick limits for goal </p>", 
        "namedVG_Mass": "<p> MAX_VGROUP_NAME </p>", 
        "namedVG_Softgoal": "<p> MAX_VGROUP_NAME </p>", 
        "namedVG_Spring_K": "<p> MAX_VGROUP_NAME </p>", 
        "nodemass": "<p><em></em>  </p>", 
        "physics_speed": "<p> user control over simulation speed </p>", 
        "rklimit": "<p> error limit for ODE solver </p>", 
        "scratch": "<p> scratch pad/cache on live time not saved in file </p>", 
        "secondspring": "<p><hr/> \n </p>", 
        "sfra": "<p> along with it introduce Spring_K painting starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613 baking </p>", 
        "solverflags": "<p> local==1: use local coords for baking </p>", 
        "totkey": "<p> if totpointkey != totpoint or totkey!- (efra-sfra)/interval -> free keys </p>", 
        "totpoint": "<p> dynamic data </p>", 
        "vertgroup": "<p> index starting at 1 </p>"
      }
    }, 
    "SolidifyModifierData": {
      "fields": {
        "defgrp_name": "<p> name of vertex group to use, MAX_VGROUP_NAME </p>", 
        "offset": "<p> new surface offset level </p>", 
        "offset_clamp": "<p> clamp offset based on surrounding geometry </p>", 
        "offset_fac": "<p> midpoint of the offset </p>", 
        "offset_fac_vg": "<p> factor for the minimum weight to use when vgroups are used, avoids 0.0 weights giving duplicate geometry </p>"
      }
    }, 
    "SpaceAction": {
      "doc": "<p> Action Editor Space. This is defined here instead of in {@link DNA_space_types.h}  </p>", 
      "fields": {
        "action": "<p> the currently active action </p>", 
        "ads": "<p> the currently active context (when not showing action) </p>", 
        "autosnap": "<p> mode: editing context; autosnap: automatic keyframe snapping mode </p>", 
        "flag": "<p> flag: bitmapped settings; </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "timeslide": "<p> for Time-Slide transform mode drawing - current frame? </p>", 
        "v2d": "<p><p> copied to region </p>\n@deprecated\n Deprecatedcopied to region </p>"
      }
    }, 
    "SpaceButs": {
      "doc": "<p> Properties Editor ==================================== Properties Editor </p>", 
      "fields": {
        "align": "<p> align for panels </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "dataicon": "<p> runtime </p>", 
        "mainbuser": "<p> context tabs </p>", 
        "path": "<p> runtime </p>", 
        "preview": "<p> preview is signal to refresh </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "texture_context": "<p> texture context selector (material, lamp, particles, world, other) </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>"
      }
    }, 
    "SpaceClip": {
      "doc": "<p> Motion Tracking ======================================== Clip Editor </p>", 
      "fields": {
        "angle": "<p> pre-composed stabilization data </p>", 
        "clip": "<p> clip data </p>", 
        "cursor": "<p>{@link Mask}  editor 2d cursor </p>", 
        "flag": "<p> flags </p>", 
        "gpencil_src": "<p> grease pencil </p>", 
        "loc": "<p> current stabilization data </p>", 
        "mode": "<p> editor mode (editing context being displayed) </p>", 
        "pad4": "<p> pivot point for transforms </p>", 
        "path_length": "<p> length of displaying path, in frames </p>", 
        "postproc_flag": "<p> movie postprocessing </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "scopes": "<p> different scoped displayed in space panels </p>", 
        "unistabmat": "<p> current stabilization matrix and the same matrix in unified space, defined when drawing and used for mouse position calculation </p>", 
        "user": "<p> user of clip </p>", 
        "view": "<p> type of the clip editor view </p>", 
        "ylockof": "<p> user defined offset from locked position </p>", 
        "yof": "<p> user defined offset, image is centered </p>", 
        "zoom": "<p> user defined zoom level </p>"
      }
    }, 
    "SpaceConsole": {
      "doc": "<p> Console View </p>", 
      "fields": {
        "history": "<p>{@link ConsoleLine} ; command history, current edited line is the first </p>", 
        "language": "<p> multiple consoles are possible, not just python </p>", 
        "lheight": "<p> space vars </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "scrollback": "<p>{@link ConsoleLine} ; output </p>"
      }
    }, 
    "SpaceFile": {
      "doc": "<p> File Browser </p>", 
      "fields": {
        "files": "<p> holds the list of files to show </p>", 
        "folders_next": "<p> holds the list of next directories (pushed from previous) to show </p>", 
        "folders_prev": "<p> holds the list of previous directories to show </p>", 
        "op": "<p> operator that is invoking fileselect op->exec() will be called on the 'Load' button. if operator provides op->cancel(), then this will be invoked on the cancel button. </p>", 
        "params": "<p> config and input for file select </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "SpaceImage": {
      "doc": "<p> Image/UV Editor ======================================== Image/UV Editor </p>", 
      "fields": {
        "centy": "<p> storage for offset while render drawing </p>", 
        "cursor": "<p> UV editor 2d cursor </p>", 
        "curtile": "<p> the currently active tile of the image when tile is enabled, is kept in sync with the active faces tile </p>", 
        "dt_uv": "<p> UV draw type </p>", 
        "gpd": "<p> grease pencil data </p>", 
        "mode": "<p> view/paint/mask </p>", 
        "other_uv_filter": "<p> Filter settings when editor shows other object's UVs. </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "sample_line_hist": "<p> sample line histogram </p>", 
        "scopes": "<p> histogram waveform and vectorscope </p>", 
        "sticky": "<p> sticky selection type </p>", 
        "yof": "<p> user defined offset, image is centered </p>", 
        "zoom": "<p> user defined zoom level </p>"
      }
    }, 
    "SpaceInfo": {
      "doc": "<p> Space Info ========================================== Info Header </p>", 
      "fields": {
        "blockhandler": "<p><p> XXX make deprecated </p>\n@deprecated\n DeprecatedXXX make deprecated </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "SpaceIpo": {
      "doc": "<p> Graph Editor ========================================= 'Graph' Editor (formerly known as the IPO Editor) </p>", 
      "fields": {
        "ads": "<p> settings for filtering animation data (NOTE: we use a pointer due to code-linking issues) </p>", 
        "around": "<p> pivot point for transforms </p>", 
        "autosnap": "<p> time-transform autosnapping settings for Graph editor (eAnimEdit_AutoSnap in {@link DNA_action_types.h} ) </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "cursorTime": "<p> time value for cursor (when in drivers mode; animation uses current frame) </p>", 
        "cursorVal": "<p> cursor value (y-value, x-value is current frame) </p>", 
        "flag": "<p> settings for Graph editor (eGraphEdit_Flag) </p>", 
        "ghostCurves": "<p> sampled snapshots of F-Curves used as in-session guides </p>", 
        "mode": "<p> mode for the Graph editor (eGraphEdit_Mode) </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>"
      }
    }, 
    "SpaceLink": {
      "doc": "<p>{@link SpaceLink}  ({@link Base} ) ==================================== The base structure all the other spaces are derived (implicitly) from. Would be good to make this explicit. </p>", 
      "fields": {
        "blockhandler": "<p><p> XXX make deprecated </p>\n@deprecated\n DeprecatedXXX make deprecated </p>", 
        "blockscale": "<p><p> XXX make deprecated </p>\n@deprecated\n DeprecatedXXX make deprecated </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "SpaceLogic": {
      "doc": "<p> Game Logic Editor ===================================== Logic Editor </p>", 
      "fields": {
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "SpaceNla": {
      "doc": "<p> NLA Editor ============================================= NLA Editor </p>", 
      "fields": {
        "autosnap": "<p> this uses the same settings as autosnap for Action Editor </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>"
      }
    }, 
    "SpaceNode": {
      "fields": {
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "cursor": "<p> mouse pos for drawing socketless link and adding nodes </p>", 
        "from": "<p> context, no need to save in file? well... pinning... </p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "insert_ofs_dir": "<p> direction for offsetting nodes on insertion </p>", 
        "iofsd": "<p> XXX hack for translate_attach op-macros to pass data from transform op to insert_offset op temporary data for node insert offset (in UI called Auto-offset) </p>", 
        "linkdrag": "<p> temporary data for modal linking operator </p>", 
        "pad1": "<p> menunr: browse id block in header </p>", 
        "pad2": "<p> internal state variables </p>", 
        "recalc": "<p> currently on 0/1, for auto compo </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "shaderfrom": "<p> shader from object or world </p>", 
        "texfrom": "<p> texfrom object, world or brush </p>", 
        "tree_idname": "<p> tree type for the current node tree </p>", 
        "treepath": "<p> XXX nodetree pointer info is all in the path stack now, remove later on and use {@link bNodeTreePath}  instead. For now these variables are set when pushing/popping from path stack, to avoid having to update all the functions and operators. Can be done when design is accepted and everything is properly tested. </p>", 
        "treetype": "<p><p> treetype: as same nodetree->type </p>\n@deprecated\n Deprecatedtreetype: as same nodetree->type </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "yof": "<p> offset for drawing the backdrop </p>", 
        "zoom": "<p> zoom for backdrop </p>"
      }
    }, 
    "SpaceOops": {
      "doc": "<p> Outliner =============================================== Outliner </p>", 
      "fields": {
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "search_string": "<p> search stuff </p>", 
        "treehash": "<p> pointers to treestore elements, grouped by (id, type, nr) in hashtable for faster searching </p>", 
        "treestore": "<p> treestore is an ordered list of {@link TreeStoreElem} 's from outliner tree; Note that treestore may contain duplicate elements if element is used multiple times in outliner tree (e. g. linked objects) Also note that BLI_mempool can not be read/written in DNA directly, therefore readfile.c/writefile.c linearize treestore into {@link TreeStore}  structure </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>"
      }
    }, 
    "SpaceScript": {
      "doc": "<p>{@link Script}  View - Obsolete (pre 2.5) </p>", 
      "fields": {
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "SpaceSeq": {
      "doc": "<p>{@link Sequence}  Editor ======================================= Sequencer </p>", 
      "fields": {
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "draw_flag": "<p> overlay an image of the editing on below the strips </p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "mainb": "<p> weird name for the sequencer subtype (seq, image, luma... etc) </p>", 
        "multiview_eye": "<p> multiview current eye - for internal use </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "render_size": "<p> eSpaceSeq_Proxy_RenderSize </p>", 
        "scopes": "<p> different scoped displayed in space </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "view": "<p> see SEQ_VIEW_* below </p>", 
        "xof": "<p>\n@deprecated\n Deprecated</p>", 
        "yof": "<p><p> deprecated: offset for drawing the image preview </p>\n@deprecated\n Deprecateddeprecated: offset for drawing the image preview </p>", 
        "zoom": "<p><p> deprecated, handled by {@link View2D}  now </p>\n@deprecated\n Deprecateddeprecated, handled by View2D now </p>"
      }
    }, 
    "SpaceText": {
      "doc": "<p>{@link Text}  Editor ============================================ {@link Text}  Editor </p>", 
      "fields": {
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "drawcache": "<p> cache for faster drawing </p>", 
        "findstr": "<p> ST_MAX_FIND_STR </p>", 
        "lheight": "<p> user preference, is font_size! </p>", 
        "lheight_dpi": "<p> actual lineheight, dpi controlled </p>", 
        "linenrs_tot": "<p> runtime computed, character width and the number of chars to use when showing line numbers </p>", 
        "live_edit": "<p> run python while editing, evil </p>", 
        "margin_column": "<p> column number to show right margin at </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "replacestr": "<p> ST_MAX_FIND_STR </p>", 
        "scroll_accum": "<p> runtime, for scroll increments smaller than a line </p>"
      }
    }, 
    "SpaceTime": {
      "doc": "<p> Timeline View </p>", 
      "fields": {
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>"
      }
    }, 
    "SpaceTimeCache": {
      "doc": "<p> Timeline =============================================== Pointcache drawing data Only store the data array in the cache to avoid constant reallocation. No need to store when saved. </p>"
    }, 
    "SpaceUserPref": {
      "doc": "<p> User Preferences ======================================= User Preferences View </p>", 
      "fields": {
        "filter": "<p> search term for filtering in the UI </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "Speaker": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "flag": "<p> flag </p>", 
        "volume": "<p> animatable properties </p>", 
        "volume_max": "<p> not animatable properties </p>"
      }
    }, 
    "SPHFluidSettings": {
      "fields": {
        "radius": "<p>{@link Particle}  Fluid </p>"
      }
    }, 
    "Stereo3dFormat": {
      "fields": {
        "anaglyph_type": "<p> anaglyph scheme for the user display </p>", 
        "display_mode": "<p> encoding mode </p>", 
        "interlace_type": "<p> interlace type for the user display </p>"
      }
    }, 
    "Strip": {
      "fields": {
        "color_balance": "<p>\n@deprecated\n Deprecated</p>", 
        "colorspace_settings": "<p> color management </p>", 
        "stripdata": "<p> only used as an array in IMAGE sequences(!), and as a 1-element array in MOVIE sequences, NULL for all other strip-types </p>"
      }
    }, 
    "StripAnim": {
      "doc": "<p> strlens; 256= FILE_MAXFILE, 768= FILE_MAXDIR </p>"
    }, 
    "StripProxy": {
      "fields": {
        "build_flags": "<p> to build </p>", 
        "build_tc_flags": "<p> to build </p>", 
        "file": "<p> (defaults to BL_proxy) </p>"
      }
    }, 
    "SurfaceDeformModifierData": {
      "fields": {
        "target": "<p> bind target object </p>", 
        "verts": "<p> vertex bind data </p>"
      }
    }, 
    "SurfaceModifierData": {
      "fields": {
        "bvhtree": "<p> bounding volume hierarchy of the mesh faces </p>", 
        "v": "<p> velocity </p>", 
        "x": "<p> old position </p>"
      }
    }, 
    "Tex": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "dist_amount": "<p> newnoise: distorted noise amount, musgrave & voronoi output scale </p>", 
        "fie_ima": "<p> variables disabled, moved to struct iuser </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "mg_H": "<p> newnoise: musgrave parameters </p>", 
        "noisebasis": "<p> newnoise: noisebasis type for clouds/marble/etc, noisebasis2 only used for distorted noise </p>", 
        "noisetype": "<p> noisedepth MUST be <= 30 else we get floating point exceptions </p>", 
        "vn_w1": "<p> newnoise: voronoi nearest neighbor weights, minkovsky exponent, distance metric & color type </p>"
      }
    }, 
    "TexMapping": {
      "doc": "<p> used for mapping and texture nodes. note: rot is now in radians </p>"
    }, 
    "TexNodeOutput": {
      "doc": "<p> TEX_output </p>"
    }, 
    "TexPaintSlot": {
      "fields": {
        "ima": "<p> image to be painted on </p>", 
        "index": "<p> index for mtex slot in material for blender internal </p>", 
        "uvname": "<p> customdata index for uv layer, MAX_NAME </p>"
      }
    }, 
    "TextLine": {
      "fields": {
        "blen": "<p> blen unused </p>", 
        "format": "<p> may be NULL if syntax is off or not yet formatted </p>"
      }
    }, 
    "TFace": {
      "doc": "<p> deprecated by {@link MTFace} , only here for file reading </p>", 
      "fields": {
        "tpage": "<p> the faces image for the active UVLayer </p>"
      }
    }, 
    "ThemeSpace": {
      "doc": "<p> try to put them all in one, if needed a special struct can be created as well for example later on, when we introduce wire colors for ob types or so... </p>", 
      "fields": {
        "anim_active": "<p> NLA Active Action + Summary Channel </p>", 
        "anim_non_active": "<p> Active Action = NULL </p>", 
        "audio": "<p> for sequence editor </p>", 
        "back": "<p> main window colors </p>", 
        "button": "<p> button/tool regions region background </p>", 
        "button_title": "<p> panel title </p>", 
        "ds_subchannel": "<p> dopesheet </p>", 
        "face_dot": "<p> selected color </p>", 
        "face_select": "<p> solid faces </p>", 
        "header": "<p> header colors region background </p>", 
        "header_title": "<p> unused </p>", 
        "info_selected": "<p> info </p>", 
        "keyframe_scale_fac": "<p> for dopesheet - scale factor for size of keyframes (i.e. height of channels) </p>", 
        "keytype_jitter": "<p> keytypes </p>", 
        "keytype_jitter_select": "<p> keytypes </p>", 
        "list": "<p> listview regions region background </p>", 
        "list_title": "<p> panel title </p>", 
        "match": "<p> outliner - filter match </p>", 
        "nla_meta_sel": "<p> NLA \"Meta\" strips </p>", 
        "nla_sound_sel": "<p> NLA \"Sound\" strips </p>", 
        "nla_transition_sel": "<p> NLA \"Transition\" strips </p>", 
        "nla_tweakdupli": "<p> NLA - warning color for duplicate instances of tweaking strip </p>", 
        "nla_tweaking": "<p> NLA 'Tweaking' action/strip </p>", 
        "panelcolors": "<p> float panel char panel[4]; unused char panel_title[4]; unused char panel_text[4]; unused char panel_text_hi[4]; unused note, cannot use name 'panel' because of DNA mapping old files </p>", 
        "selected_highlight": "<p> outliner - selected item </p>", 
        "skin_root": "<p> Skin modifier root color </p>", 
        "syntaxl": "<p> syntax for textwindow and nodes </p>", 
        "tab_active": "<p> region tabs </p>", 
        "title": "<p> panel title </p>", 
        "uv_others": "<p> uvs of other objects </p>", 
        "uv_shadow": "<p> two uses, for uvs with modifier applied on mesh and uvs during painting </p>"
      }
    }, 
    "ThemeUI": {
      "fields": {
        "menu_shadow_fac": "<p> fac: 0 - 1 for blend factor, width in pixels </p>", 
        "panel": "<p> depricated, but we keep it for do_versions (2.66.1) </p>", 
        "wcol_regular": "<p> Interface Elements (buttons, menus, icons) </p>", 
        "xaxis": "<p> Axis Colors </p>"
      }
    }, 
    "ThemeWireColor": {
      "doc": "<p> set of colors for use as a custom color set for Objects/Bones wire drawing </p>", 
      "fields": {
        "flag": "<p> eWireColor_Flags </p>"
      }
    }, 
    "TimeMarker": {
      "doc": "<p><hr/> \n Markers </p>"
    }, 
    "ToolSettings": {
      "doc": "<p><hr/> \n Tool Settings </p>", 
      "fields": {
        "auto_normalize": "<p> auto normalizing mode in wpaint </p>", 
        "autoik_chainlen": "<p> Auto-IK runtime only </p>", 
        "autokey_flag": "<p> defines in {@link DNA_userdef_types.h}  </p>", 
        "autokey_mode": "<p> Auto-Keying Mode </p>", 
        "doublimit": "<p> remove doubles limit </p>", 
        "edge_mode": "<p> Alt+RMB option </p>", 
        "gp_brushes": "<p> Grease Pencil Drawing Brushes ({@link bGPDbrush} ) </p>", 
        "gp_interpolate": "<p> Grease Pencil Interpolation Tool(s) </p>", 
        "gp_sculpt": "<p> Grease Pencil {@link Sculpt}  </p>", 
        "gpencil_flags": "<p> Grease Pencil flags/options for how the tool works </p>", 
        "gpencil_ima_align": "<p> : {@link Image}  Editor </p>", 
        "gpencil_seq_align": "<p> : Sequencer Preview </p>", 
        "gpencil_src": "<p> for main 3D view Grease Pencil, where data comes from </p>", 
        "gpencil_v2d_align": "<p> : General 2D Editor </p>", 
        "gpencil_v3d_align": "<p> stroke placement settings: 3D View </p>", 
        "imapaint": "<p>{@link Image}  {@link Paint}  (8 byttse aligned please!) </p>", 
        "keyframe_type": "<p> keyframe type (see {@link DNA_curve_types.h} ) </p>", 
        "lock_markers": "<p> lock marker editing </p>", 
        "multipaint": "<p> paint multiple bones in wpaint </p>", 
        "multires_subdiv_type": "<p>{@link Multires}  </p>", 
        "normalsize": "<p> size of normals </p>", 
        "particle": "<p>{@link Particle}  {@link Editing}  </p>", 
        "proportional_action": "<p> proportional edit, action editor </p>", 
        "proportional_fcurve": "<p> proportional edit, graph editor </p>", 
        "proportional_mask": "<p> proportional edit, mask editing </p>", 
        "proportional_objects": "<p> proportional edit, object mode </p>", 
        "proportional_size": "<p> Transform Proportional Area of {@link Effect}  </p>", 
        "sculpt_paint_settings": "<p> XXX: these sculpt_paint_* fields are deprecated, use the unified_paint_settings field instead! \n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_alpha": "<p>\n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_size": "<p>\n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_unprojected_radius": "<p>\n@deprecated\n Deprecated</p>", 
        "select_thresh": "<p> Select {@link Group}  Threshold </p>", 
        "selectmode": "<p> Selection Mode for {@link Mesh}  </p>", 
        "skgen_resolution": "<p> Skeleton generation </p>", 
        "skgen_template": "<p> Skeleton Sketching </p>", 
        "snap_mode": "<p> Transform </p>", 
        "unified_paint_settings": "<p> Unified {@link Paint}  Settings </p>", 
        "unwrapper": "<p> UV Calculation </p>", 
        "use_uv_sculpt": "<p> UV painting </p>", 
        "uvsculpt": "<p> uv smooth </p>", 
        "vgroup_weight": "<p> Vertex group weight - used only for editmode, not weight paint </p>", 
        "vgroupsubset": "<p> subset selection filter in wpaint </p>", 
        "vpaint": "<p> vertex paint </p>", 
        "wpaint": "<p> weight paint </p>"
      }
    }, 
    "TransformOrientation": {
      "doc": "<p><hr/> \n Transform Orientations </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "TransformVars": {
      "fields": {
        "uniform_scale": "<p> preserve aspect/ratio when scaling </p>"
      }
    }, 
    "TreeStore": {
      "doc": "<p> used only to store data in in blend files </p>", 
      "fields": {
        "data": "<p> elements to be packed from mempool in writefile.c or extracted to mempool in readfile.c </p>", 
        "totelem": "<p><p> was previously used for memory preallocation </p>\n@deprecated\n Deprecatedwas previously used for memory preallocation </p>", 
        "usedelem": "<p> number of elements in data array </p>"
      }
    }, 
    "TriangulateModifierData": {
      "doc": "<p> Triangulate modifier </p>"
    }, 
    "uiFont": {
      "doc": "<p> default fonts to load/initalize first font is the default (index 0), others optional </p>", 
      "fields": {
        "blf_id": "<p> from blfont lib </p>", 
        "filename": "<p> 1024 = FILE_MAX </p>", 
        "r_to_l": "<p> fonts that read from left to right </p>", 
        "uifont_id": "<p> own id (eUIFont_ID) </p>"
      }
    }, 
    "uiFontStyle": {
      "doc": "<p> this state defines appearance of text </p>", 
      "fields": {
        "align": "<p> text align hint </p>", 
        "bold": "<p> style hint </p>", 
        "kerning": "<p> unfitted or default kerning value. </p>", 
        "points": "<p> actual size depends on 'global' dpi </p>", 
        "shadow": "<p> value is amount of pixels blur </p>", 
        "shadowalpha": "<p> total alpha </p>", 
        "shadowcolor": "<p> 1 value, typically white or black anyway </p>", 
        "shady": "<p> shadow offset in pixels </p>", 
        "uifont_id": "<p> saved in file, 0 is default </p>", 
        "word_wrap": "<p> enable word-wrap when drawing </p>"
      }
    }, 
    "uiList": {
      "fields": {
        "dyn_data": "<p> Dynamic data (runtime). </p>", 
        "filter_byname": "<p> Filtering data. defined as UI_MAX_NAME_STR </p>", 
        "layout_type": "<p> How items are layedout in the list </p>", 
        "list_id": "<p> defined as UI_MAX_NAME_STR </p>", 
        "next": "<p> some list UI data need to be saved in file </p>", 
        "properties": "<p> Custom sub-classes properties. </p>", 
        "type": "<p> runtime </p>"
      }
    }, 
    "uiListDyn": {
      "doc": "<p>{@link uiList}  dynamic data... These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "height": "<p> Number of rows needed to draw all elements. </p>", 
        "items_filter_flags": "<p> Filtering data. items_len length. </p>", 
        "items_filter_neworder": "<p> org_idx -> new_idx, items_len length. </p>", 
        "items_len": "<p> Number of items in collection. </p>", 
        "items_shown": "<p> Number of items actually visible after filtering. </p>", 
        "resize": "<p> Those are temp data used during drag-resize with GRIP button (they are in pixels, the meaningful data is the difference between resize_prev and resize)... </p>", 
        "visual_height": "<p> Actual visual height of the list (in rows). </p>", 
        "visual_height_min": "<p> Minimal visual height of the list (in rows). </p>"
      }
    }, 
    "uiPreview": {
      "fields": {
        "next": "<p> some preview UI data need to be saved in file </p>", 
        "preview_id": "<p> defined as UI_MAX_NAME_STR </p>"
      }
    }, 
    "uiStyle": {
      "doc": "<p> this is fed to the layout engine and widget code </p>", 
      "fields": {
        "minlabelchars": "<p> in characters </p>", 
        "minwidgetchars": "<p> in characters </p>", 
        "name": "<p> MAX_STYLE_NAME </p>"
      }
    }, 
    "UnifiedPaintSettings": {
      "doc": "<p><hr/> \n Unified {@link Paint}  Settings These settings can override the equivalent fields in the active {@link Brush}  for any paint mode; the flag field controls whether these values are used </p>", 
      "fields": {
        "alpha": "<p> unified strength of brush </p>", 
        "colorspace": "<p> ColorSpace cache to avoid locking up during sampling </p>", 
        "flag": "<p> user preferences for sculpt and paint </p>", 
        "last_location": "<p> store last location of stroke or whether the mesh was hit. Valid only while stroke is active </p>", 
        "last_rake": "<p> rake rotation record movement of mouse so that rake can start at an intuitive angle </p>", 
        "mask_tex_mouse": "<p> position of mouse, used to sample the mask texture </p>", 
        "overlap_factor": "<p> normalization factor due to accumulated value of curve along spacing. Calculated when brush spacing changes to dampen strength of stroke if space attenuation is used </p>", 
        "pixel_radius": "<p> radius of brush, premultiplied with pressure. In case of anchored brushes contains the anchored radius </p>", 
        "rgb": "<p> unified brush color </p>", 
        "secondary_rgb": "<p> unified brush secondary color </p>", 
        "size": "<p> unified radius of brush in pixels </p>", 
        "size_pressure_value": "<p> drawing pressure </p>", 
        "stroke_active": "<p> check is there an ongoing stroke right now </p>", 
        "tex_mouse": "<p> position of mouse, used to sample the texture </p>", 
        "unprojected_radius": "<p> unified radius of brush in Blender units </p>", 
        "weight": "<p> unified brush weight, [0, 1] </p>"
      }
    }, 
    "UnitSettings": {
      "doc": "<p><hr/> \n Unit Settings </p>", 
      "fields": {
        "scale_length": "<p> Display/Editing unit options for each scene maybe have other unit conversions? </p>", 
        "system": "<p> imperial, metric etc </p>", 
        "system_rotation": "<p> not implemented as a proper unit system yet </p>"
      }
    }, 
    "UserDef": {
      "fields": {
        "anim_player": "<p> 1024 = FILE_MAX </p>", 
        "app_template": "<p> startup template </p>", 
        "author": "<p> author name for file formats supporting it </p>", 
        "autokey_flag": "<p> flags for autokeying </p>", 
        "autokey_mode": "<p> eAutokey_Mode, autokeying mode </p>", 
        "coba_weight": "<p> from texture.h </p>", 
        "color_picker_type": "<p> eColorPicker_Types </p>", 
        "dpi": "<p> range 48-128? </p>", 
        "dupflag": "<p> eDupli_ID_Flags </p>", 
        "fcu_inactive_alpha": "<p> opacity of inactive F-Curves in F-Curve Editor </p>", 
        "flag": "<p> eUserPref_Flag </p>", 
        "gp_settings": "<p> eGP_UserdefSettings </p>", 
        "gpencil_new_layer_col": "<p> default color for newly created Grease Pencil layers </p>", 
        "image_draw_method": "<p> eImageDrawMethod, Method to be used to draw the images (AUTO, GLSL, Textures or DrawPixels) </p>", 
        "image_editor": "<p> 1024 = FILE_MAX </p>", 
        "ipo_new": "<p> interpolation mode for newly added F-Curves </p>", 
        "keyhandles_new": "<p> handle types for newly added keyframes </p>", 
        "keymaps": "<p><p> deprecated in favor of user_keymaps </p>\n@deprecated\n Deprecateddeprecated in favor of user_keymaps </p>", 
        "ndof_deadzone": "<p> deadzone of 3D mouse </p>", 
        "ndof_flag": "<p> eNdof_Flag, flags for 3D mouse </p>", 
        "ndof_sensitivity": "<p> overall sensitivity of 3D mouse </p>", 
        "node_margin": "<p> node insert offset (aka auto-offset) margin, but might be useful for later stuff as well </p>", 
        "ogl_multisamples": "<p> eMultiSample_Type, amount of samples for OpenGL FSA, if zero no FSA </p>", 
        "pad9": "<p> options for text rendering </p>", 
        "pad_rot_angle": "<p> control the rotation step of the view when PAD2, PAD4, PAD6&PAD8 is use </p>", 
        "pie_initial_timeout": "<p> direction in the pie menu will always be calculated from the initial position within this time limit </p>", 
        "pie_interaction_type": "<p> if keeping a pie menu spawn button pressed after this time, it turns into a drag/release pie menu </p>", 
        "pie_menu_radius": "<p> pie menu radius </p>", 
        "pie_menu_threshold": "<p> pie menu distance from center before a direction is set </p>", 
        "pixelsize": "<p> private, set by GHOST, to multiply DPI with </p>", 
        "recent_files": "<p> maximum number of recently used files to remember </p>", 
        "render_cachedir": "<p> EXR cache path 768 = FILE_MAXDIR </p>", 
        "renderdir": "<p> FILE_MAX length </p>", 
        "rvibright": "<p> rotating view icon brightness </p>", 
        "rvisize": "<p> rotating view icon size </p>", 
        "scrcastfps": "<p> frame rate for screencast to be played back </p>", 
        "scrcastwait": "<p> milliseconds between screencast snapshots </p>", 
        "scrollback": "<p> console scrollback limit </p>", 
        "smooth_viewtx": "<p> miliseconds to spend spinning the view </p>", 
        "tempdir": "<p> FILE_MAXDIR length </p>", 
        "timecode_style": "<p> eTimecodeStyles, style of timecode display </p>", 
        "transopts": "<p> eUserpref_Translation_Flags </p>", 
        "ui_line_width": "<p> interface line width </p>", 
        "ui_scale": "<p> interface scale </p>", 
        "uiflag": "<p> eUserpref_UI_Flag </p>", 
        "uiflag2": "<p> eUserpref_UI_Flag2 </p>", 
        "v2d_min_gridsize": "<p> minimum spacing between gridlines in {@link View2D}  grids </p>", 
        "versionfile": "<p>{@link UserDef}  has separate do-version handling, and can be read from other files </p>", 
        "view_frame_keyframes": "<p> number of keyframes to zoom around current frame </p>", 
        "view_frame_seconds": "<p> seconds to zoom around current frame </p>", 
        "view_frame_type": "<p> eZoomFrame_Mode </p>", 
        "virtual_pixel": "<p> virtual pixelsize mode </p>", 
        "widget_unit": "<p> private, defaults to 20 for 72 DPI setting </p>", 
        "wmdrawmethod": "<p> eWM_DrawMethod </p>"
      }
    }, 
    "UVProjectModifierData": {
      "fields": {
        "image": "<p> the image to project </p>", 
        "projectors": "<p> the objects which do the projecting MOD_UVPROJECT_MAXPROJECTORS </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "UVWarpModifierData": {
      "fields": {
        "bone_dst": "<p> optional name of bone target, MAX_ID_NAME-2 </p>", 
        "bone_src": "<p> optional name of bone target, MAX_ID_NAME-2 </p>", 
        "center": "<p> used for rotate/scale </p>", 
        "object_dst": "<p> target </p>", 
        "object_src": "<p> source </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "vgroup_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "vec2f": {
      "doc": "<p> vector of two floats. </p>"
    }, 
    "vec2s": {
      "doc": "<p> types vector of two shorts. </p>"
    }, 
    "vec3f": {
      "doc": "<p> not used at the moment typedef struct vec2i { int x, y; } vec2i;</p><p> typedef struct vec2d { double x, y; } vec2d;</p><p> typedef struct vec3i { int x, y, z; } vec3i; </p>"
    }, 
    "VFont": {
      "fields": {
        "name": "<p> 1024 = FILE_MAX </p>", 
        "temp_pf": "<p> runtime only, holds memory for freetype to read from TODO, replace this with blf_font_new() style loading </p>"
      }
    }, 
    "View2D": {
      "doc": "<p><hr/> \n View 2D data - stored per region </p>", 
      "fields": {
        "align": "<p> alignment of content in totrect </p>", 
        "around": "<p> pivot point for transforms (rotate and scale) </p>", 
        "cur": "<p> tot - area that data can be drawn in; cur - region of tot that is visible in viewport </p>", 
        "flag": "<p> settings </p>", 
        "hor": "<p> vert - vertical scrollbar region; hor - horizontal scrollbar region </p>", 
        "keepofs": "<p> keepofs - axes that translation is not allowed to occur on </p>", 
        "keeptot": "<p> keeptot - 'cur' rect cannot move outside the 'tot' rect? </p>", 
        "keepzoom": "<p> keepzoom - axes that zooming cannot occur on, and also clamp within zoom-limits </p>", 
        "mask": "<p> mask - region (in screenspace) within which 'cur' can be viewed </p>", 
        "max": "<p> min/max sizes of 'cur' rect (only when keepzoom not set) </p>", 
        "maxzoom": "<p> allowable zoom factor range (only when (keepzoom & V2D_LIMITZOOM)) is set </p>", 
        "oldwiny": "<p> storage of previous winx/winy values encountered by UI_view2d_curRect_validate(), for keepaspect </p>", 
        "scroll": "<p> scroll - scrollbars to display (bitflag) </p>", 
        "scroll_ui": "<p> scroll_ui - temp settings used for UI drawing of scrollers </p>", 
        "sms": "<p> animated smooth view </p>", 
        "tab_cur": "<p> current tab </p>", 
        "tab_num": "<p> number of tabs stored </p>", 
        "tab_offset": "<p> different offset per tab, for buttons </p>", 
        "winy": "<p> storage of current winx/winy values, set in UI_view2d_size_update </p>"
      }
    }, 
    "View3D": {
      "doc": "<p> 3D ViewPort Struct </p>", 
      "fields": {
        "afterdraw_transp": "<p> afterdraw, for xray & transparent </p>", 
        "bgpic": "<p><p> deprecated, use bgpicbase, only kept for do_versions(...) </p>\n@deprecated\n Deprecateddeprecated, use bgpicbase, only kept for do_versions(...) </p>", 
        "bundle_drawtype": "<p> display style for bundle </p>", 
        "bundle_size": "<p> size of bundles in reconstructed data </p>", 
        "defmaterial": "<p> Allocated per view, not library data (used by matcap). </p>", 
        "dist": "<p>\n@deprecated\n Deprecated</p>", 
        "drawtype": "<p> The drawing mode for the 3d display. Set to OB_BOUNDBOX, OB_WIRE, OB_SOLID, OB_TEXTURE, OB_MATERIAL or OB_RENDER </p>", 
        "fx_settings": "<p><em></em>  allocated, instead set (temporarily) from camera </p>", 
        "gpd": "<p> XXX deprecated? <p> Grease-Pencil Data (annotation layers) </p>\n@deprecated\n DeprecatedGrease-Pencil Data (annotation layers) </p>", 
        "gridsubdiv": "<p> Number of subdivisions in the grid between each highlighted grid line </p>", 
        "lay_prev": "<p> for active layer toggle </p>", 
        "lay_used": "<p> used while drawing </p>", 
        "localvd": "<p> allocated backup of its self while in localview </p>", 
        "matcap_icon": "<p> icon id </p>", 
        "multiview_eye": "<p> multiview current eye - for internal use </p>", 
        "ob_centre_bone": "<p> optional string for armature bone to define center, MAXBONENAME </p>", 
        "ob_centre_cursor": "<p> optional bool for 3d cursor to define center </p>", 
        "ofs": "<p><p> XXX deprecated </p>\n@deprecated\n DeprecatedXXX deprecated </p>", 
        "pad3": "<p> built-in shader effects (eGPUFXFlags) </p>", 
        "persp": "<p>\n@deprecated\n Deprecated</p>", 
        "prev_drawtype": "<p> Previous viewport draw type. Runtime-only, set in the rendered viewport toggle operator. </p>", 
        "properties_storage": "<p> Nkey panel stores stuff here (runtime only!) </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "stereo3d_flag": "<p> multiview - stereo 3d </p>", 
        "twtype": "<p> transform widget info </p>", 
        "view": "<p>\n@deprecated\n Deprecated</p>", 
        "viewquat": "<p>\n@deprecated\n Deprecated</p>", 
        "zbuf": "<p> drawflags, denoting state </p>"
      }
    }, 
    "VolumeSettings": {
      "doc": "<p> WATCH IT: change type? also make changes in ipo.h </p>"
    }, 
    "VoxelData": {
      "fields": {
        "dataset": "<p> temporary data </p>", 
        "object": "<p> for rendering smoke sims </p>", 
        "source_path": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "VPaint": {
      "doc": "<p><hr/> \n Vertex {@link Paint}  Vertex {@link Paint}  </p>", 
      "fields": {
        "paintcursor": "<p> wm handle </p>", 
        "tot": "<p> allocation size of prev buffers </p>", 
        "vpaint_prev": "<p> previous mesh colors </p>", 
        "wpaint_prev": "<p> previous vertex weights </p>"
      }
    }, 
    "WalkNavigation": {
      "fields": {
        "mouse_speed": "<p> speed factor for look around </p>", 
        "teleport_time": "<p> duration to use for teleporting </p>"
      }
    }, 
    "WarpModifierData": {
      "fields": {
        "defgrp_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "flag": "<p> not used yet </p>", 
        "object_from": "<p> end {@link MappingInfoModifierData}  </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "WaveModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "objectcenter": "<p> end {@link MappingInfoModifierData}  </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "WeightVGEditModifierData": {
      "fields": {
        "add_threshold": "<p> The add/remove vertices weight thresholds. </p>", 
        "cmap_curve": "<p> Mapping stuff. The custom mapping curve! </p>", 
        "default_weight": "<p> Weight for vertices not in vgroup. </p>", 
        "defgrp_name": "<p> Name of vertex group to edit. MAX_VGROUP_NAME. </p>", 
        "edit_flags": "<p> Using MOD_WVG_EDIT_* flags. </p>", 
        "falloff_type": "<p> Using MOD_WVG_MAPPING_* defines. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "mask_tex_mapping": "<p> How to map the texture (using MOD_DISP_MAP_* enums). </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV map. MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "pad_i1": "<p> Padding... </p>"
      }
    }, 
    "WeightVGMixModifierData": {
      "fields": {
        "default_weight_a": "<p> Default weight value for first vgroup. </p>", 
        "default_weight_b": "<p> Default weight value to mix in. </p>", 
        "defgrp_name_a": "<p> Name of vertex group to modify/weight. MAX_VGROUP_NAME. </p>", 
        "defgrp_name_b": "<p> Name of other vertex group to mix in. MAX_VGROUP_NAME. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "mask_tex_mapping": "<p> How to map the texture! </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "mix_mode": "<p> How second vgroups weights affect first ones </p>", 
        "mix_set": "<p> What vertices to affect. </p>", 
        "pad_i1": "<p> Padding... </p>"
      }
    }, 
    "WeightVGProximityModifierData": {
      "fields": {
        "defgrp_name": "<p> Name of vertex group to modify/weight. MAX_VGROUP_NAME. </p>", 
        "falloff_type": "<p> Put here to avoid breaking existing struct... Using MOD_WVG_MAPPING_* enums. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "mask_tex_mapping": "<p> How to map the texture! </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV Map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "max_dist": "<p> Distances mapping to 0.0/1.0 weights. </p>", 
        "pad_s1": "<p> Padding... </p>", 
        "proximity_mode": "<p> Proximity modes. </p>", 
        "proximity_ob_target": "<p> Target object from which to calculate vertices distances. </p>"
      }
    }, 
    "WipeVars": {
      "doc": "<p> ************* {@link Effect}  Variable Structs ********* </p>"
    }, 
    "WireframeModifierData": {
      "doc": "<p> many of these options match 'solidify' </p>", 
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "wmKeyConfig": {
      "fields": {
        "basename": "<p> idname of configuration this is derives from, \"\" if none </p>", 
        "idname": "<p> unique name </p>"
      }
    }, 
    "wmKeyMap": {
      "doc": "<p> stored in WM, the actively used keymaps </p>", 
      "fields": {
        "flag": "<p> general flags </p>", 
        "idname": "<p> global editor keymaps, or for more per space/region </p>", 
        "kmi_id": "<p> last kmi id </p>", 
        "modal_items": "<p> for modal, EnumPropertyItem for now </p>", 
        "poll": "<p> runtime verify if enabled in the current context </p>", 
        "regionid": "<p> see above </p>", 
        "spaceid": "<p> same IDs as in {@link DNA_space_types.h}  </p>"
      }
    }, 
    "wmKeyMapDiffItem": {
      "doc": "<p> used instead of {@link wmKeyMapItem}  for diff keymaps </p>"
    }, 
    "wmKeyMapItem": {
      "doc": "<p> partial copy of the event, for matching by eventhandler </p>", 
      "fields": {
        "flag": "<p> flag: inactive, expanded </p>", 
        "id": "<p> unique identifier. Positive for kmi that override builtins, negative otherwise </p>", 
        "idname": "<p> operator used to retrieve operator type pointer </p>", 
        "keymodifier": "<p> rawkey modifier </p>", 
        "maptype": "<p> runtime keymap editor </p>", 
        "oskey": "<p> oskey is apple or windowskey, value denotes order of pressed </p>", 
        "properties": "<p> operator properties, assigned to ptr->data and can be written to a file </p>", 
        "propvalue": "<p> if used, the item is from modal map </p>", 
        "propvalue_str": "<p> modal runtime temporary storage for loading </p>", 
        "ptr": "<p> rna pointer to access properties </p>", 
        "type": "<p> event event code itself </p>", 
        "val": "<p> KM_ANY, KM_PRESS, KM_NOTHING etc </p>"
      }
    }, 
    "wmOperator": {
      "doc": "<p> this one is the operator itself, stored in files for macros etc operator + operatortype should be able to redo entirely, but for different contextes </p>", 
      "fields": {
        "customdata": "<p> custom storage, only while operator runs </p>", 
        "idname": "<p> saved used to retrieve type pointer </p>", 
        "layout": "<p> runtime for drawing </p>", 
        "macro": "<p> list of operators, can be a tree </p>", 
        "opm": "<p> current running macro, not saved </p>", 
        "properties": "<p> saved, user-settable properties </p>", 
        "ptr": "<p> rna pointer to access properties </p>", 
        "py_instance": "<p> python stores the class instance here </p>", 
        "reports": "<p> errors and warnings storage </p>", 
        "type": "<p> runtime operator type definition from idname </p>"
      }
    }, 
    "wmOperatorTypeMacro": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. should be something like DNA_EXCLUDE but the preprocessor first removes all comments, spaces etc </p>", 
      "fields": {
        "idname": "<p> operator id </p>", 
        "properties": "<p> rna pointer to access properties, like keymap operator properties, assigned to ptr->data and can be written to a file </p>"
      }
    }, 
    "wmWindow": {
      "doc": "<p> IME is win32 only! the savable part, rest of data is local in ghostwinlay </p>", 
      "fields": {
        "active": "<p> set to 1 if an active window, for quick rejects </p>", 
        "addmousemove": "<p> internal: tag this for extra mousemove event, makes cursors/buttons active on UI switching </p>", 
        "cursor": "<p> current mouse cursor type </p>", 
        "curswin": "<p> internal for wm_subwindow.c only </p>", 
        "drawdata": "<p> internal for wm_draw.c only </p>", 
        "drawfail": "<p> internal for wm_draw.c only </p>", 
        "eventstate": "<p> storage for event system </p>", 
        "gesture": "<p> gesture stuff </p>", 
        "ghostwin": "<p> don't want to include ghost.h stuff </p>", 
        "grabcursor": "<p> cursor grab mode </p>", 
        "handlers": "<p> window+screen handlers, handled last </p>", 
        "ime_data": "<p> Input Method Editor data - complex character input (esp. for asian character input) Currently WIN32, runtime-only data </p>", 
        "last_pie_event": "<p> exception to the above rule for nested pies, store last pie event for operators that spawn a new pie right after destruction of last pie </p>", 
        "lastcursor": "<p> previous cursor when setting modal one </p>", 
        "lock_pie_event": "<p> internal, lock pie creation from this event until released </p>", 
        "modalcursor": "<p> the current modal cursor </p>", 
        "modalhandlers": "<p> priority handlers, handled first </p>", 
        "monitor": "<p> multiscreen... no idea how to store yet </p>", 
        "multisamples": "<p> amount of samples for OpenGL FSA the ghost window was created with, if zero no FSA </p>", 
        "newscreen": "<p> temporary when switching </p>", 
        "queue": "<p> all events (ghost level events were handled) </p>", 
        "screen": "<p> active screen </p>", 
        "screenname": "<p> MAX_ID_NAME for matching window with active screen after file read </p>", 
        "sizey": "<p> window coords </p>", 
        "stereo3d_format": "<p> properties for stereoscopic displays </p>", 
        "subwindows": "<p> opengl stuff for sub windows, see notes in wm_subwindow.c </p>", 
        "tweak": "<p> internal for wm_operators.c </p>", 
        "windowstate": "<p> borderless, full </p>", 
        "winid": "<p> winid also in screens, is for retrieving this window after read </p>"
      }
    }, 
    "wmWindowManager": {
      "doc": "<p> reports need to be before {@link wmWindowManager}  windowmanager is saved, tag WMAN </p>", 
      "fields": {
        "addonconf": "<p> addon configuration </p>", 
        "autosavetimer": "<p> timer for auto save </p>", 
        "defaultconf": "<p> default configuration </p>", 
        "drags": "<p> active dragged items </p>", 
        "file_saved": "<p> indicator whether data was saved </p>", 
        "initialized": "<p> set on file read </p>", 
        "is_interface_locked": "<p> indicates whether interface is locked for user interaction </p>", 
        "jobs": "<p> threaded jobs manager </p>", 
        "keyconfigs": "<p> known key configurations </p>", 
        "op_undo_depth": "<p> operator stack depth to avoid nested undo pushes </p>", 
        "operators": "<p> operator registry </p>", 
        "paintcursors": "<p> extra overlay cursors to draw, like circles </p>", 
        "queue": "<p> refresh/redraw wmNotifier structs </p>", 
        "reports": "<p> information and error reports </p>", 
        "timers": "<p> active timers </p>", 
        "userconf": "<p> user configuration </p>", 
        "winactive": "<p> separate active from drawable </p>"
      }
    }, 
    "World": {
      "doc": "<p>{@link World}  defines general modeling data such as a background fill, gravity, color model etc. It mixes game-data, rendering data and modeling data. </p>", 
      "fields": {
        "activityBoxRadius": "<p> Radius of the activity bubble, in Manhattan length. Objects outside the box are activity-culled. </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "aodist": "<p> ambient occlusion </p>", 
        "aosphere": "<p> ambient occlusion (contd...) </p>", 
        "dofsta": "<p> unused now: DOF </p>", 
        "exposure": "<p> Exposure= mult factor. unused now, but maybe back later. Kept in to be upward compat. New is exp/range control. linfac & logfac are constants... don't belong in file, but allocating 8 bytes for temp mem isn't useful either. </p>", 
        "flag": "<p> assorted settings (in the middle of ambient occlusion settings for padding reasons) </p>", 
        "gpumaterial": "<p> runtime </p>", 
        "gravity": "<p> Gravitation constant for the game world </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "mode": "<p> Some world modes bit 0: Do mist bit 1: Do stars bit 2: (reserved) depth of field bit 3: (gameengine): Activity culling is enabled. bit 4: ambient occlusion bit 5: (gameengine) : enable Bullet DBVT tree for view frustum culling </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "nodetree": "<p> nodes </p>", 
        "occlusionRes": "<p> resolution of occlusion Z buffer in pixel </p>", 
        "physicsEngine": "<p> XXX moved to scene->gamedata in 2.5. </p><p> here it's aligned </p>", 
        "preview": "<p> previews </p>", 
        "starb": "<p>\n@deprecated\n Deprecated</p>", 
        "starcolnoise": "<p>\n@deprecated\n Deprecated</p>", 
        "stardist": "<p>\n@deprecated\n Deprecated</p>", 
        "starg": "<p>\n@deprecated\n Deprecated</p>", 
        "stark": "<p><p> Deprecated </p>\n@deprecated\n DeprecatedDeprecated </p>", 
        "starmindist": "<p>\n@deprecated\n Deprecated</p>", 
        "starr": "<p>\n@deprecated\n Deprecated</p>", 
        "starsize": "<p>\n@deprecated\n Deprecated</p>", 
        "ticrate": "<p> XXX moved to scene->gamedata in 2.5. </p>"
      }
    }
  }, 
  "system": "Blender", 
  "version": "2.79"
}