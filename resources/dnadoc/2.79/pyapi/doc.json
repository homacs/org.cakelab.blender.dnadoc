{
  "module": "DNA", 
  "source": "Blender Python API", 
  "structs": {
    "Action": {
      "fields": {
        "fcurves": "(read-only)    The individual F-Curves that make up the action", 
        "frame_range": "(read-only)    The final frame range of all F-Curves within this action", 
        "groups": "(read-only)    Convenient groupings of F-Curves", 
        "id_root": "Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING", 
        "pose_markers": "(read-only)    Markers specific to this action, for labeling poses"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ActionActuator": {
      "fields": {
        "apply_to_children": "Update Action on all children Objects as well", 
        "blend_mode": "How this layer is blended with previous layers", 
        "frame_blend_in": "Number of frames of motion blending", 
        "frame_property": "Assign the action's current frame number to this property", 
        "layer": "The animation layer to play the action on", 
        "layer_weight": "How much of the previous layer to blend into this one", 
        "play_mode": "Action playback type", 
        "priority": "Execution priority - lower numbers will override actions with higher numbers (with 2 or more actions at once, the overriding channels must be lower in the stack)", 
        "property": "Use this property to define the Action position", 
        "use_additive": "Action is added to the current loc/rot/scale in global or local coordinate according to Local flag", 
        "use_continue_last_frame": "Restore last frame when switching on/off, otherwise play from the start each time", 
        "use_force": "Apply Action as a global or local force depending on the local option (dynamic objects only)", 
        "use_local": "Let the Action act in local coordinates, used in Force and Add mode"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ActionConstraint": {
      "fields": {
        "action": "The constraining action", 
        "frame_end": "Last frame of the Action to use", 
        "frame_start": "First frame of the Action to use", 
        "max": "Maximum value for target channel range", 
        "min": "Minimum value for target channel range", 
        "target": "Target Object", 
        "transform_channel": "Transformation channel from the target that is used to key the Action", 
        "use_bone_object_action": "Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ActionGroup": {
      "fields": {
        "channels": "(read-only)    F-Curves in this group", 
        "color_set": "Custom color set to use", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "is_custom_color_set": "(read-only)    Color set is user-defined instead of a fixed theme color set", 
        "lock": "Action group is locked", 
        "select": "Action group is selected", 
        "show_expanded": "Action group is expanded"
      }
    }, 
    "ActionPoseMarkers": {
      "fields": {
        "active": "Active pose marker for this action", 
        "active_index": "Index of active pose marker"
      }
    }, 
    "Actuator": {
      "fields": {
        "active": "Set the active state of the actuator", 
        "pin": "Display when not linked to a visible states controller", 
        "show_expanded": "Set actuator expanded in the user interface"
      }
    }, 
    "ActuatorSensor": {
      "fields": {
        "actuator": "Actuator name, actuator active state modifications will be detected"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "Addon": {
      "fields": {
        "module": "Module name", 
        "preferences": "(read-only)"
      }
    }, 
    "AddSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AdjustmentSequence": {
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AlembicObjectPath": {
      "fields": {
        "path": "Object path"
      }
    }, 
    "AlphaOverSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AlphaUnderSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AnimData": {
      "fields": {
        "action": "Active Action for this data-block", 
        "action_blend_type": "Method used for combining Active Action's result with result of NLA stack", 
        "action_extrapolation": "Action to take for gaps past the Active Action's range (when evaluating with NLA)", 
        "action_influence": "Amount the Active Action contributes to the result of the NLA stack", 
        "drivers": "(read-only)    The Drivers/Expressions for this data-block", 
        "nla_tracks": "(read-only)    NLA Tracks (i.e. Animation Layers)", 
        "use_nla": "NLA stack is evaluated when evaluating this block", 
        "use_tweak_mode": "Whether to enable or disable tweak mode in NLA"
      }
    }, 
    "AnimViz": {
      "fields": {
        "motion_path": "(read-only)    Motion Path settings for visualization", 
        "onion_skin_frames": "(read-only)    Onion Skinning (ghosting) settings for visualization"
      }
    }, 
    "AnimVizMotionPaths": {
      "fields": {
        "bake_location": "When calculating Bone Paths, use Head or Tips", 
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_end": "End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_start": "Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_step": "Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)", 
        "show_frame_numbers": "Show frame numbers on Motion Paths", 
        "show_keyframe_action_all": "For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)", 
        "show_keyframe_highlight": "Emphasize position of keyframes on Motion Paths", 
        "show_keyframe_numbers": "Show frame numbers of Keyframes on Motion Paths", 
        "type": "Type of range to show for Motion Paths"
      }
    }, 
    "AnimVizOnionSkinning": {
      "fields": {
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_end": "End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_start": "Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_step": "Number of frames between ghosts shown (not for 'On Keyframes' Onion-skinning method)", 
        "show_only_selected": "For Pose-Mode drawing, only draw ghosts for selected bones", 
        "type": "Method used for determining what ghosts get drawn"
      }
    }, 
    "Area": {
      "fields": {
        "height": "(read-only)    Area height", 
        "regions": "(read-only)    Regions this area is subdivided in", 
        "show_menus": "Show menus in the header", 
        "spaces": "(read-only)    Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)", 
        "type": "Current editor type for this area", 
        "width": "(read-only)    Area width", 
        "x": "(read-only)    The window relative vertical location of the area", 
        "y": "(read-only)    The window relative horizontal location of the area"
      }
    }, 
    "AreaLamp": {
      "fields": {
        "compression_threshold": "Deep shadow map compression threshold", 
        "gamma": "Light gamma correction value", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "shadow_ray_samples_x": "Number of samples taken extra (samples x samples)", 
        "shadow_ray_samples_y": "Number of samples taken extra (samples x samples)", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "shape": "Shape of the area lamp", 
        "size": "Size of the area of the area Lamp, X direction size for Rectangle shapes", 
        "size_y": "Size of the area of the area Lamp in the Y direction for Rectangle shapes", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "use_dither": "Use 2x2 dithering for sampling  (Constant Jittered sampling)", 
        "use_jitter": "Use noise for sampling  (Constant Jittered sampling)", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "use_umbra": "Emphasize parts that are fully shadowed (Constant Jittered sampling)"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "AreaSpaces": {
      "fields": {
        "active": "(read-only)    Space currently being displayed in this area"
      }
    }, 
    "Armature": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "bones": "(read-only)", 
        "deform_method": "Vertex Deformer Method (Game Engine only)", 
        "edit_bones": "(read-only)", 
        "ghost_frame_end": "End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "ghost_frame_start": "Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "ghost_size": "Frame step for Ghosts (not for 'On Keyframes' Onion-skinning method)", 
        "ghost_step": "Number of frame steps on either side of current frame to show as ghosts (only for 'Around Current Frame' Onion-skinning method)", 
        "ghost_type": "Method of Onion-skinning for active Action", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "layers": "Armature layer visibility", 
        "layers_protected": "Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo", 
        "pose_position": "Show armature in binding pose or final posed state", 
        "show_axes": "Draw bone axes", 
        "show_bone_custom_shapes": "Draw bones with their custom shapes", 
        "show_group_colors": "Draw bone group colors", 
        "show_names": "Draw bone names", 
        "use_auto_ik": "Add temporary IK constraints while grabbing bones in Pose Mode", 
        "use_deform_delay": "Don't deform children when manipulating bones in Pose Mode", 
        "use_mirror_x": "Apply changes to matching bone on opposite side of X-Axis"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ArmatureActuator": {
      "fields": {
        "bone": "Bone on which the constraint is defined", 
        "constraint": "Name of the constraint to control", 
        "influence": "Influence of this constraint", 
        "secondary_target": "Set this object as the secondary target of the constraint (only IK polar target at the moment)", 
        "target": "Set this object as the target of the constraint", 
        "weight": "Weight of this constraint"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ArmatureBones": {
      "fields": {
        "active": "Armature's active bone"
      }
    }, 
    "ArmatureEditBones": {
      "fields": {
        "active": "Armatures active edit bone"
      }
    }, 
    "ArmatureModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "object": "Armature object to deform with", 
        "use_bone_envelopes": "Bind Bone envelopes to armature modifier", 
        "use_deform_preserve_volume": "Deform rotation interpolation with quaternions", 
        "use_multi_modifier": "Use same input as previous modifier, and mix results using overall vgroup", 
        "use_vertex_groups": "Bind vertex groups to armature modifier", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ArmatureSensor": {
      "fields": {
        "bone": "Identify the bone to check value from", 
        "constraint": "Identify the bone constraint to check value from", 
        "test_type": "Type of value and test", 
        "value": "Value to be used in comparison"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "ArrayModifier": {
      "fields": {
        "constant_offset_displace": "Value for the distance between arrayed items", 
        "count": "Number of duplicates to make", 
        "curve": "Curve object to fit array length to", 
        "end_cap": "Mesh object to use as an end cap", 
        "fit_length": "Length to fit array within", 
        "fit_type": "Array length calculation method", 
        "merge_threshold": "Limit below which to merge vertices", 
        "offset_object": "Use the location and rotation of another object to determine the distance and rotational change between arrayed items", 
        "relative_offset_displace": "The size of the geometry will determine the distance between arrayed items", 
        "start_cap": "Mesh object to use as a start cap", 
        "use_constant_offset": "Add a constant offset", 
        "use_merge_vertices": "Merge vertices in adjacent duplicates", 
        "use_merge_vertices_cap": "Merge vertices in first and last duplicates", 
        "use_object_offset": "Add another object's transformation to the total offset", 
        "use_relative_offset": "Add an offset relative to the object's bounding box"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BackgroundImage": {
      "fields": {
        "clip": "Movie clip displayed and edited in this space", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "draw_depth": "Draw under or over everything", 
        "frame_method": "How the image fits in the camera frame", 
        "image": "Image displayed and edited in this space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "offset_x": "Offset image horizontally from the world origin", 
        "offset_y": "Offset image vertically from the world origin", 
        "opacity": "Image opacity to blend the image against the background color", 
        "rotation": "Rotation for the background image (ortho view only)", 
        "show_background_image": "Show this image as background", 
        "show_expanded": "Show the expanded in the user interface", 
        "show_on_foreground": "Show this image in front of objects in viewport", 
        "size": "Size of the background image (ortho view only)", 
        "source": "Data source used for background", 
        "use_camera_clip": "Use movie clip from active scene camera", 
        "use_flip_x": "Flip the background image horizontally", 
        "use_flip_y": "Flip the background image vertically", 
        "view_axis": "The axis to display the image on"
      }
    }, 
    "BakePixel": {
      "fields": {
        "du_dx": "(read-only)", 
        "du_dy": "(read-only)", 
        "dv_dx": "(read-only)", 
        "dv_dy": "(read-only)", 
        "next": "(read-only)", 
        "object_id": "(read-only)", 
        "primitive_id": "(read-only)", 
        "uv": "(read-only)"
      }
    }, 
    "BakeSettings": {
      "fields": {
        "cage_extrusion": "Distance to use for the inward ray cast when using selected to active", 
        "cage_object": "Object to use as cage instead of calculating the cage from the active object with cage extrusion", 
        "filepath": "Image filepath to use when saving externally", 
        "height": "Vertical dimension of the baking map", 
        "image_settings": "(read-only)", 
        "margin": "Extends the baked result as a post process filter", 
        "normal_b": "Axis to bake in blue channel", 
        "normal_g": "Axis to bake in green channel", 
        "normal_r": "Axis to bake in red channel", 
        "normal_space": "Choose normal space for baking", 
        "pass_filter": "(read-only)    Passes to include in the active baking pass", 
        "save_mode": "Choose how to save the baking map", 
        "use_automatic_name": "Automatically name the output file with the pass type (external only)", 
        "use_cage": "Cast rays to active object from a cage", 
        "use_clear": "Clear Images before baking (internal only)", 
        "use_pass_ambient_occlusion": "Add ambient occlusion contribution", 
        "use_pass_color": "Color the pass", 
        "use_pass_diffuse": "Add diffuse contribution", 
        "use_pass_direct": "Add direct lighting contribution", 
        "use_pass_emit": "Add emission contribution", 
        "use_pass_glossy": "Add glossy contribution", 
        "use_pass_indirect": "Add indirect lighting contribution", 
        "use_pass_subsurface": "Add subsurface contribution", 
        "use_pass_transmission": "Add transmission contribution", 
        "use_selected_to_active": "Bake shading on the surface of selected objects to the active object", 
        "use_split_materials": "Split external images per material (external only)", 
        "width": "Horizontal dimension of the baking map"
      }
    }, 
    "BevelModifier": {
      "fields": {
        "angle_limit": "Angle above which to bevel edges", 
        "edge_weight_method": "What edge weight to use for weighting a vertex", 
        "loop_slide": "Prefer sliding along edges to having even widths", 
        "material": "Material index of generated faces, -1 for automatic", 
        "offset_type": "What distance Width measures", 
        "profile": "The profile shape (0.5 = round)", 
        "segments": "Number of segments for round edges/verts", 
        "use_clamp_overlap": "Clamp the width to avoid overlap", 
        "use_only_vertices": "Bevel verts/corners, not edges", 
        "vertex_group": "Vertex group name", 
        "width": "Bevel value/amount"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BezierSplinePoint": {
      "fields": {
        "co": "Coordinates of the control point", 
        "handle_left": "Coordinates of the first handle", 
        "handle_left_type": "Handle types", 
        "handle_right": "Coordinates of the second handle", 
        "handle_right_type": "Handle types", 
        "hide": "Visibility status", 
        "radius": "Radius for beveling", 
        "select_control_point": "Control point selection status", 
        "select_left_handle": "Handle 1 selection status", 
        "select_right_handle": "Handle 2 selection status", 
        "tilt": "Tilt in 3D View", 
        "weight_softbody": "Softbody goal weight"
      }
    }, 
    "BlendData": {
      "fields": {
        "actions": "(read-only)    Action data-blocks", 
        "armatures": "(read-only)    Armature data-blocks", 
        "brushes": "(read-only)    Brush data-blocks", 
        "cache_files": "(read-only)    Cache Files data-blocks", 
        "cameras": "(read-only)    Camera data-blocks", 
        "curves": "(read-only)    Curve data-blocks", 
        "filepath": "(read-only)    Path to the .blend file", 
        "fonts": "(read-only)    Vector font data-blocks", 
        "grease_pencil": "(read-only)    Grease Pencil data-blocks", 
        "groups": "(read-only)    Group data-blocks", 
        "images": "(read-only)    Image data-blocks", 
        "is_dirty": "(read-only)    Have recent edits been saved to disk", 
        "is_saved": "(read-only)    Has the current session been saved to disk as a .blend file", 
        "lamps": "(read-only)    Lamp data-blocks", 
        "lattices": "(read-only)    Lattice data-blocks", 
        "libraries": "(read-only)    Library data-blocks", 
        "linestyles": "(read-only)    Line Style data-blocks", 
        "masks": "(read-only)    Masks data-blocks", 
        "materials": "(read-only)    Material data-blocks", 
        "meshes": "(read-only)    Mesh data-blocks", 
        "metaballs": "(read-only)    Metaball data-blocks", 
        "movieclips": "(read-only)    Movie Clip data-blocks", 
        "node_groups": "(read-only)    Node group data-blocks", 
        "objects": "(read-only)    Object data-blocks", 
        "paint_curves": "(read-only)    Paint Curves data-blocks", 
        "palettes": "(read-only)    Palette data-blocks", 
        "particles": "(read-only)    Particle data-blocks", 
        "scenes": "(read-only)    Scene data-blocks", 
        "screens": "(read-only)    Screen data-blocks", 
        "shape_keys": "(read-only)    Shape Key data-blocks", 
        "sounds": "(read-only)    Sound data-blocks", 
        "speakers": "(read-only)    Speaker data-blocks", 
        "texts": "(read-only)    Text data-blocks", 
        "textures": "(read-only)    Texture data-blocks", 
        "use_autopack": "Automatically pack all external data into .blend file", 
        "version": "(read-only)    Version of Blender the .blend was saved with", 
        "window_managers": "(read-only)    Window manager data-blocks", 
        "worlds": "(read-only)    World data-blocks"
      }
    }, 
    "BlendDataActions": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataArmatures": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataBrushes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataCacheFiles": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataCameras": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataCurves": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataFonts": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataGreasePencils": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataGroups": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataImages": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataLamps": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataLattices": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataLibraries": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataLineStyles": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataMasks": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataMaterials": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataMeshes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataMetaBalls": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataMovieClips": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataNodeTrees": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataObjects": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataPaintCurves": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataPalettes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataParticles": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataScenes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataScreens": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataSounds": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataSpeakers": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataTexts": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataTextures": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataWindowManagers": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlendDataWorlds": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlenderRNA": {
      "fields": {
        "structs": "(read-only)"
      }
    }, 
    "BlendTexture": {
      "fields": {
        "progression": "Style of the color blending", 
        "use_flip_axis": "Flip the texture's X and Y axis"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "BoidRule": {
      "fields": {
        "name": "Boid rule name", 
        "type": "(read-only)", 
        "use_in_air": "Use rule when boid is flying", 
        "use_on_land": "Use rule when boid is on land"
      }
    }, 
    "BoidRuleAverageSpeed": {
      "fields": {
        "level": "How much velocity's z-component is kept constant", 
        "speed": "Percentage of maximum speed", 
        "wander": "How fast velocity's direction is randomized"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleAvoid": {
      "fields": {
        "fear_factor": "Avoid object if danger from it is above this threshold", 
        "object": "Object to avoid", 
        "use_predict": "Predict target movement"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleAvoidCollision": {
      "fields": {
        "look_ahead": "Time to look ahead in seconds", 
        "use_avoid": "Avoid collision with other boids", 
        "use_avoid_collision": "Avoid collision with deflector objects"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleFight": {
      "fields": {
        "distance": "Attack boids at max this distance", 
        "flee_distance": "Flee to this distance"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleFollowLeader": {
      "fields": {
        "distance": "Distance behind leader to follow", 
        "object": "Follow this object instead of a boid", 
        "queue_count": "How many boids in a line", 
        "use_line": "Follow leader in a line"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleGoal": {
      "fields": {
        "object": "Goal object", 
        "use_predict": "Predict target movement"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidSettings": {
      "fields": {
        "accuracy": "Accuracy of attack", 
        "active_boid_state": "(read-only)", 
        "aggression": "Boid will fight this times stronger enemy", 
        "air_acc_max": "Maximum acceleration in air (relative to maximum speed)", 
        "air_ave_max": "Maximum angular velocity in air (relative to 180 degrees)", 
        "air_personal_space": "Radius of boids personal space in air (% of particle size)", 
        "air_speed_max": "Maximum speed in air", 
        "air_speed_min": "Minimum speed in air (relative to maximum speed)", 
        "bank": "Amount of rotation around velocity vector on turns", 
        "health": "Initial boid health when born", 
        "height": "Boid height relative to particle size", 
        "land_acc_max": "Maximum acceleration on land (relative to maximum speed)", 
        "land_ave_max": "Maximum angular velocity on land (relative to 180 degrees)", 
        "land_jump_speed": "Maximum speed for jumping", 
        "land_personal_space": "Radius of boids personal space on land (% of particle size)", 
        "land_smooth": "How smoothly the boids land", 
        "land_speed_max": "Maximum speed on land", 
        "land_stick_force": "How strong a force must be to start effecting a boid on land", 
        "pitch": "Amount of rotation around side vector", 
        "range": "Maximum distance from which a boid can attack", 
        "states": "(read-only)", 
        "strength": "Maximum caused damage on attack per second", 
        "use_climb": "Allow boids to climb goal objects", 
        "use_flight": "Allow boids to move in air", 
        "use_land": "Allow boids to move on land"
      }
    }, 
    "BoidState": {
      "fields": {
        "active_boid_rule": "(read-only)", 
        "name": "Boid state name", 
        "rules": "(read-only)", 
        "ruleset_type": "How the rules in the list are evaluated"
      }
    }, 
    "Bone": {
      "fields": {
        "bbone_curveinx": "X-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveiny": "Y-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveoutx": "X-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_curveouty": "Y-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_in": "Length of first Bezier Handle (for B-Bones only)", 
        "bbone_out": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_rollin": "Roll offset for the start of the B-Bone, adjusts twist", 
        "bbone_rollout": "Roll offset for the end of the B-Bone, adjusts twist", 
        "bbone_scalein": "Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleout": "Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)", 
        "bbone_x": "B-Bone X size", 
        "bbone_z": "B-Bone Z size", 
        "children": "(read-only)    Bones which are children of this bone", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "head": "Location of head end of the bone relative to its parent", 
        "head_local": "Location of head end of the bone relative to armature", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "hide": "Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)", 
        "hide_select": "Bone is able to be selected", 
        "layers": "Layers bone exists in", 
        "matrix": "3x3 bone matrix", 
        "matrix_local": "4x4 bone matrix relative to armature", 
        "parent": "(read-only)    Parent bone (in same Armature)", 
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "tail": "Location of tail end of the bone", 
        "tail_local": "Location of tail end of the bone relative to armature", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "use_connect": "(read-only)    When bone has a parent, bone's head is stuck to the parent's tail", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "use_deform": "Enable Bone to deform geometry", 
        "use_endroll_as_inroll": "Use Roll Out of parent bone as Roll In of its children", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "use_inherit_scale": "Bone inherits scaling from parent bone", 
        "use_local_location": "Bone location is set in local space", 
        "use_relative_parent": "Object children will use relative transform, like deform"
      }
    }, 
    "BoneGroup": {
      "fields": {
        "color_set": "Custom color set to use", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "is_custom_color_set": "(read-only)    Color set is user-defined instead of a fixed theme color set"
      }
    }, 
    "BoneGroups": {
      "fields": {
        "active": "Active bone group for this pose", 
        "active_index": "Active index in bone groups array"
      }
    }, 
    "BooleanModifier": {
      "fields": {
        "double_threshold": "Threshold for checking overlapping geometry", 
        "object": "Mesh object to use for Boolean operation"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BoolProperty": {
      "fields": {
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "is_array": "(read-only)"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "BrightContrastModifier": {
      "fields": {
        "bright": "Adjust the luminosity of the colors", 
        "contrast": "Adjust the difference in luminosity between pixels"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "Brush": {
      "fields": {
        "auto_smooth_factor": "Amount of smoothing to automatically apply to each stroke", 
        "blend": "Brush blending mode", 
        "blur_kernel_radius": "Radius of kernel used for soften and sharpen in pixels", 
        "brush_capabilities": "(read-only)    Brush's capabilities", 
        "clone_alpha": "Opacity of clone image display", 
        "clone_image": "Image for clone tool", 
        "crease_pinch_factor": "How much the crease brush pinches", 
        "cursor_color_add": "Color of cursor when adding", 
        "cursor_color_subtract": "Color of cursor when subtracting", 
        "curve": "(read-only)    Editable falloff curve", 
        "fill_threshold": "Threshold above which filling is not propagated", 
        "grad_spacing": "Spacing before brush gradient goes full circle", 
        "gradient": "(read-only)", 
        "height": "Affectable height of brush (layer height for layer tool, i.e.)", 
        "icon_filepath": "File path to brush icon", 
        "image_paint_capabilities": "(read-only)    Brush's capabilities in image paint mode", 
        "jitter": "Jitter the position of the brush while painting", 
        "jitter_absolute": "Jitter the position of the brush in pixels while painting", 
        "mask_stencil_dimension": "Dimensions of mask stencil in viewport", 
        "mask_stencil_pos": "Position of mask stencil in viewport", 
        "mask_texture_slot": "(read-only)", 
        "normal_weight": "How much grab will pull vertexes out of surface during a grab", 
        "paint_curve": "Active Paint Curve", 
        "plane_offset": "Adjust plane on which the brush acts towards or away from the object surface", 
        "plane_trim": "If a vertex is further away from offset plane than this, then it is not affected", 
        "rake_factor": "How much grab will follow cursor rotation", 
        "rate": "Interval between paints for Airbrush", 
        "sculpt_capabilities": "(read-only)    Brush's capabilities in sculpt mode", 
        "sharp_threshold": "Threshold below which, no sharpening is done", 
        "size": "Radius of the brush in pixels", 
        "smooth_stroke_factor": "Higher values give a smoother stroke", 
        "smooth_stroke_radius": "Minimum distance from last point before stroke continues", 
        "spacing": "Spacing between brush daubs as a percentage of brush diameter", 
        "stencil_dimension": "Dimensions of stencil in viewport", 
        "stencil_pos": "Position of stencil in viewport", 
        "strength": "How powerful the effect of the brush is when applied", 
        "texture_sample_bias": "Value added to texture samples", 
        "texture_slot": "(read-only)", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_accumulate": "Accumulate stroke daubs on top of each other", 
        "use_adaptive_space": "Space daubs according to surface orientation instead of screen space", 
        "use_airbrush": "Keep applying paint effect while holding mouse (spray)", 
        "use_alpha": "When this is disabled, lock alpha while painting", 
        "use_anchor": "Keep the brush anchored to the initial location", 
        "use_cursor_overlay": "Show cursor in viewport", 
        "use_cursor_overlay_override": "Don't show overlay during a stroke", 
        "use_curve": "Define the stroke curve with a bezier curve. Dabs are separated according to spacing", 
        "use_custom_icon": "Set the brush icon from an image file", 
        "use_edge_to_edge": "Drag anchor brush from edge-to-edge", 
        "use_frontface": "Brush only affects vertexes that face the viewer", 
        "use_gradient": "Use Gradient by utilizing a sampling method", 
        "use_inverse_smooth_pressure": "Lighter pressure causes more smoothing to be applied", 
        "use_line": "Draw a line with dabs separated according to spacing", 
        "use_locked_size": "When locked brush stays same size relative to object; when unlocked brush size is given in pixels", 
        "use_offset_pressure": "Enable tablet pressure sensitivity for offset", 
        "use_original_normal": "When locked keep using normal of surface where stroke was initiated", 
        "use_paint_image": "Use this brush in texture paint mode", 
        "use_paint_sculpt": "Use this brush in sculpt mode", 
        "use_paint_vertex": "Use this brush in vertex paint mode", 
        "use_paint_weight": "Use this brush in weight paint mode", 
        "use_persistent": "Sculpt on a persistent layer of the mesh", 
        "use_plane_trim": "Enable Plane Trim", 
        "use_pressure_jitter": "Enable tablet pressure sensitivity for jitter", 
        "use_pressure_masking": "Pen pressure makes texture influence smaller", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "use_pressure_spacing": "Enable tablet pressure sensitivity for spacing", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "use_primary_overlay": "Show texture in viewport", 
        "use_primary_overlay_override": "Don't show overlay during a stroke", 
        "use_relative_jitter": "Jittering happens in screen space, not relative to brush size", 
        "use_restore_mesh": "Allow a single dot to be carefully positioned", 
        "use_secondary_overlay": "Show texture in viewport", 
        "use_secondary_overlay_override": "Don't show overlay during a stroke", 
        "use_smooth_stroke": "Brush lags behind mouse and follows a smoother path", 
        "use_space": "Limit brush application to the distance specified by spacing", 
        "use_space_attenuation": "Automatically adjust strength to give consistent results for different spacings", 
        "vertex_tool": "Brush blending mode", 
        "weight": "Vertex weight when brush is applied"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "BrushCapabilities": {
      "fields": {
        "has_overlay": "(read-only)", 
        "has_random_texture_angle": "(read-only)", 
        "has_smooth_stroke": "(read-only)", 
        "has_spacing": "(read-only)"
      }
    }, 
    "BrushTextureSlot": {
      "fields": {
        "angle": "Brush texture rotation", 
        "has_random_texture_angle": "(read-only)", 
        "has_texture_angle": "(read-only)", 
        "has_texture_angle_source": "(read-only)", 
        "random_angle": "Brush texture random angle"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "BuildModifier": {
      "fields": {
        "frame_duration": "Total time the build effect requires", 
        "frame_start": "Start frame of the effect", 
        "seed": "Seed for random if used", 
        "use_random_order": "Randomize the faces or edges during build", 
        "use_reverse": "Deconstruct the mesh instead of building it"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CacheFile": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "filepath": "Path to external displacements file", 
        "frame": "The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence", 
        "is_sequence": "Whether the cache is separated in a series of files", 
        "object_paths": "(read-only)    Paths of the objects inside the Alembic archive", 
        "override_frame": "Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame", 
        "scale": "Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Camera": {
      "fields": {
        "angle": "Camera lens field of view", 
        "angle_x": "Camera lens horizontal field of view", 
        "angle_y": "Camera lens vertical field of view", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "clip_end": "Camera far clipping distance", 
        "clip_start": "Camera near clipping distance", 
        "cycles": "(read-only)    Cycles camera settings", 
        "dof_distance": "Distance to the focus point for depth of field", 
        "dof_object": "Use this object to define the depth of field focal point", 
        "draw_size": "Apparent size of the Camera object in the 3D View", 
        "gpu_dof": "(read-only)", 
        "lens": "Perspective Camera lens value in millimeters", 
        "lens_unit": "Unit to edit lens in for the user interface", 
        "ortho_scale": "Orthographic Camera scale (similar to zoom)", 
        "passepartout_alpha": "Opacity (alpha) of the darkened overlay in Camera view", 
        "sensor_fit": "Method to fit image and field of view angle inside the sensor", 
        "sensor_height": "Vertical size of the image sensor area in millimeters", 
        "sensor_width": "Horizontal size of the image sensor area in millimeters", 
        "shift_x": "Camera horizontal shift", 
        "shift_y": "Camera vertical shift", 
        "show_guide": "Draw overlay", 
        "show_limits": "Draw the clipping range and focus point on the camera", 
        "show_mist": "Draw a line from the Camera to indicate the mist area", 
        "show_name": "Show the active Camera's name in Camera view", 
        "show_passepartout": "Show a darkened overlay outside the image area in Camera view", 
        "show_safe_areas": "Show TV title safe and action safe areas in Camera view", 
        "show_safe_center": "Show safe areas to fit content in a different aspect ratio", 
        "show_sensor": "Show sensor size (film gate) in Camera view", 
        "stereo": "(read-only)", 
        "type": "Camera types"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CameraActuator": {
      "fields": {
        "axis": "Axis the Camera will try to get behind", 
        "damping": "Strength of the constraint that drives the camera behind the target", 
        "object": "Look at this Object"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "CameraSolverConstraint": {
      "fields": {
        "clip": "Movie Clip to get tracking data from", 
        "use_active_clip": "Use active clip defined in scene"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CameraStereoData": {
      "fields": {
        "convergence_distance": "The converge point for the stereo cameras (often the distance between a projector and the projection screen)", 
        "interocular_distance": "Set the distance between the eyes - the stereo plane distance / 30 should be fine", 
        "pole_merge_angle_from": "Angle at which interocular distance starts to fade to 0", 
        "pole_merge_angle_to": "Angle at which interocular distance is 0", 
        "use_pole_merge": "Fade interocular distance to 0 after the given cutoff angle", 
        "use_spherical_stereo": "Render every pixel rotating the camera around the middle of the interocular distance"
      }
    }, 
    "CastModifier": {
      "fields": {
        "cast_type": "Target object shape", 
        "object": "Control object: if available, its location determines the center of the effect", 
        "radius": "Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)", 
        "size": "Size of projection shape (leave as 0 for auto)", 
        "use_radius_as_size": "Use radius as size of projection shape (0 = auto)", 
        "use_transform": "Use object transform to control projection shape", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ChildOfConstraint": {
      "fields": {
        "inverse_matrix": "Transformation matrix to apply before", 
        "target": "Target Object", 
        "use_location_x": "Use X Location of Parent", 
        "use_location_y": "Use Y Location of Parent", 
        "use_location_z": "Use Z Location of Parent", 
        "use_rotation_x": "Use X Rotation of Parent", 
        "use_rotation_y": "Use Y Rotation of Parent", 
        "use_rotation_z": "Use Z Rotation of Parent", 
        "use_scale_x": "Use X Scale of Parent", 
        "use_scale_y": "Use Y Scale of Parent", 
        "use_scale_z": "Use Z Scale of Parent"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ClampToConstraint": {
      "fields": {
        "main_axis": "Main axis of movement", 
        "target": "Target Object (Curves only)", 
        "use_cyclic": "Treat curve as cyclic curve (no clamping to curve bounding box)"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ClothCollisionSettings": {
      "fields": {
        "collision_quality": "How many collision iterations should be done. (higher is better quality but slower)", 
        "damping": "Amount of velocity lost on collision", 
        "distance_min": "Minimum distance between collision objects before collision response takes in", 
        "distance_repel": "Maximum distance to apply repulsion force, must be greater than minimum distance", 
        "friction": "Friction force if a collision happened (higher = less movement)", 
        "group": "Limit colliders to this Group", 
        "repel_force": "Repulsion force to apply on cloth when close to colliding", 
        "self_collision_quality": "How many self collision iterations should be done (higher is better quality but slower)", 
        "self_distance_min": "0.5 means no distance at all, 1.0 is maximum distance", 
        "self_friction": "Friction/damping with self contact", 
        "use_collision": "Enable collisions with other objects", 
        "use_self_collision": "Enable self collisions", 
        "vertex_group_self_collisions": "Vertex group to define vertices which are not used during self collisions"
      }
    }, 
    "ClothModifier": {
      "fields": {
        "collision_settings": "(read-only)", 
        "hair_grid_max": "(read-only)", 
        "hair_grid_min": "(read-only)", 
        "hair_grid_resolution": "(read-only)", 
        "point_cache": "(read-only)", 
        "settings": "(read-only)", 
        "solver_result": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ClothSettings": {
      "fields": {
        "air_damping": "Air has normally some thickness which slows falling things down", 
        "bending_damping": "Damping of bending motion", 
        "bending_stiffness": "Wrinkle coefficient (higher = less smaller but more big wrinkles)", 
        "bending_stiffness_max": "Maximum bending stiffness value", 
        "density_strength": "Influence of target density on the simulation", 
        "density_target": "Maximum density of hair", 
        "effector_weights": "(read-only)", 
        "goal_default": "Default Goal (vertex target position) value, when no Vertex Group used", 
        "goal_friction": "Goal (vertex target position) friction", 
        "goal_max": "Goal maximum, vertex group weights are scaled to match this range", 
        "goal_min": "Goal minimum, vertex group weights are scaled to match this range", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "gravity": "Gravity or external force vector", 
        "mass": "Mass of cloth material", 
        "pin_stiffness": "Pin (vertex target position) spring stiffness", 
        "quality": "Quality of the simulation in steps per frame (higher is better quality but slower)", 
        "rest_shape_key": "Shape key to use the rest spring lengths from", 
        "sewing_force_max": "Maximum sewing force", 
        "shrink_max": "Max amount to shrink cloth by", 
        "shrink_min": "Min amount to shrink cloth by", 
        "spring_damping": "Damping of cloth velocity (higher = more smooth, less jiggling)", 
        "structural_stiffness": "Overall stiffness of structure", 
        "structural_stiffness_max": "Maximum structural stiffness value", 
        "time_scale": "Cloth speed is multiplied by this value", 
        "use_dynamic_mesh": "Make simulation respect deformations in the base mesh", 
        "use_pin_cloth": "Enable pinning of cloth vertices to other objects/positions", 
        "use_sewing_springs": "Pulls loose edges together", 
        "use_stiffness_scale": "If enabled, stiffness can be scaled along a weight painted vertex group", 
        "vel_damping": "Damp velocity to help cloth reach the resting position faster (1.0 = no damping, 0.0 = fully dampened)", 
        "vertex_group_bending": "Vertex group for fine control over bending stiffness", 
        "vertex_group_mass": "Vertex Group for pinning of vertices", 
        "vertex_group_shrink": "Vertex Group for shrinking cloth", 
        "vertex_group_structural_stiffness": "Vertex group for fine control over structural stiffness", 
        "voxel_cell_size": "Size of the voxel grid cells for interaction effects"
      }
    }, 
    "ClothSolverResult": {
      "fields": {
        "avg_error": "(read-only)    Average error during substeps", 
        "avg_iterations": "(read-only)    Average iterations during substeps", 
        "max_error": "(read-only)    Maximum error during substeps", 
        "max_iterations": "(read-only)    Maximum iterations during substeps", 
        "min_error": "(read-only)    Minimum error during substeps", 
        "min_iterations": "(read-only)    Minimum iterations during substeps", 
        "status": "(read-only)    Status of the solver iteration"
      }
    }, 
    "CloudsTexture": {
      "fields": {
        "cloud_type": "Determine whether Noise returns grayscale or RGB values", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_depth": "Depth of the cloud calculation", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "CollectionProperty": {
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "CollisionModifier": {
      "fields": {
        "settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CollisionSensor": {
      "fields": {
        "material": "Only look for objects with this material (blank = all objects)", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "use_material": "Toggle collision on material or property", 
        "use_pulse": "Change to the set of colliding objects generates pulse"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "CollisionSettings": {
      "fields": {
        "absorption": "How much of effector force gets lost during collision with this object (in percent)", 
        "damping": "Amount of damping during collision", 
        "damping_factor": "Amount of damping during particle collision", 
        "damping_random": "Random variation of damping", 
        "friction_factor": "Amount of friction during particle collision", 
        "friction_random": "Random variation of friction", 
        "permeability": "Chance that the particle will pass through the mesh", 
        "stickiness": "Amount of stickiness to surface collision", 
        "thickness_inner": "Inner face thickness (only used by softbodies)", 
        "thickness_outer": "Outer face thickness", 
        "use": "Enable this objects as a collider for physics systems", 
        "use_particle_kill": "Kill collided particles"
      }
    }, 
    "ColorBalanceModifier": {
      "fields": {
        "color_balance": "(read-only)", 
        "color_multiply": "Multiply the intensity of each pixel"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "ColorManagedDisplaySettings": {
      "fields": {
        "display_device": "Display device name"
      }
    }, 
    "ColorManagedInputColorspaceSettings": {
      "fields": {
        "name": "Color space of the image or movie on disk"
      }
    }, 
    "ColorManagedSequencerColorspaceSettings": {
      "fields": {
        "name": "Color space that the sequencer operates in"
      }
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "curve_mapping": "(read-only)    Color curve mapping applied before display transform", 
        "exposure": "Exposure (stops) applied before display transform", 
        "gamma": "Amount of gamma modification applied after display transform", 
        "look": "Additional transform applied before view transform for an artistic needs", 
        "use_curve_mapping": "Use RGB curved for pre-display transformation", 
        "view_transform": "View used when converting image to a display space"
      }
    }, 
    "ColorMapping": {
      "fields": {
        "blend_color": "Blend color to mix with texture output color", 
        "blend_type": "Mode used to mix with texture output color", 
        "brightness": "Adjust the brightness of the texture", 
        "color_ramp": "(read-only)", 
        "contrast": "Adjust the contrast of the texture", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "use_color_ramp": "Toggle color ramp operations"
      }
    }, 
    "ColorRamp": {
      "fields": {
        "color_mode": "Set color mode to use for interpolation", 
        "elements": "(read-only)", 
        "hue_interpolation": "Set color interpolation", 
        "interpolation": "Set interpolation between color stops"
      }
    }, 
    "ColorRampElement": {
      "fields": {
        "alpha": "Set alpha of selected color stop", 
        "color": "Set color of selected color stop", 
        "position": "Set position of selected color stop"
      }
    }, 
    "ColorSequence": {
      "fields": {
        "color": "Effect Strip color", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "CompositorNodeAlphaOver": {
      "fields": {
        "premul": "Mix Factor"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBlur": {
      "fields": {
        "aspect_correction": "Type of aspect correction to use", 
        "use_bokeh": "Use circular filter (slower)", 
        "use_extended_bounds": "Extend bounds of the input image to fully fit blurred image", 
        "use_gamma_correction": "Apply filter on gamma corrected values", 
        "use_relative": "Use relative (percent) values to define blur radius", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBokehBlur": {
      "fields": {
        "blur_max": "Blur limit, maximum CoC radius", 
        "use_extended_bounds": "Extend bounds of the input image to fully fit blurred image", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBokehImage": {
      "fields": {
        "angle": "Angle of the bokeh", 
        "catadioptric": "Level of catadioptric of the bokeh", 
        "flaps": "Number of flaps", 
        "rounding": "Level of rounding of the bokeh", 
        "shift": "Shift of the lens components"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBoxMask": {
      "fields": {
        "height": "Height of the box", 
        "rotation": "Rotation angle of the box", 
        "width": "Width of the box", 
        "x": "X position of the middle of the box", 
        "y": "Y position of the middle of the box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBrightContrast": {
      "fields": {
        "use_premultiply": "Keep output image premultiplied alpha"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeChannelMatte": {
      "fields": {
        "limit_channel": "Limit by this channel's value", 
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_method": "Algorithm to use to limit channel", 
        "limit_min": "Values lower than this setting are 100% keyed", 
        "matte_channel": "Channel used to determine matte"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeChromaMatte": {
      "fields": {
        "gain": "Alpha falloff", 
        "lift": "Alpha lift", 
        "shadow_adjust": "Adjusts the brightness of any shadows captured", 
        "threshold": "Tolerance below which colors will be considered as exact matches", 
        "tolerance": "Tolerance for a color to be considered a keying color"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorBalance": {
      "fields": {
        "gain": "Correction for Highlights", 
        "gamma": "Correction for Midtones", 
        "lift": "Correction for Shadows", 
        "offset": "Correction for Shadows", 
        "offset_basis": "Support negative color by using this as the RGB basis", 
        "power": "Correction for Midtones", 
        "slope": "Correction for Highlights"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorCorrection": {
      "fields": {
        "blue": "Blue channel active", 
        "green": "Green channel active", 
        "highlights_contrast": "Highlights contrast", 
        "highlights_gain": "Highlights gain", 
        "highlights_gamma": "Highlights gamma", 
        "highlights_lift": "Highlights lift", 
        "highlights_saturation": "Highlights saturation", 
        "master_contrast": "Master contrast", 
        "master_gain": "Master gain", 
        "master_gamma": "Master gamma", 
        "master_lift": "Master lift", 
        "master_saturation": "Master saturation", 
        "midtones_contrast": "Midtones contrast", 
        "midtones_end": "End of midtones", 
        "midtones_gain": "Midtones gain", 
        "midtones_gamma": "Midtones gamma", 
        "midtones_lift": "Midtones lift", 
        "midtones_saturation": "Midtones saturation", 
        "midtones_start": "Start of midtones", 
        "red": "Red channel active", 
        "shadows_contrast": "Shadows contrast", 
        "shadows_gain": "Shadows gain", 
        "shadows_gamma": "Shadows gamma", 
        "shadows_lift": "Shadows lift", 
        "shadows_saturation": "Shadows saturation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorMatte": {
      "fields": {
        "color_hue": "Hue tolerance for colors to be considered a keying color", 
        "color_saturation": "Saturation Tolerance for the color", 
        "color_value": "Value Tolerance for the color"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorSpill": {
      "fields": {
        "ratio": "Scale limit by value", 
        "unspill_blue": "Blue spillmap scale", 
        "unspill_green": "Green spillmap scale", 
        "unspill_red": "Red spillmap scale", 
        "use_unspill": "Compensate all channels (differently) by hand"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeComposite": {
      "fields": {
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCrop": {
      "fields": {
        "relative": "Use relative values to crop image", 
        "use_crop_size": "Whether to crop the size of the input image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCurveRGB": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCurveVec": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDefocus": {
      "fields": {
        "angle": "Bokeh shape rotation offset", 
        "blur_max": "Blur limit, maximum CoC radius", 
        "f_stop": "Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius", 
        "scene": "Scene from which to select the active camera (render scene if undefined)", 
        "threshold": "CoC radius threshold, prevents background bleed on in-focus midground, 0=off", 
        "use_gamma_correction": "Enable gamma correction before and after main process", 
        "use_preview": "Enable low quality mode, useful for preview", 
        "use_zbuffer": "Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)", 
        "z_scale": "Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDespeckle": {
      "fields": {
        "threshold": "Threshold for detecting pixels to despeckle", 
        "threshold_neighbor": "Threshold for the number of neighbor pixels that must match"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDiffMatte": {
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDilateErode": {
      "fields": {
        "distance": "Distance to grow/shrink (number of iterations)", 
        "edge": "Edge to inset", 
        "falloff": "Falloff type the feather", 
        "mode": "Growing/shrinking mode"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDistanceMatte": {
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeEllipseMask": {
      "fields": {
        "height": "Height of the ellipse", 
        "rotation": "Rotation angle of the ellipse", 
        "width": "Width of the ellipse", 
        "x": "X position of the middle of the ellipse", 
        "y": "Y position of the middle of the ellipse"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeGlare": {
      "fields": {
        "angle_offset": "Streak angle offset", 
        "color_modulation": "Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect", 
        "fade": "Streak fade-out factor", 
        "mix": "-1 is original image only, 0 is exact 50/50 mix, 1 is processed image only", 
        "quality": "If not set to high quality, the effect will be applied to a low-res copy of the source image", 
        "size": "Glow/glare size (not actual size; relative to initial size of bright area of pixels)", 
        "streaks": "Total number of streaks", 
        "threshold": "The glare filter will only be applied to pixels brighter than this value", 
        "use_rotate_45": "Simple star filter: add 45 degree rotation offset"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeHueCorrect": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeIDMask": {
      "fields": {
        "index": "Pass index number to convert to alpha", 
        "use_antialiasing": "Apply an anti-aliasing filter to the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeImage": {
      "fields": {
        "frame_duration": "Number of images of a movie to use", 
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "has_layers": "(read-only)    True if this image has any named layer", 
        "has_views": "(read-only)    True if this image has multiple views", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "use_cyclic": "Cycle the images in the movie", 
        "use_straight_alpha_output": "Put Node output buffer to straight alpha instead of premultiplied"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeInpaint": {
      "fields": {
        "distance": "Distance to inpaint (number of iterations)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeKeying": {
      "fields": {
        "blur_post": "Matte blur size which applies after clipping and dilate/eroding", 
        "blur_pre": "Chroma pre-blur size which applies before running keyer", 
        "clip_black": "Value of non-scaled matte pixel which considers as fully background pixel", 
        "clip_white": "Value of non-scaled matte pixel which considers as fully foreground pixel", 
        "despill_balance": "Balance between non-key colors used to detect amount of key color to be removed", 
        "despill_factor": "Factor of despilling screen color from image", 
        "dilate_distance": "Matte dilate/erode side", 
        "edge_kernel_radius": "Radius of kernel used to detect whether pixel belongs to edge", 
        "edge_kernel_tolerance": "Tolerance to pixels inside kernel which are treating as belonging to the same plane", 
        "feather_distance": "Distance to grow/shrink the feather", 
        "feather_falloff": "Falloff type the feather", 
        "screen_balance": "Balance between two non-primary channels primary channel is comparing against"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeLensdist": {
      "fields": {
        "use_fit": "For positive distortion factor only: scale image such that black areas are not visible", 
        "use_jitter": "Enable/disable jittering (faster, but also noisier)", 
        "use_projector": "Enable/disable projector mode (the effect is applied in horizontal direction only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeLumaMatte": {
      "fields": {
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_min": "Values lower than this setting are 100% keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMapRange": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMask": {
      "fields": {
        "motion_blur_samples": "Number of motion blur samples", 
        "motion_blur_shutter": "Exposure for motion blur as a factor of FPS", 
        "size_source": "Where to get the mask size from for aspect/size information", 
        "use_antialiasing": "Apply an anti-aliasing filter to the mask", 
        "use_feather": "Use feather information from the mask", 
        "use_motion_blur": "Use multi-sampled motion blur of the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMixRGB": {
      "fields": {
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMovieDistortion": {
      "fields": {
        "distortion_type": "Distortion to use to filter image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeOutputFile": {
      "fields": {
        "active_input_index": "Active input index in details view list", 
        "base_path": "Base output path for the image", 
        "file_slots": "(read-only)", 
        "format": "(read-only)", 
        "layer_slots": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodePlaneTrackDeform": {
      "fields": {
        "motion_blur_samples": "Number of motion blur samples", 
        "motion_blur_shutter": "Exposure for motion blur as a factor of FPS", 
        "use_motion_blur": "Use multi-sampled motion blur of the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodePremulKey": {
      "fields": {
        "mapping": "Conversion between premultiplied alpha and key alpha"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeRotate": {
      "fields": {
        "filter_type": "Method to use to filter rotation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeScale": {
      "fields": {
        "frame_method": "How the image fits in the camera frame", 
        "offset_x": "Offset image horizontally (factor of image size)", 
        "offset_y": "Offset image vertically (factor of image size)", 
        "space": "Coordinate space to scale relative to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeStabilize": {
      "fields": {
        "filter_type": "Method to use to filter stabilization", 
        "invert": "Invert stabilization to re-introduce motion to the frame"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeSunBeams": {
      "fields": {
        "ray_length": "Length of rays as a factor of the image size", 
        "source": "Source point of rays as a factor of the image width & height"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeSwitch": {
      "fields": {
        "check": "Off: first socket, On: second socket"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTime": {
      "fields": {
        "curve": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTonemap": {
      "fields": {
        "adaptation": "If 0, global; if 1, based on pixel intensity", 
        "contrast": "Set to 0 to use estimate from input image", 
        "correction": "If 0, same for all channels; if 1, each independent", 
        "gamma": "If not used, set to 1", 
        "intensity": "If less than zero, darkens image; otherwise, makes it brighter", 
        "key": "The value the average luminance is mapped to", 
        "offset": "Normally always 1, but can be used as an extra control to alter the brightness curve"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTrackPos": {
      "fields": {
        "frame_relative": "Frame to be used for relative position", 
        "position": "Which marker position to use for output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTransform": {
      "fields": {
        "filter_type": "Method to use to filter transform"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTranslate": {
      "fields": {
        "use_relative": "Use relative (fraction of input image size) values to define translation", 
        "wrap_axis": "Wrap image on a specific axis"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTree": {
      "fields": {
        "chunk_size": "Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)", 
        "edit_quality": "Quality when editing", 
        "render_quality": "Quality when rendering", 
        "use_groupnode_buffer": "Enable buffering of group nodes", 
        "use_opencl": "Enable GPU calculations", 
        "use_two_pass": "Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes", 
        "use_viewer_border": "Use boundaries for viewer nodes and composite backdrop"
      }, 
      "inherits": [
        "ID", 
        "NodeTree"
      ]
    }, 
    "CompositorNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeVecBlur": {
      "fields": {
        "factor": "Scaling factor for motion vectors (actually, 'shutter speed', in frames)", 
        "speed_max": "Maximum speed, or zero for none", 
        "speed_min": "Minimum speed for a pixel to be blurred (used to separate background from foreground)", 
        "use_curved": "Interpolate between frames in a Bezier curve, rather than linearly"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeViewer": {
      "fields": {
        "tile_order": "Tile order", 
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeZcombine": {
      "fields": {
        "use_alpha": "Take Alpha channel into account when doing the Z operation", 
        "use_antialias_z": "Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ConsoleLine": {
      "fields": {
        "body": "Text in the line", 
        "type": "Console line type when used in scrollback"
      }
    }, 
    "Constraint": {
      "fields": {
        "active": "Constraint is the one being edited", 
        "error_location": "(read-only)    Amount of residual error in Blender space unit for constraints that work on position", 
        "error_rotation": "(read-only)    Amount of residual error in radians for constraints that work on orientation", 
        "influence": "Amount of influence constraint will have on the final solution", 
        "is_proxy_local": "Constraint was added in this proxy instance (i.e. did not belong to source Armature)", 
        "is_valid": "(read-only)    Constraint has valid settings and can be evaluated", 
        "mute": "Enable/Disable Constraint", 
        "name": "Constraint name", 
        "owner_space": "Space that owner is evaluated in", 
        "show_expanded": "Constraint's panel is expanded in UI", 
        "target_space": "Space that target is evaluated in", 
        "type": "(read-only)"
      }
    }, 
    "ConstraintActuator": {
      "fields": {
        "angle_max": "Maximum angle allowed with target direction (no correction is done if angle with target direction is between min and max)", 
        "angle_min": "Minimum angle to maintain with target direction (no correction is done if angle with target direction is between min and max)", 
        "damping": "Damping factor: time constant (in frame) of low pass filter", 
        "damping_rotation": "Use a different damping for orientation", 
        "direction": "Direction of the ray", 
        "direction_axis": "Select the axis to be aligned along the reference direction", 
        "direction_axis_pos": "Select the axis to be aligned along the reference direction", 
        "distance": "Keep this distance to target", 
        "fh_damping": "Damping factor of the force field spring", 
        "fh_force": "Spring force within the force field area", 
        "fh_height": "Height of the force field area", 
        "material": "Ray detects only Objects with this material", 
        "mode": "The type of the constraint", 
        "property": "Ray detects only Objects with this property", 
        "range": "Maximum length of ray", 
        "rotation_max": "Reference Direction", 
        "time": "Maximum activation time in frame, 0 for unlimited", 
        "use_fh_normal": "Add a horizontal spring force on slopes", 
        "use_fh_paralel_axis": "Keep object axis parallel to normal", 
        "use_force_distance": "Force distance of object to point of impact of ray", 
        "use_local": "Set ray along object's axis or global axis", 
        "use_material_detect": "Detect material instead of property", 
        "use_normal": "Set object axis along (local axis) or parallel (global axis) to the normal at hit position", 
        "use_persistent": "Persistent actuator: stays active even if ray does not reach target"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ConstraintTarget": {
      "fields": {
        "target": "Target Object"
      }
    }, 
    "Context": {
      "fields": {
        "area": "(read-only)", 
        "blend_data": "(read-only)", 
        "mode": "(read-only)", 
        "region": "(read-only)", 
        "region_data": "(read-only)", 
        "scene": "(read-only)", 
        "screen": "(read-only)", 
        "space_data": "(read-only)", 
        "tool_settings": "(read-only)", 
        "user_preferences": "(read-only)", 
        "window": "(read-only)", 
        "window_manager": "(read-only)"
      }
    }, 
    "ControlFluidSettings": {
      "fields": {
        "attraction_radius": "Force field radius around the control object", 
        "attraction_strength": "Force strength for directional attraction towards the control object", 
        "end_time": "Time when the control particles are deactivated", 
        "quality": "Quality which is used for object sampling (higher = better but slower)", 
        "start_time": "Time when the control particles are activated", 
        "use": "Object contributes to the fluid simulation", 
        "use_reverse_frames": "Reverse control object movement", 
        "velocity_radius": "Force field radius around the control object", 
        "velocity_strength": "Force strength of how much of the control object's velocity is influencing the fluid velocity"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "Controller": {
      "fields": {
        "active": "Set the active state of the controller", 
        "actuators": "(read-only)    The list containing the actuators connected to the controller", 
        "show_expanded": "Set controller expanded in the user interface", 
        "states": "Set Controller state index (1 to 30)", 
        "use_priority": "Mark controller for execution before all non-marked controllers (good for startup scripts)"
      }
    }, 
    "CopyLocationConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "invert_x": "Invert the X location", 
        "invert_y": "Invert the Y location", 
        "invert_z": "Invert the Z location", 
        "target": "Target Object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_offset": "Add original location into copied location", 
        "use_x": "Copy the target's X location", 
        "use_y": "Copy the target's Y location", 
        "use_z": "Copy the target's Z location"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CopyRotationConstraint": {
      "fields": {
        "invert_x": "Invert the X rotation", 
        "invert_y": "Invert the Y rotation", 
        "invert_z": "Invert the Z rotation", 
        "target": "Target Object", 
        "use_offset": "Add original rotation into copied rotation", 
        "use_x": "Copy the target's X rotation", 
        "use_y": "Copy the target's Y rotation", 
        "use_z": "Copy the target's Z rotation"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CopyScaleConstraint": {
      "fields": {
        "target": "Target Object", 
        "use_offset": "Add original scale into copied scale", 
        "use_x": "Copy the target's X scale", 
        "use_y": "Copy the target's Y scale", 
        "use_z": "Copy the target's Z scale"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CopyTransformsConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CorrectiveSmoothModifier": {
      "fields": {
        "factor": "Smooth factor effect", 
        "invert_vertex_group": "Invert vertex group influence", 
        "is_bind": "(read-only)", 
        "rest_source": "Select the source of rest positions", 
        "smooth_type": "Method used for smoothing", 
        "use_only_smooth": "Apply smoothing without reconstructing the surface", 
        "use_pin_boundary": "Excludes boundary vertices from being smoothed", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CrossSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Curve": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "bevel_depth": "Bevel depth when not using a bevel object", 
        "bevel_factor_end": "Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)", 
        "bevel_factor_mapping_end": "Determines how the end bevel factor is mapped to a spline", 
        "bevel_factor_mapping_start": "Determines how the start bevel factor is mapped to a spline", 
        "bevel_factor_start": "Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)", 
        "bevel_object": "Curve object name that defines the bevel shape", 
        "bevel_resolution": "Bevel resolution when depth is non-zero and no specific bevel object has been defined", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "dimensions": "Select 2D or 3D curve type", 
        "eval_time": "Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)", 
        "extrude": "Amount of curve extrusion when not using a bevel object", 
        "fill_mode": "Mode of filling curve", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "materials": "(read-only)", 
        "offset": "Offset the curve to adjust the width of a text", 
        "path_duration": "The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting", 
        "render_resolution_u": "Surface resolution in U direction used while rendering (zero uses preview resolution)", 
        "render_resolution_v": "Surface resolution in V direction used while rendering (zero uses preview resolution)", 
        "resolution_u": "Surface resolution in U direction", 
        "resolution_v": "Surface resolution in V direction", 
        "shape_keys": "(read-only)", 
        "show_handles": "Display Bezier handles in editmode", 
        "show_normal_face": "Display 3D curve normals in editmode", 
        "splines": "(read-only)    Collection of splines in this curve data object", 
        "taper_object": "Curve object name that defines the taper (width)", 
        "texspace_location": "Texture space location", 
        "texspace_size": "Texture space size", 
        "twist_mode": "The type of tilt calculation for 3D Curves", 
        "twist_smooth": "Smoothing iteration for tangents", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "use_deform_bounds": "Option for curve-deform: Use the mesh bounds to clamp the deformation", 
        "use_fill_caps": "Fill caps for beveled curves", 
        "use_fill_deform": "Fill curve after applying shape keys and all modifiers", 
        "use_map_taper": "Map effect of taper object on actually beveled curve", 
        "use_path": "Enable the curve to become a translation path", 
        "use_path_follow": "Make curve path children to rotate along the path", 
        "use_radius": "Option for paths and curve-deform: apply the curve radius with path following it and deforming", 
        "use_stretch": "Option for curve-deform: make deformed child to stretch along entire path", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CurveMap": {
      "fields": {
        "extend": "Extrapolate the curve or extend it horizontally", 
        "points": "(read-only)"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "black_level": "For RGB curves, the color that black is mapped to", 
        "curves": "(read-only)", 
        "use_clip": "Force the curve view to fit a defined boundary", 
        "white_level": "For RGB curves, the color that white is mapped to"
      }
    }, 
    "CurveMapPoint": {
      "fields": {
        "handle_type": "Curve interpolation at this point: Bezier or vector", 
        "location": "X/Y coordinates of the curve point", 
        "select": "Selection state of the curve point"
      }
    }, 
    "CurveModifier": {
      "fields": {
        "deform_axis": "The axis that the curve deforms along", 
        "object": "Curve object to deform with", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CurvePaintSettings": {
      "fields": {
        "corner_angle": "Angles above this are considered corners", 
        "curve_type": "Type of curve to use for new strokes", 
        "depth_mode": "Method of projecting depth", 
        "error_threshold": "Allow deviation for a smoother, less precise line", 
        "fit_method": "Curve fitting method", 
        "radius_max": "Radius to use when the maximum pressure is applied (or when a tablet isn't used)", 
        "radius_min": "Minimum radius when the minimum pressure is applied (also the minimum when tapering)", 
        "radius_taper_end": "Taper factor for the radius of each point along the curve", 
        "radius_taper_start": "Taper factor for the radius of each point along the curve", 
        "surface_offset": "Offset the stroke from the surface", 
        "surface_plane": "Plane for projected stroke", 
        "use_corners_detect": "Detect corners and use non-aligned handles", 
        "use_offset_absolute": "Apply a fixed offset (don't scale by the radius)", 
        "use_pressure_radius": "Map tablet pressure to curve radius", 
        "use_stroke_endpoints": "Use the start of the stroke for the depth"
      }
    }, 
    "CurvesModifier": {
      "fields": {
        "curve_mapping": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "CurveSplines": {
      "fields": {
        "active": "Active curve spline"
      }
    }, 
    "CyclesCameraSettings": {
      "fields": {
        "aperture_blades": "Number of blades in aperture for polygonal bokeh (at least 3)", 
        "aperture_fstop": "F-stop ratio (lower numbers give more defocus, higher numbers give a sharper image)", 
        "aperture_ratio": "Distortion to simulate anamorphic lens bokeh", 
        "aperture_rotation": "Rotation of blades in aperture", 
        "aperture_size": "Radius of the aperture for depth of field (higher values give more defocus)", 
        "aperture_type": "Use f-stop number or aperture radius", 
        "fisheye_fov": "Field of view for the fisheye lens", 
        "fisheye_lens": "Lens focal length (mm)", 
        "latitude_max": "Maximum latitude (vertical angle) for the equirectangular lens", 
        "latitude_min": "Minimum latitude (vertical angle) for the equirectangular lens", 
        "longitude_max": "Maximum longitude (horizontal angle) for the equirectangular lens", 
        "longitude_min": "Minimum longitude (horizontal angle) for the equirectangular lens", 
        "panorama_type": "Distortion to use for the calculation"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesCurveRenderSettings": {
      "fields": {
        "cull_backfacing": "Do not test the back-face of each strand", 
        "maximum_width": "Maximum extension that strand radius can be increased by", 
        "minimum_width": "Minimal pixel width for strands (0 - deactivated)", 
        "primitive": "Type of primitive used for hair rendering", 
        "resolution": "Resolution of generated mesh", 
        "shape": "Form of hair", 
        "subdivisions": "Number of subdivisions used in Cardinal curve intersection (power of 2)", 
        "use_curves": "Activate Cycles hair rendering for particle system"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesCurveSettings": {
      "fields": {
        "radius_scale": "Multiplier of width properties", 
        "root_width": "Strand's width at root", 
        "shape": "Strand shape parameter", 
        "tip_width": "Strand's width at tip", 
        "use_closetip": "Set tip radius to zero"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesLampSettings": {
      "fields": {
        "cast_shadow": "Lamp casts shadows", 
        "is_portal": "Use this area lamp to guide sampling of the background, note that this will make the lamp invisible", 
        "max_bounces": "Maximum number of bounces the light will contribute to the render", 
        "samples": "Number of light samples to render for each AA sample", 
        "use_multiple_importance_sampling": "Use multiple importance sampling for the lamp, reduces noise for area lamps and sharp glossy materials"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesMaterialSettings": {
      "fields": {
        "displacement_method": "Method to use for the displacement", 
        "homogeneous_volume": "When using volume rendering, assume volume has the same density everywhere (not using any textures), for faster rendering", 
        "sample_as_light": "Use multiple importance sampling for this material, disabling may reduce overall noise for large objects that emit little light compared to other light sources", 
        "use_transparent_shadow": "Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows", 
        "volume_interpolation": "Interpolation method to use for smoke/fire volumes", 
        "volume_sampling": "Sampling method to use for volumes"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesObjectSettings": {
      "fields": {
        "dicing_rate": "Multiplier for scene dicing rate (located in the Geometry Panel)", 
        "is_shadow_catcher": "Only render shadows on this object, for compositing renders into real footage", 
        "motion_steps": "Control accuracy of deformation motion blur, more steps gives more memory usage (actual number of steps is 2^(steps - 1))", 
        "use_adaptive_subdivision": "Use adaptive render time subdivision", 
        "use_camera_cull": "Allow this object and its duplicators to be culled by camera space culling", 
        "use_deform_motion": "Use deformation motion blur for this object", 
        "use_distance_cull": "Allow this object and its duplicators to be culled by distance from camera", 
        "use_motion_blur": "Use motion blur for this object"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesPreferences": {
      "fields": {
        "compute_device_type": "Device to use for computation (rendering with Cycles)", 
        "devices": "(read-only)"
      }, 
      "inherits": [
        "AddonPreferences"
      ]
    }, 
    "CyclesRenderLayerSettings": {
      "fields": {
        "denoising_diffuse_direct": "Denoise the direct diffuse lighting", 
        "denoising_diffuse_indirect": "Denoise the indirect diffuse lighting", 
        "denoising_feature_strength": "Controls removal of noisy image feature passes (lower values preserve more detail, but aren't as smooth)", 
        "denoising_glossy_direct": "Denoise the direct glossy lighting", 
        "denoising_glossy_indirect": "Denoise the indirect glossy lighting", 
        "denoising_radius": "Size of the image area that's used to denoise a pixel (higher values are smoother, but might lose detail and are slower)", 
        "denoising_relative_pca": "When removing pixels that don't carry information, use a relative threshold instead of an absolute one (can help to reduce artifacts, but might cause detail loss around edges)", 
        "denoising_store_passes": "Store the denoising feature passes and the noisy image", 
        "denoising_strength": "Controls neighbor pixel weighting for the denoising filter (lower values preserve more detail, but aren't as smooth)", 
        "denoising_subsurface_direct": "Denoise the direct subsurface lighting", 
        "denoising_subsurface_indirect": "Denoise the indirect subsurface lighting", 
        "denoising_transmission_direct": "Denoise the direct transmission lighting", 
        "denoising_transmission_indirect": "Denoise the indirect transmission lighting", 
        "pass_debug_bvh_intersections": "Store Debug BVH Intersections", 
        "pass_debug_bvh_traversed_instances": "Store Debug BVH Traversed Instances pass", 
        "pass_debug_bvh_traversed_nodes": "Store Debug BVH Traversed Nodes pass", 
        "pass_debug_ray_bounces": "Store Debug Ray Bounces pass", 
        "use_denoising": "Denoise the rendered image"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesRenderSettings": {
      "fields": {
        "aa_samples": "Number of antialiasing samples to render for each pixel", 
        "ao_bounces": "Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature", 
        "ao_bounces_render": "Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature", 
        "ao_samples": "Number of ambient occlusion samples to render for each AA sample", 
        "bake_type": "Type of pass to bake", 
        "blur_glossy": "Adaptively blur glossy shaders after blurry bounces, to reduce noise at the cost of accuracy", 
        "camera_cull_margin": "Margin for the camera space culling", 
        "caustics_reflective": "Use reflective caustics, resulting in a brighter image (more noise but added realism)", 
        "caustics_refractive": "Use refractive caustics, resulting in a brighter image (more noise but added realism)", 
        "debug_bvh_time_steps": "Split BVH primitives by this number of time steps to speed up render time in cost of memory", 
        "debug_bvh_type": "Choose between faster updates, or faster render", 
        "debug_opencl_mem_limit": "Artificial limit on OpenCL memory usage in MB (0 to disable limit)", 
        "debug_use_hair_bvh": "Use special type BVH optimized for hair (uses more ram but renders faster)", 
        "debug_use_spatial_splits": "Use BVH spatial splits: longer builder time, faster render", 
        "device": "Device to use for rendering", 
        "dicing_rate": "Size of a micropolygon in pixels", 
        "diffuse_bounces": "Maximum number of diffuse reflection bounces, bounded by total maximum", 
        "diffuse_samples": "Number of diffuse bounce samples to render for each AA sample", 
        "distance_cull_margin": "Cull objects which are further away from camera than this distance", 
        "feature_set": "Feature set to use for rendering", 
        "film_exposure": "Image brightness scale", 
        "film_transparent": "World background is transparent with premultiplied alpha", 
        "filter_type": "Pixel filter type", 
        "filter_width": "Pixel filter width", 
        "glossy_bounces": "Maximum number of glossy reflection bounces, bounded by total maximum", 
        "glossy_samples": "Number of glossy bounce samples to render for each AA sample", 
        "light_sampling_threshold": "Probabilistically terminate light samples when the light contribution is below this threshold (more noise but faster rendering). Zero disables the test and never ignores lights", 
        "max_bounces": "Total maximum number of bounces", 
        "max_subdivisions": "Stop subdividing when this level is reached even if the dice rate would produce finer tessellation", 
        "mesh_light_samples": "Number of mesh emission light samples to render for each AA sample", 
        "min_bounces": "Minimum number of bounces, setting this lower than the maximum enables probabilistic path termination (faster but noisier)", 
        "motion_blur_position": "Offset for the shutter's time interval, allows to change the motion blur trails", 
        "pixel_filter_type": "Pixel filter type", 
        "preview_aa_samples": "Number of antialiasing samples to render in the viewport, unlimited if 0", 
        "preview_active_layer": "Preview active render layer in viewport", 
        "preview_dicing_rate": "Size of a micropolygon in pixels during preview render", 
        "preview_pause": "Pause all viewport preview renders", 
        "preview_samples": "Number of samples to render in the viewport, unlimited if 0", 
        "preview_start_resolution": "Resolution to start rendering preview at, progressively increasing it to the full viewport size", 
        "progressive": "Method to sample lights and materials", 
        "rolling_shutter_duration": "Scanline \"exposure\" time for the rolling shutter effect", 
        "rolling_shutter_type": "Type of rolling shutter effect matching CMOS-based cameras", 
        "sample_all_lights_direct": "Sample all lights (for direct samples), rather than randomly picking one", 
        "sample_all_lights_indirect": "Sample all lights (for indirect samples), rather than randomly picking one", 
        "sample_clamp_direct": "If non-zero, the maximum value for a direct sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy", 
        "sample_clamp_indirect": "If non-zero, the maximum value for an indirect sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy", 
        "samples": "Number of samples to render for each pixel", 
        "sampling_pattern": "Random sampling pattern used by the integrator", 
        "seed": "Seed value for integrator to get different noise patterns", 
        "shading_system": "Use Open Shading Language (CPU rendering only)", 
        "subsurface_samples": "Number of subsurface scattering samples to render for each AA sample", 
        "texture_limit": "Limit texture size used by viewport rendering", 
        "texture_limit_render": "Limit texture size used by final rendering", 
        "tile_order": "Tile order for rendering", 
        "transmission_bounces": "Maximum number of transmission bounces, bounded by total maximum", 
        "transmission_samples": "Number of transmission bounce samples to render for each AA sample", 
        "transparent_max_bounces": "Maximum number of transparent bounces", 
        "transparent_min_bounces": "Minimum number of transparent bounces, setting this lower than the maximum enables probabilistic path termination (faster but noisier)", 
        "use_animated_seed": "Use different seed values (and hence noise patterns) at different frames", 
        "use_camera_cull": "Allow objects to be culled based on the camera frustum", 
        "use_distance_cull": "Allow objects to be culled based on the distance from camera", 
        "use_layer_samples": "How to use per render layer sample settings", 
        "use_progressive_refine": "Instead of rendering each tile until it is finished, refine the whole image progressively (this renders somewhat slower, but time can be saved by manually stopping the render when the noise is low enough)", 
        "use_square_samples": "Square sampling values for easier artist control", 
        "use_transparent_shadows": "Use transparency of surfaces for rendering shadows", 
        "volume_bounces": "Maximum number of volumetric scattering events", 
        "volume_max_steps": "Maximum number of steps through the volume before giving up, to avoid extremely long render times with big objects or small step sizes", 
        "volume_samples": "Number of volume scattering samples to render for each AA sample", 
        "volume_step_size": "Distance between volume shader samples when rendering the volume (lower values give more accurate and detailed results, but also increased render time)"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesVisibilitySettings": {
      "fields": {
        "camera": "Object visibility for camera rays", 
        "diffuse": "Object visibility for diffuse reflection rays", 
        "glossy": "Object visibility for glossy reflection rays", 
        "scatter": "Object visibility for volume scatter rays", 
        "shadow": "Object visibility for shadow rays", 
        "transmission": "Object visibility for transmission rays"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "CyclesWorldSettings": {
      "fields": {
        "homogeneous_volume": "When using volume rendering, assume volume has the same density everywhere(not using any textures), for faster rendering", 
        "max_bounces": "Maximum number of bounces the background light will contribute to the render", 
        "sample_as_light": "Use multiple importance sampling for the environment, enabling for non-solid colors is recommended", 
        "sample_map_resolution": "Importance map size is resolution x resolution; higher values potentially produce less noise, at the cost of memory and speed", 
        "samples": "Number of light samples to render for each AA sample", 
        "volume_interpolation": "Interpolation method to use for volumes", 
        "volume_sampling": "Sampling method to use for volumes"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "DampedTrackConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object", 
        "track_axis": "Axis that points to the target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "DataTransferModifier": {
      "fields": {
        "data_types_edges": "Which edge data layers to transfer", 
        "data_types_loops": "Which face corner data layers to transfer", 
        "data_types_polys": "Which poly data layers to transfer", 
        "data_types_verts": "Which vertex data layers to transfer", 
        "edge_mapping": "Method used to map source edges to destination ones", 
        "invert_vertex_group": "Invert vertex group influence", 
        "islands_precision": "Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)", 
        "layers_uv_select_dst": "How to match source and destination layers", 
        "layers_uv_select_src": "Which layers to transfer, in case of multi-layers types", 
        "layers_vcol_select_dst": "How to match source and destination layers", 
        "layers_vcol_select_src": "Which layers to transfer, in case of multi-layers types", 
        "layers_vgroup_select_dst": "How to match source and destination layers", 
        "layers_vgroup_select_src": "Which layers to transfer, in case of multi-layers types", 
        "loop_mapping": "Method used to map source faces' corners to destination ones", 
        "max_distance": "Maximum allowed distance between source and destination element, for non-topology mappings", 
        "mix_factor": "Factor to use when applying data to destination (exact behavior depends on mix mode)", 
        "mix_mode": "How to affect destination elements with source values", 
        "object": "Object to transfer data from", 
        "poly_mapping": "Method used to map source faces to destination ones", 
        "ray_radius": "'Width' of rays (especially useful when raycasting against vertices or edges)", 
        "use_edge_data": "Enable edge data transfer", 
        "use_loop_data": "Enable face corner data transfer", 
        "use_max_distance": "Source elements must be closer than given distance from destination one", 
        "use_object_transform": "Evaluate source and destination meshes in global space", 
        "use_poly_data": "Enable face data transfer", 
        "use_vert_data": "Enable vertex data transfer", 
        "vert_mapping": "Method used to map source vertices to destination ones", 
        "vertex_group": "Vertex group name for selecting the affected areas"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DecimateModifier": {
      "fields": {
        "angle_limit": "Only dissolve angles below this (planar only)", 
        "delimit": "Limit merging geometry", 
        "face_count": "(read-only)    The current number of faces in the decimated mesh", 
        "invert_vertex_group": "Invert vertex group influence (collapse only)", 
        "iterations": "Number of times reduce the geometry (unsubdivide only)", 
        "ratio": "Ratio of triangles to reduce to (collapse only)", 
        "symmetry_axis": "Axis of symmetry", 
        "use_collapse_triangulate": "Keep triangulated faces resulting from decimation (collapse only)", 
        "use_dissolve_boundaries": "Dissolve all vertices inbetween face boundaries (planar only)", 
        "use_symmetry": "Maintain symmetry on an axis", 
        "vertex_group": "Vertex group name (collapse only)", 
        "vertex_group_factor": "Vertex group strength"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DelaySensor": {
      "fields": {
        "delay": "Delay in number of logic tics before the positive trigger (default 60 per second)", 
        "duration": "If >0, delay in number of logic tics before the negative trigger following the positive trigger", 
        "use_repeat": "Toggle repeat option (if selected, the sensor restarts after Delay+Duration logic tics)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "DisplaceModifier": {
      "fields": {
        "mid_level": "Material value that gives no displacement", 
        "strength": "Amount to displace geometry", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "uv_layer": "UV map name", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DisplaySafeAreas": {
      "fields": {
        "action": "Safe area for general elements", 
        "action_center": "Safe area for general elements in a different aspect ratio", 
        "title": "Safe area for text and graphics", 
        "title_center": "Safe area for text and graphics in a different aspect ratio"
      }
    }, 
    "DistortedNoiseTexture": {
      "fields": {
        "distortion": "Amount of distortion", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_distortion": "Noise basis for the distortion", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "DomainFluidSettings": {
      "fields": {
        "compressibility": "Allowed compressibility due to gravitational force for standing fluid (directly affects simulation step size)", 
        "end_time": "Simulation time of the last blender frame (in seconds)", 
        "filepath": "Directory (and/or filename prefix) to store baked fluid simulation files in", 
        "fluid_mesh_vertices": "(read-only)    Vertices of the fluid mesh generated by simulation", 
        "frame_offset": "Offset when reading baked cache", 
        "generate_particles": "Amount of particles to generate (0=off, 1=normal, >1=more)", 
        "gravity": "Gravity in X, Y and Z direction", 
        "grid_levels": "Number of coarsened grids to use (-1 for automatic)", 
        "memory_estimate": "(read-only)    Estimated amount of memory needed for baking the domain", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "preview_resolution": "Preview resolution in X,Y and Z direction", 
        "render_display_mode": "How to display the mesh for rendering", 
        "resolution": "Domain resolution in X,Y and Z direction", 
        "simulation_rate": "Fluid motion rate (0 = stationary, 1 = normal speed)", 
        "simulation_scale": "Size of the simulation domain in meters", 
        "start_time": "Simulation time of the first blender frame (in seconds)", 
        "surface_smooth": "Amount of surface smoothing (a value of 0 is off, 1 is normal smoothing and more than 1 is extra smoothing)", 
        "surface_subdivisions": "Number of isosurface subdivisions (this is necessary for the inclusion of particles into the surface generation - WARNING: can lead to longer computation times !)", 
        "threads": "Override number of threads for the simulation, 0 is automatic", 
        "tracer_particles": "Number of tracer particles to generate", 
        "use_reverse_frames": "Reverse fluid frames", 
        "use_speed_vectors": "Generate speed vectors for vector blur", 
        "use_surface_noobs": "Removes the air gap between fluid surface and obstacles - WARNING: Can result in a dissolving surface in other areas", 
        "use_time_override": "Use a custom start and end time (in seconds) instead of the scene's timeline", 
        "viewport_display_mode": "How to display the mesh in the viewport", 
        "viscosity_base": "Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)", 
        "viscosity_exponent": "Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "DopeSheet": {
      "fields": {
        "filter_fcurve_name": "F-Curve live filtering string", 
        "filter_group": "Group that included object should be a member of", 
        "filter_text": "Live filtering string", 
        "show_armatures": "Include visualization of armature related animation data", 
        "show_cameras": "Include visualization of camera related animation data", 
        "show_curves": "Include visualization of curve related animation data", 
        "show_datablock_filters": "Show options for whether channels related to certain types of data are included", 
        "show_expanded_summary": "Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)", 
        "show_gpencil": "Include visualization of Grease Pencil related animation data and frames", 
        "show_gpencil_3d_only": "Only show Grease Pencil data-blocks used as part of the active scene", 
        "show_hidden": "Include channels from objects/bone that are not visible", 
        "show_lamps": "Include visualization of lamp related animation data", 
        "show_lattices": "Include visualization of lattice related animation data", 
        "show_linestyles": "Include visualization of Line Style related Animation data", 
        "show_materials": "Include visualization of material related animation data", 
        "show_meshes": "Include visualization of mesh related animation data", 
        "show_metaballs": "Include visualization of metaball related animation data", 
        "show_missing_nla": "Include animation data-blocks with no NLA data (NLA editor only)", 
        "show_modifiers": "Include visualization of animation data related to data-blocks linked to modifiers", 
        "show_nodes": "Include visualization of node related animation data", 
        "show_only_errors": "Only include F-Curves and drivers that are disabled or have errors", 
        "show_only_group_objects": "Only include channels from objects in the specified group", 
        "show_only_matching_fcurves": "Only include F-Curves with names containing search text", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "show_particles": "Include visualization of particle related animation data", 
        "show_scenes": "Include visualization of scene related animation data", 
        "show_shapekeys": "Include visualization of shape key related animation data", 
        "show_speakers": "Include visualization of speaker related animation data", 
        "show_summary": "Display an additional 'summary' line (Dope Sheet editors only)", 
        "show_textures": "Include visualization of texture related animation data", 
        "show_transforms": "Include visualization of object-level animation data (mostly transforms)", 
        "show_worlds": "Include visualization of world related animation data", 
        "source": "(read-only)    ID-Block representing source data, usually ID_SCE (i.e. Scene)", 
        "use_datablock_sort": "Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)", 
        "use_filter_text": "Only include channels with names containing search text", 
        "use_multi_word_filter": "Perform fuzzy/multi-word matching (WARNING: May be slow)"
      }
    }, 
    "Driver": {
      "fields": {
        "expression": "Expression to use for Scripted Expression", 
        "is_valid": "Driver could not be evaluated in past, so should be skipped", 
        "show_debug_info": "Show intermediate values for the driver calculations to allow debugging of drivers", 
        "type": "Driver type", 
        "use_self": "Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)", 
        "variables": "(read-only)    Properties acting as inputs for this driver"
      }
    }, 
    "DriverTarget": {
      "fields": {
        "bone_target": "Name of PoseBone to use as target", 
        "data_path": "RNA Path (from ID-block) to property used", 
        "id": "ID-block that the specific property used can be found from (id_type property must be set first)", 
        "id_type": "Type of ID-block that can be used", 
        "transform_space": "Space in which transforms are used", 
        "transform_type": "Driver variable type"
      }
    }, 
    "DriverVariable": {
      "fields": {
        "is_name_valid": "(read-only)    Is this a valid name for a driver variable", 
        "name": "Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)", 
        "targets": "(read-only)    Sources of input data for evaluating this variable", 
        "type": "Driver variable type"
      }
    }, 
    "DupliObject": {
      "fields": {
        "hide": "(read-only)    Don't show dupli object in viewport or render", 
        "index": "(read-only)    Index in the lowest-level dupli list", 
        "matrix": "(read-only)    Object duplicate transformation matrix", 
        "object": "(read-only)    Object being duplicated", 
        "orco": "(read-only)    Generated coordinates in parent object space", 
        "particle_system": "(read-only)    Particle system that this dupli object was instanced from", 
        "persistent_id": "(read-only)    Persistent identifier for inter-frame matching of objects with motion blur", 
        "random_id": "(read-only)    Random id for this dupli object", 
        "type": "(read-only)    Duplicator type that generated this dupli object", 
        "uv": "(read-only)    UV coordinates in parent object space"
      }
    }, 
    "DynamicPaintBrushSettings": {
      "fields": {
        "invert_proximity": "Proximity falloff is applied inside the volume", 
        "material": "Material to use (if not defined, material linked to the mesh is used)", 
        "paint_alpha": "Paint alpha", 
        "paint_color": "Color of the paint", 
        "paint_distance": "Maximum distance from brush to mesh surface to affect paint", 
        "paint_ramp": "(read-only)    Color ramp used to define proximity falloff", 
        "paint_wetness": "Paint wetness, visible in wetmap (some effects only affect wet paint)", 
        "particle_system": "The particle system to paint with", 
        "proximity_falloff": "Proximity falloff type", 
        "ray_direction": "Ray direction to use for projection (if brush object is located in that direction it's painted)", 
        "smooth_radius": "Smooth falloff added after solid radius", 
        "smudge_strength": "Smudge effect strength", 
        "solid_radius": "Radius that will be painted solid", 
        "use_absolute_alpha": "Only increase alpha value if paint alpha is higher than existing", 
        "use_material": "Use object material to define color and influence", 
        "use_negative_volume": "Negate influence inside the volume", 
        "use_paint_erase": "Erase / remove paint instead of adding it", 
        "use_particle_radius": "Use radius from particle settings", 
        "use_proximity_project": "Brush is projected to canvas from defined direction within brush proximity", 
        "use_proximity_ramp_alpha": "Only read color ramp alpha", 
        "use_smudge": "Make this brush to smudge existing paint as it moves", 
        "use_velocity_alpha": "Multiply brush influence by velocity color ramp alpha", 
        "use_velocity_color": "Replace brush color by velocity color ramp", 
        "use_velocity_depth": "Multiply brush intersection depth (displace, waves) by velocity ramp alpha", 
        "velocity_max": "Velocity considered as maximum influence (Blender units per frame)", 
        "velocity_ramp": "(read-only)    Color ramp used to define brush velocity effect", 
        "wave_clamp": "Maximum level of surface intersection used to influence waves (use 0.0 to disable)", 
        "wave_factor": "Multiplier for wave influence of this brush"
      }
    }, 
    "DynamicPaintCanvasSettings": {
      "fields": {
        "canvas_surfaces": "(read-only)    Paint surface list"
      }
    }, 
    "DynamicPaintModifier": {
      "fields": {
        "brush_settings": "(read-only)", 
        "canvas_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "brush_group": "Only use brush objects from this group", 
        "brush_influence_scale": "Adjust influence brush objects have on this surface", 
        "brush_radius_scale": "Adjust radius of proximity brushes or particles for this surface", 
        "color_dry_threshold": "The wetness level when colors start to shift to the background", 
        "color_spread_speed": "How fast colors get mixed within wet paint", 
        "depth_clamp": "Maximum level of depth intersection in object space (use 0.0 to disable)", 
        "displace_factor": "Strength of displace when applied to the mesh", 
        "dissolve_speed": "Approximately in how many frames should dissolve happen", 
        "drip_acceleration": "How much surface acceleration affects dripping", 
        "drip_velocity": "How much surface velocity affects dripping", 
        "dry_speed": "Approximately in how many frames should drying happen", 
        "effector_weights": "(read-only)", 
        "frame_end": "Simulation end frame", 
        "frame_start": "Simulation start frame", 
        "frame_substeps": "Do extra frames between scene frames to ensure smooth motion", 
        "image_output_path": "Directory to save the textures", 
        "image_resolution": "Output image resolution", 
        "init_color": "Initial color of the surface", 
        "is_active": "Toggle whether surface is processed or ignored", 
        "is_cache_user": "(read-only)", 
        "name": "Surface name", 
        "output_name_a": "Name used to save output from this surface", 
        "output_name_b": "Name used to save output from this surface", 
        "point_cache": "(read-only)", 
        "show_preview": "Display surface preview in 3D-views", 
        "shrink_speed": "How fast shrink effect moves on the canvas surface", 
        "spread_speed": "How fast spread effect moves on the canvas surface", 
        "surface_format": "Surface Format", 
        "surface_type": "Surface Type", 
        "use_antialiasing": "Use 5x multisampling to smooth paint edges", 
        "use_color_preview": "(read-only)    Whether this surface has some color preview for 3D view", 
        "use_dissolve": "Enable to make surface changes disappear over time", 
        "use_dissolve_log": "Use logarithmic dissolve (makes high values to fade faster than low values)", 
        "use_drip": "Process drip effect (drip wet paint to gravity direction)", 
        "use_dry_log": "Use logarithmic drying (makes high values to dry faster than low values)", 
        "use_drying": "Enable to make surface wetness dry over time", 
        "use_incremental_displace": "New displace is added cumulatively on top of existing", 
        "use_output_a": "Save this output layer", 
        "use_output_b": "Save this output layer", 
        "use_premultiply": "Multiply color by alpha (recommended for Blender input)", 
        "use_shrink": "Process shrink effect (shrink paint areas)", 
        "use_spread": "Process spread effect (spread wet paint around surface)", 
        "use_wave_open_border": "Pass waves through mesh edges", 
        "uv_layer": "UV map name", 
        "wave_damping": "Wave damping factor", 
        "wave_smoothness": "Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)", 
        "wave_speed": "Wave propagation speed", 
        "wave_spring": "Spring force that pulls water level back to zero", 
        "wave_timescale": "Wave time scaling factor"
      }
    }, 
    "DynamicPaintSurfaces": {
      "fields": {
        "active": "(read-only)    Active Dynamic Paint surface being displayed"
      }
    }, 
    "EdgeSplitModifier": {
      "fields": {
        "split_angle": "Angle above which to split edges", 
        "use_edge_angle": "Split edges with high angle between faces", 
        "use_edge_sharp": "Split edges that are marked as sharp"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "EditBone": {
      "fields": {
        "bbone_curveinx": "X-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveiny": "Y-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveoutx": "X-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_curveouty": "Y-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_in": "Length of first Bezier Handle (for B-Bones only)", 
        "bbone_out": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_rollin": "Roll offset for the start of the B-Bone, adjusts twist", 
        "bbone_rollout": "Roll offset for the end of the B-Bone, adjusts twist", 
        "bbone_scalein": "Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleout": "Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)", 
        "bbone_x": "B-Bone X size", 
        "bbone_z": "B-Bone Z size", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "head": "Location of head end of the bone", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "hide": "Bone is not visible when in Edit Mode", 
        "hide_select": "Bone is able to be selected", 
        "layers": "Layers bone exists in", 
        "lock": "Bone is not able to be transformed when in Edit Mode", 
        "matrix": "Matrix combining loc/rot of the bone (head position, direction and roll), in armature space (WARNING: does not include/support bone's length/size)", 
        "parent": "Parent edit bone (in same Armature)", 
        "roll": "Bone rotation around head-tail axis", 
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "tail": "Location of tail end of the bone", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "use_connect": "When bone has a parent, bone's head is stuck to the parent's tail", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "use_deform": "Enable Bone to deform geometry", 
        "use_endroll_as_inroll": "Use Roll Out of parent bone as Roll In of its children", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "use_inherit_scale": "Bone inherits scaling from parent bone", 
        "use_local_location": "Bone location is set in local space", 
        "use_relative_parent": "Object children will use relative transform, like deform"
      }
    }, 
    "EditObjectActuator": {
      "fields": {
        "angular_velocity": "Angular velocity upon creation", 
        "linear_velocity": "Velocity upon creation", 
        "mass": "The mass of the object", 
        "mesh": "Replace the existing, when left blank 'Phys' will remake the existing physics mesh", 
        "mode": "The mode of the actuator", 
        "object": "Add this Object and all its children (can't be on a visible layer)", 
        "time": "Duration the new Object lives or the track takes", 
        "track_axis": "The axis that points to the target object", 
        "track_object": "Track to this Object", 
        "up_axis": "The axis that points upward", 
        "use_3d_tracking": "Enable 3D tracking", 
        "use_local_angular_velocity": "Apply the rotation locally", 
        "use_local_linear_velocity": "Apply the transformation locally", 
        "use_replace_display_mesh": "Replace the display mesh", 
        "use_replace_physics_mesh": "Replace the physics mesh (triangle bounds only - compound shapes not supported)"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "EffectorWeights": {
      "fields": {
        "all": "All effector's weight", 
        "apply_to_hair_growing": "Use force fields when growing hair", 
        "boid": "Boid effector weight", 
        "charge": "Charge effector weight", 
        "curve_guide": "Curve guide effector weight", 
        "drag": "Drag effector weight", 
        "force": "Force effector weight", 
        "gravity": "Global gravity weight", 
        "group": "Limit effectors to this Group", 
        "harmonic": "Harmonic effector weight", 
        "lennardjones": "Lennard-Jones effector weight", 
        "magnetic": "Magnetic effector weight", 
        "smokeflow": "Smoke Flow effector weight", 
        "texture": "Texture effector weight", 
        "turbulence": "Turbulence effector weight", 
        "vortex": "Vortex effector weight", 
        "wind": "Wind effector weight"
      }
    }, 
    "EffectSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "proxy": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "EnumProperty": {
      "fields": {
        "default": "(read-only)    Default value for this enum", 
        "default_flag": "(read-only)    Default value for this enum", 
        "enum_items": "(read-only)    Possible values for the property", 
        "enum_items_static": "(read-only)    Possible values for the property (never calls optional dynamic generation of those)"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "EnumPropertyItem": {
      "fields": {
        "description": "(read-only)    Description of the item's purpose", 
        "icon": "(read-only)    Icon of the item", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "name": "(read-only)    Human readable name", 
        "value": "(read-only)    Value of the item"
      }
    }, 
    "EnvironmentMap": {
      "fields": {
        "clip_end": "Objects further than this are not visible to map", 
        "clip_start": "Objects nearer than this are not visible to map", 
        "depth": "Number of times a map will be rendered recursively (mirror effects)", 
        "is_valid": "(read-only)    True if this map is ready for use, False if it needs rendering", 
        "layers_ignore": "Hide objects on these layers when generating the Environment Map", 
        "resolution": "Pixel resolution of the rendered environment map", 
        "viewpoint_object": "Object to use as the environment map's viewpoint location"
      }
    }, 
    "EnvironmentMapTexture": {
      "fields": {
        "environment_map": "(read-only)    Get the environment map associated with this texture", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_probes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "filter_type": "Texture filter to use for sampling image", 
        "image": "Source image file to read the environment map from", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "Event": {
      "fields": {
        "alt": "(read-only)    True when the Alt/Option key is held", 
        "ascii": "(read-only)    Single ASCII character for this event", 
        "ctrl": "(read-only)    True when the Ctrl key is held", 
        "is_tablet": "(read-only)    The pressure of the tablet or 1.0 if no tablet present", 
        "mouse_prev_x": "(read-only)    The window relative horizontal location of the mouse", 
        "mouse_prev_y": "(read-only)    The window relative vertical location of the mouse", 
        "mouse_region_x": "(read-only)    The region relative horizontal location of the mouse", 
        "mouse_region_y": "(read-only)    The region relative vertical location of the mouse", 
        "mouse_x": "(read-only)    The window relative horizontal location of the mouse", 
        "mouse_y": "(read-only)    The window relative vertical location of the mouse", 
        "oskey": "(read-only)    True when the Cmd key is held", 
        "pressure": "(read-only)    The pressure of the tablet or 1.0 if no tablet present", 
        "shift": "(read-only)    True when the Shift key is held", 
        "tilt": "(read-only)    The pressure of the tablet or zeroes if no tablet present", 
        "type": "(read-only)", 
        "unicode": "(read-only)    Single unicode character for this event", 
        "value": "(read-only)    The type of event, only applies to some"
      }
    }, 
    "ExplodeModifier": {
      "fields": {
        "particle_uv": "UV map to change with particle age", 
        "protect": "Clean vertex group edges", 
        "show_alive": "Show mesh when particles are alive", 
        "show_dead": "Show mesh when particles are dead", 
        "show_unborn": "Show mesh when particles are unborn", 
        "use_edge_cut": "Cut face edges for nicer shrapnel", 
        "use_size": "Use particle size for the shrapnel"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "FCurve": {
      "fields": {
        "array_index": "Index to the specific property affected by F-Curve if applicable", 
        "color": "Color of the F-Curve in the Graph Editor", 
        "color_mode": "Method used to determine color of F-Curve in Graph Editor", 
        "data_path": "RNA Path to property affected by F-Curve", 
        "driver": "(read-only)    Channel Driver (only set for Driver F-Curves)", 
        "extrapolation": "Method used for evaluating value of F-Curve outside first and last keyframes", 
        "group": "Action Group that this F-Curve belongs to", 
        "hide": "F-Curve and its keyframes are hidden in the Graph Editor graphs", 
        "is_valid": "False when F-Curve could not be evaluated in past, so should be skipped when evaluating", 
        "keyframe_points": "(read-only)    User-editable keyframes", 
        "lock": "F-Curve's settings cannot be edited", 
        "modifiers": "(read-only)    Modifiers affecting the shape of the F-Curve", 
        "mute": "F-Curve is not evaluated", 
        "sampled_points": "(read-only)    Sampled animation data", 
        "select": "F-Curve is selected for editing"
      }
    }, 
    "FCurveModifiers": {
      "fields": {
        "active": "Active F-Curve Modifier"
      }
    }, 
    "FCurveSample": {
      "fields": {
        "co": "Point coordinates", 
        "select": "Selection status"
      }
    }, 
    "FFmpegSettings": {
      "fields": {
        "audio_bitrate": "Audio bitrate (kb/s)", 
        "audio_channels": "Audio channel count", 
        "audio_codec": "FFmpeg audio codec to use", 
        "audio_mixrate": "Audio samplerate(samples/s)", 
        "audio_volume": "Audio volume", 
        "buffersize": "Rate control: buffer size (kb)", 
        "codec": "FFmpeg codec to use", 
        "constant_rate_factor": "Constant Rate Factor (CRF); tradeoff between video quality and file size", 
        "ffmpeg_preset": "Tradeoff between encoding speed and compression ratio", 
        "format": "Output file container", 
        "gopsize": "Distance between key frames, also known as GOP size; influences file size and seekability", 
        "max_b_frames": "Maximum number of B-frames between non-B-frames; influences file size and seekability", 
        "maxrate": "Rate control: max rate (kb/s)", 
        "minrate": "Rate control: min rate (kb/s)", 
        "muxrate": "Mux rate (bits/s(!))", 
        "packetsize": "Mux packet size (byte)", 
        "use_autosplit": "Autosplit output at 2GB boundary", 
        "use_lossless_output": "Use lossless output for video streams", 
        "use_max_b_frames": "Set a maximum number of B-frames", 
        "video_bitrate": "Video bitrate (kb/s)"
      }
    }, 
    "FieldSettings": {
      "fields": {
        "apply_to_location": "Effect particles' location", 
        "apply_to_rotation": "Effect particles' dynamic rotation", 
        "distance_max": "Maximum distance for the field to work", 
        "distance_min": "Minimum distance for the field's fall-off", 
        "flow": "Convert effector force into air flow velocity", 
        "guide_clump_amount": "Amount of clumping", 
        "guide_clump_shape": "Shape of clumping", 
        "guide_free": "Guide-free time from particle life's end", 
        "guide_kink_amplitude": "The amplitude of the offset", 
        "guide_kink_axis": "Which axis to use for offset", 
        "guide_kink_frequency": "The frequency of the offset (1/total length)", 
        "guide_kink_shape": "Adjust the offset to the beginning/end", 
        "guide_kink_type": "Type of periodic offset on the curve", 
        "guide_minimum": "The distance from which particles are affected fully", 
        "harmonic_damping": "Damping of the harmonic force", 
        "inflow": "Inwards component of the vortex force", 
        "linear_drag": "Drag component proportional to velocity", 
        "noise": "Amount of noise for the force strength", 
        "quadratic_drag": "Drag component proportional to the square of velocity", 
        "radial_falloff": "Radial falloff power (real gravitational falloff = 2)", 
        "radial_max": "Maximum radial distance for the field to work", 
        "radial_min": "Minimum radial distance for the field's fall-off", 
        "rest_length": "Rest length of the harmonic force", 
        "seed": "Seed of the noise", 
        "shape": "Which direction is used to calculate the effector force", 
        "size": "Size of the turbulence", 
        "source_object": "Select domain object of the smoke simulation", 
        "strength": "Strength of force field", 
        "texture": "Texture to use as force", 
        "texture_mode": "How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)", 
        "texture_nabla": "Defines size of derivative offset used for calculating gradient and curl", 
        "type": "Type of field", 
        "use_2d_force": "Apply force only in 2D", 
        "use_absorption": "Force gets absorbed by collision objects", 
        "use_global_coords": "Use effector/global coordinates for turbulence", 
        "use_gravity_falloff": "Multiply force by 1/distance\u00b2", 
        "use_guide_path_add": "Based on distance/falloff it adds a portion of the entire path", 
        "use_guide_path_weight": "Use curve weights to influence the particle influence along the curve", 
        "use_max_distance": "Use a maximum distance for the field to work", 
        "use_min_distance": "Use a minimum distance for the field's fall-off", 
        "use_multiple_springs": "Every point is effected by multiple springs", 
        "use_object_coords": "Use object/global coordinates for texture", 
        "use_radial_max": "Use a maximum radial distance for the field to work", 
        "use_radial_min": "Use a minimum radial distance for the field's fall-off", 
        "use_root_coords": "Texture coordinates from root particle locations", 
        "use_smoke_density": "Adjust force strength based on smoke density", 
        "z_direction": "Effect in full or only positive/negative Z direction"
      }
    }, 
    "FileBrowserFSMenuEntry": {
      "fields": {
        "is_valid": "(read-only)    Whether this path is currently reachable", 
        "use_save": "(read-only)    Whether this path is saved in bookmarks, or generated from OS"
      }
    }, 
    "FileSelectParams": {
      "fields": {
        "directory": "Directory displayed in the file browser", 
        "display_size": "Change the size of the display (width of columns or thumbnails size)", 
        "display_type": "Display mode for the file list", 
        "filename": "Active file in the file browser", 
        "filter_id": "Which ID types to show/hide, when browsing a library", 
        "filter_id_category": "Which ID categories to show/hide, when browsing a library", 
        "filter_search": "Filter by name, supports '*' wildcard", 
        "recursion_level": "Numbers of dirtree levels to show simultaneously", 
        "show_hidden": "Show hidden dot files", 
        "title": "(read-only)    Title for the file browser", 
        "use_filter": "Enable filtering of files", 
        "use_filter_backup": "Show .blend1, .blend2, etc. files", 
        "use_filter_blender": "Show .blend files", 
        "use_filter_blendid": "Show .blend files items (objects, materials, etc.)", 
        "use_filter_folder": "Show folders", 
        "use_filter_font": "Show font files", 
        "use_filter_image": "Show image files", 
        "use_filter_movie": "Show movie files", 
        "use_filter_script": "Show script files", 
        "use_filter_sound": "Show sound files", 
        "use_filter_text": "Show text files", 
        "use_library_browsing": "(read-only)    Whether we may browse blender files' content or not"
      }
    }, 
    "Filter2DActuator": {
      "fields": {
        "filter_pass": "Set filter order", 
        "motion_blur_factor": "Motion blur factor", 
        "use_motion_blur": "Enable/Disable Motion Blur"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "FloatProperty": {
      "fields": {
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "hard_max": "(read-only)    Maximum value used by buttons", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "is_array": "(read-only)", 
        "precision": "(read-only)    Number of digits after the dot used by buttons", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "FloorConstraint": {
      "fields": {
        "floor_location": "Location of target that object will not pass through", 
        "offset": "Offset of floor from object origin", 
        "target": "Target Object", 
        "use_rotation": "Use the target's rotation to determine floor", 
        "use_sticky": "Immobilize object while constrained"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FluidFluidSettings": {
      "fields": {
        "initial_velocity": "Initial velocity of fluid", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "FluidSettings": {
      "fields": {
        "type": "Type of participation in the fluid simulation"
      }
    }, 
    "FluidSimulationModifier": {
      "fields": {
        "settings": "(read-only)    Settings for how this object is used in the fluid simulation"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "FluidVertexVelocity": {
      "fields": {
        "velocity": "(read-only)"
      }
    }, 
    "FModifier": {
      "fields": {
        "active": "F-Curve Modifier is the one being edited", 
        "blend_in": "Number of frames from start frame for influence to take effect", 
        "blend_out": "Number of frames from end frame for influence to fade out", 
        "frame_end": "Frame that modifier's influence ends (if Restrict Frame Range is in use)", 
        "frame_start": "Frame that modifier's influence starts (if Restrict Frame Range is in use)", 
        "influence": "Amount of influence F-Curve Modifier will have when not fading in/out", 
        "is_valid": "(read-only)    F-Curve Modifier has invalid settings and will not be evaluated", 
        "mute": "F-Curve Modifier will not be evaluated", 
        "show_expanded": "F-Curve Modifier's panel is expanded in UI", 
        "type": "(read-only)    F-Curve Modifier Type", 
        "use_influence": "F-Curve Modifier's effects will be tempered by a default factor", 
        "use_restricted_range": "F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them"
      }
    }, 
    "FModifierCycles": {
      "fields": {
        "cycles_after": "Maximum number of cycles to allow after last keyframe (0 = infinite)", 
        "cycles_before": "Maximum number of cycles to allow before first keyframe (0 = infinite)", 
        "mode_after": "Cycling mode to use after last keyframe", 
        "mode_before": "Cycling mode to use before first keyframe"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierEnvelope": {
      "fields": {
        "control_points": "(read-only)    Control points defining the shape of the envelope", 
        "default_max": "Upper distance from Reference Value for 1:1 default influence", 
        "default_min": "Lower distance from Reference Value for 1:1 default influence", 
        "reference_value": "Value that envelope's influence is centered around / based on"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierEnvelopeControlPoint": {
      "fields": {
        "frame": "Frame this control-point occurs on", 
        "max": "Upper bound of envelope at this control-point", 
        "min": "Lower bound of envelope at this control-point"
      }
    }, 
    "FModifierFunctionGenerator": {
      "fields": {
        "amplitude": "Scale factor determining the maximum/minimum values", 
        "function_type": "Type of built-in function to use", 
        "phase_multiplier": "Scale factor determining the 'speed' of the function", 
        "phase_offset": "Constant factor to offset time by for function", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them", 
        "value_offset": "Constant factor to offset values by"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierGenerator": {
      "fields": {
        "coefficients": "Coefficients for 'x' (starting from lowest power of x^0)", 
        "mode": "Type of generator to use", 
        "poly_order": "The highest power of 'x' for this polynomial (number of coefficients - 1)", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierLimits": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "use_max_x": "Use the maximum X value", 
        "use_max_y": "Use the maximum Y value", 
        "use_min_x": "Use the minimum X value", 
        "use_min_y": "Use the minimum Y value"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierNoise": {
      "fields": {
        "blend_type": "Method of modifying the existing F-Curve", 
        "depth": "Amount of fine level detail present in the noise", 
        "offset": "Time offset for the noise effect", 
        "phase": "A random seed for the noise effect", 
        "scale": "Scaling (in time) of the noise", 
        "strength": "Amplitude of the noise - the amount that it modifies the underlying curve"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierStepped": {
      "fields": {
        "frame_end": "Frame that modifier's influence ends (if applicable)", 
        "frame_offset": "Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)", 
        "frame_start": "Frame that modifier's influence starts (if applicable)", 
        "frame_step": "Number of frames to hold each value", 
        "use_frame_end": "Restrict modifier to only act before its 'end' frame", 
        "use_frame_start": "Restrict modifier to only act after its 'start' frame"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FollowPathConstraint": {
      "fields": {
        "forward_axis": "Axis that points forward along the path", 
        "offset": "Offset from the position corresponding to the time frame", 
        "offset_factor": "Percentage value defining target position along length of curve", 
        "target": "Target Object", 
        "up_axis": "Axis that points upward", 
        "use_curve_follow": "Object will follow the heading and banking of the curve", 
        "use_curve_radius": "Object is scaled by the curve radius", 
        "use_fixed_location": "Object will stay locked to a single point somewhere along the length of the curve regardless of time"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FollowTrackConstraint": {
      "fields": {
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "clip": "Movie Clip to get tracking data from", 
        "depth_object": "Object used to define depth in camera space by projecting onto surface of this object", 
        "frame_method": "How the footage fits in the camera frame", 
        "object": "Movie tracking object to follow (if empty, camera object is used)", 
        "track": "Movie tracking track to follow", 
        "use_3d_position": "Use 3D position of track to parent to", 
        "use_active_clip": "Use active clip defined in scene", 
        "use_undistorted_position": "Parent to undistorted position of 2D track"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FreestyleLineSet": {
      "fields": {
        "edge_type_combination": "Specify a logical combination of selection conditions on feature edge types", 
        "edge_type_negation": "Specify either inclusion or exclusion of feature edges selected by edge types", 
        "exclude_border": "Exclude border edges", 
        "exclude_contour": "Exclude contours", 
        "exclude_crease": "Exclude crease edges", 
        "exclude_edge_mark": "Exclude edge marks", 
        "exclude_external_contour": "Exclude external contours", 
        "exclude_material_boundary": "Exclude edges at material boundaries", 
        "exclude_ridge_valley": "Exclude ridges and valleys", 
        "exclude_silhouette": "Exclude silhouette edges", 
        "exclude_suggestive_contour": "Exclude suggestive contours", 
        "face_mark_condition": "Specify a feature edge selection condition based on face marks", 
        "face_mark_negation": "Specify either inclusion or exclusion of feature edges selected by face marks", 
        "group": "A group of objects based on which feature edges are selected", 
        "group_negation": "Specify either inclusion or exclusion of feature edges belonging to a group of objects", 
        "linestyle": "Line style settings", 
        "name": "Line set name", 
        "qi_end": "Last QI value of the QI range", 
        "qi_start": "First QI value of the QI range", 
        "select_border": "Select border edges (open mesh edges)", 
        "select_by_edge_types": "Select feature edges based on edge types", 
        "select_by_face_marks": "Select feature edges by face marks", 
        "select_by_group": "Select feature edges based on a group of objects", 
        "select_by_image_border": "Select feature edges by image border (less memory consumption)", 
        "select_by_visibility": "Select feature edges based on visibility", 
        "select_contour": "Select contours (outer silhouettes of each object)", 
        "select_crease": "Select crease edges (those between two faces making an angle smaller than the Crease Angle)", 
        "select_edge_mark": "Select edge marks (edges annotated by Freestyle edge marks)", 
        "select_external_contour": "Select external contours (outer silhouettes of occluding and occluded objects)", 
        "select_material_boundary": "Select edges at material boundaries", 
        "select_ridge_valley": "Select ridges and valleys (boundary lines between convex and concave areas of surface)", 
        "select_silhouette": "Select silhouettes (edges at the boundary of visible and hidden faces)", 
        "select_suggestive_contour": "Select suggestive contours (almost silhouette/contour edges)", 
        "show_render": "Enable or disable this line set during stroke rendering", 
        "visibility": "Determine how to use visibility for feature edge selection"
      }
    }, 
    "FreestyleLineStyle": {
      "fields": {
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "alpha": "Base alpha transparency, possibly modified by alpha transparency modifiers", 
        "alpha_modifiers": "(read-only)    List of alpha transparency modifiers", 
        "angle_max": "Maximum 2D angle for splitting chains", 
        "angle_min": "Minimum 2D angle for splitting chains", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "caps": "Select the shape of both ends of strokes", 
        "chain_count": "Chain count for the selection of first N chains", 
        "chaining": "Select the way how feature edges are jointed to form chains", 
        "color": "Base line color, possibly modified by line color modifiers", 
        "color_modifiers": "(read-only)    List of line color modifiers", 
        "dash1": "Length of the 1st dash for dashed lines", 
        "dash2": "Length of the 2nd dash for dashed lines", 
        "dash3": "Length of the 3rd dash for dashed lines", 
        "gap1": "Length of the 1st gap for dashed lines", 
        "gap2": "Length of the 2nd gap for dashed lines", 
        "gap3": "Length of the 3rd gap for dashed lines", 
        "geometry_modifiers": "(read-only)    List of stroke geometry modifiers", 
        "integration_type": "Select the way how the sort key is computed for each chain", 
        "length_max": "Maximum curvilinear 2D length for the selection of chains", 
        "length_min": "Minimum curvilinear 2D length for the selection of chains", 
        "material_boundary": "If true, chains of feature edges are split at material boundaries", 
        "node_tree": "(read-only)    Node tree for node-based shaders", 
        "panel": "Select the property panel to be shown", 
        "rounds": "Number of rounds in a sketchy multiple touch", 
        "sort_key": "Select the sort key to determine the stacking order of chains", 
        "sort_order": "Select the sort order", 
        "split_dash1": "Length of the 1st dash for splitting", 
        "split_dash2": "Length of the 2nd dash for splitting", 
        "split_dash3": "Length of the 3rd dash for splitting", 
        "split_gap1": "Length of the 1st gap for splitting", 
        "split_gap2": "Length of the 2nd gap for splitting", 
        "split_gap3": "Length of the 3rd gap for splitting", 
        "split_length": "Curvilinear 2D length for chain splitting", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "texture_spacing": "Spacing for textures along stroke length", 
        "thickness": "Base line thickness, possibly modified by line thickness modifiers", 
        "thickness_modifiers": "(read-only)    List of line thickness modifiers", 
        "thickness_position": "Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option)", 
        "thickness_ratio": "A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness", 
        "use_angle_max": "Split chains at points with angles larger than the maximum 2D angle", 
        "use_angle_min": "Split chains at points with angles smaller than the minimum 2D angle", 
        "use_chain_count": "Enable the selection of first N chains", 
        "use_chaining": "Enable chaining of feature edges", 
        "use_dashed_line": "Enable or disable dashed line", 
        "use_length_max": "Enable the selection of chains by a maximum 2D length", 
        "use_length_min": "Enable the selection of chains by a minimum 2D length", 
        "use_nodes": "Use shader nodes for the line style", 
        "use_same_object": "If true, only feature edges of the same object are joined", 
        "use_sorting": "Arrange the stacking order of strokes", 
        "use_split_length": "Enable chain splitting by curvilinear 2D length", 
        "use_split_pattern": "Enable chain splitting by dashed line patterns", 
        "use_texture": "Enable or disable textured strokes"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "FreestyleModuleSettings": {
      "fields": {
        "script": "Python script to define a style module", 
        "use": "Enable or disable this style module during stroke rendering"
      }
    }, 
    "FreestyleSettings": {
      "fields": {
        "crease_angle": "Angular threshold for detecting crease edges", 
        "kr_derivative_epsilon": "Kr derivative epsilon for computing suggestive contours", 
        "linesets": "(read-only)", 
        "mode": "Select the Freestyle control mode", 
        "modules": "(read-only)    A list of style modules (to be applied from top to bottom)", 
        "sphere_radius": "Sphere radius for computing curvatures", 
        "use_advanced_options": "Enable advanced edge detection options (sphere radius and Kr derivative epsilon)", 
        "use_culling": "If enabled, out-of-view edges are ignored", 
        "use_material_boundaries": "Enable material boundaries", 
        "use_ridges_and_valleys": "Enable ridges and valleys", 
        "use_smoothness": "Take face smoothness into account in view map calculation", 
        "use_suggestive_contours": "Enable suggestive contours", 
        "use_view_map_cache": "Keep the computed view map and avoid re-calculating it if mesh geometry is unchanged"
      }
    }, 
    "Function": {
      "fields": {
        "description": "(read-only)    Description of the Function's purpose", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "is_registered": "(read-only)    Function is registered as callback as part of type registration", 
        "is_registered_optional": "(read-only)    Function is optionally registered as callback part of type registration", 
        "parameters": "(read-only)    Parameters for the function", 
        "use_self": "(read-only)    Function does not pass its self as an argument (becomes a static method in python)", 
        "use_self_type": "(read-only)    Function passes its self type as an argument (becomes a class method in python if use_self is false)"
      }
    }, 
    "GameActuator": {
      "fields": {
        "filename": "The file to use, depending on the mode (e.g. the blend file to load or a destination for saving a screenshot) - use the \"//\" prefix for a relative path"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "GameBooleanProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "GameFloatProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "GameIntProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "GameObjectSettings": {
      "fields": {
        "actuators": "(read-only)    Game engine actuators to act on events", 
        "angular_velocity_max": "Clamp angular velocity to this maximum speed, in angle per second", 
        "angular_velocity_min": "Clamp angular velocity to this minimum speed (except when totally still), in angle per second", 
        "collision_bounds_type": "Select the collision shape that better fits the object", 
        "collision_group": "The collision group of the object", 
        "collision_margin": "Extra margin around object for collision detection, small amount required for stability", 
        "collision_mask": "The groups this object can collide with", 
        "controllers": "(read-only)    Game engine controllers to process events, connecting sensors to actuators", 
        "damping": "General movement damping", 
        "fall_speed": "Maximum speed at which the character will fall", 
        "form_factor": "Form factor scales the inertia tensor", 
        "friction_coefficients": "Relative friction coefficients in the in the X, Y and Z directions, when anisotropic friction is enabled", 
        "jump_max": "The maximum number of jumps the character can make before it hits the ground", 
        "jump_speed": "Upward velocity applied to the character when jumping", 
        "lock_location_x": "Disable simulation of linear motion along the X axis", 
        "lock_location_y": "Disable simulation of linear motion along the Y axis", 
        "lock_location_z": "Disable simulation of linear motion along the Z axis", 
        "lock_rotation_x": "Disable simulation of angular motion along the X axis", 
        "lock_rotation_y": "Disable simulation of angular motion along the Y axis", 
        "lock_rotation_z": "Disable simulation of angular motion along the Z axis", 
        "mass": "Mass of the object", 
        "obstacle_radius": "Radius of object representation in obstacle simulation", 
        "physics_type": "Select the type of physical representation", 
        "properties": "(read-only)    Game engine properties", 
        "radius": "Radius of bounding sphere and material physics", 
        "rotation_damping": "General rotation damping", 
        "sensors": "(read-only)    Game engine sensor to detect events", 
        "show_actuators": "Shows actuators for this object in the user interface", 
        "show_controllers": "Shows controllers for this object in the user interface", 
        "show_debug_state": "Print state debug info in the game engine", 
        "show_sensors": "Shows sensors for this object in the user interface", 
        "show_state_panel": "Show state panel", 
        "soft_body": "(read-only)    Settings for Bullet soft body simulation", 
        "states_initial": "Initial state when the game starts", 
        "states_visible": "State determining which controllers are displayed", 
        "step_height": "Maximum height of steps the character can run over", 
        "use_activity_culling": "Disable simulation of angular motion along the Z axis", 
        "use_actor": "Object is detected by the Near and Radar sensor", 
        "use_all_states": "Set all state bits", 
        "use_anisotropic_friction": "Enable anisotropic friction", 
        "use_collision_bounds": "Specify a collision bounds type other than the default", 
        "use_collision_compound": "Add children to form a compound collision object", 
        "use_ghost": "Object does not react to collisions, like a ghost", 
        "use_material_physics_fh": "React to force field physics settings in materials", 
        "use_obstacle_create": "Create representation for obstacle simulation", 
        "use_record_animation": "Record animation objects without physics", 
        "use_rotate_from_normal": "Use face normal to rotate object, so that it points away from the surface", 
        "use_sleep": "Disable auto (de)activation in physics simulation", 
        "used_states": "(read-only)    States which are being used by controllers", 
        "velocity_max": "Clamp velocity to this maximum speed, in distance per second", 
        "velocity_min": "Clamp velocity to this minimum speed (except when totally still), in distance per second"
      }
    }, 
    "GameProperty": {
      "fields": {
        "name": "Available as GameObject attributes in the game engine's python API", 
        "show_debug": "Print debug information for this property"
      }
    }, 
    "GameSoftBodySettings": {
      "fields": {
        "cluster_iterations": "Number of cluster iterations", 
        "collision_margin": "Collision margin for soft body. Small value makes the algorithm unstable", 
        "dynamic_friction": "Dynamic Friction", 
        "linear_stiffness": "Linear stiffness of the soft body links", 
        "location_iterations": "Position solver iterations", 
        "shape_threshold": "Shape matching threshold", 
        "use_bending_constraints": "Enable bending constraints", 
        "use_cluster_rigid_to_softbody": "Enable cluster collision between soft and rigid body", 
        "use_cluster_soft_to_softbody": "Enable cluster collision between soft and soft body", 
        "use_shape_match": "Enable soft body shape matching goal", 
        "weld_threshold": "Welding threshold: distance between nearby vertices to be considered equal => set to 0.0 to disable welding test and speed up scene loading (ok if the mesh has no duplicates)"
      }
    }, 
    "GameStringProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "GameTimerProperty": {
      "fields": {
        "value": "Property value"
      }, 
      "inherits": [
        "GameProperty"
      ]
    }, 
    "GammaCrossSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "GaussianBlurSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "size_x": "Size of the blur along X axis", 
        "size_y": "Size of the blur along Y axis"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "GlowSequence": {
      "fields": {
        "blur_radius": "Radius of glow effect", 
        "boost_factor": "Brightness multiplier", 
        "clamp": "Brightness limit of intensity", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "quality": "Accuracy of the blur effect", 
        "threshold": "Minimum intensity to trigger a glow", 
        "use_only_boost": "Show the glow buffer only"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "GPencilBrush": {
      "fields": {
        "angle": "Direction of the stroke at which brush gives maximal thickness (0\u00b0 for horizontal)", 
        "angle_factor": "Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction", 
        "curve_jitter": "(read-only)    Curve used for the jitter effect", 
        "curve_sensitivity": "(read-only)    Curve used for the sensitivity", 
        "curve_strength": "(read-only)    Curve used for the strength", 
        "jitter": "Jitter factor for new strokes", 
        "line_width": "Thickness of strokes (in pixels)", 
        "name": "Brush name", 
        "pen_sensitivity_factor": "Pressure sensitivity factor for new strokes", 
        "pen_smooth_factor": "Amount of smoothing to apply to newly created strokes, to reduce jitter/noise", 
        "pen_smooth_steps": "Number of times to smooth newly created strokes", 
        "pen_subdivision_steps": "Number of times to subdivide newly created strokes, for less jagged strokes", 
        "random_press": "Randomness factor for pressure and strength in new strokes", 
        "random_subdiv": "Randomness factor for new strokes after subdivision", 
        "strength": "Color strength for new strokes (affect alpha factor of color)", 
        "use_jitter_pressure": "Use tablet pressure for jitter", 
        "use_pressure": "Use tablet pressure", 
        "use_random_pressure": "Use random value for pressure", 
        "use_random_strength": "Use random value for strength", 
        "use_strength_pressure": "Use tablet pressure for color strength"
      }
    }, 
    "GPencilFrame": {
      "fields": {
        "frame_number": "The frame on which this sketch appears", 
        "is_edited": "Frame is being edited (painted on)", 
        "select": "Frame is selected for editing in the Dope Sheet", 
        "strokes": "(read-only)    Freehand curves defining the sketch on this frame"
      }
    }, 
    "GPencilInterpolateSettings": {
      "fields": {
        "amplitude": "Amount to boost elastic bounces for 'elastic' easing", 
        "back": "Amount of overshoot for 'back' easing", 
        "easing": "Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied to", 
        "interpolate_all_layers": "Interpolate all layers, not only active", 
        "interpolate_selected_only": "Interpolate only selected strokes in the original frame", 
        "interpolation_curve": "(read-only)    Custom curve to control 'sequence' interpolation between Grease Pencil frames", 
        "period": "Time between bounces for elastic easing", 
        "type": "Interpolation method to use the next time 'Interpolate Sequence' is run"
      }
    }, 
    "GPencilLayer": {
      "fields": {
        "active_frame": "(read-only)    Frame currently being displayed for this layer", 
        "after_color": "Base color for ghosts after the active frame", 
        "before_color": "Base color for ghosts before the active frame", 
        "frames": "(read-only)    Sketches for this layer on different frames", 
        "ghost_after_range": "Maximum number of frames to show after current frame (0 = show only the next sketch, -1 = don't show any frames after current)", 
        "ghost_before_range": "Maximum number of frames to show before current frame (0 = show only the previous sketch, -1 = don't show any frames before current)", 
        "hide": "Set layer Visibility", 
        "info": "Layer name", 
        "is_parented": "(read-only)    True when the layer parent object is set", 
        "line_change": "Thickness change to apply to current strokes (in pixels)", 
        "lock": "Protect layer from further editing and/or frame changes", 
        "lock_frame": "Lock current frame displayed by layer", 
        "matrix_inverse": "Parent inverse transformation matrix", 
        "opacity": "Layer Opacity", 
        "parent": "Parent Object", 
        "parent_bone": "Name of parent bone in case of a bone parenting relation", 
        "parent_type": "Type of parent relation", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "show_points": "Draw the points which make up the strokes (for debugging purposes)", 
        "show_x_ray": "Make the layer draw in front of objects", 
        "tint_color": "Color for tinting stroke colors", 
        "tint_factor": "Factor of tinting color", 
        "unlock_color": "Unprotect selected colors from further editing and/or frame changes", 
        "use_ghost_custom_colors": "Use custom colors for ghost frames", 
        "use_ghosts_always": "Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)", 
        "use_onion_skinning": "Ghost frames on either side of frame", 
        "use_volumetric_strokes": "Draw strokes as a series of circular blobs, resulting in a volumetric effect"
      }
    }, 
    "GPencilPalette": {
      "fields": {
        "colors": "(read-only)    Colors of the palette", 
        "name": "Palette name"
      }
    }, 
    "GPencilPaletteColor": {
      "fields": {
        "alpha": "Color Opacity", 
        "color": "Color for strokes", 
        "fill_alpha": "Opacity for filling region bounded by each stroke", 
        "fill_color": "Color for filling region bounded by each stroke", 
        "ghost": "Display strokes using this color when showing onion skins", 
        "hide": "Set color Visibility", 
        "is_fill_visible": "(read-only)    True when opacity of fill is set high enough to be visible", 
        "is_stroke_visible": "(read-only)    True when opacity of stroke is set high enough to be visible", 
        "lock": "Protect color from further editing and/or frame changes", 
        "name": "Color name", 
        "use_hq_fill": "Fill strokes using high quality to avoid glitches (slower fps during animation play)", 
        "use_volumetric_strokes": "Draw strokes as a series of circular blobs, resulting in a volumetric effect"
      }
    }, 
    "GPencilPaletteColors": {
      "fields": {
        "active": "Current active color", 
        "active_index": "Index of active palette color"
      }
    }, 
    "GPencilSculptBrush": {
      "fields": {
        "affect_pressure": "Affect pressure values as well when smoothing strokes", 
        "size": "Radius of the brush in pixels", 
        "strength": "Brush strength", 
        "use_falloff": "Strength of brush decays with distance from cursor", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength"
      }
    }, 
    "GPencilSculptSettings": {
      "fields": {
        "affect_position": "The brush affects the position of the point", 
        "affect_strength": "The brush affects the color strength of the point", 
        "affect_thickness": "The brush affects the thickness of the point", 
        "brush": "(read-only)", 
        "selection_alpha": "Alpha value for selected vertices", 
        "use_select_mask": "Only sculpt selected stroke points"
      }
    }, 
    "GPencilStroke": {
      "fields": {
        "color": "(read-only)    Color from palette used in Stroke", 
        "colorname": "Palette color name", 
        "draw_cyclic": "Enable cyclic drawing, closing the stroke", 
        "line_width": "Thickness of stroke (in pixels)", 
        "points": "(read-only)    Stroke data points", 
        "select": "Stroke is selected for viewport editing", 
        "triangles": "(read-only)    Triangulation data for HQ fill"
      }
    }, 
    "GPencilStrokePoint": {
      "fields": {
        "pressure": "Pressure of tablet at point when drawing it", 
        "select": "Point is selected for viewport editing", 
        "strength": "Color intensity (alpha factor)"
      }
    }, 
    "GPencilTriangle": {
      "fields": {
        "v1": "(read-only)    First triangle vertex index", 
        "v2": "(read-only)    Second triangle vertex index", 
        "v3": "(read-only)    Third triangle vertex index"
      }
    }, 
    "GPUDOFSettings": {
      "fields": {
        "blades": "Blades for dof effect", 
        "focal_length": "Focal length for dof effect", 
        "focus_distance": "Viewport depth of field focus distance", 
        "fstop": "F-stop for dof effect", 
        "is_hq_supported": "(read-only)    Use high quality depth of field", 
        "sensor": "Size of sensor", 
        "use_high_quality": "Use high quality depth of field"
      }
    }, 
    "GPUFXSettings": {
      "fields": {
        "dof": "(read-only)", 
        "ssao": "(read-only)", 
        "use_dof": "Use depth of field on viewport using the values from active camera", 
        "use_ssao": "Use screen space ambient occlusion of field on viewport"
      }
    }, 
    "GPUSSAOSettings": {
      "fields": {
        "attenuation": "Attenuation constant", 
        "color": "Color for screen space ambient occlusion effect", 
        "distance_max": "Distance of object that contribute to the SSAO effect", 
        "factor": "Strength of the SSAO effect", 
        "samples": "Number of samples"
      }
    }, 
    "GreasePencil": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "layers": "(read-only)", 
        "palettes": "(read-only)", 
        "show_stroke_direction": "Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points", 
        "use_onion_skinning": "Show ghosts of the frames before and after the current frame, toggle to enable on active layer or disable all", 
        "use_stroke_edit_mode": "Edit Grease Pencil strokes instead of viewport data"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "GreasePencilBrushes": {
      "fields": {
        "active": "Current active brush", 
        "active_index": "Index of active brush"
      }
    }, 
    "GreasePencilLayers": {
      "fields": {
        "active": "Active grease pencil layer", 
        "active_index": "Index of active grease pencil layer"
      }
    }, 
    "GreasePencilPalettes": {
      "fields": {
        "active": "Current active palette", 
        "active_index": "Index of active palette"
      }
    }, 
    "Group": {
      "fields": {
        "dupli_offset": "Offset from the origin to use when instancing as DupliGroup", 
        "layers": "Layers visible when this group is instanced as a dupli", 
        "objects": "(read-only)    A collection of this groups objects"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Header": {
      "fields": {
        "bl_idname": "If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is \"OBJECT_HT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_HT_hello\"", 
        "bl_space_type": "The space where the header is going to be used in", 
        "layout": "(read-only)    Structure of the header in the UI"
      }
    }, 
    "Histogram": {
      "fields": {
        "mode": "Channels to display when drawing the histogram", 
        "show_line": "Display lines rather than filled shapes"
      }
    }, 
    "HookModifier": {
      "fields": {
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "falloff_radius": "If not zero, the distance from the hook where influence ends", 
        "matrix_inverse": "Reverse the transformation between this object and its target", 
        "object": "Parent Object for hook, also recalculates and clears offset", 
        "strength": "Relative force of the hook", 
        "subtarget": "Name of Parent Bone for hook (if applicable), also recalculates and clears offset", 
        "use_falloff_uniform": "Compensate for non-uniform object scale", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "HueCorrectModifier": {
      "fields": {
        "curve_mapping": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "ID": {
      "fields": {
        "is_library_indirect": "(read-only)    Is this ID block linked indirectly", 
        "is_updated": "(read-only)    Data-block is tagged for recalculation", 
        "is_updated_data": "(read-only)    Data-block data is tagged for recalculation", 
        "library": "(read-only)    Library file the data-block is linked from", 
        "name": "Unique data-block ID name", 
        "preview": "(read-only)    Preview image and icon of this data-block (None if not supported for this type of data)", 
        "tag": "Tools can use this to tag data for their own purposes (initial state is undefined)", 
        "use_fake_user": "Save this data-block even if it has no users", 
        "users": "(read-only)    Number of times this data-block is referenced"
      }
    }, 
    "IKParam": {
      "fields": {
        "ik_solver": "(read-only)    IK solver for which these parameters are defined"
      }
    }, 
    "Image": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "bindcode": "(read-only)    OpenGL bindcode", 
        "channels": "(read-only)    Number of channels in pixels buffer", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "depth": "(read-only)    Image bit depth", 
        "display_aspect": "Display Aspect for this image, does not affect rendering", 
        "field_order": "Order of video fields (select which lines are displayed first)", 
        "file_format": "Format used for re-saving this file", 
        "filepath": "Image/Movie file name", 
        "filepath_raw": "Image/Movie file name (without data refreshing)", 
        "fps": "Speed of the animation in frames per second", 
        "frame_duration": "(read-only)    Duration (in frames) of the image (1 when not a video/sequence)", 
        "frame_end": "End frame of an animated texture", 
        "frame_start": "Start frame of an animated texture", 
        "generated_color": "Fill color for the generated image", 
        "generated_height": "Generated image height", 
        "generated_type": "Generated image type", 
        "generated_width": "Generated image width", 
        "has_data": "(read-only)    True if the image data is loaded into memory", 
        "is_dirty": "(read-only)    Image has changed and is not saved", 
        "is_float": "(read-only)    True if this image is stored in float buffer", 
        "is_multiview": "(read-only)    Image has more than one view", 
        "is_stereo_3d": "(read-only)    Image has left and right views", 
        "mapping": "Mapping type to use for this image in the game engine", 
        "packed_file": "(read-only)    First packed file of the image", 
        "packed_files": "(read-only)    Collection of packed images", 
        "pixels": "Image pixels in floating point values", 
        "render_slots": "(read-only)    Render slots of the image", 
        "resolution": "X/Y pixels per meter", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded", 
        "source": "Where the image comes from", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "tiles_x": "Degree of repetition in the X direction", 
        "tiles_y": "Degree of repetition in the Y direction", 
        "type": "(read-only)    How to generate the image", 
        "use_alpha": "Use the alpha channel information from the image or make image fully opaque", 
        "use_animation": "Use as animated texture in the game engine", 
        "use_clamp_x": "Disable texture repeating horizontally", 
        "use_clamp_y": "Disable texture repeating vertically", 
        "use_deinterlace": "Deinterlace movie file on load", 
        "use_fields": "Use fields of the image", 
        "use_generated_float": "Generate floating point buffer", 
        "use_multiview": "Use Multiple Views (when available)", 
        "use_tiles": "Use of tilemode for faces (default shift-LMB to pick the tile for selected faces)", 
        "use_view_as_render": "Apply render part of display transformation when displaying this image on the screen", 
        "views_format": "Mode to load image views"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ImageFormatSettings": {
      "fields": {
        "cineon_black": "Log conversion reference blackpoint", 
        "cineon_gamma": "Log conversion gamma", 
        "cineon_white": "Log conversion reference whitepoint", 
        "color_depth": "Bit depth per channel", 
        "color_mode": "Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels", 
        "compression": "Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "exr_codec": "Codec settings for OpenEXR", 
        "file_format": "File format to save the rendered images as", 
        "jpeg2k_codec": "Codec settings for Jpeg2000", 
        "quality": "Quality for image formats that support lossy compression", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "tiff_codec": "Compression mode for TIFF", 
        "use_cineon_log": "Convert to logarithmic color space", 
        "use_jpeg2k_cinema_48": "Use Openjpeg Cinema Preset (48fps)", 
        "use_jpeg2k_cinema_preset": "Use Openjpeg Cinema Preset", 
        "use_jpeg2k_ycc": "Save luminance-chrominance-chrominance channels instead of RGB colors", 
        "use_preview": "When rendering animations, save JPG preview images in same directory", 
        "use_zbuffer": "Save the z-depth per pixel (32 bit unsigned int z-buffer)", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "views_format": "Format of multiview media"
      }
    }, 
    "ImagePackedFile": {
      "fields": {
        "packed_file": "(read-only)"
      }
    }, 
    "ImagePaint": {
      "fields": {
        "canvas": "Image used as canvas", 
        "clone_image": "Image used as clone source", 
        "dither": "Amount of dithering when painting on byte images", 
        "invert_stencil": "Invert the stencil layer", 
        "missing_materials": "(read-only)    The mesh is missing materials", 
        "missing_stencil": "(read-only)    Image Painting does not have a stencil", 
        "missing_texture": "(read-only)    Image Painting does not have a texture to paint on", 
        "missing_uvs": "(read-only)    A UV layer is missing on the mesh", 
        "mode": "Mode of operation for projection painting", 
        "normal_angle": "Paint most on faces pointing towards the view according to this angle", 
        "screen_grab_size": "Size to capture the image for re-projecting", 
        "seam_bleed": "Extend paint beyond the faces UVs to reduce seams (in pixels, slower)", 
        "stencil_color": "Stencil color in the viewport", 
        "stencil_image": "Image used as stencil", 
        "use_backface_culling": "Ignore faces pointing away from the view (faster)", 
        "use_clone_layer": "Use another UV map as clone source, otherwise use the 3D cursor as the source", 
        "use_normal_falloff": "Paint most on faces pointing towards the view", 
        "use_occlude": "Only paint onto the faces directly under the brush (slower)", 
        "use_stencil_layer": "Set the mask layer from the UV map buttons"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "ImagePreview": {
      "fields": {
        "icon_id": "(read-only)    Unique integer identifying this preview as an icon (zero means invalid)", 
        "icon_pixels": "Icon pixels, as bytes (always RGBA 32bits)", 
        "icon_pixels_float": "Icon pixels components, as floats (RGBA concatenated values)", 
        "icon_size": "Width and height in pixels", 
        "image_pixels": "Image pixels, as bytes (always RGBA 32bits)", 
        "image_pixels_float": "Image pixels components, as floats (RGBA concatenated values)", 
        "image_size": "Width and height in pixels", 
        "is_icon_custom": "True if this preview icon has been modified by py script,and is no more auto-generated by Blender", 
        "is_image_custom": "True if this preview image has been modified by py script,and is no more auto-generated by Blender"
      }
    }, 
    "ImageSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "crop": "(read-only)", 
        "elements": "(read-only)", 
        "proxy": "(read-only)", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_multiview": "Use Multiple Views (when available)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing", 
        "views_format": "Mode to load image views"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "ImageTexture": {
      "fields": {
        "checker_distance": "Distance between checker tiles", 
        "crop_max_x": "Maximum X value to crop the image", 
        "crop_max_y": "Maximum Y value to crop the image", 
        "crop_min_x": "Minimum X value to crop the image", 
        "crop_min_y": "Minimum Y value to crop the image", 
        "extension": "How the image is extrapolated past its original bounds", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_probes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "filter_type": "Texture filter to use for sampling image", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "invert_alpha": "Invert all the alpha values in the image", 
        "repeat_x": "Repetition multiplier in the X direction", 
        "repeat_y": "Repetition multiplier in the Y direction", 
        "use_alpha": "Use the alpha channel information in the image", 
        "use_calculate_alpha": "Calculate an alpha channel based on RGB values in the image", 
        "use_checker_even": "Even checker tiles", 
        "use_checker_odd": "Odd checker tiles", 
        "use_derivative_map": "Use red and green as derivative values", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "use_flip_axis": "Flip the texture's X and Y axis", 
        "use_interpolation": "Interpolate pixels using selected filter", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps", 
        "use_mirror_x": "Mirror the image repetition on the X direction", 
        "use_mirror_y": "Mirror the image repetition on the Y direction", 
        "use_normal_map": "Use image RGB values for normal mapping"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "ImageUser": {
      "fields": {
        "fields_per_frame": "Number of fields per rendered frame (2 fields is 1 image)", 
        "frame_current": "Current frame number in image sequence or movie", 
        "frame_duration": "Number of images of a movie to use", 
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "multilayer_layer": "(read-only)    Layer in multilayer image", 
        "multilayer_pass": "(read-only)    Pass in multilayer image", 
        "multilayer_view": "(read-only)    View in multilayer image", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "use_cyclic": "Cycle the images in the movie"
      }
    }, 
    "ImapaintToolCapabilities": {
      "fields": {
        "has_accumulate": "(read-only)", 
        "has_radius": "(read-only)", 
        "has_space_attenuation": "(read-only)"
      }
    }, 
    "InflowFluidSettings": {
      "fields": {
        "inflow_velocity": "Initial velocity of fluid", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "use_local_coords": "Use local coordinates for inflow (e.g. for rotating objects)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "IntProperty": {
      "fields": {
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "hard_max": "(read-only)    Maximum value used by buttons", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "is_array": "(read-only)", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "Itasc": {
      "fields": {
        "damping_epsilon": "Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)", 
        "damping_max": "Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)", 
        "feedback": "Feedback coefficient for error correction, average response time is 1/feedback (default=20)", 
        "iterations": "Maximum number of iterations for convergence in case of reiteration", 
        "precision": "Precision of convergence in case of reiteration", 
        "reiteration_method": "Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames", 
        "solver": "Solving method selection: automatic damping or manual damping", 
        "step_count": "Divide the frame interval into this many steps", 
        "step_max": "Higher bound for timestep in second in case of automatic substeps", 
        "step_min": "Lower bound for timestep in second in case of automatic substeps", 
        "use_auto_step": "Automatically determine the optimal number of steps for best performance/accuracy trade off", 
        "velocity_max": "Maximum joint velocity in rad/s (default=50)"
      }, 
      "inherits": [
        "IKParam"
      ]
    }, 
    "JoystickSensor": {
      "fields": {
        "axis_direction": "The direction of the axis", 
        "axis_number": "Which axis pair to use, 1 is usually the main direction input", 
        "axis_threshold": "Precision of the axis", 
        "button_number": "Which button to use", 
        "event_type": "The type of event this joystick sensor is triggered on", 
        "hat_direction": "Hat direction", 
        "hat_number": "Which hat to use", 
        "joystick_index": "Which joystick to use", 
        "single_axis_number": "Single axis (vertical/horizontal/other) to detect", 
        "use_all_events": "Triggered by all events on this joystick's current type (axis/button/hat)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "Key": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "eval_time": "Evaluation time for absolute shape keys", 
        "key_blocks": "(read-only)    Shape keys", 
        "reference_key": "(read-only)", 
        "use_relative": "Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time", 
        "user": "(read-only)    Data-block using these shape keys"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "KeyboardSensor": {
      "fields": {
        "log": "Property that indicates whether to log keystrokes as a string", 
        "modifier_key_1": "Modifier key code", 
        "modifier_key_2": "Modifier key code", 
        "target": "Property that receives the keystrokes in case a string is logged", 
        "use_all_keys": "Trigger this sensor on any keystroke"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "KeyConfig": {
      "fields": {
        "is_user_defined": "(read-only)    Indicates that a keyconfig was defined by the user", 
        "keymaps": "(read-only)    Key maps configured as part of this configuration", 
        "name": "Name of the key configuration"
      }
    }, 
    "KeyConfigurations": {
      "fields": {
        "active": "Active key configuration (preset)", 
        "addon": "(read-only)    Key configuration that can be extended by add-ons, and is added to the active configuration when handling events", 
        "default": "(read-only)    Default builtin key configuration", 
        "user": "(read-only)    Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user"
      }
    }, 
    "Keyframe": {
      "fields": {
        "amplitude": "Amount to boost elastic bounces for 'elastic' easing", 
        "back": "Amount of overshoot for 'back' easing", 
        "co": "Coordinates of the control point", 
        "easing": "Which ends of the segment between this and the next keyframe easing interpolation is applied to", 
        "handle_left": "Coordinates of the left handle (before the control point)", 
        "handle_left_type": "Handle types", 
        "handle_right": "Coordinates of the right handle (after the control point)", 
        "handle_right_type": "Handle types", 
        "interpolation": "Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe", 
        "period": "Time between bounces for elastic easing", 
        "select_control_point": "Control point selection status", 
        "select_left_handle": "Left handle selection status", 
        "select_right_handle": "Right handle selection status", 
        "type": "Type of keyframe (for visual purposes only)"
      }
    }, 
    "KeyingSet": {
      "fields": {
        "bl_description": "A short description of the keying set", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "is_path_absolute": "(read-only)    Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)", 
        "paths": "(read-only)    Keying Set Paths to define settings that get keyframed together", 
        "type_info": "(read-only)    Callback function defines for built-in Keying Sets", 
        "use_insertkey_needed": "Only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_needed": "Override default setting to only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_visual": "Override default setting to insert keyframes based on 'visual transforms'", 
        "use_insertkey_override_xyz_to_rgb": "Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis", 
        "use_insertkey_visual": "Insert keyframes based on 'visual transforms'", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis"
      }
    }, 
    "KeyingSetInfo": {
      "fields": {
        "bl_description": "A short description of the keying set", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "bl_options": "Keying Set options to use when inserting keyframes"
      }
    }, 
    "KeyingSetPath": {
      "fields": {
        "array_index": "Index to the specific setting if applicable", 
        "data_path": "Path to property setting", 
        "group": "Name of Action Group to assign setting(s) for this path to", 
        "group_method": "Method used to define which Group-name to use", 
        "id": "ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)", 
        "id_type": "Type of ID-block that can be used", 
        "use_entire_array": "When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used", 
        "use_insertkey_needed": "Only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_needed": "Override default setting to only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_visual": "Override default setting to insert keyframes based on 'visual transforms'", 
        "use_insertkey_override_xyz_to_rgb": "Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis", 
        "use_insertkey_visual": "Insert keyframes based on 'visual transforms'", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis"
      }
    }, 
    "KeyingSetPaths": {
      "fields": {
        "active": "Active Keying Set used to insert/delete keyframes", 
        "active_index": "Current Keying Set index"
      }
    }, 
    "KeyingSets": {
      "fields": {
        "active": "Active Keying Set used to insert/delete keyframes", 
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')"
      }
    }, 
    "KeyingSetsAll": {
      "fields": {
        "active": "Active Keying Set used to insert/delete keyframes", 
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')"
      }
    }, 
    "KeyMap": {
      "fields": {
        "is_modal": "(read-only)    Indicates that a keymap is used for translate modal events for an operator", 
        "is_user_modified": "Keymap is defined by the user", 
        "keymap_items": "(read-only)    Items in the keymap, linking an operator to an input event", 
        "name": "(read-only)    Name of the key map", 
        "region_type": "(read-only)    Optional region type keymap is associated with", 
        "show_expanded_children": "Children expanded in the user interface", 
        "show_expanded_items": "Expanded in the user interface", 
        "space_type": "(read-only)    Optional space type keymap is associated with"
      }
    }, 
    "KeyMapItem": {
      "fields": {
        "active": "Activate or deactivate item", 
        "alt": "Alt key pressed", 
        "any": "Any modifier keys pressed", 
        "ctrl": "Control key pressed", 
        "id": "(read-only)    ID of the item", 
        "idname": "Identifier of operator to call on input event", 
        "is_user_defined": "(read-only)    Is this keymap item user defined (doesn't just replace a builtin item)", 
        "is_user_modified": "(read-only)    Is this keymap item modified by the user", 
        "key_modifier": "Regular key pressed as a modifier", 
        "map_type": "Type of event mapping", 
        "name": "(read-only)    Name of operator (translated) to call on input event", 
        "oskey": "Operating system key pressed", 
        "properties": "(read-only)    Properties to set when the operator is called", 
        "propvalue": "The value this event translates to in a modal keymap", 
        "shift": "Shift key pressed", 
        "show_expanded": "Show key map event and property details in the user interface", 
        "type": "Type of event"
      }
    }, 
    "KinematicConstraint": {
      "fields": {
        "chain_count": "How many bones are included in the IK effect - 0 uses all bones", 
        "distance": "Radius of limiting sphere", 
        "iterations": "Maximum number of solving iterations", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "lock_location_x": "Constraint position along X axis", 
        "lock_location_y": "Constraint position along Y axis", 
        "lock_location_z": "Constraint position along Z axis", 
        "lock_rotation_x": "Constraint rotation along X axis", 
        "lock_rotation_y": "Constraint rotation along Y axis", 
        "lock_rotation_z": "Constraint rotation along Z axis", 
        "orient_weight": "For Tree-IK: Weight of orientation control for this target", 
        "pole_angle": "Pole rotation offset", 
        "pole_target": "Object for pole rotation", 
        "reference_axis": "Constraint axis Lock options relative to Bone or Target reference", 
        "target": "Target Object", 
        "use_location": "Chain follows position of target", 
        "use_rotation": "Chain follows rotation of target", 
        "use_stretch": "Enable IK Stretching", 
        "use_tail": "Include bone's tail as last element in chain", 
        "weight": "For Tree-IK: Weight of position control for this target"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "Lamp": {
      "fields": {
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "color": "Light color", 
        "cycles": "(read-only)    Cycles lamp settings", 
        "distance": "Falloff distance - the light is at half the original intensity at this point", 
        "energy": "Amount of light that the lamp emits", 
        "node_tree": "(read-only)    Node tree for node based lamps", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "type": "Type of Lamp", 
        "use_diffuse": "Do diffuse shading", 
        "use_negative": "Cast negative light", 
        "use_nodes": "Use shader nodes to render the lamp", 
        "use_own_layer": "Illuminate objects only on the same layers the lamp is on", 
        "use_specular": "Create specular highlights"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LampSkySettings": {
      "fields": {
        "atmosphere_distance_factor": "Multiplier to convert blender units to physical distance", 
        "atmosphere_extinction": "Extinction scattering contribution factor", 
        "atmosphere_inscattering": "Scatter contribution factor", 
        "atmosphere_turbidity": "Sky turbidity", 
        "backscattered_light": "Backscattered light", 
        "horizon_brightness": "Horizon brightness", 
        "sky_blend": "Blend factor with sky", 
        "sky_blend_type": "Blend mode for combining sun sky with world sky", 
        "sky_color_space": "Color space to use for internal XYZ->RGB color conversion", 
        "sky_exposure": "Strength of sky shading exponential exposure correction", 
        "spread": "Horizon Spread", 
        "sun_brightness": "Sun brightness", 
        "sun_intensity": "Sun intensity", 
        "sun_size": "Sun size", 
        "use_atmosphere": "Apply sun effect on atmosphere", 
        "use_sky": "Apply sun effect on sky"
      }
    }, 
    "LampTextureSlot": {
      "fields": {
        "color_factor": "Amount texture affects color values", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "shadow_factor": "Amount texture affects shadow", 
        "use_map_color": "Let the texture affect the basic color of the lamp", 
        "use_map_shadow": "Let the texture affect the shadow color of the lamp"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "LaplacianDeformModifier": {
      "fields": {
        "is_bind": "(read-only)    Whether geometry has been bound to anchors", 
        "vertex_group": "Name of Vertex Group which determines Anchors"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "LaplacianSmoothModifier": {
      "fields": {
        "lambda_border": "Lambda factor in border", 
        "lambda_factor": "Smooth factor effect", 
        "use_normalized": "Improve and stabilize the enhanced shape", 
        "use_volume_preserve": "Apply volume preservation after smooth", 
        "use_x": "Smooth object along X axis", 
        "use_y": "Smooth object along Y axis", 
        "use_z": "Smooth object along Z axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Lattice": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "points": "(read-only)    Points of the lattice", 
        "points_u": "Point in U direction (can't be changed when there are shape keys)", 
        "points_v": "Point in V direction (can't be changed when there are shape keys)", 
        "points_w": "Point in W direction (can't be changed when there are shape keys)", 
        "shape_keys": "(read-only)", 
        "use_outside": "Only draw, and take into account, the outer vertices", 
        "vertex_group": "Vertex group to apply the influence of the lattice"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LatticeModifier": {
      "fields": {
        "object": "Lattice object to deform with", 
        "strength": "Strength of modifier effect", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "LatticePoint": {
      "fields": {
        "co": "(read-only)    Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)", 
        "groups": "(read-only)    Weights for the vertex groups this point is member of", 
        "select": "Selection status", 
        "weight_softbody": "Softbody goal weight"
      }
    }, 
    "Library": {
      "fields": {
        "filepath": "Path to the library .blend file", 
        "packed_file": "(read-only)", 
        "parent": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LimitDistanceConstraint": {
      "fields": {
        "distance": "Radius of limiting sphere", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "target": "Target Object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LimitLocationConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_z": "Highest Z value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_max_x": "Use the maximum X value", 
        "use_max_y": "Use the maximum Y value", 
        "use_max_z": "Use the maximum Z value", 
        "use_min_x": "Use the minimum X value", 
        "use_min_y": "Use the minimum Y value", 
        "use_min_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LimitRotationConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_z": "Highest Z value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_limit_x": "Use the minimum X value", 
        "use_limit_y": "Use the minimum Y value", 
        "use_limit_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LimitScaleConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_z": "Highest Z value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_max_x": "Use the maximum X value", 
        "use_max_y": "Use the maximum Y value", 
        "use_max_z": "Use the maximum Z value", 
        "use_min_x": "Use the minimum X value", 
        "use_min_y": "Use the minimum Y value", 
        "use_min_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "Linesets": {
      "fields": {
        "active": "(read-only)    Active line set being displayed", 
        "active_index": "Index of active line set slot"
      }
    }, 
    "LineStyleAlphaModifier_AlongStroke": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_CreaseAngle": {
      "fields": {
        "angle_max": "Maximum angle to modify thickness", 
        "angle_min": "Minimum angle to modify thickness", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Curvature_3D": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curvature_max": "Maximum Curvature", 
        "curvature_min": "Minimum Curvature", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_DistanceFromCamera": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_DistanceFromObject": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "target": "Target object from which the distance is measured", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Material": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "material_attribute": "Specify which material attribute is used", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Noise": {
      "fields": {
        "amplitude": "Amplitude of the noise", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "period": "Period of the noise", 
        "seed": "Seed for the noise generation", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Tangent": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_CreaseAngle": {
      "fields": {
        "angle_max": "Maximum angle to modify thickness", 
        "angle_min": "Minimum angle to modify thickness", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Curvature_3D": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "curvature_max": "Maximum Curvature", 
        "curvature_min": "Minimum Curvature", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "target": "Target object from which the distance is measured", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Material": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "material_attribute": "Specify which material attribute is used", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "use_ramp": "Use color ramp to map the BW average into an RGB color"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Noise": {
      "fields": {
        "amplitude": "Amplitude of the noise", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "period": "Period of the noise", 
        "seed": "Seed for the noise generation", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Tangent": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleGeometryModifier_2DOffset": {
      "fields": {
        "end": "Displacement that is applied from the end of the stroke", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "start": "Displacement that is applied from the beginning of the stroke", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "x": "Displacement that is applied to the X coordinates of stroke vertices", 
        "y": "Displacement that is applied to the Y coordinates of stroke vertices"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "fields": {
        "angle": "Rotation angle", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "pivot": "Pivot of scaling and rotation operations", 
        "pivot_u": "Pivot in terms of the stroke point parameter u (0 <= u <= 1)", 
        "pivot_x": "2D X coordinate of the absolute pivot", 
        "pivot_y": "2D Y coordinate of the absolute pivot", 
        "scale_x": "Scaling factor that is applied along the X axis", 
        "scale_y": "Scaling factor that is applied along the Y axis", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_BackboneStretcher": {
      "fields": {
        "backbone_length": "Amount of backbone stretching", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_BezierCurve": {
      "fields": {
        "error": "Maximum distance allowed between the new Bezier curve and the original backbone geometry", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Blueprint": {
      "fields": {
        "backbone_length": "Amount of backbone stretching", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "random_backbone": "Randomness of the backbone stretching", 
        "random_center": "Randomness of the center", 
        "random_radius": "Randomness of the radius", 
        "rounds": "Number of rounds in contour strokes", 
        "shape": "Select the shape of blueprint contour strokes", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_GuidingLines": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "offset": "Displacement that is applied to the main direction line along its normal", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "fields": {
        "amplitude": "Amplitude of the Perlin noise", 
        "angle": "Displacement direction", 
        "expanded": "True if the modifier tab is expanded", 
        "frequency": "Frequency of the Perlin noise", 
        "name": "Name of the modifier", 
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "fields": {
        "amplitude": "Amplitude of the Perlin noise", 
        "angle": "Displacement direction", 
        "expanded": "True if the modifier tab is expanded", 
        "frequency": "Frequency of the Perlin noise", 
        "name": "Name of the modifier", 
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Polygonalization": {
      "fields": {
        "error": "Maximum distance between the original stroke and its polygonal approximation", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "sampling": "New sampling value to be used for subsequent modifiers", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Simplification": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "tolerance": "Distance below which segments will be merged", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_SinusDisplacement": {
      "fields": {
        "amplitude": "Amplitude of the sinus displacement", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "phase": "Phase of the sinus displacement", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "wavelength": "Wavelength of the sinus displacement"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_SpatialNoise": {
      "fields": {
        "amplitude": "Amplitude of the spatial noise", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "octaves": "Number of octaves (i.e., the amount of detail of the spatial noise)", 
        "scale": "Scale of the spatial noise", 
        "smooth": "If true, the spatial noise is smooth", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "use_pure_random": "If true, the spatial noise does not show any coherence"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_TipRemover": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "tip_length": "Length of tips to be removed", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleTextureSlot": {
      "fields": {
        "alpha_factor": "Amount texture affects alpha", 
        "diffuse_color_factor": "Amount texture affects diffuse color", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "use_map_alpha": "The texture affects the alpha value", 
        "use_map_color_diffuse": "The texture affects basic color of the stroke", 
        "use_tips": "Lower half of the texture is for tips of the stroke"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "LineStyleThicknessModifier_AlongStroke": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "orientation": "Angle of the main direction", 
        "thickness_max": "Maximum thickness in the main direction", 
        "thickness_min": "Minimum thickness in the direction perpendicular to the main direction", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_CreaseAngle": {
      "fields": {
        "angle_max": "Maximum angle to modify thickness", 
        "angle_min": "Minimum angle to modify thickness", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "thickness_max": "Maximum thickness", 
        "thickness_min": "Minimum thickness", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Curvature_3D": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curvature_max": "Maximum Curvature", 
        "curvature_min": "Minimum Curvature", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "thickness_max": "Maximum thickness", 
        "thickness_min": "Minimum thickness", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_DistanceFromCamera": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_DistanceFromObject": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "target": "Target object from which the distance is measured", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Material": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "material_attribute": "Specify which material attribute is used", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Noise": {
      "fields": {
        "amplitude": "Amplitude of the noise", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "period": "Period of the noise", 
        "seed": "Seed for the noise generation", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "use_asymmetric": "Allow thickness to be assigned asymmetrically"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Tangent": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "thickness_max": "Maximum thickness", 
        "thickness_min": "Minimum thickness", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LockedTrackConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "lock_axis": "Axis that points upward", 
        "target": "Target Object", 
        "track_axis": "Axis that points to the target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LodLevel": {
      "fields": {
        "distance": "Distance to begin using this level of detail", 
        "object": "Object to use for this level of detail", 
        "object_hysteresis_percentage": "Minimum distance change required to transition to the previous level of detail", 
        "use_material": "Use the material from this object at this level of detail", 
        "use_mesh": "Use the mesh from this object at this level of detail", 
        "use_object_hysteresis": "Override LoD Hysteresis scene setting for this LoD level"
      }
    }, 
    "LoopColors": {
      "fields": {
        "active": "Active vertex color layer", 
        "active_index": "Active vertex color index"
      }
    }, 
    "Macro": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "name": "(read-only)", 
        "properties": "(read-only)"
      }
    }, 
    "MagicTexture": {
      "fields": {
        "noise_depth": "Depth of the noise", 
        "turbulence": "Turbulence of the noise"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "MaintainVolumeConstraint": {
      "fields": {
        "free_axis": "The free scaling axis of the object", 
        "volume": "Volume of the bone at rest"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MarbleTexture": {
      "fields": {
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_depth": "Depth of the cloud calculation", 
        "noise_scale": "Scaling for noise input", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "Mask": {
      "fields": {
        "active_layer_index": "Index of active layer in list of all mask's layers", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "frame_end": "Final frame of the mask (used for sequencer)", 
        "frame_start": "First frame of the mask (used for sequencer)", 
        "layers": "(read-only)    Collection of layers which defines this mask"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MaskLayer": {
      "fields": {
        "alpha": "Render Opacity", 
        "blend": "Method of blending mask layers", 
        "falloff": "Falloff type the feather", 
        "hide": "Restrict visibility in the viewport", 
        "hide_render": "Restrict renderability", 
        "hide_select": "Restrict selection in the viewport", 
        "invert": "Invert the mask black/white", 
        "name": "Unique name of layer", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "splines": "(read-only)    Collection of splines which defines this layer", 
        "use_fill_holes": "Calculate holes when filling overlapping curves", 
        "use_fill_overlap": "Calculate self intersections and overlap before filling"
      }
    }, 
    "MaskLayers": {
      "fields": {
        "active": "Active layer in this mask"
      }
    }, 
    "MaskModifier": {
      "fields": {
        "armature": "Armature to use as source of bones to mask", 
        "invert_vertex_group": "Use vertices that are not part of region defined", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MaskParent": {
      "fields": {
        "id": "ID-block to which masking element would be parented to or to it's property", 
        "id_type": "Type of ID-block that can be used", 
        "parent": "Name of parent object in specified data-block to which parenting happens", 
        "sub_parent": "Name of parent sub-object in specified data-block to which parenting happens", 
        "type": "Parent Type"
      }
    }, 
    "MaskSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "mask": "Mask that this sequence uses", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MaskSpline": {
      "fields": {
        "offset_mode": "The method used for calculating the feather offset", 
        "points": "(read-only)    Collection of points", 
        "use_cyclic": "Make this spline a closed loop", 
        "use_fill": "Make this spline filled", 
        "use_self_intersection_check": "Prevent feather from self-intersections", 
        "weight_interpolation": "The type of weight interpolation for spline"
      }
    }, 
    "MaskSplinePoint": {
      "fields": {
        "co": "Coordinates of the control point", 
        "feather_points": "(read-only)    Points defining feather", 
        "handle_left": "Coordinates of the first handle", 
        "handle_left_type": "Handle type", 
        "handle_right": "Coordinates of the second handle", 
        "handle_right_type": "Handle type", 
        "handle_type": "Handle type", 
        "parent": "(read-only)", 
        "select": "Selection status", 
        "weight": "Weight of the point"
      }
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "select": "Selection status", 
        "u": "U coordinate of point along spline segment", 
        "weight": "Weight of feather point"
      }
    }, 
    "MaskSplines": {
      "fields": {
        "active": "Active spline of masking layer", 
        "active_point": "Active spline of masking layer"
      }
    }, 
    "Material": {
      "fields": {
        "active_node_material": "Active node material", 
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "alpha": "Alpha transparency of the material", 
        "ambient": "Amount of global ambient color the material receives", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "cycles": "(read-only)    Cycles material settings", 
        "darkness": "Minnaert darkness", 
        "diffuse_color": "Diffuse color of the material", 
        "diffuse_fresnel": "Power of Fresnel", 
        "diffuse_fresnel_factor": "Blending factor of Fresnel", 
        "diffuse_intensity": "Amount of diffuse reflection", 
        "diffuse_ramp": "(read-only)    Color ramp used to affect diffuse shading", 
        "diffuse_ramp_blend": "Blending method of the ramp and the diffuse color", 
        "diffuse_ramp_factor": "Blending factor (also uses alpha in Colorband)", 
        "diffuse_ramp_input": "How the ramp maps on the surface", 
        "diffuse_toon_size": "Size of diffuse toon area", 
        "diffuse_toon_smooth": "Smoothness of diffuse toon area", 
        "emit": "Amount of light to emit", 
        "game_settings": "(read-only)    Game material settings", 
        "halo": "(read-only)    Halo settings for the material", 
        "invert_z": "Render material's faces with an inverted Z buffer (scanline only)", 
        "light_group": "Limit lighting to lamps in this Group", 
        "line_color": "Line color used for Freestyle line rendering", 
        "line_priority": "The line color of a higher priority is used at material boundaries", 
        "mirror_color": "Mirror color of the material", 
        "node_tree": "(read-only)    Node tree for node based materials", 
        "offset_z": "Give faces an artificial offset in the Z buffer for Z transparency", 
        "paint_active_slot": "Index of active texture paint slot", 
        "paint_clone_slot": "Index of clone texture paint slot", 
        "pass_index": "Index number for the \"Material Index\" render pass", 
        "physics": "(read-only)    Game physics settings", 
        "preview_render_type": "Type of preview render", 
        "raytrace_mirror": "(read-only)    Raytraced reflection settings for the material", 
        "raytrace_transparency": "(read-only)    Raytraced transparency settings for the material", 
        "roughness": "Oren-Nayar Roughness", 
        "shadow_buffer_bias": "Factor to multiply shadow buffer bias with (0 is ignore)", 
        "shadow_cast_alpha": "Shadow casting alpha, in use for Irregular and Deep shadow buffer", 
        "shadow_only_type": "How to draw shadows", 
        "shadow_ray_bias": "Shadow raytracing bias to prevent terminator problems on shadow boundary", 
        "specular_alpha": "Alpha transparency for specular areas", 
        "specular_color": "Specular color of the material", 
        "specular_hardness": "How hard (sharp) the specular reflection is", 
        "specular_intensity": "How intense (bright) the specular reflection is", 
        "specular_ior": "Specular index of refraction", 
        "specular_ramp": "(read-only)    Color ramp used to affect specular shading", 
        "specular_ramp_blend": "Blending method of the ramp and the specular color", 
        "specular_ramp_factor": "Blending factor (also uses alpha in Colorband)", 
        "specular_ramp_input": "How the ramp maps on the surface", 
        "specular_slope": "The standard deviation of surface slope", 
        "specular_toon_size": "Size of specular toon area", 
        "specular_toon_smooth": "Smoothness of specular toon area", 
        "strand": "(read-only)    Strand settings for the material", 
        "subsurface_scattering": "(read-only)    Subsurface scattering settings for the material", 
        "texture_paint_images": "(read-only)    Texture images used for texture painting", 
        "texture_paint_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "translucency": "Amount of diffuse shading on the back side", 
        "transparency_method": "Method to use for rendering transparency", 
        "type": "Material type defining how the object is rendered", 
        "use_cast_approximate": "Allow this material to cast shadows when using approximate ambient occlusion", 
        "use_cast_buffer_shadows": "Allow this material to cast shadows from shadow buffer lamps", 
        "use_cast_shadows": "Allow this material to cast shadows", 
        "use_cast_shadows_only": "Make objects with this material appear invisible (not rendered), only casting shadows", 
        "use_cubic": "Use cubic interpolation for diffuse values, for smoother transitions", 
        "use_diffuse_ramp": "Toggle diffuse ramp operations", 
        "use_face_texture": "Replace the object's base color with color from UV map image textures", 
        "use_face_texture_alpha": "Replace the object's base alpha value with alpha from UV map image textures", 
        "use_full_oversampling": "Force this material to render full shading/textures for all anti-aliasing samples", 
        "use_light_group_exclusive": "Material uses the light group exclusively - these lamps are excluded from other scene lighting", 
        "use_light_group_local": "When linked in, material uses local light group with the same name", 
        "use_mist": "Use mist with this material (in world settings)", 
        "use_nodes": "Use shader nodes to render the material", 
        "use_object_color": "Modulate the result with a per-object color", 
        "use_only_shadow": "Render shadows as the material's alpha value, making the material transparent except for shadowed areas", 
        "use_ray_shadow_bias": "Prevent raytraced shadow errors on surfaces with smooth shaded normals (terminator problem)", 
        "use_raytrace": "Include this material and geometry that uses it in raytracing calculations", 
        "use_shadeless": "Make this material insensitive to light or shadow", 
        "use_shadows": "Allow this material to receive shadows", 
        "use_sky": "Render this material with zero alpha, with sky background in place (scanline only)", 
        "use_specular_ramp": "Toggle specular ramp operations", 
        "use_tangent_shading": "Use the material's tangent vector instead of the normal for shading - for anisotropic shading effects", 
        "use_textures": "Enable/Disable each texture", 
        "use_transparency": "Render material as transparent", 
        "use_transparent_shadows": "Allow this object to receive transparent shadows cast through other objects", 
        "use_uv_project": "Use to ensure UV interpolation is correct for camera projections (use with UV project modifier)", 
        "use_vertex_color_light": "Add vertex colors as additional lighting", 
        "use_vertex_color_paint": "Replace object base color with vertex colors (multiply with 'texture face' face assigned textures)", 
        "volume": "(read-only)    Volume settings for the material"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MaterialGameSettings": {
      "fields": {
        "alpha_blend": "Blend Mode for Transparent Faces", 
        "face_orientation": "Especial face orientation options", 
        "invisible": "Make face invisible", 
        "physics": "Use physics properties of materials", 
        "text": "Use material as text in Game Engine", 
        "use_backface_culling": "Hide Back of the face in Game Engine"
      }
    }, 
    "MaterialHalo": {
      "fields": {
        "add": "Strength of the add effect", 
        "flare_boost": "Give the flare extra strength", 
        "flare_seed": "Offset in the flare seed table", 
        "flare_size": "Factor by which the flare is larger than the halo", 
        "flare_subflare_count": "Number of sub-flares", 
        "flare_subflare_size": "Dimension of the sub-flares, dots and circles", 
        "hardness": "Hardness of the halo", 
        "line_count": "Number of star shaped lines rendered over the halo", 
        "ring_count": "Number of rings rendered over the halo", 
        "seed": "Randomize ring dimension and line location", 
        "size": "Dimension of the halo", 
        "star_tip_count": "Number of points on the star shaped halo", 
        "use_extreme_alpha": "Use extreme alpha", 
        "use_flare_mode": "Render halo as a lens flare", 
        "use_lines": "Render star shaped lines over halo", 
        "use_ring": "Render rings over halo", 
        "use_shaded": "Let halo receive light and shadows from external objects", 
        "use_soft": "Soften the edges of halos at intersections with other geometry", 
        "use_star": "Render halo as a star", 
        "use_texture": "Give halo a texture", 
        "use_vertex_normal": "Use the vertex normal to specify the dimension of the halo"
      }
    }, 
    "MaterialPhysics": {
      "fields": {
        "elasticity": "Elasticity of collisions", 
        "fh_damping": "Damping of the spring force, when inside the physics distance area", 
        "fh_distance": "Distance of the physics area", 
        "fh_force": "Upward spring force, when inside the physics distance area", 
        "friction": "Coulomb friction coefficient, when inside the physics distance area", 
        "use_fh_normal": "Align dynamic game objects along the surface normal, when inside the physics distance area"
      }
    }, 
    "MaterialRaytraceMirror": {
      "fields": {
        "depth": "Maximum allowed number of light inter-reflections", 
        "distance": "Maximum distance of reflected rays (reflections further than this range fade to sky color or material color)", 
        "fade_to": "The color that rays with no intersection within the Max Distance take (material color can be best for indoor scenes, sky color for outdoor)", 
        "fresnel": "Power of Fresnel for mirror reflection", 
        "fresnel_factor": "Blending factor for Fresnel", 
        "gloss_anisotropic": "The shape of the reflection, from 0.0 (circular) to 1.0 (fully stretched along the tangent", 
        "gloss_factor": "The shininess of the reflection (values < 1.0 give diffuse, blurry reflections)", 
        "gloss_samples": "Number of cone samples averaged for blurry reflections", 
        "gloss_threshold": "Threshold for adaptive sampling (if a sample contributes less than this amount [as a percentage], sampling is stopped)", 
        "reflect_factor": "Amount of mirror reflection for raytrace", 
        "use": "Enable raytraced reflections"
      }
    }, 
    "MaterialRaytraceTransparency": {
      "fields": {
        "depth": "Maximum allowed number of light inter-refractions", 
        "depth_max": "Maximum depth for light to travel through the transparent material before becoming fully filtered (0.0 is disabled)", 
        "falloff": "Falloff power for transmissivity filter effect (1.0 is linear)", 
        "filter": "Amount to blend in the material's diffuse color in raytraced transparency (simulating absorption)", 
        "fresnel": "Power of Fresnel for transparency (Ray or ZTransp)", 
        "fresnel_factor": "Blending factor for Fresnel", 
        "gloss_factor": "The clarity of the refraction. Values < 1.0 give diffuse, blurry refractions", 
        "gloss_samples": "Number of cone samples averaged for blurry refractions", 
        "gloss_threshold": "Threshold for adaptive sampling. If a sample contributes less than this amount (as a percentage), sampling is stopped", 
        "ior": "Angular index of refraction for raytraced refraction"
      }
    }, 
    "MaterialSlot": {
      "fields": {
        "link": "Link material to object or the object's data", 
        "material": "Material data-block used by this material slot", 
        "name": "(read-only)    Material slot name"
      }
    }, 
    "MaterialStrand": {
      "fields": {
        "blend_distance": "Worldspace distance over which to blend in the surface normal", 
        "root_size": "Start size of strands in pixels or Blender units", 
        "shape": "Positive values make strands rounder, negative ones make strands spiky", 
        "size_min": "Minimum size of strands in pixels", 
        "tip_size": "End size of strands in pixels or Blender units", 
        "use_blender_units": "Use Blender units for widths instead of pixels", 
        "use_surface_diffuse": "(read-only)    Make diffuse shading more similar to shading the surface", 
        "use_tangent_shading": "Use direction of strands as normal for tangent-shading", 
        "uv_layer": "Name of UV map to override", 
        "width_fade": "Transparency along the width of the strand"
      }
    }, 
    "MaterialSubsurfaceScattering": {
      "fields": {
        "back": "Back scattering weight", 
        "color": "Scattering color", 
        "color_factor": "Blend factor for SSS colors", 
        "error_threshold": "Error tolerance (low values are slower and higher quality)", 
        "front": "Front scattering weight", 
        "ior": "Index of refraction (higher values are denser)", 
        "radius": "Mean red/green/blue scattering path length", 
        "scale": "Object scale factor", 
        "texture_factor": "Texture scattering blend factor", 
        "use": "Enable diffuse subsurface scattering effects in a material"
      }
    }, 
    "MaterialTextureSlot": {
      "fields": {
        "alpha_factor": "Amount texture affects alpha", 
        "ambient_factor": "Amount texture affects ambient", 
        "bump_method": "Method to use for bump mapping", 
        "bump_objectspace": "Space to apply bump mapping in", 
        "density_factor": "Amount texture affects density", 
        "diffuse_color_factor": "Amount texture affects diffuse color", 
        "diffuse_factor": "Amount texture affects diffuse reflectivity", 
        "displacement_factor": "Amount texture displaces the surface", 
        "emission_color_factor": "Amount texture affects emission color", 
        "emission_factor": "Amount texture affects emission", 
        "emit_factor": "Amount texture affects emission", 
        "hardness_factor": "Amount texture affects hardness", 
        "mirror_factor": "Amount texture affects mirror color", 
        "normal_factor": "Amount texture affects normal values", 
        "normal_map_space": "Set space of normal map image", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "raymir_factor": "Amount texture affects ray mirror", 
        "reflection_color_factor": "Amount texture affects color of out-scattered light", 
        "reflection_factor": "Amount texture affects brightness of out-scattered light", 
        "scattering_factor": "Amount texture affects scattering", 
        "specular_color_factor": "Amount texture affects specular color", 
        "specular_factor": "Amount texture affects specular reflectivity", 
        "translucency_factor": "Amount texture affects translucency", 
        "transmission_color_factor": "Amount texture affects result color after light has been scattered/absorbed", 
        "use": "Enable this material texture slot", 
        "use_from_dupli": "Dupli's instanced from verts, faces or particles, inherit texture coordinate from their parent", 
        "use_from_original": "Dupli's derive their object coordinates from the original object's transformation", 
        "use_map_alpha": "The texture affects the alpha value", 
        "use_map_ambient": "The texture affects the value of ambient", 
        "use_map_color_diffuse": "The texture affects basic color of the material", 
        "use_map_color_emission": "The texture affects the color of emission", 
        "use_map_color_reflection": "The texture affects the color of scattered light", 
        "use_map_color_spec": "The texture affects the specularity color", 
        "use_map_color_transmission": "The texture affects the result color after other light has been scattered/absorbed", 
        "use_map_density": "The texture affects the volume's density", 
        "use_map_diffuse": "The texture affects the value of diffuse reflectivity", 
        "use_map_displacement": "Let the texture displace the surface", 
        "use_map_emission": "The texture affects the volume's emission", 
        "use_map_emit": "The texture affects the emit value", 
        "use_map_hardness": "The texture affects the hardness value", 
        "use_map_mirror": "The texture affects the mirror color", 
        "use_map_normal": "The texture affects the rendered normal", 
        "use_map_raymir": "The texture affects the ray-mirror value", 
        "use_map_reflect": "The texture affects the reflected light's brightness", 
        "use_map_scatter": "The texture affects the volume's scattering", 
        "use_map_specular": "The texture affects the value of specular reflectivity", 
        "use_map_to_bounds": "Map coordinates in object bounds", 
        "use_map_translucency": "The texture affects the translucency value", 
        "use_map_warp": "Let the texture warp texture coordinates of next channels", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "warp_factor": "Amount texture affects texture coordinates of next channels"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "MaterialVolume": {
      "fields": {
        "asymmetry": "Back scattering (-1.0) to Forward scattering (1.0) and the range in between", 
        "cache_resolution": "Resolution of the voxel grid, low resolutions are faster, high resolutions use more memory", 
        "density": "The base density of the volume", 
        "density_scale": "Multiplier for the material's density", 
        "depth_threshold": "Stop ray marching early if transmission drops below this luminance - higher values give speedups in dense volumes at the expense of accuracy", 
        "emission": "Amount of light that gets emitted by the volume", 
        "emission_color": "Color of emitted light", 
        "light_method": "Method of shading, attenuating, and scattering light through the volume", 
        "ms_diffusion": "Diffusion factor, the strength of the blurring effect", 
        "ms_intensity": "Multiplier for multiple scattered light energy", 
        "ms_spread": "Proportional distance over which the light is diffused", 
        "reflection": "Multiplier to make out-scattered light brighter or darker (non-physically correct)", 
        "reflection_color": "Color of light scattered out of the volume (does not affect transmission)", 
        "scattering": "Amount of light that gets scattered out by the volume - the more out-scattering, the shallower the light will penetrate", 
        "step_method": "Method of calculating the steps through the volume", 
        "step_size": "Distance between subsequent volume depth samples", 
        "transmission_color": "Result color of the volume, after other light has been scattered/absorbed", 
        "use_external_shadows": "Receive shadows from sources outside the volume (temporary)", 
        "use_light_cache": "Pre-calculate the shading information into a voxel grid, speeds up shading at slightly less accuracy"
      }
    }, 
    "Menu": {
      "fields": {
        "bl_idname": "If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is \"OBJECT_MT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_MT_hello\")", 
        "bl_label": "The menu label", 
        "layout": "(read-only)    Defines the structure of the menu in the UI"
      }
    }, 
    "Mesh": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "auto_smooth_angle": "Maximum angle between face normals that will be considered as smooth (unused if custom split normals data are available)", 
        "auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "edges": "(read-only)    Edges of the mesh", 
        "has_custom_normals": "(read-only)    True if there are custom split normals data in this mesh", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "loops": "(read-only)    Loops of the mesh (polygon corners)", 
        "materials": "(read-only)", 
        "polygon_layers_float": "(read-only)", 
        "polygon_layers_int": "(read-only)", 
        "polygon_layers_string": "(read-only)", 
        "polygons": "(read-only)    Polygons of the mesh", 
        "shape_keys": "(read-only)", 
        "show_double_sided": "Display the mesh with double or single sided lighting (OpenGL only)", 
        "show_edge_bevel_weight": "Display weights created for the Bevel modifier", 
        "show_edge_crease": "Display creases created for Subdivision Surface modifier", 
        "show_edge_seams": "Display UV unwrapping seams", 
        "show_edge_sharp": "Display sharp edges, used with the Edge Split modifier", 
        "show_edges": "Display selected edges using highlights in the 3D view and UV editor", 
        "show_extra_edge_angle": "Display selected edge angle, using global values when set in the transform panel", 
        "show_extra_edge_length": "Display selected edge lengths, using global values when set in the transform panel", 
        "show_extra_face_angle": "Display the angles in the selected edges, using global values when set in the transform panel", 
        "show_extra_face_area": "Display the area of selected faces, using global values when set in the transform panel", 
        "show_extra_indices": "Display the index numbers of selected vertices, edges, and faces", 
        "show_faces": "Display all faces as shades in the 3D view and UV editor", 
        "show_freestyle_edge_marks": "Display Freestyle edge marks, used with the Freestyle renderer", 
        "show_freestyle_face_marks": "Display Freestyle face marks, used with the Freestyle renderer", 
        "show_normal_face": "Display face normals as lines", 
        "show_normal_loop": "Display vertex-per-face normals as lines", 
        "show_normal_vertex": "Display vertex normals as lines", 
        "show_statvis": "Display statistical information about the mesh", 
        "show_weight": "Draw weights in editmode", 
        "skin_vertices": "(read-only)    All skin vertices", 
        "tessface_uv_textures": "(read-only)    All UV maps for tessellated faces (read-only, for use by renderers)", 
        "tessface_vertex_colors": "(read-only)    All tessellated face colors (read-only, for use by renderers)", 
        "tessfaces": "(read-only)    Tessellated faces of the mesh (derived from polygons)", 
        "texco_mesh": "Derive texture coordinates from another mesh", 
        "texspace_location": "Texture space location", 
        "texspace_size": "Texture space size", 
        "texture_mesh": "Use another mesh for texture indices (vertex indices must be aligned)", 
        "total_edge_sel": "(read-only)    Selected edge count in editmode", 
        "total_face_sel": "(read-only)    Selected face count in editmode", 
        "total_vert_sel": "(read-only)    Selected vertex count in editmode", 
        "use_auto_smooth": "Auto smooth (based on smooth/sharp faces/edges and angle between faces), or use custom split normals data if available", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "use_mirror_topology": "Use topology based mirroring (for when both sides of mesh have matching, unique topology)", 
        "use_mirror_x": "X Axis mirror editing", 
        "use_paint_mask": "Face selection masking for painting", 
        "use_paint_mask_vertex": "Vertex selection masking for painting (weight paint only)", 
        "uv_layer_clone": "UV loop layer to be used as cloning source", 
        "uv_layer_clone_index": "Clone UV loop layer index", 
        "uv_layer_stencil": "UV loop layer to mask the painted area", 
        "uv_layer_stencil_index": "Mask UV loop layer index", 
        "uv_layers": "(read-only)    All UV loop layers", 
        "uv_texture_clone": "UV map to be used as cloning source", 
        "uv_texture_clone_index": "Clone UV map index", 
        "uv_texture_stencil": "UV map to mask the painted area", 
        "uv_texture_stencil_index": "Mask UV map index", 
        "uv_textures": "(read-only)    All UV maps", 
        "vertex_colors": "(read-only)    All vertex colors", 
        "vertex_layers_float": "(read-only)", 
        "vertex_layers_int": "(read-only)", 
        "vertex_layers_string": "(read-only)", 
        "vertex_paint_masks": "(read-only)    Vertex paint mask", 
        "vertices": "(read-only)    Vertices of the mesh"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MeshCacheModifier": {
      "fields": {
        "eval_factor": "Evaluation time in seconds", 
        "eval_frame": "The frame to evaluate (starting at 0)", 
        "eval_time": "Evaluation time in seconds", 
        "factor": "Influence of the deformation", 
        "filepath": "Path to external displacements file", 
        "frame_scale": "Evaluation time in seconds", 
        "frame_start": "Add this to the start frame", 
        "time_mode": "Method to control playback time"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshColorLayer": {
      "fields": {
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering", 
        "data": "(read-only)", 
        "name": "Name of Vertex color layer"
      }
    }, 
    "MeshDeformModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "is_bound": "(read-only)    Whether geometry has been bound to control cage", 
        "object": "Mesh object to deform with", 
        "precision": "The grid size for binding", 
        "use_dynamic_bind": "Recompute binding dynamically on top of other deformers (slower and more memory consuming)", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshEdge": {
      "fields": {
        "bevel_weight": "Weight used by the Bevel modifier", 
        "crease": "Weight used by the Subdivision Surface modifier for creasing", 
        "index": "(read-only)    Index of this edge", 
        "is_loose": "Loose edge", 
        "use_edge_sharp": "Sharp edge for the Edge Split modifier", 
        "use_freestyle_mark": "Edge mark for Freestyle line rendering", 
        "use_seam": "Seam edge for UV unwrapping", 
        "vertices": "Vertex indices"
      }
    }, 
    "MeshLoop": {
      "fields": {
        "bitangent": "(read-only)    Bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, *use it only if really needed*, slower access than bitangent_sign)", 
        "bitangent_sign": "(read-only)    Sign of the bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))", 
        "edge_index": "Edge index", 
        "index": "(read-only)    Index of this loop", 
        "normal": "Local space unit length split normal vector of this vertex for this polygon (must be computed beforehand using calc_normals_split or calc_tangents)", 
        "tangent": "(read-only)    Local space unit length tangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents)", 
        "vertex_index": "Vertex index"
      }
    }, 
    "MeshLoopColorLayer": {
      "fields": {
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering", 
        "data": "(read-only)", 
        "name": "Name of Vertex color layer"
      }
    }, 
    "MeshPaintMaskLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshPolygon": {
      "fields": {
        "area": "(read-only)    Read only area of this polygon", 
        "center": "(read-only)    Center of this polygon", 
        "index": "(read-only)    Index of this polygon", 
        "loop_start": "Index of the first loop of this polygon", 
        "loop_total": "Number of loops used by this polygon", 
        "normal": "(read-only)    Local space unit length normal vector for this polygon", 
        "use_freestyle_mark": "Face mark for Freestyle line rendering", 
        "vertices": "Vertex indices"
      }
    }, 
    "MeshPolygonFloatPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshPolygonIntPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshPolygons": {
      "fields": {
        "active": "The active polygon for this mesh"
      }
    }, 
    "MeshPolygonStringPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshSequenceCacheModifier": {
      "fields": {
        "object_path": "Path to the object in the Alembic archive used to lookup geometric data"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshSkinVertex": {
      "fields": {
        "radius": "Radius of the skin", 
        "use_loose": "If vertex has multiple adjacent edges, it is hulled to them directly", 
        "use_root": "Vertex is a root for rotation calculations and armature generation"
      }
    }, 
    "MeshSkinVertexLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of skin layer"
      }
    }, 
    "MeshStatVis": {
      "fields": {
        "distort_max": "Maximum angle to display", 
        "distort_min": "Minimum angle to display", 
        "overhang_max": "Maximum angle to display", 
        "overhang_min": "Minimum angle to display", 
        "sharp_max": "Maximum angle to display", 
        "sharp_min": "Minimum angle to display", 
        "thickness_max": "Maximum for measuring thickness", 
        "thickness_min": "Minimum for measuring thickness", 
        "thickness_samples": "Number of samples to test per face", 
        "type": "Type of data to visualize/check"
      }
    }, 
    "MeshTessFace": {
      "fields": {
        "area": "(read-only)    Read only area of this face", 
        "index": "(read-only)    Index of this face", 
        "normal": "(read-only)    Local space unit length normal vector for this face", 
        "split_normals": "(read-only)    Local space unit length split normals vectors of the vertices of this face (must be computed beforehand using calc_normals_split or calc_tangents, and then calc_tessface)", 
        "vertices": "Vertex indices", 
        "vertices_raw": "Fixed size vertex indices array"
      }
    }, 
    "MeshTessFaces": {
      "fields": {
        "active": "The active face for this mesh"
      }
    }, 
    "MeshTextureFace": {
      "fields": {
        "uv_raw": "Fixed size UV coordinates array"
      }
    }, 
    "MeshTextureFaceLayer": {
      "fields": {
        "active": "Set the map as active for display and editing", 
        "active_clone": "Set the map as active for cloning", 
        "active_render": "Set the map as active for rendering", 
        "data": "(read-only)", 
        "name": "Name of UV map"
      }
    }, 
    "MeshTexturePolyLayer": {
      "fields": {
        "active": "Set the map as active for display and editing", 
        "active_clone": "Set the map as active for cloning", 
        "active_render": "Set the map as active for rendering", 
        "data": "(read-only)", 
        "name": "Name of UV map"
      }
    }, 
    "MeshUVLoopLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of UV map"
      }
    }, 
    "MeshVertex": {
      "fields": {
        "bevel_weight": "Weight used by the Bevel modifier 'Only Vertices' option", 
        "groups": "(read-only)    Weights for the vertex groups this vertex is member of", 
        "index": "(read-only)    Index of this vertex", 
        "normal": "Vertex Normal", 
        "undeformed_co": "(read-only)    For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates"
      }
    }, 
    "MeshVertexFloatPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshVertexIntPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshVertexStringPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MessageActuator": {
      "fields": {
        "body_message": "Optional, message body Text", 
        "body_property": "The message body will be set by the Property Value", 
        "body_type": "Toggle message type: either Text or a PropertyName", 
        "subject": "Optional, message subject (this is what can be filtered on)", 
        "to_property": "Optional, send message to objects with this name only, or empty to broadcast"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "MessageSensor": {
      "fields": {
        "subject": "Optional subject filter: only accept messages with this subject, or empty to accept all"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "MetaBall": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "elements": "(read-only)    Meta elements", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "materials": "(read-only)", 
        "render_resolution": "Polygonization resolution in rendering", 
        "resolution": "Polygonization resolution in the 3D viewport", 
        "texspace_location": "Texture space location", 
        "texspace_size": "Texture space size", 
        "threshold": "Influence of meta elements", 
        "update_method": "Metaball edit update behavior", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MetaBallElements": {
      "fields": {
        "active": "(read-only)    Last selected element"
      }
    }, 
    "MetaElement": {
      "fields": {
        "hide": "Hide element", 
        "rotation": "Normalized quaternion rotation", 
        "size_x": "Size of element, use of components depends on element type", 
        "size_y": "Size of element, use of components depends on element type", 
        "size_z": "Size of element, use of components depends on element type", 
        "stiffness": "Stiffness defines how much of the element to fill", 
        "type": "Metaball types", 
        "use_negative": "Set metaball as negative one"
      }
    }, 
    "MetaSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "proxy": "(read-only)", 
        "sequences": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MirrorModifier": {
      "fields": {
        "merge_threshold": "Distance within which mirrored vertices are merged", 
        "mirror_object": "Object to use as mirror", 
        "mirror_offset_u": "Amount to offset mirrored UVs from the 0.5 point on the U axis", 
        "mirror_offset_v": "Amount to offset mirrored UVs from the 0.5 point on the V axis", 
        "use_clip": "Prevent vertices from going through the mirror during transform", 
        "use_mirror_merge": "Merge vertices within the merge threshold", 
        "use_mirror_u": "Mirror the U texture coordinate around the 0.5 point", 
        "use_mirror_v": "Mirror the V texture coordinate around the 0.5 point", 
        "use_mirror_vertex_groups": "Mirror vertex groups (e.g. .R->.L)", 
        "use_x": "Enable X axis mirror", 
        "use_y": "Enable Y axis mirror", 
        "use_z": "Enable Z axis mirror"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Modifier": {
      "fields": {
        "name": "Modifier name", 
        "show_expanded": "Set modifier expanded in the user interface", 
        "show_in_editmode": "Display modifier in Edit mode", 
        "show_on_cage": "Adjust edit cage to modifier result", 
        "show_render": "Use modifier during render", 
        "show_viewport": "Display modifier in viewport", 
        "type": "(read-only)", 
        "use_apply_on_spline": "Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface"
      }
    }, 
    "MotionPath": {
      "fields": {
        "color": "Custom color for motion path", 
        "frame_end": "(read-only)    End frame of the stored range", 
        "frame_start": "(read-only)    Starting frame of the stored range", 
        "is_modified": "Path is being edited", 
        "length": "(read-only)    Number of frames cached", 
        "line_thickness": "Line thickness for drawing path", 
        "lines": "Draw straight lines between keyframe points", 
        "points": "(read-only)    Cached positions per frame", 
        "use_bone_head": "(read-only)    For PoseBone paths, use the bone head location when calculating this path", 
        "use_custom_color": "Use custom color for this motion path"
      }
    }, 
    "MotionPathVert": {
      "fields": {
        "select": "Path point is selected for editing"
      }
    }, 
    "MouseActuator": {
      "fields": {
        "local_x": "Apply rotation locally", 
        "local_y": "Apply rotation locally", 
        "max_x": "Maximum positive rotation allowed by X mouse movement (0 for infinite)", 
        "max_y": "Maximum positive rotation allowed by Y mouse movement (0 for infinite)", 
        "min_x": "Maximum negative rotation allowed by X mouse movement (0 for infinite)", 
        "min_y": "Maximum negative rotation allowed by Y mouse movement (0 for infinite)", 
        "object_axis_x": "Local object axis mouse movement in the X direction will apply to", 
        "object_axis_y": "Local object axis mouse movement in the Y direction will apply to", 
        "reset_x": "Reset the cursor's X position to the center of the screen space after calculating", 
        "reset_y": "Reset the cursor's Y position to the center of the screen space after calculating", 
        "sensitivity_x": "Sensitivity of the X axis", 
        "sensitivity_y": "Sensitivity of the Y axis", 
        "threshold_x": "Amount of X motion before mouse movement will register", 
        "threshold_y": "Amount of Y motion before mouse movement will register", 
        "use_axis_x": "Calculate mouse movement on the X axis", 
        "use_axis_y": "Calculate mouse movement on the Y axis", 
        "visible": "Make mouse cursor visible"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "MouseSensor": {
      "fields": {
        "material": "Only look for objects with this material (blank = all objects)", 
        "mouse_event": "Type of event this mouse sensor should trigger on", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "use_material": "Toggle collision on material or property", 
        "use_pulse": "Moving the mouse over a different object generates a pulse", 
        "use_x_ray": "Toggle X-Ray option (see through objects that don't have the property)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "MovieClip": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "display_aspect": "Display Aspect for this clip, does not affect rendering", 
        "filepath": "Filename of the movie or sequence file", 
        "frame_duration": "(read-only)    Detected duration of movie clip in frames", 
        "frame_offset": "Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)", 
        "frame_start": "Global scene frame number at which this movie starts playing (affects all data associated with a clip)", 
        "grease_pencil": "Grease pencil data for this movie clip", 
        "proxy": "(read-only)", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded", 
        "source": "(read-only)    Where the clip comes from", 
        "tracking": "(read-only)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this clip", 
        "use_proxy_custom_directory": "Create proxy images in a custom directory (default is movie location)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_100": "Build proxy resolution 100% of the original footage dimension", 
        "build_25": "Build proxy resolution 25% of the original footage dimension", 
        "build_50": "Build proxy resolution 50% of the original footage dimension", 
        "build_75": "Build proxy resolution 75% of the original footage dimension", 
        "build_free_run": "Build free run time code index", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "build_record_run": "Build record run time code index", 
        "build_undistorted_100": "Build proxy resolution 100% of the original undistorted footage dimension", 
        "build_undistorted_25": "Build proxy resolution 25% of the original undistorted footage dimension", 
        "build_undistorted_50": "Build proxy resolution 50% of the original undistorted footage dimension", 
        "build_undistorted_75": "Build proxy resolution 75% of the original undistorted footage dimension", 
        "directory": "Location to store the proxy files", 
        "quality": "JPEG quality of proxy images"
      }
    }, 
    "MovieClipSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "stabilize2d": "Use the 2D stabilized version of the clip", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "undistort": "Use the undistorted version of the clip", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MovieClipUser": {
      "fields": {
        "frame_current": "Current frame number in movie or image sequence", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions", 
        "use_render_undistorted": "Render preview using undistorted proxy"
      }
    }, 
    "MovieReconstructedCamera": {
      "fields": {
        "average_error": "(read-only)    Average error of reconstruction", 
        "frame": "(read-only)    Frame number marker is keyframed on", 
        "matrix": "(read-only)    Worldspace transformation matrix"
      }
    }, 
    "MovieSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "crop": "(read-only)", 
        "elements": "(read-only)", 
        "mpeg_preseek": "For MPEG movies, preseek this many frames", 
        "proxy": "(read-only)", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "stream_index": "For files with several movie streams, use the stream with the given index", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_multiview": "Use Multiple Views (when available)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing", 
        "views_format": "Mode to load movie views"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MovieTracking": {
      "fields": {
        "active_object_index": "Index of active object", 
        "camera": "(read-only)", 
        "dopesheet": "(read-only)", 
        "objects": "(read-only)    Collection of objects in this tracking data object", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "reconstruction": "(read-only)", 
        "settings": "(read-only)", 
        "stabilization": "(read-only)", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "distortion_model": "Distortion model used for camera lenses", 
        "division_k1": "First coefficient of second order division distortion", 
        "division_k2": "First coefficient of second order division distortion", 
        "focal_length": "Camera's focal length", 
        "focal_length_pixels": "Camera's focal length", 
        "k1": "First coefficient of third order polynomial radial distortion", 
        "k2": "Second coefficient of third order polynomial radial distortion", 
        "k3": "Third coefficient of third order polynomial radial distortion", 
        "pixel_aspect": "Pixel aspect ratio", 
        "principal": "Optical center of lens", 
        "sensor_width": "Width of CCD sensor in millimeters", 
        "units": "Units used for camera focal length"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "show_hidden": "Include channels from objects/bone that aren't visible", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "sort_method": "Method to be used to sort channels in dopesheet view", 
        "use_invert_sort": "Invert sort order of dopesheet channels"
      }
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "co": "Marker position at frame in normalized coordinates", 
        "frame": "Frame number marker is keyframed on", 
        "is_keyed": "Whether the position of the marker is keyframed or tracked", 
        "mute": "Is marker muted for current frame", 
        "pattern_bound_box": "(read-only)    Pattern area bounding box in normalized coordinates", 
        "pattern_corners": "Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position", 
        "search_max": "Right-bottom corner of search area in normalized coordinates relative to marker position", 
        "search_min": "Left-bottom corner of search area in normalized coordinates relative to marker position"
      }
    }, 
    "MovieTrackingObject": {
      "fields": {
        "is_camera": "(read-only)    Object is used for camera tracking", 
        "keyframe_a": "First keyframe used for reconstruction initialization", 
        "keyframe_b": "Second keyframe used for reconstruction initialization", 
        "name": "Unique name of object", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "reconstruction": "(read-only)", 
        "scale": "Scale of object solution in camera space", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object"
      }
    }, 
    "MovieTrackingObjectPlaneTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MovieTrackingObjects": {
      "fields": {
        "active": "Active object in this tracking data object"
      }
    }, 
    "MovieTrackingObjectTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "corners": "Array of coordinates which represents UI rectangle corners in frame normalized coordinates", 
        "frame": "Frame number marker is keyframed on", 
        "mute": "Is marker muted for current frame"
      }
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "image": "Image displayed in the track during editing in clip editor", 
        "image_opacity": "Opacity of the image", 
        "markers": "(read-only)    Collection of markers in track", 
        "name": "Unique name of track", 
        "select": "Plane track is selected", 
        "use_auto_keying": "Automatic keyframe insertion when moving plane corners"
      }
    }, 
    "MovieTrackingPlaneTracks": {
      "fields": {
        "active": "Active plane track in this tracking data object"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "average_error": "(read-only)    Average error of reconstruction", 
        "cameras": "(read-only)    Collection of solved cameras", 
        "is_valid": "(read-only)    Is tracking data contains valid reconstruction information"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "clean_action": "Cleanup action to execute", 
        "clean_error": "Effect on tracks which have a larger re-projection error", 
        "clean_frames": "Effect on tracks which are tracked less than the specified amount of frames", 
        "default_correlation_min": "Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "default_frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "default_margin": "Default distance from image boundary at which marker stops tracking", 
        "default_motion_model": "Default motion model to use for tracking", 
        "default_pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "default_pattern_size": "Size of pattern area for newly created tracks", 
        "default_search_size": "Size of search area for newly created tracks", 
        "default_weight": "Influence of newly created track on a final solution", 
        "distance": "Distance between two bundles used for scene scaling", 
        "object_distance": "Distance between two bundles used for object scaling", 
        "refine_intrinsics": "Refine intrinsics during camera solving", 
        "show_default_expanded": "Show default options expanded in the user interface", 
        "show_extra_expanded": "Show extra options expanded in the user interface", 
        "speed": "Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)", 
        "use_default_blue_channel": "Use blue channel from footage for tracking", 
        "use_default_brute": "Use a brute-force translation-only initialization when tracking", 
        "use_default_green_channel": "Use green channel from footage for tracking", 
        "use_default_mask": "Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking", 
        "use_default_normalization": "Normalize light intensities while tracking (slower)", 
        "use_default_red_channel": "Use red channel from footage for tracking", 
        "use_keyframe_selection": "Automatically select keyframes when solving camera/object motion", 
        "use_tripod_solver": "Use special solver to track a stable camera position, such as a tripod"
      }
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "active_rotation_track_index": "Index of active track in rotation stabilization tracks list", 
        "active_track_index": "Index of active track in translation stabilization tracks list", 
        "anchor_frame": "Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)", 
        "filter_type": "Interpolation to use for sub-pixel shifts and rotations due to stabilization", 
        "influence_location": "Influence of stabilization algorithm on footage location", 
        "influence_rotation": "Influence of stabilization algorithm on footage rotation", 
        "influence_scale": "Influence of stabilization algorithm on footage scale", 
        "rotation_tracks": "(read-only)    Collection of tracks used for 2D stabilization (translation)", 
        "scale_max": "Limit the amount of automatic scaling", 
        "show_tracks_expanded": "Show UI list of tracks participating in stabilization", 
        "target_position": "Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)", 
        "target_rotation": "Rotation present on original shot, will be compensated (e.g. for deliberate tilting)", 
        "target_scale": "Explicitly scale resulting frame to compensate zoom of original shot", 
        "tracks": "(read-only)    Collection of tracks used for 2D stabilization (translation)", 
        "use_2d_stabilization": "Use 2D stabilization for footage", 
        "use_autoscale": "Automatically scale footage to cover unfilled areas when stabilizing", 
        "use_stabilize_rotation": "Stabilize detected rotation around center of frame", 
        "use_stabilize_scale": "Compensate any scale changes relative to center of rotation"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "average_error": "(read-only)    Average error of re-projection", 
        "bundle": "(read-only)    Position of bundle reconstructed from this track", 
        "color": "Color of the track in the Movie Clip Editor and the 3D viewport after a solve", 
        "correlation_min": "Minimal value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "grease_pencil": "Grease pencil data for this track", 
        "has_bundle": "(read-only)    True if track has a valid bundle", 
        "hide": "Track is hidden", 
        "lock": "Track is locked and all changes to it are disabled", 
        "margin": "Distance from image boundary at which marker stops tracking", 
        "markers": "(read-only)    Collection of markers in track", 
        "motion_model": "Default motion model to use for tracking", 
        "name": "Unique name of track", 
        "offset": "Offset of track from the parenting point", 
        "pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "select": "Track is selected", 
        "select_anchor": "Track's anchor point is selected", 
        "select_pattern": "Track's pattern area is selected", 
        "select_search": "Track's search area is selected", 
        "use_alpha_preview": "Apply track's mask on displaying preview", 
        "use_blue_channel": "Use blue channel from footage for tracking", 
        "use_brute": "Use a brute-force translation only pre-track before refinement", 
        "use_custom_color": "Use custom color instead of theme-defined", 
        "use_grayscale_preview": "Display what the tracking algorithm sees in the preview", 
        "use_green_channel": "Use green channel from footage for tracking", 
        "use_mask": "Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking", 
        "use_normalization": "Normalize light intensities while tracking. Slower", 
        "use_red_channel": "Use red channel from footage for tracking", 
        "weight": "Influence of this track on a final solution", 
        "weight_stab": "Influence of this track on 2D stabilization"
      }
    }, 
    "MovieTrackingTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MulticamSequence": {
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "MultiplySequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "MultiresModifier": {
      "fields": {
        "filepath": "Path to external displacements file", 
        "is_external": "(read-only)    Store multires displacements outside the .blend file, to save memory", 
        "levels": "Number of subdivisions to use in the viewport", 
        "render_levels": "The subdivision level visible at render time", 
        "sculpt_levels": "Number of subdivisions to use in sculpt mode", 
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "total_levels": "(read-only)    Number of subdivisions for which displacements are stored", 
        "use_subsurf_uv": "Use subsurf to subdivide UVs"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MusgraveTexture": {
      "fields": {
        "dimension_max": "Highest fractal dimension", 
        "gain": "The gain multiplier", 
        "lacunarity": "Gap between successive frequencies", 
        "musgrave_type": "Fractal noise algorithm", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_intensity": "Intensity of the noise", 
        "noise_scale": "Scaling for noise input", 
        "octaves": "Number of frequencies used", 
        "offset": "The fractal offset"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "NearSensor": {
      "fields": {
        "distance": "Trigger distance", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "reset_distance": "The distance where the sensor forgets the actor"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "NlaStrip": {
      "fields": {
        "action": "Action referenced by this strip", 
        "action_frame_end": "Last frame from action to use", 
        "action_frame_start": "First frame from action to use", 
        "active": "(read-only)    NLA Strip is active", 
        "blend_in": "Number of frames at start of strip to fade in influence", 
        "blend_type": "Method used for combining strip's result with accumulated result", 
        "extrapolation": "Action to take for gaps past the strip extents", 
        "fcurves": "(read-only)    F-Curves for controlling the strip's influence and timing", 
        "influence": "Amount the strip contributes to the current result", 
        "modifiers": "(read-only)    Modifiers affecting all the F-Curves in the referenced Action", 
        "mute": "NLA Strip is not evaluated", 
        "repeat": "Number of times to repeat the action range", 
        "scale": "Scaling factor for action", 
        "select": "NLA Strip is selected", 
        "strip_time": "Frame of referenced Action to evaluate", 
        "strips": "(read-only)    NLA Strips that this strip acts as a container for (if it is of type Meta)", 
        "type": "(read-only)    Type of NLA Strip", 
        "use_animated_influence": "Influence setting is controlled by an F-Curve rather than automatically determined", 
        "use_animated_time": "Strip time is controlled by an F-Curve rather than automatically determined", 
        "use_animated_time_cyclic": "Cycle the animated time within the action start & end", 
        "use_auto_blend": "Number of frames for Blending In/Out is automatically determined from overlapping strips", 
        "use_reverse": "NLA Strip is played back in reverse order (only when timing is automatically determined)", 
        "use_sync_length": "Update range of frames referenced from action after tweaking strip and its keyframes"
      }
    }, 
    "NlaTrack": {
      "fields": {
        "active": "(read-only)    NLA Track is active", 
        "is_solo": "NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)", 
        "lock": "NLA Track is locked", 
        "mute": "NLA Track is not evaluated", 
        "select": "NLA Track is selected", 
        "strips": "(read-only)    NLA Strips on this NLA-track"
      }
    }, 
    "NlaTracks": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "Node": {
      "fields": {
        "bl_icon": "The node icon", 
        "bl_label": "The node label", 
        "bl_static_type": "Node type (deprecated, use with care)", 
        "color": "Custom color of the node body", 
        "dimensions": "(read-only)    Absolute bounding box dimensions of the node", 
        "height": "Height of the node", 
        "inputs": "(read-only)", 
        "internal_links": "(read-only)    Internal input-to-output connections for muting", 
        "label": "Optional custom node label", 
        "name": "Unique node identifier", 
        "outputs": "(read-only)", 
        "parent": "Parent this node is attached to", 
        "select": "Node selection state", 
        "shading_compatibility": "(read-only)", 
        "show_texture": "Draw node in viewport textured draw mode", 
        "type": "(read-only)    Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)", 
        "use_custom_color": "Use custom color for the node", 
        "width": "Width of the node", 
        "width_hidden": "Width of the node in hidden state"
      }
    }, 
    "NodeCustomGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node"
      ]
    }, 
    "NodeFrame": {
      "fields": {
        "label_size": "Font size to use for displaying the label", 
        "shrink": "Shrink the frame to minimal bounding box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeGroupInput": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeGroupOutput": {
      "fields": {
        "interface": "(read-only)    Interface socket data", 
        "is_active_output": "True if this node is used as the active group output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeInternalSocketTemplate": {
      "fields": {
        "identifier": "(read-only)    Identifier of the socket", 
        "name": "(read-only)    Name of the socket", 
        "type": "(read-only)    Data type of the socket"
      }
    }, 
    "NodeLink": {
      "fields": {
        "from_node": "(read-only)", 
        "from_socket": "(read-only)", 
        "is_hidden": "(read-only)    Link is hidden due to invisible sockets", 
        "to_node": "(read-only)", 
        "to_socket": "(read-only)"
      }
    }, 
    "NodeOutputFileSlotFile": {
      "fields": {
        "format": "(read-only)", 
        "path": "Subpath used for this slot"
      }
    }, 
    "NodeOutputFileSlotLayer": {
      "fields": {
        "name": "OpenEXR layer name used for this slot"
      }
    }, 
    "Nodes": {
      "fields": {
        "active": "Active node in this tree"
      }
    }, 
    "NodeSetting": {
      "fields": {
        "value": "Python expression to be evaluated as the initial node setting"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "NodeSocket": {
      "fields": {
        "enabled": "Enable the socket", 
        "hide": "Hide the socket", 
        "hide_value": "Hide the socket input value", 
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "is_linked": "(read-only)    True if the socket is connected", 
        "is_output": "(read-only)    True if the socket is an output, otherwise input", 
        "link_limit": "Max number of links allowed for this socket", 
        "name": "Socket name", 
        "node": "(read-only)    Node owning this socket", 
        "show_expanded": "Socket links are expanded in the user interface", 
        "type": "Data type"
      }
    }, 
    "NodeSocketBool": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketColor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloat": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatAngle": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatTime": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketInt": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketInterface": {
      "fields": {
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "is_output": "(read-only)    True if the socket is an output, otherwise input", 
        "name": "Socket name"
      }
    }, 
    "NodeSocketInterfaceBool": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceColor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloat": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatAngle": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatTime": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceInt": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceIntFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceIntPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceIntUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceStandard": {
      "fields": {
        "type": "(read-only)    Data type"
      }, 
      "inherits": [
        "NodeSocketInterface"
      ]
    }, 
    "NodeSocketInterfaceString": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVector": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorAcceleration": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorDirection": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorEuler": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorTranslation": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorVelocity": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorXYZ": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketIntFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketIntPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketIntUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketString": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVector": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorAcceleration": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorDirection": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorEuler": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorTranslation": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorVelocity": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorXYZ": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeTree": {
      "fields": {
        "active_input": "Index of the active input", 
        "active_output": "Index of the active output", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "bl_icon": "The node tree icon", 
        "bl_label": "The node tree label", 
        "grease_pencil": "Grease Pencil data-block", 
        "inputs": "(read-only)    Node tree inputs", 
        "links": "(read-only)", 
        "nodes": "(read-only)", 
        "outputs": "(read-only)    Node tree outputs", 
        "type": "(read-only)    Node Tree type (deprecated, bl_idname is the actual node tree type identifier)", 
        "view_center": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "NodeTreePath": {
      "fields": {
        "node_tree": "(read-only)    Base node tree from context"
      }
    }, 
    "NormalEditModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "mix_factor": "How much of generated normals to mix with exiting ones", 
        "mix_limit": "Maximum angle between old and new normals", 
        "mix_mode": "How to mix generated normals with existing ones", 
        "mode": "How to affect (generate) normals", 
        "offset": "Offset from object's center", 
        "target": "Target object used to affect normals", 
        "use_direction_parallel": "Use same direction for all normals, from origin to target's center (Directional mode only)", 
        "vertex_group": "Vertex group name for selecting/weighting the affected areas"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Object": {
      "fields": {
        "active_material": "Active material being displayed", 
        "active_material_index": "Index of active material slot", 
        "active_shape_key": "(read-only)    Current shape key", 
        "active_shape_key_index": "Current shape key index", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "animation_visualization": "(read-only)    Animation data for this data-block", 
        "bound_box": "(read-only)    Object's bounding box in object-space coordinates, all values are -1.0 when not available", 
        "collision": "(read-only)    Settings for using the object as a collider in physics simulation", 
        "color": "Object color and alpha, used when faces have the ObColor mode enabled", 
        "constraints": "(read-only)    Constraints affecting the transformation of the object", 
        "cycles": "(read-only)    Cycles object settings", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "data": "Object data", 
        "delta_location": "Extra translation added to the location of the object", 
        "delta_rotation_euler": "Extra rotation added to the rotation of the object (when using Euler rotations)", 
        "delta_rotation_quaternion": "Extra rotation added to the rotation of the object (when using Quaternion rotations)", 
        "delta_scale": "Extra scaling added to the scale of the object", 
        "dimensions": "Absolute bounding box dimensions of the object", 
        "draw_bounds_type": "Object boundary display type", 
        "draw_type": "Maximum draw type to display object with in viewport", 
        "dupli_faces_scale": "Scale the DupliFace objects", 
        "dupli_frames_end": "End frame for DupliFrames", 
        "dupli_frames_off": "Recurring frames to exclude from the Dupliframes", 
        "dupli_frames_on": "Number of frames to use between DupOff frames", 
        "dupli_frames_start": "Start frame for DupliFrames", 
        "dupli_group": "Instance an existing group", 
        "dupli_list": "(read-only)    Object duplis", 
        "dupli_type": "If not None, object duplication method to use", 
        "empty_draw_size": "Size of display for empties in the viewport", 
        "empty_draw_type": "Viewport display style for empties", 
        "empty_image_offset": "Origin offset distance", 
        "field": "(read-only)    Settings for using the object as a field in physics simulation", 
        "game": "(read-only)    Game engine related settings for the object", 
        "grease_pencil": "Grease Pencil data-block", 
        "hide": "Restrict visibility in the viewport", 
        "hide_render": "Restrict renderability", 
        "hide_select": "Restrict selection in the viewport", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "is_duplicator": "(read-only)", 
        "layers": "Layers the object is on", 
        "layers_local_view": "(read-only)    3D local view layers the object is on", 
        "location": "Location of the object", 
        "lock_location": "Lock editing of location in the interface", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "lock_scale": "Lock editing of scale in the interface", 
        "lod_levels": "(read-only)    A collection of detail levels to automatically switch between", 
        "material_slots": "(read-only)    Material slots in the object", 
        "matrix_basis": "Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied", 
        "matrix_local": "Parent relative transformation matrix - WARNING: Only takes into account 'Object' parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone", 
        "matrix_parent_inverse": "Inverse of object's parent matrix at time of parenting", 
        "matrix_world": "Worldspace transformation matrix", 
        "mode": "(read-only)    Object interaction mode", 
        "modifiers": "(read-only)    Modifiers affecting the geometric data of the object", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "parent": "Parent Object", 
        "parent_bone": "Name of parent bone in case of a bone parenting relation", 
        "parent_type": "Type of parent relation", 
        "parent_vertices": "Indices of vertices in case of a vertex parenting relation", 
        "particle_systems": "(read-only)    Particle systems emitted from the object", 
        "pass_index": "Index number for the \"Object Index\" render pass", 
        "pose": "(read-only)    Current pose for armatures", 
        "pose_library": "Action used as a pose library for armatures", 
        "proxy": "(read-only)    Library object this proxy object controls", 
        "proxy_group": "(read-only)    Library group duplicator object this proxy object controls", 
        "rigid_body": "(read-only)    Settings for rigid body simulation", 
        "rigid_body_constraint": "(read-only)    Constraint constraining rigid bodies", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "rotation_euler": "Rotation in Eulers", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "scale": "Scaling of the object", 
        "select": "Object selection state", 
        "show_all_edges": "Display all edges for mesh objects", 
        "show_axis": "Display the object's origin and axes", 
        "show_bounds": "Display the object's bounds", 
        "show_name": "Display the object's name", 
        "show_only_shape_key": "Always show the current Shape for this Object", 
        "show_texture_space": "Display the object's texture space", 
        "show_transparent": "Display material transparency in the object (unsupported for duplicator drawing)", 
        "show_wire": "Add the object's wireframe over solid drawing", 
        "show_x_ray": "Make the object draw in front of others (unsupported for duplicator drawing)", 
        "slow_parent_offset": "Delay in the parent relationship", 
        "soft_body": "(read-only)    Settings for soft body simulation", 
        "track_axis": "Axis that points in 'forward' direction (applies to DupliFrame when parent 'Follow' is enabled)", 
        "type": "(read-only)    Type of Object", 
        "up_axis": "Axis that points in the upward direction (applies to DupliFrame when parent 'Follow' is enabled)", 
        "use_dupli_faces_scale": "Scale dupli based on face size", 
        "use_dupli_frames_speed": "Set dupliframes to use the current frame instead of parent curve's evaluation time", 
        "use_dupli_vertices_rotation": "Rotate dupli according to vertex normal", 
        "use_dynamic_topology_sculpting": "(read-only)", 
        "use_extra_recalc_data": "Refresh this object's data again on frame changes, dependency graph hack", 
        "use_extra_recalc_object": "Refresh this object again on frame changes, dependency graph hack", 
        "use_shape_key_edit_mode": "Apply shape keys in edit mode (for Meshes only)", 
        "use_slow_parent": "Create a delay in the parent relationship (beware: this isn't renderfarm safe and may be invalid after jumping around the timeline)", 
        "vertex_groups": "(read-only)    Vertex groups of the object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ObjectActuator": {
      "fields": {
        "angular_velocity": "Angular velocity", 
        "damping": "Number of frames to reach the target velocity", 
        "derivate_coefficient": "Not required, high values can cause instability", 
        "force": "Force", 
        "force_max_x": "Upper limit for X force", 
        "force_max_y": "Upper limit for Y force", 
        "force_max_z": "Upper limit for Z force", 
        "force_min_x": "Lower limit for X force", 
        "force_min_y": "Lower limit for Y force", 
        "force_min_z": "Lower limit for Z force", 
        "integral_coefficient": "Low value (0.01) for slow response, high value (0.5) for fast response", 
        "linear_velocity": "Linear velocity (in Servo mode it sets the target relative linear velocity, it will be achieved by automatic application of force - Null velocity is a valid target)", 
        "mode": "Specify the motion system", 
        "offset_location": "Location", 
        "offset_rotation": "Rotation", 
        "proportional_coefficient": "Typical value is 60x integral coefficient", 
        "reference_object": "Reference object for velocity calculation, leave empty for world reference", 
        "torque": "Torque", 
        "use_add_character_location": "Toggle between ADD and SET character location", 
        "use_add_linear_velocity": "Toggles between ADD and SET linV", 
        "use_character_jump": "Make the character jump using the settings in the physics properties", 
        "use_local_angular_velocity": "Angular velocity is defined in local coordinates", 
        "use_local_force": "Force is defined in local coordinates", 
        "use_local_linear_velocity": "Velocity is defined in local coordinates", 
        "use_local_location": "Location is defined in local coordinates", 
        "use_local_rotation": "Rotation is defined in local coordinates", 
        "use_local_torque": "Torque is defined in local coordinates", 
        "use_servo_limit_x": "Set limit to force along the X axis", 
        "use_servo_limit_y": "Set limit to force along the Y axis", 
        "use_servo_limit_z": "Set limit to force along the Z axis"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "ObjectBase": {
      "fields": {
        "layers": "Layers the object base is on", 
        "layers_local_view": "(read-only)    3D local view layers the object base is on", 
        "object": "(read-only)    Object this base links to", 
        "select": "Object base selection state"
      }
    }, 
    "ObjectConstraints": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "ObjectSolverConstraint": {
      "fields": {
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "clip": "Movie Clip to get tracking data from", 
        "object": "Movie tracking object to follow", 
        "use_active_clip": "Use active clip defined in scene"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ObstacleFluidSettings": {
      "fields": {
        "impact_factor": "This is an unphysical value for moving objects - it controls the impact an obstacle has on the fluid, =0 behaves a bit like outflow (deleting fluid), =1 is default, while >1 results in high forces (can be used to tweak total mass)", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "OceanModifier": {
      "fields": {
        "bake_foam_fade": "How much foam accumulates over time (baked ocean only)", 
        "choppiness": "Choppiness of the wave's crest (adds some horizontal component to the displacement)", 
        "damping": "Damp reflected waves going in opposite direction to the wind", 
        "depth": "Depth of the solid ground below the water surface", 
        "filepath": "Path to a folder to store external baked images", 
        "foam_coverage": "Amount of generated foam", 
        "foam_layer_name": "Name of the vertex color layer used for foam", 
        "frame_end": "End frame of the ocean baking", 
        "frame_start": "Start frame of the ocean baking", 
        "geometry_mode": "Method of modifying geometry", 
        "is_cached": "(read-only)    Whether the ocean is using cached data or simulating", 
        "random_seed": "Seed of the random generator", 
        "repeat_x": "Repetitions of the generated surface in X", 
        "repeat_y": "Repetitions of the generated surface in Y", 
        "resolution": "Resolution of the generated surface", 
        "size": "Surface scale factor (does not affect the height of the waves)", 
        "spatial_size": "Size of the simulation domain (in meters), and of the generated geometry (in BU)", 
        "time": "Current time of the simulation", 
        "use_foam": "Generate foam mask as a vertex color channel", 
        "use_normals": "Output normals for bump mapping - disabling can speed up performance if its not needed", 
        "wave_alignment": "How much the waves are aligned to each other", 
        "wave_direction": "Main direction of the waves when they are (partially) aligned", 
        "wave_scale": "Scale of the displacement effect", 
        "wave_scale_min": "Shortest allowed wavelength", 
        "wind_velocity": "Wind speed"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "OceanTexData": {
      "fields": {
        "ocean_object": "Object containing the ocean modifier", 
        "output": "The data that is output by the texture"
      }
    }, 
    "OceanTexture": {
      "fields": {
        "ocean": "(read-only)    The ocean data associated with this texture"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "Operator": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "has_reports": "(read-only)    Operator has a set of reports (warnings and errors) from last execution", 
        "layout": "(read-only)", 
        "macros": "(read-only)", 
        "name": "(read-only)", 
        "options": "(read-only)    Runtime options", 
        "properties": "(read-only)"
      }
    }, 
    "OperatorFileListElement": {
      "fields": {
        "name": "Name of a file or directory within a file list"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OperatorMacro": {
      "fields": {
        "properties": "(read-only)"
      }
    }, 
    "OperatorMousePath": {
      "fields": {
        "loc": "Mouse location", 
        "time": "Time of mouse location"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OperatorOptions": {
      "fields": {
        "is_grab_cursor": "(read-only)    True when the cursor is grabbed", 
        "is_invoke": "(read-only)    True when invoked (even if only the execute callbacks available)", 
        "use_cursor_region": "Enable to use the region under the cursor for modal execution"
      }
    }, 
    "OperatorStrokeElement": {
      "fields": {
        "pressure": "Tablet pressure", 
        "size": "Brush Size in screen space"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OutflowFluidSettings": {
      "fields": {
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "OverDropSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "PackedFile": {
      "fields": {
        "data": "(read-only)    Raw data (bytes, exact content of the embedded file)", 
        "size": "(read-only)    Size of packed file in bytes"
      }
    }, 
    "Paint": {
      "fields": {
        "brush": "Active Brush", 
        "cavity_curve": "(read-only)    Editable cavity curve", 
        "input_samples": "Average multiple input samples together to smooth the brush stroke", 
        "palette": "Active Palette", 
        "show_low_resolution": "For multires, show low resolution while navigating the view", 
        "tile_offset": "Stride at which tiled strokes are copied", 
        "tile_x": "Tile along X axis", 
        "tile_y": "Tile along Y axis", 
        "tile_z": "Tile along Z axis", 
        "use_cavity": "Mask painting according to mesh geometry cavity", 
        "use_symmetry_feather": "Reduce the strength of the brush where it overlaps symmetrical daubs", 
        "use_symmetry_x": "Mirror brush across the X axis", 
        "use_symmetry_y": "Mirror brush across the Y axis", 
        "use_symmetry_z": "Mirror brush across the Z axis"
      }
    }, 
    "Palette": {
      "fields": {
        "colors": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Panel": {
      "fields": {
        "bl_context": "The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)", 
        "bl_idname": "If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is \"OBJECT_PT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_PT_hello\"", 
        "bl_label": "The panel label, shows up in the panel header at the right of the triangle used to collapse the panel", 
        "bl_options": "Options for this panel type", 
        "bl_region_type": "The region where the panel is going to be used in", 
        "bl_space_type": "The space where the panel is going to be used in", 
        "layout": "(read-only)    Defines the structure of the panel in the UI", 
        "text": "XXX todo"
      }
    }, 
    "ParentActuator": {
      "fields": {
        "object": "Set this object as parent", 
        "use_compound": "Add this object shape to the parent shape (only if the parent shape is already compound)", 
        "use_ghost": "Make this object ghost while parented"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "Particle": {
      "fields": {
        "hair_keys": "(read-only)", 
        "is_exist": "(read-only)", 
        "is_visible": "(read-only)", 
        "particle_keys": "(read-only)"
      }
    }, 
    "ParticleBrush": {
      "fields": {
        "count": "Particle count", 
        "curve": "(read-only)", 
        "size": "Radius of the brush in pixels", 
        "steps": "Brush steps", 
        "strength": "Brush strength", 
        "use_puff_volume": "Apply puff to unselected end-points (helps maintain hair volume when puffing root)"
      }
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "count": "The number of times this object is repeated with respect to other objects", 
        "name": "(read-only)    Particle dupliobject name"
      }
    }, 
    "ParticleEdit": {
      "fields": {
        "brush": "(read-only)", 
        "default_key_count": "How many keys to make new particles with", 
        "draw_step": "How many steps to draw the path with", 
        "emitter_distance": "Distance to keep particles away from the emitter", 
        "fade_frames": "How many frames to fade", 
        "is_editable": "(read-only)    A valid edit mode exists", 
        "is_hair": "(read-only)    Editing hair", 
        "object": "(read-only)    The edited object", 
        "select_mode": "Particle select and display mode", 
        "shape_object": "Outer shape to use for tools", 
        "show_particles": "Draw actual particles", 
        "use_auto_velocity": "Calculate point velocities automatically", 
        "use_default_interpolate": "Interpolate new particles from the existing ones", 
        "use_emitter_deflect": "Keep paths from intersecting the emitter", 
        "use_fade_time": "Fade paths and keys further away from current frame", 
        "use_preserve_length": "Keep path lengths constant", 
        "use_preserve_root": "Keep root keys unmodified"
      }
    }, 
    "ParticleFluidSettings": {
      "fields": {
        "alpha_influence": "Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)", 
        "filepath": "Directory (and/or filename prefix) to store and load particles from", 
        "particle_influence": "Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), >1=stronger", 
        "show_tracer": "Show tracer particles", 
        "use_drops": "Show drop particles", 
        "use_floats": "Show floating foam particles"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "ParticleHairKey": {
      "fields": {
        "co": "Location of the hair key in object space", 
        "co_local": "Location of the hair key in its local coordinate system, relative to the emitting face", 
        "time": "Relative time of key over hair length", 
        "weight": "Weight for cloth simulation"
      }
    }, 
    "ParticleInstanceModifier": {
      "fields": {
        "axis": "Pole axis for rotation", 
        "object": "Object that has the particle system", 
        "position": "Position along path", 
        "random_position": "Randomize position along path", 
        "show_alive": "Show instances when particles are alive", 
        "show_dead": "Show instances when particles are dead", 
        "show_unborn": "Show instances when particles are unborn", 
        "use_children": "Create instances from child particles", 
        "use_normal": "Create instances from normal particles", 
        "use_path": "Create instances along particle paths", 
        "use_preserve_shape": "Don't stretch the object", 
        "use_size": "Use particle size to scale the instances"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ParticleKey": {
      "fields": {
        "angular_velocity": "Key angular velocity", 
        "location": "Key location", 
        "rotation": "Key rotation quaternion", 
        "time": "Time of key over the simulation", 
        "velocity": "Key velocity"
      }
    }, 
    "ParticleSettings": {
      "fields": {
        "active_dupliweight": "(read-only)", 
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "adaptive_angle": "How many degrees path has to curve to make another render segment", 
        "adaptive_pixel": "How many pixels path has to cover to make another render segment", 
        "angular_velocity_factor": "Angular velocity amount (in radians per second)", 
        "angular_velocity_mode": "What axis is used to change particle rotation with time", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "apply_effector_to_children": "Apply effectors to children", 
        "bending_random": "Random stiffness of hairs", 
        "billboard_align": "In respect to what the billboards are aligned", 
        "billboard_animation": "How to animate billboard textures", 
        "billboard_object": "Billboards face this object (default is active camera)", 
        "billboard_offset_split": "How to offset billboard textures", 
        "billboard_size": "Scale billboards relative to particle size", 
        "billboard_tilt": "Tilt of the billboards", 
        "billboard_tilt_random": "Random tilt of the billboards", 
        "billboard_uv_split": "Number of rows/columns to split UV coordinates for billboards", 
        "billboard_velocity_head": "Scale billboards by velocity", 
        "billboard_velocity_tail": "Scale billboards by velocity", 
        "boids": "(read-only)", 
        "branch_threshold": "Threshold of branching", 
        "brownian_factor": "Amount of random, erratic particle movement", 
        "child_length": "Length of child paths", 
        "child_length_threshold": "Amount of particles left untouched by child path length", 
        "child_nbr": "Number of children/parent", 
        "child_parting_factor": "Create parting in the children based on parent strands", 
        "child_parting_max": "Maximum root to tip angle (tip distance/root distance for long hair)", 
        "child_parting_min": "Minimum root to tip angle (tip distance/root distance for long hair)", 
        "child_radius": "Radius of children around parent", 
        "child_roundness": "Roundness of children around parent", 
        "child_size": "A multiplier for the child particle size", 
        "child_size_random": "Random variation to the size of the child particles", 
        "child_type": "Create child particles", 
        "clump_curve": "(read-only)    Curve defining clump tapering", 
        "clump_factor": "Amount of clumping", 
        "clump_noise_size": "Size of clump noise", 
        "clump_shape": "Shape of clumping", 
        "collision_group": "Limit colliders to this Group", 
        "color_maximum": "Maximum length of the particle color vector", 
        "count": "Total number of particles", 
        "courant_target": "The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range", 
        "create_long_hair_children": "Calculate children that suit long hair well", 
        "cycles": "(read-only)    Cycles hair settings", 
        "damping": "Amount of damping", 
        "distribution": "How to distribute particles on selected element", 
        "drag_factor": "Amount of air-drag", 
        "draw_color": "Draw additional particle data as a color", 
        "draw_method": "How particles are drawn in viewport", 
        "draw_percentage": "Percentage of particles to display in 3D view", 
        "draw_size": "Size of particles on viewport in pixels (0=default)", 
        "draw_step": "How many steps paths are drawn with (power of 2)", 
        "dupli_group": "Show Objects in this Group in place of particles", 
        "dupli_object": "Show this Object in place of particles", 
        "dupli_weights": "(read-only)    Weights for all of the objects in the dupli group", 
        "effect_hair": "Hair stiffness for effectors", 
        "effector_amount": "How many particles are effectors (0 is all particles)", 
        "effector_weights": "(read-only)", 
        "emit_from": "Where to emit particles from", 
        "factor_random": "Give the starting velocity a random variation", 
        "fluid": "(read-only)", 
        "force_field_1": "(read-only)", 
        "force_field_2": "(read-only)", 
        "frame_end": "Frame number to stop emitting particles", 
        "frame_start": "Frame number to start emitting particles", 
        "grid_random": "Add random offset to the grid locations", 
        "grid_resolution": "The resolution of the particle grid", 
        "hair_length": "Length of the hair", 
        "hair_step": "Number of hair segments", 
        "hexagonal_grid": "Create the grid in a hexagonal pattern", 
        "integrator": "Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)", 
        "invert_grid": "Invert what is considered object and what is not", 
        "is_fluid": "(read-only)    Particles were created by a fluid simulation", 
        "jitter_factor": "Amount of jitter applied to the sampling", 
        "keyed_loops": "Number of times the keys are looped", 
        "kink": "Type of periodic offset on the path", 
        "kink_amplitude": "The amplitude of the offset", 
        "kink_amplitude_clump": "How much clump affects kink amplitude", 
        "kink_amplitude_random": "Random variation of the amplitude", 
        "kink_axis": "Which axis to use for offset", 
        "kink_axis_random": "Random variation of the orientation", 
        "kink_extra_steps": "Extra steps for resolution of special kink features", 
        "kink_flat": "How flat the hairs are", 
        "kink_frequency": "The frequency of the offset (1/total length)", 
        "kink_shape": "Adjust the offset to the beginning/end", 
        "length_random": "Give path length a random variation", 
        "lifetime": "Life span of the particles", 
        "lifetime_random": "Give the particle life a random variation", 
        "line_length_head": "Length of the line's head", 
        "line_length_tail": "Length of the line's tail", 
        "lock_billboard": "Lock the billboards align axis", 
        "lock_boids_to_surface": "Constrain boids to a surface", 
        "mass": "Mass of the particles", 
        "material": "Index of material slot used for rendering particles", 
        "material_slot": "Material slot used for rendering particles", 
        "normal_factor": "Let the surface normal give the particle a starting velocity", 
        "object_align_factor": "Let the emitter object orientation give the particle a starting velocity", 
        "object_factor": "Let the object give the particle a starting velocity", 
        "particle_factor": "Let the target particle give the particle a starting velocity", 
        "particle_size": "The size of the particles", 
        "path_end": "End time of drawn path", 
        "path_start": "Starting time of drawn path", 
        "phase_factor": "Rotation around the chosen orientation axis", 
        "phase_factor_random": "Randomize rotation around the chosen orientation axis", 
        "physics_type": "Particle physics type", 
        "react_event": "The event of target particles to react on", 
        "reactor_factor": "Let the vector away from the target particle's location give the particle a starting velocity", 
        "regrow_hair": "Regrow hair for each frame", 
        "render_step": "How many steps paths are rendered with (power of 2)", 
        "render_type": "How particles are rendered", 
        "rendered_child_count": "Number of children/parent for rendering", 
        "rotation_factor_random": "Randomize particle orientation", 
        "rotation_mode": "Particle orientation axis (does not affect Explode modifier's results)", 
        "roughness_1": "Amount of location dependent rough", 
        "roughness_1_size": "Size of location dependent rough", 
        "roughness_2": "Amount of random rough", 
        "roughness_2_size": "Size of random rough", 
        "roughness_2_threshold": "Amount of particles left untouched by random rough", 
        "roughness_curve": "(read-only)    Curve defining roughness", 
        "roughness_end_shape": "Shape of end point rough", 
        "roughness_endpoint": "Amount of end point rough", 
        "show_guide_hairs": "Show guide hairs", 
        "show_hair_grid": "Show hair simulation grid", 
        "show_health": "Draw boid health", 
        "show_number": "Show particle number", 
        "show_size": "Show particle size", 
        "show_unborn": "Show particles before they are emitted", 
        "show_velocity": "Show particle velocity", 
        "simplify_rate": "Speed of simplification", 
        "simplify_refsize": "Reference size in pixels, after which simplification begins", 
        "simplify_transition": "Transition period for fading out strands", 
        "simplify_viewport": "Speed of Simplification", 
        "size_random": "Give the particle size a random variation", 
        "subframes": "Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))", 
        "tangent_factor": "Let the surface tangent give the particle a starting velocity", 
        "tangent_phase": "Rotate the surface tangent", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "time_tweak": "A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)", 
        "timestep": "The simulation timestep per frame (seconds per frame)", 
        "trail_count": "Number of trail particles", 
        "type": "Particle Type", 
        "use_absolute_path_time": "Path timing is in absolute frames", 
        "use_adaptive_subframes": "Automatically set the number of subframes", 
        "use_advanced_hair": "Use full physics calculations for growing hair", 
        "use_clump_curve": "Use a curve to define clump tapering", 
        "use_clump_noise": "Create random clumps around the parent", 
        "use_dead": "Show particles after they have died", 
        "use_die_on_collision": "Particles die when they collide with a deflector object", 
        "use_dynamic_rotation": "Particle rotations are affected by collisions and effectors", 
        "use_emit_random": "Emit in random order of elements", 
        "use_even_distribution": "Use even distribution from faces based on face areas or edge lengths", 
        "use_global_dupli": "Use object's global coordinates for duplication", 
        "use_group_count": "Use object multiple times in the same group", 
        "use_group_pick_random": "Pick objects from group randomly", 
        "use_hair_bspline": "Interpolate hair using B-Splines", 
        "use_modifier_stack": "Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)", 
        "use_multiply_size_mass": "Multiply mass by particle size", 
        "use_parent_particles": "Render parent particles", 
        "use_react_multiple": "React multiple times", 
        "use_react_start_end": "Give birth to unreacted particles eventually", 
        "use_render_adaptive": "Draw steps of the particle path", 
        "use_render_emitter": "Render emitter Object also", 
        "use_rotation_dupli": "Use object's rotation for duplication (global x-axis is aligned particle rotation axis)", 
        "use_rotations": "Calculate particle rotations", 
        "use_roughness_curve": "Use a curve to define roughness", 
        "use_scale_dupli": "Use object's scale for duplication", 
        "use_self_effect": "Particle effectors affect themselves", 
        "use_simplify": "Remove child strands as the object becomes smaller on the screen", 
        "use_size_deflect": "Use particle's size in deflection", 
        "use_strand_primitive": "Use the strand primitive for rendering", 
        "use_velocity_length": "Multiply line length by particle speed", 
        "use_whole_group": "Use whole group at once", 
        "userjit": "Emission locations / face (0 = automatic)", 
        "virtual_parents": "Relative amount of virtual parents"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ParticleSettingsTextureSlot": {
      "fields": {
        "clump_factor": "Amount texture affects child clump", 
        "damp_factor": "Amount texture affects particle damping", 
        "density_factor": "Amount texture affects particle density", 
        "field_factor": "Amount texture affects particle force fields", 
        "gravity_factor": "Amount texture affects particle gravity", 
        "kink_amp_factor": "Amount texture affects child kink amplitude", 
        "kink_freq_factor": "Amount texture affects child kink frequency", 
        "length_factor": "Amount texture affects child hair length", 
        "life_factor": "Amount texture affects particle life time", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "rough_factor": "Amount texture affects child roughness", 
        "size_factor": "Amount texture affects physical particle size", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "time_factor": "Amount texture affects particle emission time", 
        "use_map_clump": "Affect the child clumping", 
        "use_map_damp": "Affect the particle velocity damping", 
        "use_map_density": "Affect the density of the particles", 
        "use_map_field": "Affect the particle force fields", 
        "use_map_gravity": "Affect the particle gravity", 
        "use_map_kink_amp": "Affect the child kink amplitude", 
        "use_map_kink_freq": "Affect the child kink frequency", 
        "use_map_length": "Affect the child hair length", 
        "use_map_life": "Affect the life time of the particles", 
        "use_map_rough": "Affect the child rough", 
        "use_map_size": "Affect the particle size", 
        "use_map_time": "Affect the emission time of the particles", 
        "use_map_velocity": "Affect the particle initial velocity", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "velocity_factor": "Amount texture affects particle initial velocity"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "ParticleSystem": {
      "fields": {
        "active_particle_target": "(read-only)", 
        "billboard_normal_uv": "UV map to control billboard normals", 
        "billboard_split_uv": "UV map to control billboard splitting", 
        "billboard_time_index_uv": "UV map to control billboard time index (X-Y)", 
        "child_particles": "(read-only)    Child particles generated by the particle system", 
        "child_seed": "Offset in the random number table for child particles, to get a different randomized result", 
        "cloth": "(read-only)    Cloth dynamics for hair", 
        "dt_frac": "(read-only)    The current simulation time step size, as a fraction of a frame", 
        "has_multiple_caches": "(read-only)    Particle system has multiple point caches", 
        "invert_vertex_group_clump": "Negate the effect of the clump vertex group", 
        "invert_vertex_group_density": "Negate the effect of the density vertex group", 
        "invert_vertex_group_field": "Negate the effect of the field vertex group", 
        "invert_vertex_group_kink": "Negate the effect of the kink vertex group", 
        "invert_vertex_group_length": "Negate the effect of the length vertex group", 
        "invert_vertex_group_rotation": "Negate the effect of the rotation vertex group", 
        "invert_vertex_group_roughness_1": "Negate the effect of the roughness 1 vertex group", 
        "invert_vertex_group_roughness_2": "Negate the effect of the roughness 2 vertex group", 
        "invert_vertex_group_roughness_end": "Negate the effect of the roughness end vertex group", 
        "invert_vertex_group_size": "Negate the effect of the size vertex group", 
        "invert_vertex_group_tangent": "Negate the effect of the tangent vertex group", 
        "invert_vertex_group_velocity": "Negate the effect of the velocity vertex group", 
        "is_editable": "(read-only)    Particle system can be edited in particle mode", 
        "is_edited": "(read-only)    Particle system has been edited in particle mode", 
        "is_global_hair": "(read-only)    Hair keys are in global coordinate space", 
        "name": "Particle system name", 
        "parent": "Use this object's coordinate system instead of global coordinate system", 
        "particles": "(read-only)    Particles generated by the particle system", 
        "point_cache": "(read-only)", 
        "reactor_target_object": "For reactor systems, the object that has the target particle system (empty if same object)", 
        "reactor_target_particle_system": "For reactor systems, index of particle system on the target object", 
        "seed": "Offset in the random number table, to get a different randomized result", 
        "settings": "Particle system settings", 
        "targets": "(read-only)    Target particle systems", 
        "use_hair_dynamics": "Enable hair dynamics using cloth simulation", 
        "use_keyed_timing": "Use key times", 
        "vertex_group_clump": "Vertex group to control clump", 
        "vertex_group_density": "Vertex group to control density", 
        "vertex_group_field": "Vertex group to control field", 
        "vertex_group_kink": "Vertex group to control kink", 
        "vertex_group_length": "Vertex group to control length", 
        "vertex_group_rotation": "Vertex group to control rotation", 
        "vertex_group_roughness_1": "Vertex group to control roughness 1", 
        "vertex_group_roughness_2": "Vertex group to control roughness 2", 
        "vertex_group_roughness_end": "Vertex group to control roughness end", 
        "vertex_group_size": "Vertex group to control size", 
        "vertex_group_tangent": "Vertex group to control tangent", 
        "vertex_group_velocity": "Vertex group to control velocity"
      }
    }, 
    "ParticleSystemModifier": {
      "fields": {
        "particle_system": "(read-only)    Particle System that this modifier controls"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ParticleSystems": {
      "fields": {
        "active": "(read-only)    Active particle system being displayed", 
        "active_index": "Index of active particle system slot"
      }
    }, 
    "ParticleTarget": {
      "fields": {
        "is_valid": "Keyed particles target is valid", 
        "name": "(read-only)    Particle target name", 
        "object": "The object that has the target particle system (empty if same object)", 
        "system": "The index of particle system on the target object"
      }
    }, 
    "PathCompare": {
      "fields": {
        "use_glob": "Enable wildcard globbing"
      }
    }, 
    "PivotConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "offset": "Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point", 
        "rotation_range": "Rotation range on which pivoting should occur", 
        "target": "Target Object, defining the position of the pivot when defined", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_relative_location": "Offset will be an absolute point in space instead of relative to the target"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "PointCache": {
      "fields": {
        "compression": "Compression method to be used", 
        "filepath": "Cache file path", 
        "frame_end": "Frame on which the simulation stops", 
        "frame_start": "Frame on which the simulation starts", 
        "frame_step": "Number of frames between cached frames", 
        "index": "Index number of cache files", 
        "info": "(read-only)    Info on current cache status", 
        "is_baked": "(read-only)", 
        "is_baking": "(read-only)", 
        "is_frame_skip": "(read-only)", 
        "is_outdated": "(read-only)", 
        "name": "Cache name", 
        "point_caches": "(read-only)    Point cache list", 
        "use_disk_cache": "Save cache files to disk (.blend file must be saved first)", 
        "use_external": "Read cache from an external location", 
        "use_library_path": "Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)"
      }
    }, 
    "PointDensity": {
      "fields": {
        "color_ramp": "(read-only)", 
        "falloff": "Method of attenuating density by distance from the point", 
        "falloff_curve": "(read-only)", 
        "falloff_soft": "Softness of the 'soft' falloff option", 
        "falloff_speed_scale": "Multiplier to bring particle speed within an acceptable range", 
        "noise_basis": "Noise formula used for turbulence", 
        "object": "Object to take point data from", 
        "particle_cache_space": "Coordinate system to cache particles in", 
        "particle_color_source": "Data to derive color results from", 
        "particle_system": "Particle System to render as points", 
        "point_source": "Point data to use as renderable point density", 
        "radius": "Radius from the shaded sample to look for points within", 
        "speed_scale": "Multiplier to bring particle speed within an acceptable range", 
        "turbulence_depth": "Level of detail in the added turbulent noise", 
        "turbulence_influence": "Method for driving added turbulent noise", 
        "turbulence_scale": "Scale of the added turbulent noise", 
        "turbulence_strength": "Strength of the added turbulent noise", 
        "use_falloff_curve": "Use a custom falloff curve", 
        "use_turbulence": "Add directed noise to the density at render-time", 
        "vertex_attribute_name": "Vertex attribute to use for color", 
        "vertex_cache_space": "Coordinate system to cache vertices in", 
        "vertex_color_source": "Data to derive color results from"
      }
    }, 
    "PointDensityTexture": {
      "fields": {
        "point_density": "(read-only)    The point density settings associated with this texture"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "PointerProperty": {
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "PointLamp": {
      "fields": {
        "compression_threshold": "Deep shadow map compression threshold", 
        "constant_coefficient": "Constant distance attenuation coefficient", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "falloff_type": "Intensity Decay with distance", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "linear_attenuation": "Linear distance attenuation", 
        "linear_coefficient": "Linear distance attenuation coefficient", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "quadratic_coefficient": "Quadratic distance attenuation coefficient", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "use_sphere": "Set light intensity to zero beyond lamp distance"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "Pose": {
      "fields": {
        "animation_visualization": "(read-only)    Animation data for this data-block", 
        "bone_groups": "(read-only)    Groups of the bones", 
        "bones": "(read-only)    Individual pose bones for the armature", 
        "ik_param": "(read-only)    Parameters for IK solver", 
        "ik_solver": "Selection of IK solver for IK chain"
      }
    }, 
    "PoseBone": {
      "fields": {
        "bbone_curveinx": "X-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveiny": "Y-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveoutx": "X-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_curveouty": "Y-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_custom_handle_end": "Bone that serves as the end handle for the B-Bone curve", 
        "bbone_custom_handle_start": "Bone that serves as the start handle for the B-Bone curve", 
        "bbone_rollin": "Roll offset for the start of the B-Bone, adjusts twist", 
        "bbone_rollout": "Roll offset for the end of the B-Bone, adjusts twist", 
        "bbone_scalein": "Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleout": "Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bone": "(read-only)    Bone associated with this PoseBone", 
        "bone_group": "Bone Group this pose channel belongs to", 
        "bone_group_index": "Bone Group this pose channel belongs to (0=no group)", 
        "child": "(read-only)    Child of this pose bone", 
        "constraints": "(read-only)    Constraints that act on this PoseChannel", 
        "custom_shape": "Object that defines custom draw type for this bone", 
        "custom_shape_scale": "Adjust the size of the custom shape", 
        "custom_shape_transform": "Bone that defines the display transform of this custom shape", 
        "head": "(read-only)    Location of head of the channel's bone", 
        "ik_linear_weight": "Weight of scale constraint for IK", 
        "ik_max_x": "Maximum angles for IK Limit", 
        "ik_max_y": "Maximum angles for IK Limit", 
        "ik_max_z": "Maximum angles for IK Limit", 
        "ik_min_x": "Minimum angles for IK Limit", 
        "ik_min_y": "Minimum angles for IK Limit", 
        "ik_min_z": "Minimum angles for IK Limit", 
        "ik_rotation_weight": "Weight of rotation constraint for IK", 
        "ik_stiffness_x": "IK stiffness around the X axis", 
        "ik_stiffness_y": "IK stiffness around the Y axis", 
        "ik_stiffness_z": "IK stiffness around the Z axis", 
        "ik_stretch": "Allow scaling of the bone for IK", 
        "is_in_ik_chain": "(read-only)    Is part of an IK chain", 
        "lock_ik_x": "Disallow movement around the X axis", 
        "lock_ik_y": "Disallow movement around the Y axis", 
        "lock_ik_z": "Disallow movement around the Z axis", 
        "lock_location": "Lock editing of location in the interface", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "lock_scale": "Lock editing of scale in the interface", 
        "matrix": "Final 4x4 matrix after constraints and drivers are applied (object space)", 
        "matrix_basis": "Alternative access to location/scale/rotation relative to the parent and own rest bone", 
        "matrix_channel": "(read-only)    4x4 matrix, before constraints", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "parent": "(read-only)    Parent of this pose bone", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "rotation_euler": "Rotation in Eulers", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "tail": "(read-only)    Location of tail of the channel's bone", 
        "use_bbone_custom_handles": "Use custom reference bones as handles for B-Bones instead of next/previous bones, leave these blank to use only B-Bone offset properties to control the shape", 
        "use_bbone_relative_end_handle": "Treat custom end handle position as a relative value", 
        "use_bbone_relative_start_handle": "Treat custom start handle position as a relative value", 
        "use_custom_shape_bone_size": "Scale the custom object by the bone length", 
        "use_ik_limit_x": "Limit movement around the X axis", 
        "use_ik_limit_y": "Limit movement around the Y axis", 
        "use_ik_limit_z": "Limit movement around the Z axis", 
        "use_ik_linear_control": "Apply channel size as IK constraint if stretching is enabled", 
        "use_ik_rotation_control": "Apply channel rotation as IK constraint"
      }
    }, 
    "PoseBoneConstraints": {
      "fields": {
        "active": "Active PoseChannel constraint"
      }
    }, 
    "Property": {
      "fields": {
        "description": "(read-only)    Description of the property for tooltips", 
        "icon": "(read-only)    Icon of the item", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "is_animatable": "(read-only)    Property is animatable through RNA", 
        "is_argument_optional": "(read-only)    True when the property is optional in a Python function implementing an RNA function", 
        "is_enum_flag": "(read-only)    True when multiple enums", 
        "is_hidden": "(read-only)    True when the property is hidden", 
        "is_library_editable": "(read-only)    Property is editable from linked instances (changes not saved)", 
        "is_never_none": "(read-only)    True when this value can't be set to None", 
        "is_output": "(read-only)    True when this property is an output value from an RNA function", 
        "is_readonly": "(read-only)    Property is editable through RNA", 
        "is_registered": "(read-only)    Property is registered as part of type registration", 
        "is_registered_optional": "(read-only)    Property is optionally registered as part of type registration", 
        "is_required": "(read-only)    False when this property is an optional argument in an RNA function", 
        "is_runtime": "(read-only)    Property has been dynamically created at runtime", 
        "is_skip_save": "(read-only)    True when the property is not saved in presets", 
        "name": "(read-only)    Human readable name", 
        "srna": "(read-only)    Struct definition used for properties assigned to this item", 
        "subtype": "(read-only)    Semantic interpretation of the property", 
        "translation_context": "(read-only)    Translation context of the property's name", 
        "type": "(read-only)    Data type of the property", 
        "unit": "(read-only)    Type of units for this property"
      }
    }, 
    "PropertyActuator": {
      "fields": {
        "object": "Copy from this Object", 
        "object_property": "Copy this property", 
        "property": "The name of the property", 
        "value": "The name of the property or the value to use (use \"\" around strings)"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "PropertyGroup": {
      "fields": {
        "name": "Unique name used in the code and scripting"
      }
    }, 
    "PropertyGroupItem": {
      "fields": {
        "collection": "(read-only)", 
        "group": "(read-only)", 
        "id": "(read-only)", 
        "idp_array": "(read-only)"
      }
    }, 
    "PropertySensor": {
      "fields": {
        "evaluation_type": "Type of property evaluation", 
        "value": "Check for this value in types in Equal, Not Equal, Less Than and Greater Than types", 
        "value_max": "Maximum value in Interval type", 
        "value_min": "Minimum value in Interval type"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "PythonConstraint": {
      "fields": {
        "has_script_error": "(read-only)    The linked Python script has thrown an error", 
        "target_count": "Usually only 1-3 are needed", 
        "targets": "(read-only)    Target Objects", 
        "text": "The text object that contains the Python script", 
        "use_targets": "Use the targets indicated in the constraint panel"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "PythonController": {
      "fields": {
        "mode": "Python script type (textblock or module - faster)", 
        "module": "Module name and function to run, e.g. \"someModule.main\" (internal texts and external python files can be used)", 
        "text": "Text data-block with the python script", 
        "use_debug": "Continuously reload the module from disk for editing external modules without restarting"
      }, 
      "inherits": [
        "Controller"
      ]
    }, 
    "RadarSensor": {
      "fields": {
        "angle": "Opening angle of the radar cone", 
        "axis": "Along which axis the radar cone is cast", 
        "distance": "Depth of the radar cone", 
        "property": "Only look for objects with this property (blank = all objects)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "RandomActuator": {
      "fields": {
        "chance": "Pick a number between 0 and 1, success if it's below this value", 
        "distribution": "Choose the type of distribution", 
        "float_max": "Choose a number from a range: upper boundary of the range", 
        "float_mean": "A normal distribution: mean of the distribution", 
        "float_min": "Choose a number from a range: lower boundary of the range", 
        "float_value": "Always return this number", 
        "half_life_time": "Negative exponential dropoff", 
        "int_max": "Choose a number from a range: upper boundary of the range", 
        "int_mean": "Expected mean value of the distribution", 
        "int_min": "Choose a number from a range: lower boundary of the range", 
        "int_value": "Always return this number", 
        "property": "Assign the random value to this property", 
        "seed": "Initial seed of the random generator, use Python for more freedom (choose 0 for not random)", 
        "standard_derivation": "A normal distribution: standard deviation of the distribution", 
        "use_always_true": "Always false or always true"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "RandomSensor": {
      "fields": {
        "seed": "Initial seed of the generator (choose 0 for not random)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "RaySensor": {
      "fields": {
        "axis": "Along which axis the ray is cast", 
        "material": "Only look for objects with this material (blank = all objects)", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "range": "Sense objects no farther than this distance", 
        "ray_type": "Toggle collision on material or property", 
        "use_x_ray": "Toggle X-Ray option (see through objects that don't have the property)"
      }, 
      "inherits": [
        "Sensor"
      ]
    }, 
    "Region": {
      "fields": {
        "height": "(read-only)    Region height", 
        "id": "(read-only)    Unique ID for this region", 
        "type": "(read-only)    Type of this region", 
        "view2d": "(read-only)    2D view of the region", 
        "width": "(read-only)    Region width", 
        "x": "(read-only)    The window relative vertical location of the region", 
        "y": "(read-only)    The window relative horizontal location of the region"
      }
    }, 
    "RegionView3D": {
      "fields": {
        "lock_rotation": "Lock view rotation in side views", 
        "perspective_matrix": "(read-only)    Current perspective matrix (``window_matrix * view_matrix``)", 
        "show_sync_view": "Sync view position between side views", 
        "use_box_clip": "Clip objects based on what's visible in other side views", 
        "view_camera_offset": "View shift in camera view", 
        "view_camera_zoom": "Zoom factor in camera view", 
        "view_distance": "Distance to the view location", 
        "view_location": "View pivot location", 
        "view_matrix": "Current view matrix", 
        "view_perspective": "View Perspective", 
        "view_rotation": "Rotation in quaternions (keep normalized)", 
        "window_matrix": "(read-only)    Current window matrix"
      }
    }, 
    "RemeshModifier": {
      "fields": {
        "octree_depth": "Resolution of the octree; higher values give finer details", 
        "scale": "The ratio of the largest dimension of the model over the size of the grid", 
        "sharpness": "Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input", 
        "threshold": "If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "RenderEngine": {
      "fields": {
        "camera_override": "(read-only)", 
        "render": "(read-only)", 
        "resolution_x": "(read-only)", 
        "resolution_y": "(read-only)"
      }
    }, 
    "RenderLayer": {
      "fields": {
        "exclude_ambient_occlusion": "(read-only)    Exclude AO pass from combined", 
        "exclude_emit": "(read-only)    Exclude emission pass from combined", 
        "exclude_environment": "(read-only)    Exclude environment pass from combined", 
        "exclude_indirect": "(read-only)    Exclude indirect pass from combined", 
        "exclude_reflection": "(read-only)    Exclude raytraced reflection pass from combined", 
        "exclude_refraction": "(read-only)    Exclude raytraced refraction pass from combined", 
        "exclude_shadow": "(read-only)    Exclude shadow pass from combined", 
        "exclude_specular": "(read-only)    Exclude specular pass from combined", 
        "invert_zmask": "(read-only)    For Zmask, only render what is behind solid z values instead of in front", 
        "layers": "(read-only)    Scene layers included in this render layer", 
        "layers_exclude": "(read-only)    Exclude scene layers from having any influence", 
        "layers_zmask": "(read-only)    Zmask scene layers for solid faces", 
        "light_override": "(read-only)    Group to override all other lights in this render layer", 
        "material_override": "(read-only)    Material to override all other materials in this render layer", 
        "name": "(read-only)    Render layer name", 
        "passes": "(read-only)", 
        "use": "(read-only)    Disable or enable the render layer", 
        "use_all_z": "(read-only)    Fill in Z values for solid faces in invisible layers, for masking", 
        "use_ao": "(read-only)    Render AO in this Layer", 
        "use_edge_enhance": "(read-only)    Render Edge-enhance in this Layer (only works for Solid faces)", 
        "use_freestyle": "(read-only)    Render stylized strokes in this Layer", 
        "use_halo": "(read-only)    Render Halos in this Layer (on top of Solid)", 
        "use_pass_ambient_occlusion": "(read-only)    Deliver AO pass", 
        "use_pass_color": "(read-only)    Deliver shade-less color pass", 
        "use_pass_combined": "(read-only)    Deliver full combined RGBA buffer", 
        "use_pass_diffuse": "(read-only)    Deliver diffuse pass", 
        "use_pass_diffuse_color": "(read-only)    Deliver diffuse color pass", 
        "use_pass_diffuse_direct": "(read-only)    Deliver diffuse direct pass", 
        "use_pass_diffuse_indirect": "(read-only)    Deliver diffuse indirect pass", 
        "use_pass_emit": "(read-only)    Deliver emission pass", 
        "use_pass_environment": "(read-only)    Deliver environment lighting pass", 
        "use_pass_glossy_color": "(read-only)    Deliver glossy color pass", 
        "use_pass_glossy_direct": "(read-only)    Deliver glossy direct pass", 
        "use_pass_glossy_indirect": "(read-only)    Deliver glossy indirect pass", 
        "use_pass_indirect": "(read-only)    Deliver indirect lighting pass", 
        "use_pass_material_index": "(read-only)    Deliver material index pass", 
        "use_pass_mist": "(read-only)    Deliver mist factor pass (0.0-1.0)", 
        "use_pass_normal": "(read-only)    Deliver normal pass", 
        "use_pass_object_index": "(read-only)    Deliver object index pass", 
        "use_pass_reflection": "(read-only)    Deliver raytraced reflection pass", 
        "use_pass_refraction": "(read-only)    Deliver raytraced refraction pass", 
        "use_pass_shadow": "(read-only)    Deliver shadow pass", 
        "use_pass_specular": "(read-only)    Deliver specular pass", 
        "use_pass_subsurface_color": "(read-only)    Deliver subsurface color pass", 
        "use_pass_subsurface_direct": "(read-only)    Deliver subsurface direct pass", 
        "use_pass_subsurface_indirect": "(read-only)    Deliver subsurface indirect pass", 
        "use_pass_transmission_color": "(read-only)    Deliver transmission color pass", 
        "use_pass_transmission_direct": "(read-only)    Deliver transmission direct pass", 
        "use_pass_transmission_indirect": "(read-only)    Deliver transmission indirect pass", 
        "use_pass_uv": "(read-only)    Deliver texture UV pass", 
        "use_pass_vector": "(read-only)    Deliver speed vector pass", 
        "use_pass_z": "(read-only)    Deliver Z values pass", 
        "use_sky": "(read-only)    Render Sky in this Layer", 
        "use_solid": "(read-only)    Render Solid faces in this Layer", 
        "use_strand": "(read-only)    Render Strands in this Layer", 
        "use_zmask": "(read-only)    Only render what's in front of the solid z values", 
        "use_ztransp": "(read-only)    Render Z-Transparent faces in this Layer (on top of Solid and Halos)"
      }
    }, 
    "RenderLayers": {
      "fields": {
        "active": "Active Render Layer", 
        "active_index": "Active index in render layer array"
      }
    }, 
    "RenderPass": {
      "fields": {
        "channel_id": "(read-only)", 
        "channels": "(read-only)", 
        "fullname": "(read-only)", 
        "name": "(read-only)", 
        "view_id": "(read-only)"
      }
    }, 
    "RenderResult": {
      "fields": {
        "layers": "(read-only)", 
        "resolution_x": "(read-only)", 
        "resolution_y": "(read-only)", 
        "views": "(read-only)"
      }
    }, 
    "RenderSettings": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "antialiasing_samples": "Amount of anti-aliasing samples per pixel", 
        "bake": "(read-only)", 
        "bake_bias": "Bias towards faces further away from the object (in blender units)", 
        "bake_distance": "Maximum distance from active object to other object (in blender units)", 
        "bake_margin": "Extends the baked result as a post process filter", 
        "bake_normal_space": "Choose normal space for baking", 
        "bake_quad_split": "Choose the method used to split a quad into 2 triangles for baking", 
        "bake_samples": "Number of samples used for ambient occlusion baking from multires", 
        "bake_type": "Choose shading information to bake into the image", 
        "bake_user_scale": "Instead of automatically normalizing to 0..1, apply a user scale to the derivative map", 
        "border_max_x": "Maximum X value for the render border", 
        "border_max_y": "Maximum Y value for the render border", 
        "border_min_x": "Minimum X value for the render border", 
        "border_min_y": "Minimum Y value for the render border", 
        "display_mode": "Select where rendered images will be displayed", 
        "dither_intensity": "Amount of dithering noise added to the rendered image to break up banding", 
        "edge_color": "Edge color", 
        "edge_threshold": "Threshold for drawing outlines on geometry edges", 
        "engine": "Engine to use for rendering", 
        "ffmpeg": "(read-only)    FFmpeg related settings for the scene", 
        "field_order": "Order of video fields (select which lines get rendered first, to create smooth motion for TV output)", 
        "file_extension": "(read-only)    The file extension used for saving renders", 
        "filepath": "Directory/name to save animations, # characters defines the position and length of frame numbers", 
        "filter_size": "Width over which the reconstruction filter combines samples", 
        "fps": "Framerate, expressed in frames per second", 
        "fps_base": "Framerate base", 
        "frame_map_new": "How many frames the Map Old will last", 
        "frame_map_old": "Old mapping value in frames", 
        "has_multiple_engines": "(read-only)    More than one rendering engine is available", 
        "image_settings": "(read-only)", 
        "is_movie_format": "(read-only)    When true the format is a movie", 
        "layers": "(read-only)", 
        "line_thickness": "Line thickness in pixels", 
        "line_thickness_mode": "Line thickness mode for Freestyle line drawing", 
        "motion_blur_samples": "Number of scene samples to take with motion blur", 
        "motion_blur_shutter": "Time taken in frames between shutter open and close", 
        "motion_blur_shutter_curve": "(read-only)    Curve defining the shutter's openness over time", 
        "octree_resolution": "Resolution of raytrace accelerator, use higher resolutions for larger scenes", 
        "pixel_aspect_x": "Horizontal aspect ratio - for anamorphic or non-square pixel output", 
        "pixel_aspect_y": "Vertical aspect ratio - for anamorphic or non-square pixel output", 
        "pixel_filter_type": "Reconstruction filter used for combining anti-aliasing samples", 
        "preview_start_resolution": "Resolution to start rendering preview at, progressively increasing it to the full viewport size", 
        "raytrace_method": "Type of raytrace accelerator structure", 
        "resolution_percentage": "Percentage scale for render resolution", 
        "resolution_x": "Number of horizontal pixels in the rendered image", 
        "resolution_y": "Number of vertical pixels in the rendered image", 
        "sequencer_gl_preview": "Method to draw in the sequencer view", 
        "simplify_ao_sss": "Global approximate AO and SSS quality factor", 
        "simplify_child_particles": "Global child particles percentage", 
        "simplify_child_particles_render": "Global child particles percentage during rendering", 
        "simplify_shadow_samples": "Global maximum shadow samples", 
        "simplify_subdivision": "Global maximum subdivision level", 
        "simplify_subdivision_render": "Global maximum subdivision level during rendering", 
        "stamp_background": "Color to use behind stamp text", 
        "stamp_font_size": "Size of the font used when rendering stamp text", 
        "stamp_foreground": "Color to use for stamp text", 
        "stamp_note_text": "Custom text to appear in the stamp note", 
        "stereo_views": "(read-only)", 
        "threads": "Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)", 
        "threads_mode": "Determine the amount of render threads used", 
        "tile_x": "Horizontal tile size to use while rendering", 
        "tile_y": "Vertical tile size to use while rendering", 
        "use_antialiasing": "Render and combine multiple samples per pixel to prevent jagged edges", 
        "use_bake_antialiasing": "Enables Anti-aliasing", 
        "use_bake_clear": "Clear Images before baking", 
        "use_bake_lores_mesh": "Calculate heights against unsubdivided low resolution mesh", 
        "use_bake_multires": "Bake directly from multires object", 
        "use_bake_normalize": "With displacement normalize to the distance, with ambient occlusion normalize without using material settings", 
        "use_bake_selected_to_active": "Bake shading on the surface of selected objects to the active object", 
        "use_bake_to_vertex_color": "Bake to vertex colors instead of to a UV-mapped image", 
        "use_bake_user_scale": "Use a user scale for the derivative map", 
        "use_border": "Render a user-defined border region, within the frame size (note that this disables save_buffers and full_sample)", 
        "use_compositing": "Process the render result through the compositing pipeline, if compositing nodes are enabled", 
        "use_crop_to_border": "Crop the rendered frame to the defined border size", 
        "use_edge_enhance": "Create a toon outline around the edges of geometry", 
        "use_envmaps": "Calculate environment maps while rendering", 
        "use_fields": "Render image to two fields per frame, for interlaced TV output", 
        "use_fields_still": "Disable the time difference between fields", 
        "use_file_extension": "Add the file format extensions to the rendered file name (eg: filename + .jpg)", 
        "use_free_image_textures": "Free all image textures from memory after render, to save memory before compositing", 
        "use_freestyle": "Draw stylized strokes using Freestyle", 
        "use_full_sample": "Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)", 
        "use_game_engine": "(read-only)    Current rendering engine is a game engine", 
        "use_instances": "Instance support leads to effective memory reduction when using duplicates", 
        "use_local_coords": "Vertex coordinates are stored locally on each primitive (increases memory usage, but may have impact on speed)", 
        "use_lock_interface": "Lock interface during rendering in favor of giving more memory to the renderer", 
        "use_motion_blur": "Use multi-sampled 3D scene motion blur", 
        "use_multiview": "Use multiple views in the scene", 
        "use_overwrite": "Overwrite existing files while rendering", 
        "use_persistent_data": "Keep render data around for faster re-renders", 
        "use_placeholder": "Create empty placeholder files while rendering frames (similar to Unix 'touch')", 
        "use_raytrace": "Pre-calculate the raytrace accelerator and render raytracing effects", 
        "use_render_cache": "Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)", 
        "use_save_buffers": "Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)", 
        "use_sequencer": "Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist", 
        "use_sequencer_gl_textured_solid": "Draw face-assigned textures in solid draw method", 
        "use_shading_nodes": "(read-only)    Active render engine uses new shading nodes system", 
        "use_shadows": "Calculate shadows while rendering", 
        "use_simplify": "Enable simplification of scene for quicker preview renders", 
        "use_simplify_triangulate": "Disable non-planar quads being triangulated", 
        "use_single_layer": "Only render the active layer", 
        "use_spherical_stereo": "(read-only)    Active render engine supports spherical stereo rendering", 
        "use_sss": "Calculate sub-surface scattering in materials rendering", 
        "use_stamp": "Render the stamp info text in the rendered image", 
        "use_stamp_camera": "Include the name of the active camera in image metadata", 
        "use_stamp_date": "Include the current date in image metadata", 
        "use_stamp_filename": "Include the .blend filename in image metadata", 
        "use_stamp_frame": "Include the frame number in image metadata", 
        "use_stamp_labels": "Draw stamp labels (\"Camera\" in front of camera name, etc.)", 
        "use_stamp_lens": "Include the active camera's lens in image metadata", 
        "use_stamp_marker": "Include the name of the last marker in image metadata", 
        "use_stamp_memory": "Include the peak memory usage in image metadata", 
        "use_stamp_note": "Include a custom note in image metadata", 
        "use_stamp_render_time": "Include the render time in image metadata", 
        "use_stamp_scene": "Include the name of the active scene in image metadata", 
        "use_stamp_sequencer_strip": "Include the name of the foreground sequence strip in image metadata", 
        "use_stamp_strip_meta": "Use metadata from the strips in the sequencer", 
        "use_stamp_time": "Include the rendered frame timecode as HH:MM:SS.FF in image metadata", 
        "use_textures": "Use textures to affect material properties", 
        "use_world_space_shading": "Use world space interpretation of lighting data for node materials", 
        "views": "(read-only)"
      }
    }, 
    "RenderSlot": {
      "fields": {
        "name": "Render slot name"
      }
    }, 
    "RenderSlots": {
      "fields": {
        "active": "Active render slot of the image", 
        "active_index": "Index of an active render slot of the image"
      }
    }, 
    "RenderView": {
      "fields": {
        "name": "(read-only)"
      }
    }, 
    "RenderViews": {
      "fields": {
        "active": "Active Render View", 
        "active_index": "Active index in render view array"
      }
    }, 
    "RigidBodyConstraint": {
      "fields": {
        "breaking_threshold": "Impulse threshold that must be reached for the constraint to break", 
        "disable_collisions": "Disable collisions between constrained rigid bodies", 
        "enabled": "Enable this constraint", 
        "limit_ang_x_lower": "Lower limit of X axis rotation", 
        "limit_ang_x_upper": "Upper limit of X axis rotation", 
        "limit_ang_y_lower": "Lower limit of Y axis rotation", 
        "limit_ang_y_upper": "Upper limit of Y axis rotation", 
        "limit_ang_z_lower": "Lower limit of Z axis rotation", 
        "limit_ang_z_upper": "Upper limit of Z axis rotation", 
        "limit_lin_x_lower": "Lower limit of X axis translation", 
        "limit_lin_x_upper": "Upper limit of X axis translation", 
        "limit_lin_y_lower": "Lower limit of Y axis translation", 
        "limit_lin_y_upper": "Upper limit of Y axis translation", 
        "limit_lin_z_lower": "Lower limit of Z axis translation", 
        "limit_lin_z_upper": "Upper limit of Z axis translation", 
        "motor_ang_max_impulse": "Maximum angular motor impulse", 
        "motor_ang_target_velocity": "Target angular motor velocity", 
        "motor_lin_max_impulse": "Maximum linear motor impulse", 
        "motor_lin_target_velocity": "Target linear motor velocity", 
        "object1": "First Rigid Body Object to be constrained", 
        "object2": "Second Rigid Body Object to be constrained", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "spring_damping_ang_x": "Damping on the X rotational axis", 
        "spring_damping_ang_y": "Damping on the Y rotational axis", 
        "spring_damping_ang_z": "Damping on the Z rotational axis", 
        "spring_damping_x": "Damping on the X axis", 
        "spring_damping_y": "Damping on the Y axis", 
        "spring_damping_z": "Damping on the Z axis", 
        "spring_stiffness_ang_x": "Stiffness on the X rotational axis", 
        "spring_stiffness_ang_y": "Stiffness on the Y rotational axis", 
        "spring_stiffness_ang_z": "Stiffness on the Z rotational axis", 
        "spring_stiffness_x": "Stiffness on the X axis", 
        "spring_stiffness_y": "Stiffness on the Y axis", 
        "spring_stiffness_z": "Stiffness on the Z axis", 
        "type": "Type of Rigid Body Constraint", 
        "use_breaking": "Constraint can be broken if it receives an impulse above the threshold", 
        "use_limit_ang_x": "Limit rotation around X axis", 
        "use_limit_ang_y": "Limit rotation around Y axis", 
        "use_limit_ang_z": "Limit rotation around Z axis", 
        "use_limit_lin_x": "Limit translation on X axis", 
        "use_limit_lin_y": "Limit translation on Y axis", 
        "use_limit_lin_z": "Limit translation on Z axis", 
        "use_motor_ang": "Enable angular motor", 
        "use_motor_lin": "Enable linear motor", 
        "use_override_solver_iterations": "Override the number of solver iterations for this constraint", 
        "use_spring_ang_x": "Enable spring on X rotational axis", 
        "use_spring_ang_y": "Enable spring on Y rotational axis", 
        "use_spring_ang_z": "Enable spring on Z rotational axis", 
        "use_spring_x": "Enable spring on X axis", 
        "use_spring_y": "Enable spring on Y axis", 
        "use_spring_z": "Enable spring on Z axis"
      }
    }, 
    "RigidBodyJointConstraint": {
      "fields": {
        "axis_x": "Rotate pivot on X axis", 
        "axis_y": "Rotate pivot on Y axis", 
        "axis_z": "Rotate pivot on Z axis", 
        "child": "Child object", 
        "pivot_x": "Offset pivot on X", 
        "pivot_y": "Offset pivot on Y", 
        "pivot_z": "Offset pivot on Z", 
        "show_pivot": "Display the pivot point and rotation in 3D view", 
        "target": "Target Object", 
        "use_angular_limit_x": "Use minimum/maximum X angular limit", 
        "use_angular_limit_y": "Use minimum/maximum Y angular limit", 
        "use_angular_limit_z": "Use minimum/maximum Z angular limit", 
        "use_limit_x": "Use minimum/maximum X limit", 
        "use_limit_y": "Use minimum/maximum y limit", 
        "use_limit_z": "Use minimum/maximum z limit", 
        "use_linked_collision": "Disable collision between linked bodies"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "RigidBodyObject": {
      "fields": {
        "angular_damping": "Amount of angular velocity that is lost over time", 
        "collision_groups": "Collision Groups Rigid Body belongs to", 
        "collision_margin": "Threshold of distance near surface where collisions are still considered (best results when non-zero)", 
        "collision_shape": "Collision Shape of object in Rigid Body Simulations", 
        "deactivate_angular_velocity": "Angular Velocity below which simulation stops simulating object", 
        "deactivate_linear_velocity": "Linear Velocity below which simulation stops simulating object", 
        "enabled": "Rigid Body actively participates to the simulation", 
        "friction": "Resistance of object to movement", 
        "kinematic": "Allow rigid body to be controlled by the animation system", 
        "linear_damping": "Amount of linear velocity that is lost over time", 
        "mass": "How much the object 'weighs' irrespective of gravity", 
        "mesh_source": "Source of the mesh used to create collision shape", 
        "restitution": "Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)", 
        "type": "Role of object in Rigid Body Simulations", 
        "use_deactivation": "Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)", 
        "use_deform": "Rigid body deforms during simulation", 
        "use_margin": "Use custom collision margin (some shapes will have a visible gap around them)", 
        "use_start_deactivated": "Deactivate rigid body at the start of the simulation"
      }
    }, 
    "RigidBodyWorld": {
      "fields": {
        "constraints": "Group containing rigid body constraint objects", 
        "effector_weights": "(read-only)", 
        "enabled": "Simulation will be evaluated", 
        "group": "Group containing objects participating in this simulation", 
        "point_cache": "(read-only)", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "steps_per_second": "Number of simulation steps taken per second (higher values are more accurate but slower)", 
        "time_scale": "Change the speed of the simulation", 
        "use_split_impulse": "Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)"
      }
    }, 
    "Scene": {
      "fields": {
        "active_clip": "Active movie clip used for constraints and viewport drawing", 
        "active_layer": "(read-only)    Active scene layer index", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "audio_distance_model": "Distance model for distance attenuation calculation", 
        "audio_doppler_factor": "Pitch factor for Doppler effect calculation", 
        "audio_doppler_speed": "Speed of sound for Doppler effect calculation", 
        "audio_volume": "Audio volume", 
        "background_set": "Background set scene", 
        "camera": "Active camera, used for rendering the scene", 
        "cursor_location": "3D cursor location", 
        "cycles": "(read-only)    Cycles render settings", 
        "cycles_curves": "(read-only)    Cycles hair rendering settings", 
        "depsgraph": "(read-only)    Dependencies in the scene data", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "frame_current": "Current Frame, to update animation data from python frame_set() instead", 
        "frame_current_final": "(read-only)    Current frame with subframe and time remapping applied", 
        "frame_end": "Final frame of the playback/rendering range", 
        "frame_preview_end": "Alternative end frame for UI playback", 
        "frame_preview_start": "Alternative start frame for UI playback", 
        "frame_start": "First frame of the playback/rendering range", 
        "frame_step": "Number of frames to skip forward while rendering/playing back each frame", 
        "game_settings": "(read-only)", 
        "gravity": "Constant acceleration in a given direction", 
        "grease_pencil": "Grease Pencil data-block", 
        "is_nla_tweakmode": "(read-only)    Whether there is any action referenced by NLA being edited (strictly read-only)", 
        "keying_sets": "(read-only)    Absolute Keying Sets for this Scene", 
        "keying_sets_all": "(read-only)    All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)", 
        "layers": "Visible layers - Shift-Click/Drag to select multiple layers", 
        "lock_frame_selection_to_range": "Don't allow frame to be selected with mouse outside of frame range", 
        "node_tree": "(read-only)    Compositing node tree", 
        "object_bases": "(read-only)", 
        "objects": "(read-only)", 
        "orientations": "(read-only)", 
        "render": "(read-only)", 
        "rigidbody_world": "(read-only)", 
        "safe_areas": "(read-only)", 
        "sequence_editor": "(read-only)", 
        "sequencer_colorspace_settings": "(read-only)    Settings of color space sequencer is working in", 
        "show_keys_from_selected_only": "Consider keyframes for active Object and/or its selected bones only (in timeline and when jumping between keyframes)", 
        "show_subframe": "Show current scene subframe and allow set it using interface tools", 
        "sync_mode": "How to sync playback", 
        "timeline_markers": "(read-only)    Markers used in all timelines for the current scene", 
        "tool_settings": "(read-only)", 
        "unit_settings": "(read-only)    Unit editing settings", 
        "use_audio": "Play back of audio from Sequence Editor will be muted", 
        "use_audio_scrub": "Play audio from Sequence Editor while scrubbing", 
        "use_audio_sync": "Play back and sync with audio clock, dropping frames if frame display is too slow", 
        "use_frame_drop": "Play back dropping frames if frame display is too slow", 
        "use_gravity": "Use global gravity for all dynamics", 
        "use_nodes": "Enable the compositing node tree", 
        "use_preview_range": "Use an alternative start/end frame range for animation playback and OpenGL renders instead of the Render properties start/end frame range", 
        "use_stamp_note": "User defined note for the render stamping", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "world": "World used for rendering the scene"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SceneActuator": {
      "fields": {
        "camera": "Set this Camera (leave empty to refer to self object)", 
        "scene": "Scene to be added/removed/paused/resumed"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "SceneBases": {
      "fields": {
        "active": "Active object base in the scene"
      }
    }, 
    "SceneGameData": {
      "fields": {
        "activity_culling_box_radius": "Radius of the activity bubble, in Manhattan length (objects outside the box are activity-culled)", 
        "deactivation_angular_threshold": "Angular velocity that an object must be below before the deactivation timer can start", 
        "deactivation_linear_threshold": "Linear velocity that an object must be below before the deactivation timer can start", 
        "deactivation_time": "Amount of time (in seconds) after which objects with a velocity less than the given threshold will deactivate (0.0 means no deactivation)", 
        "depth": "Display bit depth of full screen display", 
        "dome_angle": "Field of View of the Dome - it only works in mode Fisheye and Truncated", 
        "dome_buffer_resolution": "Buffer Resolution - decrease it to increase speed", 
        "dome_mode": "Dome physical configurations", 
        "dome_tessellation": "Tessellation level - check the generated mesh in wireframe mode", 
        "dome_text": "Custom Warp Mesh data file", 
        "dome_tilt": "Camera rotation in horizontal axis", 
        "exit_key": "The key that exits the Game Engine", 
        "fps": "Nominal number of game frames per second (physics fixed timestep = 1/fps, independently of actual frame rate)", 
        "frame_color": "Set color of the bars", 
        "frame_type": "Select the type of Framing you want", 
        "frequency": "Display clock frequency of fullscreen display", 
        "level_height": "Max difference in heights of obstacles to enable their interaction", 
        "logic_step_max": "Maximum number of logic frame per game frame if graphics slows down the game, higher value allows better synchronization with physics", 
        "material_mode": "Material mode to use for rendering", 
        "obstacle_simulation": "Simulation used for obstacle avoidance in the game engine", 
        "occlusion_culling_resolution": "Size of the occlusion buffer, use higher value for better precision (slower)", 
        "physics_engine": "Physics engine used for physics simulation in the game engine", 
        "physics_gravity": "Gravitational constant used for physics simulation in the game engine", 
        "physics_step_max": "Maximum number of physics step per game frame if graphics slows down the game, higher value allows physics to keep up with realtime", 
        "physics_step_sub": "Number of simulation substep per physic timestep, higher value give better physics precision", 
        "raster_storage": "Set the storage mode used by the rasterizer", 
        "recast_data": "(read-only)", 
        "resolution_x": "Number of horizontal pixels in the screen", 
        "resolution_y": "Number of vertical pixels in the screen", 
        "samples": "The number of AA Samples to use for MSAA", 
        "scene_hysteresis_percentage": "Minimum distance change required to transition to the previous level of detail", 
        "show_debug_properties": "Show properties marked for debugging while the game runs", 
        "show_framerate_profile": "Show framerate and profiling information while the game runs", 
        "show_fullscreen": "Start player in a new fullscreen display", 
        "show_mouse": "Start player with a visible mouse cursor", 
        "show_obstacle_simulation": "Enable debug visualization for obstacle simulation", 
        "show_physics_visualization": "Show a visualization of physics bounds and interactions", 
        "stereo_eye_separation": "Set the distance between the eyes - the camera focal distance/30 should be fine", 
        "stereo_mode": "Stereographic techniques", 
        "use_activity_culling": "Activity culling is enabled", 
        "use_animation_record": "Record animation to F-Curves", 
        "use_auto_start": "Automatically start game at load time", 
        "use_deprecation_warnings": "Print warnings when using deprecated features in the python API", 
        "use_desktop": "Use the current desktop resolution in fullscreen mode", 
        "use_display_lists": "Use display lists to speed up rendering by keeping geometry on the GPU", 
        "use_frame_rate": "Respect the frame rate from the Physics panel in the world properties rather than rendering as many frames as possible", 
        "use_glsl_color_management": "Use color management for GLSL rendering", 
        "use_glsl_environment_lighting": "Use environment lighting for GLSL rendering", 
        "use_glsl_extra_textures": "Use extra textures like normal or specular maps for GLSL rendering", 
        "use_glsl_lights": "Use lights for GLSL rendering", 
        "use_glsl_nodes": "Use nodes for GLSL rendering", 
        "use_glsl_ramps": "Use ramps for GLSL rendering", 
        "use_glsl_shaders": "Use shaders for GLSL rendering", 
        "use_glsl_shadows": "Use shadows for GLSL rendering", 
        "use_material_caching": "Cache materials in the converter (this is faster, but can cause problems with older Singletexture and Multitexture games)", 
        "use_occlusion_culling": "Use optimized Bullet DBVT tree for view frustum and occlusion culling (more efficient, but it can waste unnecessary CPU if the scene doesn't have occluder objects)", 
        "use_restrict_animation_updates": "Restrict the number of animation updates to the animation FPS (this is better for performance, but can cause issues with smooth playback)", 
        "use_scene_hysteresis": "Use LoD Hysteresis setting for the scene", 
        "vsync": "Change vsync settings"
      }
    }, 
    "SceneGameRecastData": {
      "fields": {
        "agent_height": "Minimum height where the agent can still walk", 
        "agent_radius": "Radius of the agent", 
        "cell_height": "Rasterized cell height", 
        "cell_size": "Rasterized cell size", 
        "climb_max": "Maximum height between grid cells the agent can climb", 
        "edge_max_error": "Maximum distance error from contour to cells", 
        "edge_max_len": "Maximum contour edge length", 
        "partitioning": "Choose partitioning method", 
        "region_merge_size": "Minimum regions size (smaller regions will be merged)", 
        "region_min_size": "Minimum regions size (smaller regions will be deleted)", 
        "sample_dist": "Detail mesh sample spacing", 
        "sample_max_error": "Detail mesh simplification max sample error", 
        "slope_max": "Maximum walkable slope angle", 
        "verts_per_poly": "Max number of vertices per polygon"
      }
    }, 
    "SceneObjects": {
      "fields": {
        "active": "Active object for this scene"
      }
    }, 
    "SceneRenderLayer": {
      "fields": {
        "cycles": "(read-only)    Cycles SceneRenderLayer Settings", 
        "exclude_ambient_occlusion": "Exclude AO pass from combined", 
        "exclude_emit": "Exclude emission pass from combined", 
        "exclude_environment": "Exclude environment pass from combined", 
        "exclude_indirect": "Exclude indirect pass from combined", 
        "exclude_reflection": "Exclude raytraced reflection pass from combined", 
        "exclude_refraction": "Exclude raytraced refraction pass from combined", 
        "exclude_shadow": "Exclude shadow pass from combined", 
        "exclude_specular": "Exclude specular pass from combined", 
        "freestyle_settings": "(read-only)", 
        "invert_zmask": "For Zmask, only render what is behind solid z values instead of in front", 
        "layers": "Scene layers included in this render layer", 
        "layers_exclude": "Exclude scene layers from having any influence", 
        "layers_zmask": "Zmask scene layers for solid faces", 
        "light_override": "Group to override all other lights in this render layer", 
        "material_override": "Material to override all other materials in this render layer", 
        "name": "Render layer name", 
        "pass_alpha_threshold": "Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold", 
        "samples": "Override number of render samples for this render layer, 0 will use the scene setting", 
        "use": "Disable or enable the render layer", 
        "use_all_z": "Fill in Z values for solid faces in invisible layers, for masking", 
        "use_ao": "Render AO in this Layer", 
        "use_edge_enhance": "Render Edge-enhance in this Layer (only works for Solid faces)", 
        "use_freestyle": "Render stylized strokes in this Layer", 
        "use_halo": "Render Halos in this Layer (on top of Solid)", 
        "use_pass_ambient_occlusion": "Deliver AO pass", 
        "use_pass_color": "Deliver shade-less color pass", 
        "use_pass_combined": "Deliver full combined RGBA buffer", 
        "use_pass_diffuse": "Deliver diffuse pass", 
        "use_pass_diffuse_color": "Deliver diffuse color pass", 
        "use_pass_diffuse_direct": "Deliver diffuse direct pass", 
        "use_pass_diffuse_indirect": "Deliver diffuse indirect pass", 
        "use_pass_emit": "Deliver emission pass", 
        "use_pass_environment": "Deliver environment lighting pass", 
        "use_pass_glossy_color": "Deliver glossy color pass", 
        "use_pass_glossy_direct": "Deliver glossy direct pass", 
        "use_pass_glossy_indirect": "Deliver glossy indirect pass", 
        "use_pass_indirect": "Deliver indirect lighting pass", 
        "use_pass_material_index": "Deliver material index pass", 
        "use_pass_mist": "Deliver mist factor pass (0.0-1.0)", 
        "use_pass_normal": "Deliver normal pass", 
        "use_pass_object_index": "Deliver object index pass", 
        "use_pass_reflection": "Deliver raytraced reflection pass", 
        "use_pass_refraction": "Deliver raytraced refraction pass", 
        "use_pass_shadow": "Deliver shadow pass", 
        "use_pass_specular": "Deliver specular pass", 
        "use_pass_subsurface_color": "Deliver subsurface color pass", 
        "use_pass_subsurface_direct": "Deliver subsurface direct pass", 
        "use_pass_subsurface_indirect": "Deliver subsurface indirect pass", 
        "use_pass_transmission_color": "Deliver transmission color pass", 
        "use_pass_transmission_direct": "Deliver transmission direct pass", 
        "use_pass_transmission_indirect": "Deliver transmission indirect pass", 
        "use_pass_uv": "Deliver texture UV pass", 
        "use_pass_vector": "Deliver speed vector pass", 
        "use_pass_z": "Deliver Z values pass", 
        "use_sky": "Render Sky in this Layer", 
        "use_solid": "Render Solid faces in this Layer", 
        "use_strand": "Render Strands in this Layer", 
        "use_zmask": "Only render what's in front of the solid z values", 
        "use_ztransp": "Render Z-Transparent faces in this Layer (on top of Solid and Halos)"
      }
    }, 
    "SceneRenderView": {
      "fields": {
        "camera_suffix": "Suffix to identify the cameras to use, and added to the render images for this view", 
        "file_suffix": "Suffix added to the render images for this view", 
        "name": "Render view name", 
        "use": "Disable or enable the render view"
      }
    }, 
    "SceneSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "proxy": "(read-only)", 
        "scene": "Scene that this sequence uses", 
        "scene_camera": "Override the scenes active camera", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_grease_pencil": "Show Grease Pencil strokes in OpenGL previews", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_sequence": "Use scenes sequence strips directly, instead of rendering", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "Scopes": {
      "fields": {
        "accuracy": "Proportion of original image source pixel lines to sample", 
        "histogram": "(read-only)    Histogram for viewing image statistics", 
        "use_full_resolution": "Sample every pixel of the image", 
        "vectorscope_alpha": "Opacity of the points", 
        "waveform_alpha": "Opacity of the points"
      }
    }, 
    "Screen": {
      "fields": {
        "areas": "(read-only)    Areas the screen is subdivided into", 
        "is_animation_playing": "(read-only)    Animation playback is active", 
        "scene": "Active scene to be edited in the screen", 
        "show_fullscreen": "(read-only)    An area is maximized, filling this screen", 
        "use_follow": "Follow current frame in editors"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ScrewModifier": {
      "fields": {
        "angle": "Angle of revolution", 
        "axis": "Screw axis", 
        "iterations": "Number of times to apply the screw operation", 
        "merge_threshold": "Limit below which to merge vertices", 
        "object": "Object to define the screw axis", 
        "render_steps": "Number of steps in the revolution", 
        "screw_offset": "Offset the revolution along its axis", 
        "steps": "Number of steps in the revolution", 
        "use_merge_vertices": "Merge adjacent vertices (screw offset must be zero)", 
        "use_normal_calculate": "Calculate the order of edges (needed for meshes, but not curves)", 
        "use_normal_flip": "Flip normals of lathed faces", 
        "use_object_screw_offset": "Use the distance between the objects to make a screw", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "use_stretch_u": "Stretch the U coordinates between 0-1 when UV's are present", 
        "use_stretch_v": "Stretch the V coordinates between 0-1 when UV's are present"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Sculpt": {
      "fields": {
        "constant_detail_resolution": "Maximum edge length for dynamic topology sculpting (as divisor of blender unit - higher value means smaller edge length)", 
        "detail_percent": "Maximum edge length for dynamic topology sculpting (in brush percenage)", 
        "detail_refine_method": "In dynamic-topology mode, how to add or remove mesh detail", 
        "detail_size": "Maximum edge length for dynamic topology sculpting (in pixels)", 
        "detail_type_method": "In dynamic-topology mode, how mesh detail size is calculated", 
        "gravity": "Amount of gravity after each dab", 
        "gravity_object": "Object whose Z axis defines orientation of gravity", 
        "lock_x": "Disallow changes to the X axis of vertices", 
        "lock_y": "Disallow changes to the Y axis of vertices", 
        "lock_z": "Disallow changes to the Z axis of vertices", 
        "radial_symmetry": "Number of times to copy strokes across the surface", 
        "show_diffuse_color": "Show diffuse color of object and overlay sculpt mask on top of it", 
        "symmetrize_direction": "Source and destination for symmetrize operator", 
        "use_deform_only": "Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)", 
        "use_smooth_shading": "Show faces in dynamic-topology mode with smooth shading rather than flat shaded", 
        "use_threaded": "Take advantage of multiple CPU cores to improve sculpting performance"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "SculptToolCapabilities": {
      "fields": {
        "has_accumulate": "(read-only)", 
        "has_auto_smooth": "(read-only)", 
        "has_gravity": "(read-only)", 
        "has_height": "(read-only)", 
        "has_jitter": "(read-only)", 
        "has_normal_weight": "(read-only)", 
        "has_persistence": "(read-only)", 
        "has_pinch_factor": "(read-only)", 
        "has_plane_offset": "(read-only)", 
        "has_rake_factor": "(read-only)", 
        "has_random_texture_angle": "(read-only)", 
        "has_sculpt_plane": "(read-only)", 
        "has_secondary_color": "(read-only)", 
        "has_smooth_stroke": "(read-only)", 
        "has_space_attenuation": "(read-only)", 
        "has_strength_pressure": "(read-only)"
      }
    }, 
    "Sensor": {
      "fields": {
        "active": "Set active state of the sensor", 
        "controllers": "(read-only)    The list containing the controllers connected to the sensor", 
        "invert": "Invert the level(output) of this sensor", 
        "name": "Sensor name", 
        "pin": "Display when not linked to a visible states controller", 
        "show_expanded": "Set sensor expanded in the user interface", 
        "tick_skip": "Number of logic ticks skipped between 2 active pulses (0 = pulse every logic tick, 1 = skip 1 logic tick between pulses, etc.)", 
        "use_level": "Level detector, trigger controllers of new states (only applicable upon logic state transition)", 
        "use_pulse_false_level": "Activate FALSE level triggering (pulse mode)", 
        "use_pulse_true_level": "Activate TRUE level triggering (pulse mode)", 
        "use_tap": "Trigger controllers only for an instant, even while the sensor remains true"
      }
    }, 
    "Sequence": {
      "fields": {
        "blend_alpha": "Percentage of how much the strip's colors affect other strips", 
        "blend_type": "Method for controlling how the strip combines with other strips", 
        "channel": "Y position of the sequence strip", 
        "effect_fader": "Custom fade value", 
        "frame_duration": "(read-only)    The length of the contents of this strip before the handles are applied", 
        "frame_final_duration": "The length of the contents of this strip after the handles are applied", 
        "frame_final_end": "End frame displayed in the sequence editor after offsets are applied", 
        "frame_final_start": "Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame", 
        "frame_start": "X position where the strip begins", 
        "lock": "Lock strip so that it cannot be transformed", 
        "modifiers": "(read-only)    Modifiers affecting this strip", 
        "mute": "Disable strip so that it cannot be viewed in the output", 
        "speed_factor": "Multiply the current speed of the sequence with this number or remap current frame to this frame", 
        "type": "(read-only)", 
        "use_default_fade": "Fade effect using the built-in default (usually make transition as long as effect strip)", 
        "use_linear_modifiers": "Calculate modifiers in linear space instead of sequencer's space"
      }
    }, 
    "SequenceColorBalanceData": {
      "fields": {
        "gain": "Color balance gain (highlights)", 
        "gamma": "Color balance gamma (midtones)", 
        "invert_gain": "Invert the gain color`", 
        "invert_gamma": "Invert the gamma color", 
        "invert_lift": "Invert the lift color", 
        "lift": "Color balance lift (shadows)"
      }
    }, 
    "SequenceCrop": {
      "fields": {
        "max_x": "Number of pixels to crop from the right side", 
        "max_y": "Number of pixels to crop from the top", 
        "min_x": "Number of pixels to crop from the left side", 
        "min_y": "Number of pixels to crop from the bottom"
      }
    }, 
    "SequenceEditor": {
      "fields": {
        "active_strip": "Sequencer's active strip", 
        "meta_stack": "(read-only)    Meta strip stack, last is currently edited meta strip", 
        "proxy_storage": "How to store proxies for this project", 
        "sequences": "(read-only)    Top-level strips only", 
        "sequences_all": "(read-only)    All strips, recursively including those inside metastrips", 
        "show_overlay": "Partial overlay on top of the sequencer"
      }
    }, 
    "SequenceElement": {
      "fields": {
        "filename": "Name of the source file", 
        "orig_height": "(read-only)    Original image height", 
        "orig_width": "(read-only)    Original image width"
      }
    }, 
    "SequenceModifier": {
      "fields": {
        "input_mask_id": "Mask ID used as mask input for the modifier", 
        "input_mask_strip": "Strip used as mask input for the modifier", 
        "input_mask_type": "Type of input data used for mask", 
        "mask_time": "Time to use for the Mask animation", 
        "mute": "Mute this modifier", 
        "show_expanded": "Mute expanded settings for the modifier", 
        "type": "(read-only)"
      }
    }, 
    "SequenceProxy": {
      "fields": {
        "build_100": "Build 100% proxy resolution", 
        "build_25": "Build 25% proxy resolution", 
        "build_50": "Build 50% proxy resolution", 
        "build_75": "Build 75% proxy resolution", 
        "build_free_run": "Build free run time code index", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "build_record_run": "Build record run time code index", 
        "directory": "Location to store the proxy files", 
        "filepath": "Location of custom proxy file", 
        "quality": "JPEG Quality of proxies to build", 
        "timecode": "Method for reading the inputs timecode", 
        "use_overwrite": "Overwrite existing proxy files when building", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from"
      }
    }, 
    "SequencerTonemapModifierData": {
      "fields": {
        "adaptation": "If 0, global; if 1, based on pixel intensity", 
        "contrast": "Set to 0 to use estimate from input image", 
        "correction": "If 0, same for all channels; if 1, each independent", 
        "gamma": "If not used, set to 1", 
        "intensity": "If less than zero, darkens image; otherwise, makes it brighter", 
        "key": "The value the average luminance is mapped to", 
        "offset": "Normally always 1, but can be used as an extra control to alter the brightness curve", 
        "tonemap_type": "Tone mapping algorithm"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "SequenceTransform": {
      "fields": {
        "offset_x": "Amount to move the input on the X axis within its boundaries", 
        "offset_y": "Amount to move the input on the Y axis within its boundaries"
      }
    }, 
    "ShaderNodeBump": {
      "fields": {
        "invert": "Invert the bump mapping direction to push into the surface instead of out"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeExtendedMaterial": {
      "fields": {
        "invert_normal": "Material Node uses inverted normal", 
        "use_diffuse": "Material Node outputs Diffuse", 
        "use_specular": "Material Node outputs Specular"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMapping": {
      "fields": {
        "max": "Maximum value for clipping", 
        "min": "Minimum value for clipping", 
        "use_max": "Whether to use maximum clipping value", 
        "use_min": "Whether to use minimum clipping value", 
        "vector_type": "Type of vector that the mapping transforms"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMaterial": {
      "fields": {
        "invert_normal": "Material Node uses inverted normal", 
        "use_diffuse": "Material Node outputs Diffuse", 
        "use_specular": "Material Node outputs Specular"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMixRGB": {
      "fields": {
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeNormalMap": {
      "fields": {
        "space": "Space of the input normal", 
        "uv_map": "UV Map for tangent space maps"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutput": {
      "fields": {
        "is_active_output": "True if this node is used as the active output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputLamp": {
      "fields": {
        "is_active_output": "True if this node is used as the active output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputLineStyle": {
      "fields": {
        "is_active_output": "True if this node is used as the active output", 
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputMaterial": {
      "fields": {
        "is_active_output": "True if this node is used as the active output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputWorld": {
      "fields": {
        "is_active_output": "True if this node is used as the active output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeRGBCurve": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeScript": {
      "fields": {
        "bytecode": "Compile bytecode for shader script node", 
        "bytecode_hash": "Hash of compile bytecode, for quick equality checking", 
        "filepath": "Shader script path", 
        "script": "Internal shader script to define the shader", 
        "use_auto_update": "Automatically update the shader when the .osl file changes (external scripts only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeSubsurfaceScattering": {
      "fields": {
        "falloff": "Function to determine how much light nearby points contribute based on their distance to the shading point"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTangent": {
      "fields": {
        "axis": "Axis for radial tangents", 
        "direction_type": "Method to use for the tangent", 
        "uv_map": "UV Map for tangent generated from UV"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexBrick": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexChecker": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexCoord": {
      "fields": {
        "from_dupli": "Use the parent of the dupli object if possible", 
        "object": "Use coordinates from this object (for object texture coordinates output)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexEnvironment": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "color_space": "Image file color space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "interpolation": "Texture interpolation", 
        "projection": "Projection of the input image", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexGradient": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "gradient_type": "Style of the color blending", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexImage": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "color_space": "Image file color space", 
        "extension": "How the image is extrapolated past its original bounds", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "interpolation": "Texture interpolation", 
        "projection": "Method to project 2D image on object with a 3D texture vector", 
        "projection_blend": "For box projection, amount of blend to use between sides", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexMagic": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "turbulence_depth": "Level of detail in the added turbulent noise"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexMusgrave": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexNoise": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexPointDensity": {
      "fields": {
        "interpolation": "Texture interpolation", 
        "object": "Object to take point data from", 
        "particle_color_source": "Data to derive color results from", 
        "particle_system": "Particle System to render as points", 
        "point_source": "Point data to use as renderable point density", 
        "radius": "Radius from the shaded sample to look for points within", 
        "resolution": "Resolution used by the texture holding the point density", 
        "space": "Coordinate system to calculate voxels in", 
        "vertex_attribute_name": "Vertex attribute to use for color", 
        "vertex_color_source": "Data to derive color results from"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexSky": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "ground_albedo": "Ground color that is subtly reflected in the sky", 
        "sun_direction": "Direction from where the sun is shining", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "turbidity": "Atmospheric turbidity"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexVoronoi": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexWave": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeUVAlongStroke": {
      "fields": {
        "use_tips": "Lower half of the texture is for tips of the stroke"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeUVMap": {
      "fields": {
        "from_dupli": "Use the parent of the dupli object if possible", 
        "uv_map": "UV coordinates to be used for mapping"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeVectorCurve": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeVectorTransform": {
      "fields": {
        "convert_from": "Space to convert from", 
        "convert_to": "Space to convert to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeWireframe": {
      "fields": {
        "use_pixel_size": "Use screen pixel size instead of world units"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShapeKey": {
      "fields": {
        "data": "(read-only)", 
        "frame": "(read-only)    Frame for absolute keys", 
        "interpolation": "Interpolation type for absolute shape keys", 
        "mute": "Mute this shape key", 
        "name": "Name of Shape Key", 
        "relative_key": "Shape used as a relative key", 
        "slider_max": "Maximum for slider", 
        "slider_min": "Minimum for slider", 
        "value": "Value of shape key at the current frame", 
        "vertex_group": "Vertex weight group, to blend with basis shape"
      }
    }, 
    "ShrinkwrapConstraint": {
      "fields": {
        "distance": "Distance to Target", 
        "project_axis": "Axis constrain to", 
        "project_axis_space": "Space for the projection axis", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "shrinkwrap_type": "Select type of shrinkwrap algorithm for target position", 
        "target": "Target Object"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ShrinkwrapModifier": {
      "fields": {
        "auxiliary_target": "Additional mesh target to shrink to", 
        "cull_face": "Stop vertices from projecting to a face on the target when facing towards/away", 
        "invert_vertex_group": "Invert vertex group influence", 
        "offset": "Distance to keep from the target", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "subsurf_levels": "Number of subdivisions that must be performed before extracting vertices' positions and normals", 
        "target": "Mesh target to shrink to", 
        "use_negative_direction": "Allow vertices to move in the negative direction of axis", 
        "use_positive_direction": "Allow vertices to move in the positive direction of axis", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SimpleDeformModifier": {
      "fields": {
        "angle": "Angle of deformation", 
        "factor": "Amount to deform object", 
        "invert_vertex_group": "Invert vertex group influence", 
        "limits": "Lower/Upper limits for deform", 
        "lock_x": "Do not allow deformation along the X axis", 
        "lock_y": "Do not allow deformation along the Y axis", 
        "origin": "Offset the origin and orientation of the deformation", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SkinModifier": {
      "fields": {
        "branch_smoothing": "Smooth complex geometry around branches", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "use_x_symmetry": "Avoid making unsymmetrical quads across the X axis", 
        "use_y_symmetry": "Avoid making unsymmetrical quads across the Y axis", 
        "use_z_symmetry": "Avoid making unsymmetrical quads across the Z axis"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SmokeCollSettings": {
      "fields": {
        "collision_type": "Collision type"
      }
    }, 
    "SmokeDomainSettings": {
      "fields": {
        "adapt_margin": "Margin added around fluid to minimize boundary interference", 
        "adapt_threshold": "Maximum amount of fluid cell can contain before it is considered empty", 
        "additional_res": "Maximum number of additional cells", 
        "alpha": "How much density affects smoke motion (higher value results in faster rising smoke)", 
        "amplify": "Enhance the resolution of smoke by this factor using noise", 
        "beta": "How much heat affects smoke motion (higher value results in faster rising smoke)", 
        "burning_rate": "Speed of the burning reaction (use larger values for smaller flame)", 
        "cache_file_format": "Select the file format to be used for caching", 
        "cell_size": "(read-only)    Cell Size", 
        "coba_field": "Simulation field to color map", 
        "collision_extents": "Select which domain border will be treated as collision object", 
        "collision_group": "Limit collisions to this group", 
        "color_grid": "(read-only)    Smoke color grid", 
        "color_ramp": "(read-only)", 
        "data_depth": "Bit depth for writing all scalar (including vector) lower values reduce file size", 
        "density_grid": "(read-only)    Smoke density grid", 
        "display_thickness": "Thickness of smoke drawing in the viewport", 
        "dissolve_speed": "Dissolve Speed", 
        "domain_resolution": "(read-only)    Smoke Grid Resolution", 
        "draw_velocity": "Toggle visualization of the velocity field as needles", 
        "effector_group": "Limit effectors to this group", 
        "effector_weights": "(read-only)", 
        "flame_grid": "(read-only)    Smoke flame grid", 
        "flame_ignition": "Minimum temperature of flames", 
        "flame_max_temp": "Maximum temperature of flames", 
        "flame_smoke": "Amount of smoke created by burning fuel", 
        "flame_smoke_color": "Color of smoke emitted from burning fuel", 
        "flame_vorticity": "Additional vorticity for the flames", 
        "fluid_group": "Limit fluid objects to this group", 
        "heat_grid": "(read-only)    Smoke heat grid", 
        "highres_sampling": "Method for sampling the high resolution flow", 
        "noise_type": "Noise method which is used for creating the high resolution", 
        "openvdb_cache_compress_type": "Compression method to be used", 
        "point_cache": "(read-only)", 
        "point_cache_compress_type": "Compression method to be used", 
        "resolution_max": "Maximal resolution used in the fluid domain", 
        "show_high_resolution": "Show high resolution (using amplification)", 
        "slice_depth": "Position of the slice", 
        "slice_method": "How to slice the volume for viewport rendering", 
        "slice_per_voxel": "How many slices per voxel should be generated", 
        "start_point": "(read-only)    Start point", 
        "strength": "Strength of noise", 
        "time_scale": "Adjust simulation speed", 
        "use_adaptive_domain": "Adapt simulation resolution and size to fluid", 
        "use_color_ramp": "Render a simulation field while mapping its voxels values to the colors of a ramp", 
        "use_dissolve_smoke": "Enable smoke to disappear over time", 
        "use_dissolve_smoke_log": "Using 1/x", 
        "use_high_resolution": "Enable high resolution (using amplification)", 
        "vector_scale": "Multiplier for scaling the vectors", 
        "velocity_grid": "(read-only)    Smoke velocity grid", 
        "vorticity": "Amount of turbulence/rotation in fluid"
      }
    }, 
    "SmokeFlowSettings": {
      "fields": {
        "density_vertex_group": "Name of vertex group which determines surface emission rate", 
        "noise_texture": "Texture that controls emission strength", 
        "particle_size": "Particle size in simulation cells", 
        "particle_system": "Particle systems emitted from the object", 
        "smoke_color": "Color of smoke", 
        "smoke_flow_source": "Change how smoke is emitted", 
        "smoke_flow_type": "Change how flow affects the simulation", 
        "subframes": "Number of additional samples to take between frames to improve quality of fast moving flows", 
        "surface_distance": "Maximum distance from mesh surface to emit smoke", 
        "temperature": "Temperature difference to ambient temperature", 
        "texture_map_type": "Texture mapping type", 
        "texture_offset": "Z-offset of texture mapping", 
        "texture_size": "Size of texture mapping", 
        "use_absolute": "Only allow given density value in emitter area", 
        "use_initial_velocity": "Smoke has some initial velocity when it is emitted", 
        "use_particle_size": "Set particle size in simulation cells or use nearest cell", 
        "use_texture": "Use a texture to control emission strength", 
        "uv_layer": "UV map name", 
        "velocity_factor": "Multiplier of source velocity passed to smoke", 
        "velocity_normal": "Amount of normal directional velocity", 
        "velocity_random": "Amount of random velocity", 
        "volume_density": "Factor for smoke emitted from inside the mesh volume"
      }
    }, 
    "SmokeModifier": {
      "fields": {
        "coll_settings": "(read-only)", 
        "domain_settings": "(read-only)", 
        "flow_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SmoothModifier": {
      "fields": {
        "factor": "Strength of modifier effect", 
        "use_x": "Smooth object along X axis", 
        "use_y": "Smooth object along Y axis", 
        "use_z": "Smooth object along Z axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SoftBodyModifier": {
      "fields": {
        "point_cache": "(read-only)", 
        "settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SoftBodySettings": {
      "fields": {
        "aero": "Make edges 'sail'", 
        "aerodynamics_type": "Method of calculating aerodynamic interaction", 
        "ball_damp": "Blending to inelastic collision", 
        "ball_size": "Absolute ball size or factor if not manually adjusted", 
        "ball_stiff": "Ball inflating pressure", 
        "bend": "Bending Stiffness", 
        "choke": "'Viscosity' inside collision target", 
        "collision_group": "Limit colliders to this Group", 
        "collision_type": "Choose Collision Type", 
        "damping": "Edge spring friction", 
        "effector_weights": "(read-only)", 
        "error_threshold": "The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed", 
        "friction": "General media friction for point movements", 
        "fuzzy": "Fuzziness while on collision, high values make collision handling faster but less stable", 
        "goal_default": "Default Goal (vertex target position) value", 
        "goal_friction": "Goal (vertex target position) friction", 
        "goal_max": "Goal maximum, vertex weights are scaled to match this range", 
        "goal_min": "Goal minimum, vertex weights are scaled to match this range", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "gravity": "Apply gravitation to point movement", 
        "location_mass_center": "Location of Center of mass", 
        "mass": "General Mass value", 
        "plastic": "Permanent deform", 
        "pull": "Edge spring stiffness when longer than rest length", 
        "push": "Edge spring stiffness when shorter than rest length", 
        "rotation_estimate": "Estimated rotation matrix", 
        "scale_estimate": "Estimated scale matrix", 
        "shear": "Shear Stiffness", 
        "speed": "Tweak timing for physics to control frequency and speed", 
        "spring_length": "Alter spring length to shrink/blow up (unit %) 0 to disable", 
        "step_max": "Maximal # solver steps/frame", 
        "step_min": "Minimal # solver steps/frame", 
        "use_auto_step": "Use velocities for automagic step sizes", 
        "use_diagnose": "Turn on SB diagnose console prints", 
        "use_edge_collision": "Edges collide too", 
        "use_edges": "Use Edges as springs", 
        "use_estimate_matrix": "Estimate matrix... split to COM, ROT, SCALE", 
        "use_face_collision": "Faces collide too, can be very slow", 
        "use_goal": "Define forces for vertices to stick to animated position", 
        "use_self_collision": "Enable naive vertex ball self collision", 
        "use_stiff_quads": "Add diagonal springs on 4-gons", 
        "vertex_group_goal": "Control point weight values", 
        "vertex_group_mass": "Control point mass values", 
        "vertex_group_spring": "Control point spring strength values"
      }
    }, 
    "SolidifyModifier": {
      "fields": {
        "edge_crease_inner": "Assign a crease to inner edges", 
        "edge_crease_outer": "Assign a crease to outer edges", 
        "edge_crease_rim": "Assign a crease to the edges making up the rim", 
        "invert_vertex_group": "Invert the vertex group influence", 
        "material_offset": "Offset material index of generated faces", 
        "material_offset_rim": "Offset material index of generated rim faces", 
        "offset": "Offset the thickness from the center", 
        "thickness": "Thickness of the shell", 
        "thickness_clamp": "Offset clamp based on geometry scale", 
        "thickness_vertex_group": "Thickness factor to use for zero vertex group influence", 
        "use_even_offset": "Maintain thickness by adjusting for sharp corners (slow, disable when not needed)", 
        "use_flip_normals": "Invert the face direction", 
        "use_quality_normals": "Calculate normals which result in more even thickness (slow, disable when not needed)", 
        "use_rim": "Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)", 
        "use_rim_only": "Only add the rim to the original data", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Sound": {
      "fields": {
        "filepath": "Sound sample file used by this Sound data-block", 
        "packed_file": "(read-only)", 
        "use_memory_cache": "The sound file is decoded and loaded into RAM", 
        "use_mono": "If the file contains multiple audio channels they are rendered to a single one"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SoundActuator": {
      "fields": {
        "cone_inner_angle_3d": "The angle of the inner cone", 
        "cone_outer_angle_3d": "The angle of the outer cone", 
        "cone_outer_gain_3d": "The gain outside the outer cone (the gain in the outer cone will be interpolated between this value and the normal gain in the inner cone)", 
        "distance_3d_max": "The maximum distance at which you can hear the sound", 
        "distance_3d_reference": "The distance where the sound has a gain of 1.0", 
        "gain_3d_max": "The maximum gain of the sound, no matter how near it is", 
        "gain_3d_min": "The minimum gain of the sound, no matter how far it is away", 
        "pitch": "Pitch of the sound", 
        "rolloff_factor_3d": "The influence factor on volume depending on distance", 
        "use_sound_3d": "Enable/Disable 3D Sound", 
        "volume": "Initial volume of the sound"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "SoundSequence": {
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "pan": "Playback panning of the sound (only for Mono sources)", 
        "pitch": "Playback pitch of the sound", 
        "show_waveform": "Whether to draw the sound's waveform", 
        "sound": "Sound data-block used by this sequence", 
        "volume": "Playback volume of the sound"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "Space": {
      "fields": {
        "type": "(read-only)    Space data type"
      }
    }, 
    "SpaceClipEditor": {
      "fields": {
        "clip": "Movie clip displayed and edited in this space", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "grease_pencil_source": "Where the grease pencil comes from", 
        "lock_selection": "Lock viewport to selected markers during playback", 
        "lock_time_cursor": "Lock curves view to time cursor during playback and tracking", 
        "mask": "Mask displayed and edited in this space", 
        "mask_draw_type": "Draw type for mask splines", 
        "mask_overlay_mode": "Overlay mode of rasterized mask", 
        "mode": "Editing context being displayed", 
        "path_length": "Length of displaying path, in frames", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "scopes": "(read-only)    Scopes to visualize movie clip statistics", 
        "show_blue_channel": "Show blue channel in the frame", 
        "show_bundles": "Show projection of 3D markers into footage", 
        "show_disabled": "Show disabled tracks from the footage", 
        "show_filters": "Show filters for graph editor", 
        "show_graph_frames": "Show curve for per-frame average error (camera motion should be solved first)", 
        "show_graph_hidden": "Include channels from objects/bone that aren't visible", 
        "show_graph_only_selected": "Only include channels relating to selected objects and data", 
        "show_graph_tracks_error": "Display the reprojection error curve for selected tracks", 
        "show_graph_tracks_motion": "Display the speed curves (in \"x\" direction red, in \"y\" direction green) for the selected tracks", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_green_channel": "Show green channel in the frame", 
        "show_grid": "Show grid showing lens distortion", 
        "show_marker_pattern": "Show pattern boundbox for markers", 
        "show_marker_search": "Show search boundbox for markers", 
        "show_metadata": "Show metadata of clip", 
        "show_names": "Show track names and status", 
        "show_red_channel": "Show red channel in the frame", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_stable": "Show stable footage in editor (if stabilization is enabled)", 
        "show_tiny_markers": "Show markers in a more compact manner", 
        "show_track_path": "Show path of how track moves", 
        "use_grayscale_preview": "Display frame in grayscale mode", 
        "use_manual_calibration": "Use manual calibration helpers", 
        "use_mute_footage": "Mute footage and show black background instead", 
        "view": "Type of the clip editor view"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceConsole": {
      "fields": {
        "font_size": "Font size to use for displaying the text", 
        "history": "(read-only)    Command history", 
        "language": "Command line prompt language", 
        "prompt": "Command line prompt", 
        "scrollback": "(read-only)    Command output"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceDopeSheetEditor": {
      "fields": {
        "action": "Action displayed and edited in this space", 
        "auto_snap": "Automatic time snapping settings for transformations", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "mode": "Editing context being displayed", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_group_colors": "Draw groups and channels with colors matching their corresponding groups (pose bones only currently)", 
        "show_pose_markers": "Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "use_marker_sync": "Sync Markers with keyframe edits", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceFileBrowser": {
      "fields": {
        "active_operator": "(read-only)", 
        "bookmarks": "(read-only)    User's bookmarks", 
        "bookmarks_active": "Index of active bookmark (-1 if none)", 
        "operator": "(read-only)", 
        "params": "(read-only)    Parameters and Settings for the Filebrowser", 
        "recent_folders": "(read-only)", 
        "recent_folders_active": "Index of active recent folder (-1 if none)", 
        "system_bookmarks": "(read-only)    System's bookmarks", 
        "system_bookmarks_active": "Index of active system bookmark (-1 if none)", 
        "system_folders": "(read-only)    System's folders (usually root, available hard drives, etc)", 
        "system_folders_active": "Index of active system folder (-1 if none)"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceGraphEditor": {
      "fields": {
        "auto_snap": "Automatic time snapping settings for transformations", 
        "cursor_position_x": "Graph Editor 2D-Value cursor - X-Value component", 
        "cursor_position_y": "Graph Editor 2D-Value cursor - Y-Value component", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "has_ghost_curves": "(read-only)    Graph Editor instance has some ghost curves stored", 
        "mode": "Editing context being displayed", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "show_cursor": "Show 2D cursor", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_group_colors": "Draw groups and channels with colors matching their corresponding groups", 
        "show_handles": "Show handles of Bezier control points", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "use_auto_normalization": "Automatically recalculate curve normalization on every curve edit", 
        "use_beauty_drawing": "Draw F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)", 
        "use_normalization": "Display curves in normalized to -1..1 range, for easier editing of multiple curves with different ranges", 
        "use_only_selected_curves_handles": "Only keyframes of selected F-Curves are visible and editable", 
        "use_only_selected_keyframe_handles": "Only show and edit handles of selected keyframes", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceImageEditor": {
      "fields": {
        "cursor_location": "2D cursor location for this view", 
        "draw_channels": "Channels of the image to draw", 
        "grease_pencil": "Grease pencil data for this space", 
        "image": "Image displayed and edited in this space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "mask": "Mask displayed and edited in this space", 
        "mask_draw_type": "Draw type for mask splines", 
        "mask_overlay_mode": "Overlay mode of rasterized mask", 
        "mode": "Editing context being displayed", 
        "pivot_point": "Rotation/Scaling Pivot", 
        "sample_histogram": "(read-only)    Sampled colors along line", 
        "scopes": "(read-only)    Scopes to visualize image statistics", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_maskedit": "(read-only)    Show Mask editing related properties", 
        "show_paint": "(read-only)    Show paint related properties", 
        "show_render": "(read-only)    Show render related properties", 
        "show_repeat": "Draw the image repeated outside of the main view", 
        "show_stereo_3d": "Display the image in Stereo 3D", 
        "show_uvedit": "(read-only)    Show UV editing related properties", 
        "use_image_pin": "Display current image regardless of object selection", 
        "use_realtime_update": "Update other affected window spaces automatically to reflect changes during interactive operations such as transform", 
        "uv_editor": "(read-only)    UV editor settings", 
        "zoom": "(read-only)    Zoom factor"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceInfo": {
      "fields": {
        "show_report_debug": "Display debug reporting info", 
        "show_report_error": "Display error text", 
        "show_report_info": "Display general information", 
        "show_report_operator": "Display the operator log", 
        "show_report_warning": "Display warnings"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceLogicEditor": {
      "fields": {
        "show_actuators_active_object": "Show actuators of active object", 
        "show_actuators_active_states": "Show only actuators connected to active states", 
        "show_actuators_linked_controller": "Show linked objects to the actuator", 
        "show_actuators_selected_objects": "Show actuators of all selected objects", 
        "show_controllers_active_object": "Show controllers of active object", 
        "show_controllers_linked_controller": "Show linked objects to sensor/actuator", 
        "show_controllers_selected_objects": "Show controllers of all selected objects", 
        "show_sensors_active_object": "Show sensors of active object", 
        "show_sensors_active_states": "Show only sensors connected to active states", 
        "show_sensors_linked_controller": "Show linked objects to the controller", 
        "show_sensors_selected_objects": "Show sensors of all selected objects"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceNLA": {
      "fields": {
        "auto_snap": "Automatic time snapping settings for transformations", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_local_markers": "Show action-local markers on the strips, useful when synchronizing timing across strips", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_strip_curves": "Show influence F-Curves on strips", 
        "use_realtime_update": "When transforming strips, changes to the animation data are flushed to other views"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceNodeEditor": {
      "fields": {
        "backdrop_channels": "Channels of the image to draw", 
        "backdrop_x": "Backdrop X offset", 
        "backdrop_y": "Backdrop Y offset", 
        "backdrop_zoom": "Backdrop zoom factor", 
        "cursor_location": "Location for adding new nodes", 
        "edit_tree": "(read-only)    Node tree being displayed and edited", 
        "id": "(read-only)    Data-block whose nodes are being edited", 
        "id_from": "(read-only)    Data-block from which the edited data-block is linked", 
        "insert_offset_direction": "Direction to offset nodes on insertion", 
        "node_tree": "Base node tree from context", 
        "path": "(read-only)    Path from the data-block to the currently edited node tree", 
        "pin": "Use the pinned node tree", 
        "shader_type": "Type of data to take shader from", 
        "show_backdrop": "Use active Viewer Node output as backdrop for compositing nodes", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "texture_type": "Type of data to take texture from", 
        "tree_type": "Node tree type to display and edit", 
        "use_auto_render": "Re-render and composite changed layers on 3D edits", 
        "use_insert_offset": "Automatically offset the following or previous nodes in a chain when inserting a new node"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceNodeEditorPath": {
      "fields": {
        "to_string": "(read-only)"
      }
    }, 
    "SpaceOutliner": {
      "fields": {
        "display_mode": "Type of information to display", 
        "filter_text": "Live search filtering string", 
        "show_restrict_columns": "Show column", 
        "use_filter_case_sensitive": "Only use case sensitive matches of search string", 
        "use_filter_complete": "Only use complete matches of search string"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceProperties": {
      "fields": {
        "align": "Arrangement of the panels", 
        "context": "Type of active data to display and edit", 
        "texture_context": "Type of texture data to display and edit", 
        "use_limited_texture_context": "Use the limited version of texture user (for 'old shading' mode)", 
        "use_pin_id": "Use the pinned context"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceSequenceEditor": {
      "fields": {
        "display_channel": "The channel number shown in the image preview. 0 is the result of all strips combined", 
        "display_mode": "View mode to use for displaying sequencer output", 
        "draw_overexposed": "Show overexposed areas with zebra stripes", 
        "grease_pencil": "Grease pencil data for this space", 
        "overlay_type": "Overlay draw type", 
        "preview_channels": "Channels of the preview to draw", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions", 
        "show_backdrop": "Display result under strips", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_frames": "Draw frames rather than seconds", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_metadata": "Show metadata of first visible strip", 
        "show_safe_areas": "Show TV title safe and action safe areas in preview", 
        "show_safe_center": "Show safe areas to fit content in a different aspect ratio", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_separate_color": "Separate color channels in preview", 
        "show_strip_offset": "Display strip in/out offsets", 
        "use_marker_sync": "Transform markers as well as strips", 
        "view_type": "Type of the Sequencer view (sequencer, preview or both)", 
        "waveform_draw_type": "How Waveforms are drawn"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceTextEditor": {
      "fields": {
        "find_text": "Text to search for with the find tool", 
        "font_size": "Font size to use for displaying the text", 
        "margin_column": "Column number to show right margin at", 
        "replace_text": "Text to replace selected text with using the replace tool", 
        "show_line_highlight": "Highlight the current line", 
        "show_line_numbers": "Show line numbers next to the text", 
        "show_margin": "Show right margin", 
        "show_syntax_highlight": "Syntax highlight for scripting", 
        "show_word_wrap": "Wrap words if there is not enough horizontal space", 
        "tab_width": "Number of spaces to display tabs with", 
        "text": "Text displayed and edited in this space", 
        "top": "Top line visible", 
        "use_find_all": "Search in all text data-blocks, instead of only the active one", 
        "use_find_wrap": "Search again from the start of the file when reaching the end", 
        "use_live_edit": "Run python while editing", 
        "use_match_case": "Search string is sensitive to uppercase and lowercase letters", 
        "use_overwrite": "Overwrite characters when typing rather than inserting them", 
        "visible_lines": "(read-only)    Amount of lines that can be visible in current editor"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceTimeline": {
      "fields": {
        "cache_cloth": "Show the active object's cloth point cache", 
        "cache_dynamicpaint": "Show the active object's Dynamic Paint cache", 
        "cache_particles": "Show the active object's particle point cache", 
        "cache_rigidbody": "Show the active object's Rigid Body cache", 
        "cache_smoke": "Show the active object's smoke cache", 
        "cache_softbody": "Show the active object's softbody point cache", 
        "show_cache": "Show the status of cached frames in the timeline", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "show_seconds": "Show timing in seconds not frames"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceUserPreferences": {
      "fields": {
        "filter_text": "Search term for filtering in the UI", 
        "filter_type": "Filter method"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceUVEditor": {
      "fields": {
        "draw_stretch_type": "Type of stretch to draw", 
        "edge_draw_type": "Draw type for drawing UV edges", 
        "lock_bounds": "Constraint to stay within the image bounds while editing", 
        "other_uv_filter": "Filter applied on the other object's UV to limit displayed", 
        "show_faces": "Draw faces over the image", 
        "show_metadata": "Draw metadata properties of the image", 
        "show_modified_edges": "Draw edges after modifiers are applied", 
        "show_normalized_coords": "Display UV coordinates from 0.0 to 1.0 rather than in pixels", 
        "show_other_objects": "Draw other selected objects that share the same image", 
        "show_smooth_edges": "Draw UV edges anti-aliased", 
        "show_stretch": "Draw faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)", 
        "show_texpaint": "Draw overlay of texture paint uv layer", 
        "sticky_select_mode": "Automatically select also UVs sharing the same vertex as the ones being selected", 
        "use_live_unwrap": "Continuously unwrap the selected UV island while transforming pinned vertices", 
        "use_snap_to_pixels": "Snap UVs to pixel locations while editing"
      }
    }, 
    "SpaceView3D": {
      "fields": {
        "active_layer": "(read-only)    Active 3D view layer index", 
        "background_images": "(read-only)    List of background images", 
        "camera": "Active camera used in this view (when unlocked from the scene's active camera)", 
        "clip_end": "3D View far clipping distance", 
        "clip_start": "3D View near clipping distance (perspective view only)", 
        "current_orientation": "(read-only)    Current transformation orientation", 
        "cursor_location": "3D cursor location for this view (dependent on local view setting)", 
        "fx_settings": "(read-only)    Options used for real time compositing", 
        "grid_lines": "Number of grid lines to display in perspective view", 
        "grid_scale": "Distance between 3D View grid lines", 
        "grid_scale_unit": "(read-only)    Grid cell size scaled by scene unit system settings", 
        "grid_subdivisions": "Number of subdivisions between grid lines", 
        "layers": "Layers visible in this 3D View", 
        "layers_local_view": "(read-only)    Local view layers visible in this 3D View", 
        "layers_used": "(read-only)    Layers that contain something", 
        "lens": "Viewport lens angle", 
        "local_view": "(read-only)    Display an isolated sub-set of objects, apart from the scene visibility", 
        "lock_bone": "3D View center is locked to this bone's position", 
        "lock_camera": "Enable view navigation within the camera view", 
        "lock_camera_and_layers": "Use the scene's active camera and layers in this view, rather than local layers", 
        "lock_cursor": "3D View center is locked to the cursor's position", 
        "lock_object": "3D View center is locked to this object's position", 
        "matcap_icon": "Image to use for Material Capture, active objects only", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "region_3d": "(read-only)    3D region in this space, in case of quad view the camera region", 
        "region_quadviews": "(read-only)    3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')", 
        "render_border_max_x": "Maximum X value for the render border", 
        "render_border_max_y": "Maximum Y value for the render border", 
        "render_border_min_x": "Minimum X value for the render border", 
        "render_border_min_y": "Minimum Y value for the render border", 
        "show_all_objects_origin": "Show the object origin center dot for all (selected and unselected) objects", 
        "show_axis_x": "Show the X axis line in perspective view", 
        "show_axis_y": "Show the Y axis line in perspective view", 
        "show_axis_z": "Show the Z axis line in perspective view", 
        "show_backface_culling": "Use back face culling to hide the back side of faces", 
        "show_background_images": "Display reference images behind objects in the 3D View", 
        "show_bundle_names": "Show names for reconstructed tracks objects", 
        "show_camera_path": "Show reconstructed camera path", 
        "show_floor": "Show the ground plane grid in perspective view", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_manipulator": "Use a 3D manipulator widget for controlling transforms", 
        "show_occlude_wire": "Use hidden wireframe display", 
        "show_only_render": "Display only objects which will be rendered", 
        "show_outline_selected": "Show an outline highlight around selected objects in non-wireframe views", 
        "show_reconstruction": "Display reconstruction data from active movie clip", 
        "show_relationship_lines": "Show dashed lines indicating parent or constraint relationships", 
        "show_stereo_3d_cameras": "Show the left and right cameras", 
        "show_stereo_3d_convergence_plane": "Show the stereo 3d convergence plane", 
        "show_stereo_3d_volume": "Show the stereo 3d frustum volume", 
        "show_textured_shadeless": "Show shadeless texture without lighting in textured draw mode", 
        "show_textured_solid": "Display face-assigned textures in solid view", 
        "show_world": "Display world colors in the background", 
        "stereo_3d_convergence_plane_alpha": "Opacity (alpha) of the convergence plane", 
        "stereo_3d_eye": "(read-only)    Current stereo eye being drawn", 
        "stereo_3d_volume_alpha": "Opacity (alpha) of the cameras' frustum volume", 
        "tracks_draw_size": "Display size of tracks from reconstructed data", 
        "tracks_draw_type": "Viewport display style for tracks", 
        "transform_manipulators": "Transformation manipulators", 
        "transform_orientation": "Transformation orientation", 
        "use_matcap": "Active Objects draw images mapped on normals, enhancing Solid Draw Mode", 
        "use_occlude_geometry": "Limit selection to visible (clipped with depth buffer)", 
        "use_pivot_point_align": "Manipulate center points (object, pose and weight paint mode only)", 
        "use_render_border": "Use a region within the frame size for rendered viewport (when not viewing through the camera)", 
        "viewport_shade": "Method to display/shade objects in the 3D View"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "Speaker": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "attenuation": "How strong the distance affects volume, depending on distance model", 
        "cone_angle_inner": "Angle of the inner cone, in degrees, inside the cone the volume is 100 %", 
        "cone_angle_outer": "Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated", 
        "cone_volume_outer": "Volume outside the outer cone", 
        "distance_max": "Maximum distance for volume calculation, no matter how far away the object is", 
        "distance_reference": "Reference distance at which volume is 100 %", 
        "muted": "Mute the speaker", 
        "pitch": "Playback pitch of the sound", 
        "relative": "(read-only)    Whether the source is relative to the camera or not", 
        "sound": "Sound data-block used by this speaker", 
        "volume": "How loud the sound is", 
        "volume_max": "Maximum volume, no matter how near the object is", 
        "volume_min": "Minimum volume, no matter how far away the object is"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SpeedControlSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "multiply_speed": "Multiply the resulting speed after the speed factor", 
        "scale_to_length": "Scale values from 0.0 to 1.0 to target sequence length", 
        "use_as_speed": "Interpret the value as speed instead of a frame number"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "SPHFluidSettings": {
      "fields": {
        "buoyancy": "Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid", 
        "factor_radius": "Interaction radius is a factor of 4 * particle size", 
        "factor_repulsion": "Repulsion is a factor of stiffness", 
        "factor_rest_length": "Spring rest length is a factor of 2 * particle size", 
        "factor_stiff_viscosity": "Stiff viscosity is a factor of normal viscosity", 
        "fluid_radius": "Fluid interaction radius", 
        "linear_viscosity": "Linear viscosity", 
        "plasticity": "How much the spring rest length can change after the elastic limit is crossed", 
        "repulsion": "How strongly the fluid tries to keep from clustering (factor of stiffness)", 
        "rest_density": "Fluid rest density", 
        "rest_length": "Spring rest length (factor of particle radius)", 
        "solver": "The code used to calculate internal forces on particles", 
        "spring_force": "Spring force", 
        "spring_frames": "Create springs for this number of frames since particles birth (0 is always)", 
        "stiff_viscosity": "Creates viscosity for expanding fluid", 
        "stiffness": "How incompressible the fluid is (speed of sound)", 
        "use_factor_density": "Density is calculated as a factor of default density (depends on particle size)", 
        "use_initial_rest_length": "Use the initial length as spring rest length instead of 2 * particle size", 
        "use_viscoelastic_springs": "Use viscoelastic springs instead of Hooke's springs", 
        "yield_ratio": "How much the spring has to be stretched/compressed in order to change it's rest length"
      }
    }, 
    "Spline": {
      "fields": {
        "bezier_points": "(read-only)    Collection of points for Bezier curves only", 
        "character_index": "(read-only)    Location of this character in the text data (only for text curves)", 
        "hide": "Hide this curve in Edit mode", 
        "order_u": "NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)", 
        "order_v": "NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)", 
        "point_count_u": "(read-only)    Total number points for the curve or surface in the U direction", 
        "point_count_v": "(read-only)    Total number points for the surface on the V direction", 
        "points": "(read-only)    Collection of points that make up this poly or nurbs spline", 
        "radius_interpolation": "The type of radius interpolation for Bezier curves", 
        "resolution_u": "Curve or Surface subdivisions per segment", 
        "resolution_v": "Surface subdivisions per segment", 
        "tilt_interpolation": "The type of tilt interpolation for 3D, Bezier curves", 
        "type": "The interpolation type for this curve element", 
        "use_bezier_u": "Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)", 
        "use_bezier_v": "Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)", 
        "use_cyclic_u": "Make this curve or surface a closed loop in the U direction", 
        "use_cyclic_v": "Make this surface a closed loop in the V direction", 
        "use_endpoint_u": "Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)", 
        "use_endpoint_v": "Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)", 
        "use_smooth": "Smooth the normals of the surface or beveled curve"
      }
    }, 
    "SplineIKConstraint": {
      "fields": {
        "bulge": "Factor between volume variation and stretching", 
        "bulge_max": "Maximum volume stretching factor", 
        "bulge_min": "Minimum volume stretching factor", 
        "bulge_smooth": "Strength of volume stretching clamping", 
        "chain_count": "How many bones are included in the chain", 
        "joint_bindings": "(EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages", 
        "target": "Curve that controls this relationship", 
        "use_bulge_max": "Use upper limit for volume variation", 
        "use_bulge_min": "Use lower limit for volume variation", 
        "use_chain_offset": "Offset the entire chain relative to the root joint", 
        "use_curve_radius": "Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode", 
        "use_even_divisions": "Ignore the relative lengths of the bones when fitting to the curve", 
        "use_y_stretch": "Stretch the Y axis of the bones to fit the curve", 
        "xz_scale_mode": "Method used for determining the scaling of the X and Z axes of the bones"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "SplinePoint": {
      "fields": {
        "co": "Point coordinates", 
        "hide": "Visibility status", 
        "radius": "Radius for beveling", 
        "select": "Selection status", 
        "tilt": "Tilt in 3D View", 
        "weight": "NURBS weight", 
        "weight_softbody": "Softbody goal weight"
      }
    }, 
    "SpotLamp": {
      "fields": {
        "compression_threshold": "Deep shadow map compression threshold", 
        "constant_coefficient": "Constant distance attenuation coefficient", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "falloff_type": "Intensity Decay with distance", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "halo_intensity": "Brightness of the spotlight's halo cone", 
        "halo_step": "Volumetric halo sampling frequency", 
        "linear_attenuation": "Linear distance attenuation", 
        "linear_coefficient": "Linear distance attenuation coefficient", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "quadratic_coefficient": "Quadratic distance attenuation coefficient", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "show_cone": "Draw transparent cone in 3D view to visualize which objects are contained in it", 
        "spot_blend": "The softness of the spotlight edge", 
        "spot_size": "Angle of the spotlight beam", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "use_halo": "Render spotlight with a volumetric halo", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "use_sphere": "Set light intensity to zero beyond lamp distance", 
        "use_square": "Cast a square spot light shape"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "StateActuator": {
      "fields": {
        "operation": "Select the bit operation on object state mask"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "SteeringActuator": {
      "fields": {
        "acceleration": "Max acceleration", 
        "distance": "Relax distance", 
        "facing": "Enable automatic facing", 
        "facing_axis": "Axis for automatic facing", 
        "lock_z_velocity": "Disable simulation of linear motion along Z axis", 
        "navmesh": "Navigation mesh", 
        "normal_up": "Use normal of the navmesh to set \"UP\" vector", 
        "self_terminated": "Terminate when target is reached", 
        "show_visualization": "Enable debug visualization for 'Path following'", 
        "target": "Target object", 
        "turn_speed": "Max turn speed", 
        "update_period": "Path update period", 
        "velocity": "Velocity magnitude"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "Stereo3dDisplay": {
      "fields": {
        "use_interlace_swap": "Swap left and right stereo channels", 
        "use_sidebyside_crosseyed": "Right eye should see left image and vice-versa"
      }
    }, 
    "Stereo3dFormat": {
      "fields": {
        "use_interlace_swap": "Swap left and right stereo channels", 
        "use_sidebyside_crosseyed": "Right eye should see left image and vice-versa", 
        "use_squeezed_frame": "Combine both views in a squeezed image"
      }
    }, 
    "StretchToConstraint": {
      "fields": {
        "bulge": "Factor between volume variation and stretching", 
        "bulge_max": "Maximum volume stretching factor", 
        "bulge_min": "Minimum volume stretching factor", 
        "bulge_smooth": "Strength of volume stretching clamping", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "keep_axis": "Axis to maintain during stretch", 
        "rest_length": "Length at rest position", 
        "target": "Target Object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_bulge_max": "Use upper limit for volume variation", 
        "use_bulge_min": "Use lower limit for volume variation", 
        "volume": "Maintain the object's volume as it stretches"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "StringProperty": {
      "fields": {
        "default": "(read-only)    string default value", 
        "length_max": "(read-only)    Maximum length of the string, 0 means unlimited"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "Struct": {
      "fields": {
        "base": "(read-only)    Struct definition this is derived from", 
        "description": "(read-only)    Description of the Struct's purpose", 
        "functions": "(read-only)", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "name": "(read-only)    Human readable name", 
        "name_property": "(read-only)    Property that gives the name of the struct", 
        "nested": "(read-only)    Struct in which this struct is always nested, and to which it logically belongs", 
        "properties": "(read-only)    Properties in the struct", 
        "translation_context": "(read-only)    Translation context of the struct's name"
      }
    }, 
    "StucciTexture": {
      "fields": {
        "noise_basis": "Noise basis used for turbulence", 
        "noise_scale": "Scaling for noise input", 
        "turbulence": "Turbulence of the noise"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "SubsurfModifier": {
      "fields": {
        "levels": "Number of subdivisions to perform", 
        "render_levels": "Number of subdivisions to perform when rendering", 
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "use_opensubdiv": "Use OpenSubdiv for the subdivisions (viewport only)", 
        "use_subsurf_uv": "Use subsurf to subdivide UVs"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SubtractSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "SunLamp": {
      "fields": {
        "compression_threshold": "Deep shadow map compression threshold", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "shadow_frustum_size": "Size of the frustum used for creating the shadow map", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "show_shadow_box": "Draw a box in 3D view to visualize which objects are contained in it", 
        "sky": "(read-only)    Sky related settings for sun lamps", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "use_shadow_layer": "Objects on the same layers only cast shadows"
      }, 
      "inherits": [
        "ID", 
        "Lamp"
      ]
    }, 
    "SurfaceCurve": {
      "fields": {
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID", 
        "Curve"
      ]
    }, 
    "SurfaceDeformModifier": {
      "fields": {
        "falloff": "Controls how much nearby polygons influence deformation", 
        "is_bound": "(read-only)    Whether geometry has been bound to target mesh", 
        "target": "Mesh object to deform with"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "TessfaceUVTextures": {
      "fields": {
        "active": "(read-only)    Active UV Map", 
        "active_index": "Active UV Map index"
      }
    }, 
    "TexMapping": {
      "fields": {
        "max": "Maximum value for clipping", 
        "min": "Minimum value for clipping", 
        "use_max": "Whether to use maximum clipping value", 
        "use_min": "Whether to use minimum clipping value", 
        "vector_type": "Type of vector that the mapping transforms"
      }
    }, 
    "TexPaintSlot": {
      "fields": {
        "index": "(read-only)    Index of MTex slot in the material", 
        "uv_layer": "Name of UV map"
      }
    }, 
    "Text": {
      "fields": {
        "current_character": "(read-only)    Index of current character in current line, and also start index of character in selection if one exists", 
        "current_line": "(read-only)    Current line, and start line of selection if one exists", 
        "current_line_index": "Index of current TextLine in TextLine collection", 
        "filepath": "Filename of the text file", 
        "is_dirty": "(read-only)    Text file has been edited since last save", 
        "is_in_memory": "(read-only)    Text file is in memory, without a corresponding file on disk", 
        "is_modified": "(read-only)    Text file on disk is different than the one in memory", 
        "lines": "(read-only)    Lines of text", 
        "select_end_character": "(read-only)    Index of character after end of selection in the selection end line", 
        "select_end_line": "(read-only)    End line of selection", 
        "use_module": "Register this text as a module on loading, Text name must end with \".py\"", 
        "use_tabs_as_spaces": "Automatically converts all new tabs into spaces"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "TextCurve": {
      "fields": {
        "align_x": "Text horizontal align from the object center", 
        "align_y": "Text vertical align from the object center", 
        "body": "Content of this text object", 
        "body_format": "(read-only)    Stores the style of each character", 
        "edit_format": "(read-only)    Editing settings character formatting", 
        "family": "Use Objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Duplication)", 
        "follow_curve": "Curve deforming text object", 
        "offset_x": "Horizontal offset from the object origin", 
        "offset_y": "Vertical offset from the object origin", 
        "shear": "Italic angle of the characters", 
        "small_caps_scale": "Scale of small capitals", 
        "text_boxes": "(read-only)", 
        "underline_position": "Vertical position of underline", 
        "use_fast_edit": "Don't fill polygons while editing", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID", 
        "Curve"
      ]
    }, 
    "TextLine": {
      "fields": {
        "body": "Text in the line"
      }
    }, 
    "TextSequence": {
      "fields": {
        "align_x": "Align the text along the X axis", 
        "align_y": "Align the image along the Y axis", 
        "color": "Text color", 
        "font_size": "Size of the text", 
        "input_count": "(read-only)", 
        "location": "Location of the text", 
        "text": "Text that will be displayed", 
        "use_shadow": "Draw text with shadow", 
        "wrap_width": "Word wrap width as factor, zero disables"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Texture": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "color_ramp": "(read-only)", 
        "contrast": "Adjust the contrast of the texture", 
        "intensity": "Adjust the brightness of the texture", 
        "node_tree": "(read-only)    Node tree for node-based textures", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "use_clamp": "Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range", 
        "use_color_ramp": "Toggle color ramp operations", 
        "use_nodes": "Make this a node-based texture", 
        "use_preview_alpha": "Show Alpha in Preview Render"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "TextureNodeBricks": {
      "fields": {
        "offset_frequency": "Offset every N rows", 
        "squash_frequency": "Squash every N rows"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeCurveRGB": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeCurveTime": {
      "fields": {
        "curve": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeImage": {
      "fields": {
        "image_user": "(read-only)    Parameters defining the image duration, offset and related settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeMixRGB": {
      "fields": {
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureSlot": {
      "fields": {
        "blend_type": "Mode used to apply the texture", 
        "color": "Default color for textures that don't return RGB or when RGB to intensity is enabled", 
        "default_value": "Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard", 
        "invert": "Invert the values of the texture to reverse its effect", 
        "name": "(read-only)    Texture slot name", 
        "offset": "Fine tune of the texture mapping X, Y and Z locations", 
        "output_node": "Which output node to use, for node-based textures", 
        "scale": "Set scaling for the texture's X, Y and Z sizes", 
        "texture": "Texture data-block used by this texture slot", 
        "use_rgb_to_intensity": "Convert texture RGB values to intensity (gray) values", 
        "use_stencil": "Use this texture as a blending value on the next texture"
      }
    }, 
    "Theme": {
      "fields": {
        "bone_color_sets": "(read-only)", 
        "clip_editor": "(read-only)", 
        "console": "(read-only)", 
        "dopesheet_editor": "(read-only)", 
        "file_browser": "(read-only)", 
        "graph_editor": "(read-only)", 
        "image_editor": "(read-only)", 
        "info": "(read-only)", 
        "logic_editor": "(read-only)", 
        "name": "Name of the theme", 
        "nla_editor": "(read-only)", 
        "node_editor": "(read-only)", 
        "outliner": "(read-only)", 
        "properties": "(read-only)", 
        "sequence_editor": "(read-only)", 
        "text_editor": "(read-only)", 
        "timeline": "(read-only)", 
        "user_interface": "(read-only)", 
        "user_preferences": "(read-only)", 
        "view_3d": "(read-only)"
      }
    }, 
    "ThemeBoneColorSet": {
      "fields": {
        "active": "Color used for active bones", 
        "normal": "Color used for the surface of bones", 
        "select": "Color used for selected bones", 
        "show_colored_constraints": "Allow the use of colors indicating constraints/keyed status"
      }
    }, 
    "ThemeClipEditor": {
      "fields": {
        "active_marker": "Color of active marker", 
        "disabled_marker": "Color of disabled marker", 
        "locked_marker": "Color of locked marker", 
        "marker": "Color of marker", 
        "marker_outline": "Color of marker's outline", 
        "path_after": "Color of path after current frame", 
        "path_before": "Color of path before current frame", 
        "selected_marker": "Color of selected marker", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list"
      }
    }, 
    "ThemeConsole": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeDopeSheet": {
      "fields": {
        "keyframe": "Color of Keyframe", 
        "keyframe_border": "Color of keyframe border", 
        "keyframe_border_selected": "Color of selected keyframe border", 
        "keyframe_breakdown": "Color of breakdown keyframe", 
        "keyframe_breakdown_selected": "Color of selected breakdown keyframe", 
        "keyframe_extreme": "Color of extreme keyframe", 
        "keyframe_extreme_selected": "Color of selected extreme keyframe", 
        "keyframe_jitter": "Color of jitter keyframe", 
        "keyframe_jitter_selected": "Color of selected jitter keyframe", 
        "keyframe_scale_factor": "Scale factor for adjusting the height of keyframes", 
        "keyframe_selected": "Color of selected keyframe", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list", 
        "summary": "Color of summary channel"
      }
    }, 
    "ThemeFileBrowser": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeFontStyle": {
      "fields": {
        "font_kerning_style": "Which style to use for font kerning", 
        "shadow": "Shadow size (0, 3 and 5 supported)", 
        "shadow_offset_x": "Shadow offset in pixels", 
        "shadow_offset_y": "Shadow offset in pixels", 
        "shadow_value": "Shadow color in gray value"
      }
    }, 
    "ThemeGradientColors": {
      "fields": {
        "show_grad": "Do a gradient for the background of the viewport working area"
      }
    }, 
    "ThemeGraphEditor": {
      "fields": {
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list"
      }
    }, 
    "ThemeImageEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeInfo": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeLogicEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeNLAEditor": {
      "fields": {
        "active_action": "Animation data-block has active action", 
        "active_action_unset": "Animation data-block doesn't have active action", 
        "keyframe_border": "Color of keyframe border", 
        "keyframe_border_selected": "Color of selected keyframe border", 
        "meta_strips": "Meta Strip - Unselected (for grouping related strips)", 
        "meta_strips_selected": "Meta Strip - Selected (for grouping related strips)", 
        "sound_strips": "Sound Strip - Unselected (for timing speaker sounds)", 
        "sound_strips_selected": "Sound Strip - Selected (for timing speaker sounds)", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list", 
        "strips": "Action-Clip Strip - Unselected", 
        "strips_selected": "Action-Clip Strip - Selected", 
        "transition_strips": "Transition Strip - Unselected", 
        "transition_strips_selected": "Transition Strip - Selected", 
        "tweak": "Color for strip/action being 'tweaked' or edited", 
        "tweak_duplicate": "Warning/error indicator color for strips referencing the strip being tweaked"
      }
    }, 
    "ThemeNodeEditor": {
      "fields": {
        "noodle_curving": "Curving of the noodle", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list"
      }
    }, 
    "ThemeOutliner": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeProperties": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeSequenceEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeSpaceGeneric": {
      "fields": {
        "panelcolors": "(read-only)"
      }
    }, 
    "ThemeSpaceGradient": {
      "fields": {
        "gradients": "(read-only)", 
        "panelcolors": "(read-only)"
      }
    }, 
    "ThemeStyle": {
      "fields": {
        "panel_title": "(read-only)", 
        "widget": "(read-only)", 
        "widget_label": "(read-only)"
      }
    }, 
    "ThemeTextEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeTimeline": {
      "fields": {
        "space": "(read-only)    Settings for space", 
        "time_grease_pencil": "Color of Grease Pencil keyframes", 
        "time_keyframe": "Base color for keyframe indicator lines"
      }
    }, 
    "ThemeUserInterface": {
      "fields": {
        "icon_alpha": "Transparency of icons in the interface, to reduce contrast", 
        "menu_shadow_fac": "Blending factor for menu shadows", 
        "menu_shadow_width": "Width of menu shadows, set to zero to disable", 
        "wcol_box": "(read-only)", 
        "wcol_list_item": "(read-only)", 
        "wcol_menu": "(read-only)", 
        "wcol_menu_back": "(read-only)", 
        "wcol_menu_item": "(read-only)", 
        "wcol_num": "(read-only)", 
        "wcol_numslider": "(read-only)", 
        "wcol_option": "(read-only)", 
        "wcol_pie_menu": "(read-only)", 
        "wcol_progress": "(read-only)", 
        "wcol_pulldown": "(read-only)", 
        "wcol_radio": "(read-only)", 
        "wcol_regular": "(read-only)", 
        "wcol_scroll": "(read-only)", 
        "wcol_state": "(read-only)", 
        "wcol_text": "(read-only)", 
        "wcol_toggle": "(read-only)", 
        "wcol_tool": "(read-only)", 
        "wcol_tooltip": "(read-only)", 
        "widget_emboss": "Color of the 1px shadow line underlying widgets"
      }
    }, 
    "ThemeUserPreferences": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeView3D": {
      "fields": {
        "space": "(read-only)    Settings for space", 
        "text_grease_pencil": "Color for indicating Grease Pencil keyframes", 
        "text_keyframe": "Color for indicating Object keyframes"
      }
    }, 
    "TimelineMarker": {
      "fields": {
        "camera": "Camera this timeline sets to active", 
        "frame": "The frame on which the timeline marker appears", 
        "select": "Marker selection state"
      }
    }, 
    "Timer": {
      "fields": {
        "time_delta": "(read-only)    Time since last step in seconds", 
        "time_duration": "(read-only)    Time since last step in seconds", 
        "time_step": "(read-only)"
      }
    }, 
    "ToolSettings": {
      "fields": {
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones", 
        "curve_paint_settings": "(read-only)", 
        "double_threshold": "Limit for removing duplicates and 'Auto Merge'", 
        "edge_path_live_unwrap": "Changing edges seam re-calculates UV unwrap", 
        "edge_path_mode": "The edge flag to tag when selecting the shortest path", 
        "etch_adaptive_limit": "Correlation threshold for number of bones in the subdivided stroke", 
        "etch_convert_mode": "Method used to convert stroke to bones", 
        "etch_length_limit": "Maximum length of the subdivided bones", 
        "etch_number": "Text to replace &N with (e.g. 'Finger.&N' -> 'Finger.1' or 'Finger.One')", 
        "etch_roll_mode": "Method used to adjust the roll of bones when retargeting", 
        "etch_side": "Text to replace &S with (e.g. 'Arm.&S' -> 'Arm.R' or 'Arm.Right')", 
        "etch_subdivision_number": "Number of bones in the subdivided stroke", 
        "etch_template": "Template armature that will be retargeted to the stroke", 
        "gpencil_brushes": "(read-only)    Grease Pencil drawing brushes", 
        "gpencil_interpolate": "(read-only)    Settings for Grease Pencil Interpolation tools", 
        "gpencil_sculpt": "(read-only)    Settings for stroke sculpting tools and brushes", 
        "grease_pencil_source": "Data-block where active Grease Pencil data is found from", 
        "image_paint": "(read-only)", 
        "keyframe_type": "Type of keyframes to create when inserting keyframes", 
        "lock_markers": "Prevent marker editing", 
        "mesh_select_mode": "Which mesh elements selection works on", 
        "normal_size": "Display size for normals in the 3D view", 
        "particle_edit": "(read-only)", 
        "proportional_edit": "Proportional Editing mode, allows transforms with distance fall-off", 
        "proportional_edit_falloff": "Falloff type for proportional editing mode", 
        "proportional_size": "Display size for proportional editing circle", 
        "sculpt": "(read-only)", 
        "show_uv_local_view": "Draw only faces with the currently displayed image assigned", 
        "snap_element": "Type of element to snap to", 
        "snap_node_element": "Type of element to snap to", 
        "snap_target": "Which part to snap onto the target", 
        "snap_uv_element": "Type of element to snap to", 
        "statvis": "(read-only)", 
        "unified_paint_settings": "(read-only)", 
        "use_auto_normalize": "Ensure all bone-deforming vertex groups add up to 1.0 while weight painting", 
        "use_bone_sketching": "Use sketching to create and edit bones", 
        "use_etch_autoname": "Automatically generate values to replace &N and &S suffix placeholders in template names", 
        "use_etch_overdraw": "Adjust strokes by drawing near them", 
        "use_etch_quick": "Automatically convert and delete on stroke end", 
        "use_gpencil_additive_drawing": "When creating new frames, the strokes from the previous/active frame are included as the basis for the new one", 
        "use_gpencil_continuous_drawing": "Allow drawing multiple strokes at a time with Grease Pencil", 
        "use_gpencil_draw_onback": "When draw new strokes, the new stroke is drawn below of all strokes in the layer", 
        "use_gpencil_stroke_endpoints": "Only use the first and last parts of the stroke for snapping", 
        "use_keyframe_insert_auto": "Automatic keyframe insertion for Objects and Bones", 
        "use_keyframe_insert_keyingset": "Automatic keyframe insertion using active Keying Set only", 
        "use_mesh_automerge": "Automatically merge vertices moved to the same location", 
        "use_multipaint": "Paint across the weights of all selected bones, maintaining their relative influence", 
        "use_proportional_action": "Proportional editing in action editor", 
        "use_proportional_edit_mask": "Proportional editing mask mode", 
        "use_proportional_edit_objects": "Proportional editing object mode", 
        "use_proportional_fcurve": "Proportional editing in FCurve editor", 
        "use_record_with_nla": "Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking", 
        "use_snap": "Snap during transform", 
        "use_snap_align_rotation": "Align rotation with the snapping target", 
        "use_snap_grid_absolute": "Absolute grid alignment while translating (based on the pivot center)", 
        "use_snap_peel_object": "Consider objects as whole when finding volume center", 
        "use_snap_project": "Project individual elements on the surface of other objects", 
        "use_snap_self": "Snap onto itself (editmode)", 
        "use_uv_sculpt": "Enable brush for UV sculpting", 
        "use_uv_select_sync": "Keep UV and edit mode mesh selection in sync", 
        "uv_relax_method": "Algorithm used for UV relaxation", 
        "uv_sculpt": "(read-only)", 
        "uv_sculpt_all_islands": "Brush operates on all islands", 
        "uv_sculpt_lock_borders": "Disable editing of boundary edges", 
        "uv_sculpt_tool": "Select Tools for the UV sculpt brushes", 
        "uv_select_mode": "UV selection and display mode", 
        "vertex_group_subset": "Filter Vertex groups for Display", 
        "vertex_group_user": "Display unweighted vertices", 
        "vertex_group_weight": "Weight to assign in vertex groups", 
        "vertex_paint": "(read-only)", 
        "weight_paint": "(read-only)"
      }
    }, 
    "TrackToConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "target": "Target Object", 
        "track_axis": "Axis that points to the target object", 
        "up_axis": "Axis that points upward", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_target_z": "Target's Z axis, not World Z axis, will constraint the Up direction"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformCacheConstraint": {
      "fields": {
        "object_path": "Path to the object in the Alembic archive used to lookup the transform matrix"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformConstraint": {
      "fields": {
        "from_max_x": "Top range of X axis source motion", 
        "from_max_x_rot": "Top range of X axis source motion", 
        "from_max_x_scale": "Top range of X axis source motion", 
        "from_max_y": "Top range of Y axis source motion", 
        "from_max_y_rot": "Top range of Y axis source motion", 
        "from_max_y_scale": "Top range of Y axis source motion", 
        "from_max_z": "Top range of Z axis source motion", 
        "from_max_z_rot": "Top range of Z axis source motion", 
        "from_max_z_scale": "Top range of Z axis source motion", 
        "from_min_x": "Bottom range of X axis source motion", 
        "from_min_x_rot": "Bottom range of X axis source motion", 
        "from_min_x_scale": "Bottom range of X axis source motion", 
        "from_min_y": "Bottom range of Y axis source motion", 
        "from_min_y_rot": "Bottom range of Y axis source motion", 
        "from_min_y_scale": "Bottom range of Y axis source motion", 
        "from_min_z": "Bottom range of Z axis source motion", 
        "from_min_z_rot": "Bottom range of Z axis source motion", 
        "from_min_z_scale": "Bottom range of Z axis source motion", 
        "map_from": "The transformation type to use from the target", 
        "map_to": "The transformation type to affect of the constrained object", 
        "map_to_x_from": "The source axis constrained object's X axis uses", 
        "map_to_y_from": "The source axis constrained object's Y axis uses", 
        "map_to_z_from": "The source axis constrained object's Z axis uses", 
        "target": "Target Object", 
        "to_max_x": "Top range of X axis destination motion", 
        "to_max_x_rot": "Top range of X axis destination motion", 
        "to_max_x_scale": "Top range of X axis destination motion", 
        "to_max_y": "Top range of Y axis destination motion", 
        "to_max_y_rot": "Top range of Y axis destination motion", 
        "to_max_y_scale": "Top range of Y axis destination motion", 
        "to_max_z": "Top range of Z axis destination motion", 
        "to_max_z_rot": "Top range of Z axis destination motion", 
        "to_max_z_scale": "Top range of Z axis destination motion", 
        "to_min_x": "Bottom range of X axis destination motion", 
        "to_min_x_rot": "Bottom range of X axis destination motion", 
        "to_min_x_scale": "Bottom range of X axis destination motion", 
        "to_min_y": "Bottom range of Y axis destination motion", 
        "to_min_y_rot": "Bottom range of Y axis destination motion", 
        "to_min_y_scale": "Bottom range of Y axis destination motion", 
        "to_min_z": "Bottom range of Z axis destination motion", 
        "to_min_z_rot": "Bottom range of Z axis destination motion", 
        "to_min_z_scale": "Bottom range of Z axis destination motion", 
        "use_motion_extrapolate": "Extrapolate ranges"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformOrientation": {
      "fields": {
        "name": "Name of the custom transform orientation"
      }
    }, 
    "TransformSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "interpolation": "Method to determine how missing pixels are created", 
        "rotation_start": "Degrees to rotate the input", 
        "scale_start_x": "Amount to scale the input in the X axis", 
        "scale_start_y": "Amount to scale the input in the Y axis", 
        "translate_start_x": "Amount to move the input on the X axis", 
        "translate_start_y": "Amount to move the input on the Y axis", 
        "translation_unit": "Unit of measure to translate the input", 
        "use_uniform_scale": "Scale uniformly, preserving aspect ratio"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "TriangulateModifier": {
      "fields": {
        "ngon_method": "Method for splitting the polygons into triangles", 
        "quad_method": "Method for splitting the quads into triangles"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "UILayout": {
      "fields": {
        "enabled": "When false, this (sub)layout is grayed out", 
        "scale_x": "Scale factor along the X for items in this (sub)layout", 
        "scale_y": "Scale factor along the Y for items in this (sub)layout"
      }
    }, 
    "UIList": {
      "fields": {
        "bitflag_filter_item": "(read-only)    The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)", 
        "bl_idname": "If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is \"OBJECT_UL_vgroups\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_UL_vgroups\")", 
        "filter_name": "Only show items matching this name (use '*' as wildcard)", 
        "layout_type": "(read-only)", 
        "use_filter_invert": "Invert filtering (show hidden items, and vice-versa)", 
        "use_filter_show": "Show filtering options", 
        "use_filter_sort_alpha": "Sort items by their name", 
        "use_filter_sort_reverse": "Invert the order of shown items"
      }
    }, 
    "UIPieMenu": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "UIPopupMenu": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "UnifiedPaintSettings": {
      "fields": {
        "size": "Radius of the brush", 
        "strength": "How powerful the effect of the brush is when applied", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_locked_size": "When locked brush stays same size relative to object; when unlocked brush size is given in pixels", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "use_unified_color": "Instead of per-brush color, the color is shared across brushes", 
        "use_unified_size": "Instead of per-brush radius, the radius is shared across brushes", 
        "use_unified_strength": "Instead of per-brush strength, the strength is shared across brushes", 
        "use_unified_weight": "Instead of per-brush weight, the weight is shared across brushes", 
        "weight": "Weight to assign in vertex groups"
      }
    }, 
    "UnitSettings": {
      "fields": {
        "scale_length": "Scale to use when converting between blender units and dimensions", 
        "system": "The unit system to use for button display", 
        "system_rotation": "Unit to use for displaying/editing rotation values", 
        "use_separate": "Display units in pairs (e.g. 1m 0cm)"
      }
    }, 
    "UserPreferences": {
      "fields": {
        "active_section": "Active section of the user preferences shown in the user interface", 
        "addons": "(read-only)", 
        "autoexec_paths": "(read-only)", 
        "edit": "(read-only)    Settings for interacting with Blender data", 
        "filepaths": "(read-only)    Default paths for external files", 
        "inputs": "(read-only)    Settings for input devices", 
        "system": "(read-only)    Graphics driver and operating system settings", 
        "themes": "(read-only)", 
        "ui_styles": "(read-only)", 
        "version": "(read-only)    Version of Blender the userpref.blend was saved with", 
        "view": "(read-only)    Preferences related to viewing data"
      }
    }, 
    "UserPreferencesEdit": {
      "fields": {
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "fcurve_unselected_alpha": "Amount that unselected F-Curves stand out from the background (Graph Editor)", 
        "grease_pencil_default_color": "Color of new Grease Pencil layers", 
        "grease_pencil_eraser_radius": "Radius of eraser 'brush'", 
        "grease_pencil_euclidean_distance": "Distance moved by mouse when drawing stroke to include", 
        "grease_pencil_manhattan_distance": "Pixels moved by mouse per axis when drawing stroke", 
        "keyframe_new_handle_type": "Handle type for handles of new keyframes", 
        "keyframe_new_interpolation_type": "Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)", 
        "material_link": "Toggle whether the material is linked to object data or the object block", 
        "node_margin": "Minimum distance between nodes for Auto-offsetting nodes", 
        "object_align": "When adding objects from a 3D View menu, either align them with that view or with the world", 
        "sculpt_paint_overlay_color": "Color of texture overlay", 
        "undo_memory_limit": "Maximum memory usage in megabytes (0 means unlimited)", 
        "undo_steps": "Number of undo steps available (smaller values conserve memory)", 
        "use_auto_keying": "Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "use_auto_keying_warning": "Show warning indicators when transforming objects and bones if auto keying is enabled", 
        "use_drag_immediately": "Moving things with a mouse drag confirms when releasing the button", 
        "use_duplicate_action": "Causes actions to be duplicated with the object", 
        "use_duplicate_armature": "Causes armature data to be duplicated with the object", 
        "use_duplicate_curve": "Causes curve data to be duplicated with the object", 
        "use_duplicate_fcurve": "Causes F-curve data to be duplicated with the object", 
        "use_duplicate_lamp": "Causes lamp data to be duplicated with the object", 
        "use_duplicate_material": "Causes material data to be duplicated with the object", 
        "use_duplicate_mesh": "Causes mesh data to be duplicated with the object", 
        "use_duplicate_metaball": "Causes metaball data to be duplicated with the object", 
        "use_duplicate_particle": "Causes particle systems to be duplicated with the object", 
        "use_duplicate_surface": "Causes surface data to be duplicated with the object", 
        "use_duplicate_text": "Causes text data to be duplicated with the object", 
        "use_duplicate_texture": "Causes texture data to be duplicated with the object", 
        "use_enter_edit_mode": "Enter Edit Mode automatically after adding a new object", 
        "use_global_undo": "Global undo works by keeping a full copy of the file itself in memory, so takes extra memory", 
        "use_grease_pencil_simplify_stroke": "Simplify the final stroke", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis", 
        "use_keyframe_insert_available": "Automatic keyframe insertion in available F-Curves", 
        "use_keyframe_insert_needed": "Keyframe insertion only when keyframe needed", 
        "use_negative_frames": "Current frame number can be manually set to a negative value", 
        "use_visual_keying": "Use Visual keying automatically for constrained objects"
      }
    }, 
    "UserPreferencesFilePaths": {
      "fields": {
        "animation_player": "Path to a custom animation/frame sequence player", 
        "animation_player_preset": "Preset configs for external animation players", 
        "auto_save_time": "The time (in minutes) to wait between automatic temporary saves", 
        "font_directory": "The default directory to search for loading fonts", 
        "hide_recent_locations": "Hide recent locations in the file selector", 
        "hide_system_bookmarks": "Hide system bookmarks in the file selector", 
        "i18n_branches_directory": "The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI", 
        "image_editor": "Path to an image editor", 
        "recent_files": "Maximum number of recently opened files to remember", 
        "render_cache_directory": "Where to cache raw render results", 
        "render_output_directory": "The default directory for rendering output, for new scenes", 
        "save_version": "The number of old versions to maintain in the current directory, when manually saving", 
        "script_directory": "Alternate script path, matching the default layout with subdirs: startup, add-ons & modules (requires restart)", 
        "show_hidden_files_datablocks": "Hide files/data-blocks that start with a dot (.*)", 
        "show_thumbnails": "Open in thumbnail view for images and movies", 
        "sound_directory": "The default directory to search for sounds", 
        "temporary_directory": "The directory for storing temporary save files", 
        "texture_directory": "The default directory to search for textures", 
        "use_auto_save_temporary_files": "Automatic saving of temporary files in temp directory, uses process ID (Sculpt or edit mode data won't be saved!')", 
        "use_file_compression": "Enable file compression when saving .blend files", 
        "use_filter_files": "Display only files with extensions in the image select window", 
        "use_keep_session": "Always load session recovery and save it after quitting Blender", 
        "use_load_ui": "Load user interface setup when loading .blend files", 
        "use_relative_paths": "Default relative path option for the file selector", 
        "use_save_preview_images": "Enables automatic saving of preview images in the .blend file"
      }
    }, 
    "UserPreferencesInput": {
      "fields": {
        "active_keyconfig": "The name of the active key configuration", 
        "drag_threshold": "Amount of pixels you have to drag before dragging UI items happens", 
        "invert_mouse_zoom": "Invert the axis of mouse movement for zooming", 
        "invert_zoom_wheel": "Swap the Mouse Wheel zoom direction", 
        "mouse_double_click_time": "Time/delay (in ms) for a double click", 
        "navigation_mode": "Which method to use for viewport navigation", 
        "ndof_deadzone": "Threshold of initial movement needed from the device's rest position", 
        "ndof_fly_helicopter": "Device up/down directly controls your Z position", 
        "ndof_lock_horizon": "Keep horizon level while flying with 3D Mouse", 
        "ndof_orbit_sensitivity": "Overall sensitivity of the 3D Mouse for orbiting", 
        "ndof_pan_yz_swap_axis": "Pan using up/down on the device (otherwise forward/backward)", 
        "ndof_sensitivity": "Overall sensitivity of the 3D Mouse for panning", 
        "ndof_show_guide": "Display the center and axis during rotation", 
        "ndof_view_navigate_method": "Navigation style in the viewport", 
        "ndof_view_rotate_method": "Rotation style in the viewport", 
        "ndof_zoom_invert": "Zoom using opposite direction", 
        "select_mouse": "Mouse button used for selection", 
        "tweak_threshold": "Number of pixels you have to drag before tweak event is triggered", 
        "use_emulate_numpad": "Main 1 to 0 keys act as the numpad ones (useful for laptops)", 
        "use_mouse_continuous": "Allow moving the mouse outside the view on some manipulations (transform, ui control drag)", 
        "use_mouse_emulate_3_button": "Emulate Middle Mouse with Alt+Left Mouse (doesn't work with Left Mouse Select option)", 
        "use_mouse_mmb_paste": "In text window, paste with middle mouse button instead of panning", 
        "use_ndof": "(read-only)", 
        "use_trackpad_natural": "If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI", 
        "view_rotate_method": "Rotation style in the viewport", 
        "view_zoom_axis": "Axis of mouse movement to zoom in or out on", 
        "view_zoom_method": "Which style to use for viewport scaling", 
        "walk_navigation": "(read-only)    Settings for walk navigation mode", 
        "wheel_scroll_lines": "Number of lines scrolled at a time with the mouse wheel"
      }
    }, 
    "UserPreferencesSystem": {
      "fields": {
        "anisotropic_filter": "Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)", 
        "audio_channels": "Audio channel count", 
        "audio_device": "Audio output device", 
        "audio_mixing_buffer": "Number of samples used by the audio mixing buffer", 
        "audio_sample_format": "Audio sample format", 
        "audio_sample_rate": "Audio sample rate", 
        "author": "Name that will be used in exported files when format supports such feature", 
        "color_picker_type": "Different styles of displaying the color picker widget", 
        "dpi": "(read-only)    DPI for add-ons to use when drawing custom user interface elements, controlled by operating system settings and Blender UI scale, with a reference value of 72 DPI (note that since this value includes a user defined scale, it is not always the actual monitor DPI)", 
        "font_path_ui": "Path to interface font", 
        "font_path_ui_mono": "Path to interface mono-space Font", 
        "frame_server_port": "Frameserver Port for Frameserver Rendering", 
        "gl_clip_alpha": "Clip alpha below this threshold in the 3D textured view", 
        "gl_texture_limit": "Limit the texture size to save graphics memory", 
        "image_draw_method": "Method used for displaying images on the screen", 
        "language": "Language used for translation", 
        "legacy_compute_device_type": "(read-only)    For backwards compatibility only", 
        "memory_cache_limit": "Memory cache limit (in megabytes)", 
        "multi_sample": "Enable OpenGL multi-sampling, only for systems that support it, requires restart", 
        "opensubdiv_compute_type": "Type of computer back-end used with OpenSubdiv", 
        "pixel_size": "(read-only)    Suggested line thickness and point size in pixels, for add-ons drawing custom user interface elements, controlled by operating system settings and Blender UI scale", 
        "prefetch_frames": "Number of frames to render ahead during playback (sequencer only)", 
        "screencast_fps": "Frame rate for the screencast to be played back", 
        "screencast_wait_time": "Time in milliseconds between each frame recorded for screencast", 
        "scrollback": "Maximum number of lines to store for the console buffer", 
        "select_method": "Use OpenGL occlusion queries or selection render mode to accelerate selection", 
        "solid_lights": "(read-only)    Lights user to display objects in solid draw mode", 
        "texture_collection_rate": "Number of seconds between each run of the GL texture garbage collector", 
        "texture_time_out": "Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)", 
        "use_16bit_textures": "Use 16 bit per component texture for float images", 
        "use_gpu_mipmap": "Generate Image Mipmaps on the GPU", 
        "use_international_fonts": "Use international fonts", 
        "use_mipmaps": "Scale textures for the 3D View (looks nicer but uses more memory and slows image reloading)", 
        "use_preview_images": "Allow user to choose any codec (Windows only, might generate instability)", 
        "use_region_overlap": "Draw tool/property regions over the main region, when using Triple Buffer", 
        "use_scripts_auto_execute": "Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)", 
        "use_select_pick_depth": "Use the depth buffer for picking 3D View selection", 
        "use_tabs_as_spaces": "Automatically convert all new tabs into spaces for new and loaded text files", 
        "use_text_antialiasing": "Draw user interface text anti-aliased", 
        "use_translate_interface": "Translate interface", 
        "use_translate_new_dataname": "Translate new data names (when adding/creating some)", 
        "use_translate_tooltips": "Translate tooltips", 
        "use_weight_color_range": "Enable color range used for weight visualization in weight painting mode", 
        "weight_color_range": "(read-only)    Color range used for weight visualization in weight painting mode", 
        "window_draw_method": "Drawing method used by the window manager"
      }
    }, 
    "UserPreferencesView": {
      "fields": {
        "manipulator_handle_size": "Size of manipulator handles as percentage of the radius", 
        "manipulator_hotspot": "Distance around the handles to accept mouse clicks", 
        "manipulator_size": "Diameter of the manipulator", 
        "mini_axis_brightness": "Brightness of the icon", 
        "mini_axis_size": "The axes icon's size", 
        "object_origin_size": "Diameter in Pixels for Object/Lamp origin display", 
        "open_left_mouse_delay": "Time in 1/10 seconds to hold the Left Mouse Button before opening the toolbox", 
        "open_right_mouse_delay": "Time in 1/10 seconds to hold the Right Mouse Button before opening the toolbox", 
        "open_sublevel_delay": "Time delay in 1/10 seconds before automatically opening sub level menus", 
        "open_toplevel_delay": "Time delay in 1/10 seconds before automatically opening top level menus", 
        "pie_animation_timeout": "Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)", 
        "pie_initial_timeout": "Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)", 
        "pie_menu_confirm": "Distance threshold after which selection is made (zero to disable)", 
        "pie_menu_radius": "Pie menu size in pixels", 
        "pie_menu_threshold": "Distance from center needed before a selection can be made", 
        "rotation_angle": "Rotation step for numerical pad keys (2 4 6 8)", 
        "show_column_layout": "Use a column layout for toolbox", 
        "show_large_cursors": "Use large mouse cursors when available", 
        "show_manipulator": "Use 3D transform manipulator", 
        "show_mini_axis": "Show a small rotating 3D axes in the bottom left corner of the 3D View", 
        "show_object_info": "Display objects name and frame number in 3D view", 
        "show_playback_fps": "Show the frames per second screen refresh rate, while animation is played back", 
        "show_splash": "Display splash screen on startup", 
        "show_tooltips": "Display tooltips (when off hold Alt to force display)", 
        "show_tooltips_python": "Show Python references in tooltips", 
        "show_view_name": "Show the name of the view's direction in each 3D View", 
        "smooth_view": "Time to animate the view in milliseconds, zero to disable", 
        "timecode_style": "Format of Time Codes displayed when not displaying timing in terms of frames", 
        "ui_line_width": "Changes the thickness of lines and points in the interface", 
        "ui_scale": "Changes the size of the fonts and buttons in the interface", 
        "use_auto_perspective": "Automatically switch between orthographic and perspective when changing from top/front/side views", 
        "use_camera_lock_parent": "When the camera is locked to the view and in fly mode, transform the parent rather than the camera", 
        "use_cursor_lock_adjust": "Place the cursor without 'jumping' to the new location (when lock-to-cursor is used)", 
        "use_directional_menus": "Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction", 
        "use_global_pivot": "Lock the same rotation/scaling pivot in all 3D Views", 
        "use_global_scene": "Force the current Scene to be displayed in all Screens", 
        "use_mouse_depth_cursor": "Use the depth under the mouse when placing the cursor", 
        "use_mouse_depth_navigate": "Use the depth under the mouse to improve view pan/rotate/zoom functionality", 
        "use_mouse_over_open": "Open menu buttons and pulldowns automatically when the mouse is hovering", 
        "use_quit_dialog": "Ask for confirmation when quitting through the window close button", 
        "use_rotate_around_active": "Use selection as the pivot point", 
        "use_zoom_to_mouse": "Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center", 
        "view2d_grid_spacing_min": "Minimum number of pixels between each gridline in 2D Viewports", 
        "view_frame_keyframes": "Keyframes around cursor that we zoom around", 
        "view_frame_seconds": "Seconds around cursor that we zoom around", 
        "view_frame_type": "How zooming to frame focuses around current frame"
      }
    }, 
    "UserSolidLight": {
      "fields": {
        "diffuse_color": "Diffuse color of the OpenGL light", 
        "direction": "Direction that the OpenGL light is shining", 
        "specular_color": "Color of the light's specular highlight", 
        "use": "Enable this OpenGL light in solid draw mode"
      }
    }, 
    "UVLoopLayers": {
      "fields": {
        "active": "Active UV loop layer", 
        "active_index": "Active UV loop layer index"
      }
    }, 
    "UVProjectModifier": {
      "fields": {
        "projector_count": "Number of projectors to use", 
        "projectors": "(read-only)", 
        "use_image_override": "Override faces' current images with the given image", 
        "uv_layer": "UV map name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "UVProjector": {
      "fields": {
        "object": "Object to use as projector transform"
      }
    }, 
    "UVTextures": {
      "fields": {
        "active": "Active UV Map", 
        "active_index": "Active UV Map index"
      }
    }, 
    "UVWarpModifier": {
      "fields": {
        "axis_u": "Pole axis for rotation", 
        "axis_v": "Pole axis for rotation", 
        "bone_from": "Bone defining offset", 
        "bone_to": "Bone defining offset", 
        "center": "Center point for rotate/scale", 
        "object_from": "Object defining offset", 
        "object_to": "Object defining offset", 
        "uv_layer": "UV Layer name", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VectorFont": {
      "fields": {
        "packed_file": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "VertexColors": {
      "fields": {
        "active": "(read-only)    Active vertex color layer", 
        "active_index": "Active vertex color index"
      }
    }, 
    "VertexGroup": {
      "fields": {
        "index": "(read-only)    Index number of the vertex group", 
        "lock_weight": "Maintain the relative weights for the group", 
        "name": "Vertex group name"
      }
    }, 
    "VertexGroupElement": {
      "fields": {
        "group": "(read-only)", 
        "weight": "Vertex Weight"
      }
    }, 
    "VertexGroups": {
      "fields": {
        "active": "(read-only)    Vertex groups of the object", 
        "active_index": "Active index in vertex group array"
      }
    }, 
    "VertexPaint": {
      "fields": {
        "use_group_restrict": "Restrict painting to vertices in the group", 
        "use_normal": "Apply the vertex normal before painting", 
        "use_spray": "Keep applying paint effect while holding mouse"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "VertexWeightEditModifier": {
      "fields": {
        "add_threshold": "Lower bound for a vertex's weight to be added to the vgroup", 
        "default_weight": "Default weight a vertex will have if it is not in the vgroup", 
        "falloff_type": "How weights are mapped to their new values", 
        "map_curve": "(read-only)    Custom mapping curve", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "remove_threshold": "Upper bound for a vertex's weight to be removed from the vgroup", 
        "use_add": "Add vertices with weight over threshold to vgroup", 
        "use_remove": "Remove vertices with weight below threshold from vgroup", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VertexWeightMixModifier": {
      "fields": {
        "default_weight_a": "Default weight a vertex will have if it is not in the first A vgroup", 
        "default_weight_b": "Default weight a vertex will have if it is not in the second B vgroup", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "mix_mode": "How weights from vgroup B affect weights of vgroup A", 
        "mix_set": "Which vertices should be affected", 
        "vertex_group_a": "First vertex group name", 
        "vertex_group_b": "Second vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VertexWeightProximityModifier": {
      "fields": {
        "falloff_type": "How weights are mapped to their new values", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "max_dist": "Distance mapping to weight 1.0", 
        "min_dist": "Distance mapping to weight 0.0", 
        "proximity_geometry": "Use the shortest computed distance to target object's geometry as weight", 
        "proximity_mode": "Which distances to target object to use", 
        "target": "Object to calculate vertices distances from", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VisibilityActuator": {
      "fields": {
        "apply_to_children": "Set all the children of this object to the same visibility/occlusion recursively", 
        "use_occlusion": "Set the object to occlude objects behind it (initialized from the object type in physics button)", 
        "use_visible": "Set the objects visible (initialized from the object render restriction toggle in physics button)"
      }, 
      "inherits": [
        "Actuator"
      ]
    }, 
    "VoronoiTexture": {
      "fields": {
        "distance_metric": "Algorithm used to calculate distance of sample points to feature points", 
        "minkovsky_exponent": "Minkowski exponent", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_intensity": "Scales the intensity of the noise", 
        "noise_scale": "Scaling for noise input", 
        "weight_1": "Voronoi feature weight 1", 
        "weight_2": "Voronoi feature weight 2", 
        "weight_3": "Voronoi feature weight 3", 
        "weight_4": "Voronoi feature weight 4"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "VoxelData": {
      "fields": {
        "domain_object": "Object used as the smoke simulation domain", 
        "extension": "How the texture is extrapolated past its original bounds", 
        "file_format": "Format of the source data set to render", 
        "filepath": "The external source data file to use", 
        "hair_data_type": "Simulation value to be used as a texture", 
        "intensity": "Multiplier for intensity values", 
        "interpolation": "Method to interpolate/smooth values between voxel cells", 
        "resolution": "Resolution of the voxel grid", 
        "smoke_data_type": "Simulation value to be used as a texture", 
        "still_frame": "The frame number to always use", 
        "use_still_frame": "Always render a still frame from the voxel data sequence"
      }
    }, 
    "VoxelDataTexture": {
      "fields": {
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "voxel_data": "(read-only)    The voxel data associated with this texture"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "WalkNavigation": {
      "fields": {
        "jump_height": "Maximum height of a jump", 
        "mouse_speed": "Speed factor for when looking around, high values mean faster mouse movement", 
        "teleport_time": "Interval of time warp when teleporting in navigation mode", 
        "use_gravity": "Walk with gravity, or free navigate", 
        "use_mouse_reverse": "Reverse the vertical movement of the mouse", 
        "view_height": "View distance from the floor when walking", 
        "walk_speed": "Base speed for walking and flying", 
        "walk_speed_factor": "Multiplication factor when using the fast or slow modifiers"
      }
    }, 
    "WarpModifier": {
      "fields": {
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "falloff_radius": "Radius to apply", 
        "object_from": "Object to transform from", 
        "object_to": "Object to transform to", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "use_volume_preserve": "Preserve volume when rotations are used", 
        "uv_layer": "UV map name", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WaveModifier": {
      "fields": {
        "damping_time": "Number of frames in which the wave damps out after it dies", 
        "falloff_radius": "Distance after which it fades out", 
        "height": "Height of the wave", 
        "lifetime": "Lifetime of the wave in frames, zero means infinite", 
        "narrowness": "Distance between the top and the base of a wave, the higher the value, the more narrow the wave", 
        "speed": "Speed of the wave, towards the starting point when negative", 
        "start_position_object": "Object which defines the wave center", 
        "start_position_x": "X coordinate of the start position", 
        "start_position_y": "Y coordinate of the start position", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "time_offset": "Either the starting frame (for positive speed) or ending frame (for negative speed.)", 
        "use_cyclic": "Cyclic wave effect", 
        "use_normal": "Displace along normals", 
        "use_normal_x": "Enable displacement along the X normal", 
        "use_normal_y": "Enable displacement along the Y normal", 
        "use_normal_z": "Enable displacement along the Z normal", 
        "use_x": "X axis motion", 
        "use_y": "Y axis motion", 
        "uv_layer": "UV map name", 
        "vertex_group": "Vertex group name for modulating the wave", 
        "width": "Distance between the waves"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WhiteBalanceModifier": {
      "fields": {
        "white_value": "This color defines white in the strip"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "Window": {
      "fields": {
        "height": "(read-only)    Window height", 
        "screen": "Active screen showing in the window", 
        "stereo_3d_display": "(read-only)    Settings for stereo 3d display", 
        "width": "(read-only)    Window width", 
        "x": "(read-only)    Horizontal location of the window", 
        "y": "(read-only)    Vertical location of the window"
      }
    }, 
    "WindowManager": {
      "fields": {
        "addon_filter": "Filter add-ons by category", 
        "addon_search": "Search within the selected filter", 
        "addon_support": "Display support level", 
        "keyconfigs": "(read-only)    Registered key configurations", 
        "operators": "(read-only)    Operator registry", 
        "windows": "(read-only)    Open windows"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "WipeSequence": {
      "fields": {
        "angle": "Edge angle", 
        "blur_width": "Width of the blur edge, in percentage relative to the image size", 
        "direction": "Wipe direction", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "WireframeModifier": {
      "fields": {
        "crease_weight": "Crease weight (if active)", 
        "invert_vertex_group": "Invert vertex group influence", 
        "material_offset": "Offset material index of generated faces", 
        "offset": "Offset the thickness from the center", 
        "thickness": "Thickness factor", 
        "thickness_vertex_group": "Thickness factor to use for zero vertex group influence", 
        "use_boundary": "Support face boundaries", 
        "use_crease": "Crease hub edges for improved subsurf", 
        "use_even_offset": "Scale the offset to give more even thickness", 
        "use_relative_offset": "Scale the offset by surrounding geometry", 
        "use_replace": "Remove original geometry", 
        "vertex_group": "Vertex group name for selecting the affected areas"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WoodTexture": {
      "fields": {
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_scale": "Scaling for noise input", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "World": {
      "fields": {
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "ambient_color": "Ambient color of the world", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "color_range": "The color range that will be mapped to 0-1", 
        "cycles": "(read-only)    Cycles world settings", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "exposure": "Amount of exponential color correction for light", 
        "horizon_color": "Color at the horizon", 
        "light_settings": "(read-only)    World lighting settings", 
        "mist_settings": "(read-only)    World mist settings", 
        "node_tree": "(read-only)    Node tree for node based worlds", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "use_nodes": "Use shader nodes to render the world", 
        "use_sky_blend": "Render background with natural progression from horizon to zenith", 
        "use_sky_paper": "Flatten blend or texture coordinates", 
        "use_sky_real": "Render background with a real horizon, relative to the camera angle", 
        "zenith_color": "Color at the zenith"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "WorldLighting": {
      "fields": {
        "adapt_to_speed": "Use the speed vector pass to reduce AO samples in fast moving pixels - higher values result in more aggressive sample reduction (requires Vec pass enabled, for Raytrace Adaptive QMC)", 
        "ao_blend_type": "Defines how AO mixes with material shading", 
        "ao_factor": "Factor for ambient occlusion blending", 
        "bias": "Bias (in radians) to prevent smoothed faces from showing banding (for Raytrace Constant Jittered)", 
        "correction": "Ad-hoc correction for over-occlusion due to the approximation", 
        "distance": "Length of rays, defines how far away other faces give occlusion effect", 
        "environment_color": "Defines where the color of the environment light comes from", 
        "environment_energy": "Defines the strength of environment light", 
        "error_threshold": "Low values are slower and higher quality", 
        "falloff_strength": "Attenuation falloff strength, the higher, the less influence distant objects have", 
        "indirect_bounces": "Number of indirect diffuse light bounces", 
        "indirect_factor": "Factor for how much surrounding objects contribute to light", 
        "passes": "Number of preprocessing passes to reduce over-occlusion", 
        "sample_method": "Method for generating shadow samples (for Raytrace)", 
        "samples": "Amount of ray samples. Higher values give smoother results and longer rendering times", 
        "threshold": "Samples below this threshold will be considered fully shadowed/unshadowed and skipped (for Raytrace Adaptive QMC)", 
        "use_ambient_occlusion": "Use Ambient Occlusion to add shadowing based on distance between objects", 
        "use_cache": "Cache AO results in pixels and interpolate over neighboring pixels for speedup", 
        "use_environment_light": "Add light coming from the environment", 
        "use_falloff": "Distance will be used to attenuate shadows", 
        "use_indirect_light": "Add indirect light bouncing of surrounding objects"
      }
    }, 
    "WorldMistSettings": {
      "fields": {
        "depth": "Distance over which the mist effect fades in", 
        "falloff": "Type of transition used to fade mist", 
        "height": "Control how much mist density decreases with height", 
        "intensity": "Overall minimum intensity of the mist effect", 
        "start": "Starting distance of the mist, measured from the camera", 
        "use_mist": "Occlude objects with the environment color as they are further away"
      }
    }, 
    "WorldTextureSlot": {
      "fields": {
        "blend_factor": "Amount texture affects color progression of the background", 
        "horizon_factor": "Amount texture affects color of the horizon", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "use_map_blend": "Affect the color progression of the background", 
        "use_map_horizon": "Affect the color of the horizon", 
        "use_map_zenith_down": "Affect the color of the zenith below", 
        "use_map_zenith_up": "Affect the color of the zenith above", 
        "zenith_down_factor": "Amount texture affects color of the zenith below", 
        "zenith_up_factor": "Amount texture affects color of the zenith above"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }
  }, 
  "system": "Blender", 
  "version": "2.79"
}