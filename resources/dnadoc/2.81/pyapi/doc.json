{
  "module": "DNA", 
  "source": "Blender Python API", 
  "structs": {
    "Action": {
      "fields": {
        "fcurves": "(read-only)    The individual F-Curves that make up the action", 
        "frame_range": "(read-only)    The final frame range of all F-Curves within this action", 
        "groups": "(read-only)    Convenient groupings of F-Curves", 
        "id_root": "Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING", 
        "pose_markers": "(read-only)    Markers specific to this action, for labeling poses"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ActionConstraint": {
      "fields": {
        "action": "The constraining action", 
        "frame_end": "Last frame of the Action to use", 
        "frame_start": "First frame of the Action to use", 
        "max": "Maximum value for target channel range", 
        "min": "Minimum value for target channel range", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "transform_channel": "Transformation channel from the target that is used to key the Action", 
        "use_bone_object_action": "Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ActionGroup": {
      "fields": {
        "channels": "(read-only)    F-Curves in this group", 
        "color_set": "Custom color set to use", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "is_custom_color_set": "(read-only)    Color set is user-defined instead of a fixed theme color set", 
        "lock": "Action group is locked", 
        "select": "Action group is selected", 
        "show_expanded": "Action group is expanded except in graph editor", 
        "show_expanded_graph": "Action group is expanded in graph editor"
      }
    }, 
    "ActionPoseMarkers": {
      "fields": {
        "active": "Active pose marker for this action", 
        "active_index": "Index of active pose marker"
      }
    }, 
    "Addon": {
      "fields": {
        "module": "Module name", 
        "preferences": "(read-only)"
      }
    }, 
    "AddSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AdjustmentSequence": {
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AlembicObjectPath": {
      "fields": {
        "path": "Object path"
      }
    }, 
    "AlphaOverSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AlphaUnderSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "AnimData": {
      "fields": {
        "action": "Active Action for this data-block", 
        "action_blend_type": "Method used for combining Active Action's result with result of NLA stack", 
        "action_extrapolation": "Action to take for gaps past the Active Action's range (when evaluating with NLA)", 
        "action_influence": "Amount the Active Action contributes to the result of the NLA stack", 
        "drivers": "(read-only)    The Drivers/Expressions for this data-block", 
        "nla_tracks": "(read-only)    NLA Tracks (i.e. Animation Layers)", 
        "use_nla": "NLA stack is evaluated when evaluating this block", 
        "use_tweak_mode": "Whether to enable or disable tweak mode in NLA"
      }
    }, 
    "AnimViz": {
      "fields": {
        "motion_path": "(read-only)    Motion Path settings for visualization"
      }
    }, 
    "AnimVizMotionPaths": {
      "fields": {
        "bake_location": "When calculating Bone Paths, use Head or Tips", 
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_end": "End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_start": "Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_step": "Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)", 
        "has_motion_paths": "(read-only)    Are there any bone paths that will need updating (read-only)", 
        "show_frame_numbers": "Show frame numbers on Motion Paths", 
        "show_keyframe_action_all": "For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)", 
        "show_keyframe_highlight": "Emphasize position of keyframes on Motion Paths", 
        "show_keyframe_numbers": "Show frame numbers of Keyframes on Motion Paths", 
        "type": "Type of range to show for Motion Paths"
      }
    }, 
    "Area": {
      "fields": {
        "height": "(read-only)    Area height", 
        "regions": "(read-only)    Regions this area is subdivided in", 
        "show_menus": "Show menus in the header", 
        "spaces": "(read-only)    Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)", 
        "type": "Current editor type for this area", 
        "ui_type": "Current editor type for this area", 
        "width": "(read-only)    Area width", 
        "x": "(read-only)    The window relative vertical location of the area", 
        "y": "(read-only)    The window relative horizontal location of the area"
      }
    }, 
    "AreaLight": {
      "fields": {
        "constant_coefficient": "Constant distance attenuation coefficient", 
        "contact_shadow_bias": "Bias to avoid self shadowing", 
        "contact_shadow_distance": "World space distance in which to search for screen space occluder", 
        "contact_shadow_thickness": "Pixel thickness used to detect occlusion", 
        "energy": "Amount of light emitted", 
        "falloff_curve": "(read-only)    Custom light falloff curve", 
        "falloff_type": "Intensity Decay with distance", 
        "linear_attenuation": "Linear distance attenuation", 
        "linear_coefficient": "Linear distance attenuation coefficient", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "quadratic_coefficient": "Quadratic distance attenuation coefficient", 
        "shadow_buffer_bias": "Bias for reducing self shadowing", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_color": "Color of shadows cast by the light", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "shape": "Shape of the area Light", 
        "size": "Size of the area of the area light, X direction size for rectangle shapes", 
        "size_y": "Size of the area of the area light in the Y direction for rectangle shapes", 
        "use_contact_shadow": "Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps"
      }, 
      "inherits": [
        "ID", 
        "Light"
      ]
    }, 
    "AreaSpaces": {
      "fields": {
        "active": "(read-only)    Space currently being displayed in this area"
      }
    }, 
    "Armature": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "bones": "(read-only)", 
        "edit_bones": "(read-only)", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "layers": "Armature layer visibility", 
        "layers_protected": "Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo", 
        "pose_position": "Show armature in binding pose or final posed state", 
        "show_axes": "Display bone axes", 
        "show_bone_custom_shapes": "Display bones with their custom shapes", 
        "show_group_colors": "Display bone group colors", 
        "show_names": "Display bone names", 
        "use_mirror_x": "Apply changes to matching bone on opposite side of X-Axis"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ArmatureBones": {
      "fields": {
        "active": "Armature's active bone"
      }
    }, 
    "ArmatureConstraint": {
      "fields": {
        "targets": "(read-only)    Target Bones", 
        "use_bone_envelopes": "Multiply weights by envelope for all bones, instead of acting like Vertex Group based blending. The specified weights are still used, and only the listed bones are considered", 
        "use_current_location": "Use the current bone location for envelopes and choosing B-Bone segments instead of rest position", 
        "use_deform_preserve_volume": "Deform rotation interpolation with quaternions"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ArmatureEditBones": {
      "fields": {
        "active": "Armatures active edit bone"
      }
    }, 
    "ArmatureGpencilModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "object": "Armature object to deform with", 
        "use_bone_envelopes": "Bind Bone envelopes to armature modifier", 
        "use_deform_preserve_volume": "Deform rotation interpolation with quaternions", 
        "use_vertex_groups": "Bind vertex groups to armature modifier", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "ArmatureModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "object": "Armature object to deform with", 
        "use_bone_envelopes": "Bind Bone envelopes to armature modifier", 
        "use_deform_preserve_volume": "Deform rotation interpolation with quaternions", 
        "use_multi_modifier": "Use same input as previous modifier, and mix results using overall vgroup", 
        "use_vertex_groups": "Bind vertex groups to armature modifier", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ArrayGpencilModifier": {
      "fields": {
        "count": "Number of items", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "keep_on_top": "Keep the original stroke in front of new instances (only affect by layer)", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "offset": "Value for the distance between items", 
        "offset_object": "Use the location and rotation of another object to determine the distance and rotational change between arrayed items", 
        "pass_index": "Pass index", 
        "random_rot": "Use random factors for rotation", 
        "random_scale": "Use random factors for scale", 
        "replace_material": "Index of the material used for generated strokes (0 keep original material)", 
        "rot_factor": "Random factor for rotation", 
        "rotation": "Value for changes in rotation", 
        "scale": "Value for changes in scale", 
        "scale_factor": "Random factor for scale", 
        "shift": "Shiftiness value"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "ArrayModifier": {
      "fields": {
        "constant_offset_displace": "Value for the distance between arrayed items", 
        "count": "Number of duplicates to make", 
        "curve": "Curve object to fit array length to", 
        "end_cap": "Mesh object to use as an end cap", 
        "fit_length": "Length to fit array within", 
        "fit_type": "Array length calculation method", 
        "merge_threshold": "Limit below which to merge vertices", 
        "offset_object": "Use the location and rotation of another object to determine the distance and rotational change between arrayed items", 
        "offset_u": "Amount to offset array UVs on the U axis", 
        "offset_v": "Amount to offset array UVs on the V axis", 
        "relative_offset_displace": "The size of the geometry will determine the distance between arrayed items", 
        "start_cap": "Mesh object to use as a start cap", 
        "use_constant_offset": "Add a constant offset", 
        "use_merge_vertices": "Merge vertices in adjacent duplicates", 
        "use_merge_vertices_cap": "Merge vertices in first and last duplicates", 
        "use_object_offset": "Add another object's transformation to the total offset", 
        "use_relative_offset": "Add an offset relative to the object's bounding box"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BakePixel": {
      "fields": {
        "du_dx": "(read-only)", 
        "du_dy": "(read-only)", 
        "dv_dx": "(read-only)", 
        "dv_dy": "(read-only)", 
        "next": "(read-only)", 
        "object_id": "(read-only)", 
        "primitive_id": "(read-only)", 
        "uv": "(read-only)"
      }
    }, 
    "BakeSettings": {
      "fields": {
        "cage_extrusion": "Distance to use for the inward ray cast when using selected to active", 
        "cage_object": "Object to use as cage instead of calculating the cage from the active object with cage extrusion", 
        "filepath": "Image filepath to use when saving externally", 
        "height": "Vertical dimension of the baking map", 
        "image_settings": "(read-only)", 
        "margin": "Extends the baked result as a post process filter", 
        "normal_b": "Axis to bake in blue channel", 
        "normal_g": "Axis to bake in green channel", 
        "normal_r": "Axis to bake in red channel", 
        "normal_space": "Choose normal space for baking", 
        "pass_filter": "(read-only)    Passes to include in the active baking pass", 
        "save_mode": "Choose how to save the baking map", 
        "use_automatic_name": "Automatically name the output file with the pass type (external only)", 
        "use_cage": "Cast rays to active object from a cage", 
        "use_clear": "Clear Images before baking (internal only)", 
        "use_pass_ambient_occlusion": "Add ambient occlusion contribution", 
        "use_pass_color": "Color the pass", 
        "use_pass_diffuse": "Add diffuse contribution", 
        "use_pass_direct": "Add direct lighting contribution", 
        "use_pass_emit": "Add emission contribution", 
        "use_pass_glossy": "Add glossy contribution", 
        "use_pass_indirect": "Add indirect lighting contribution", 
        "use_pass_subsurface": "Add subsurface contribution", 
        "use_pass_transmission": "Add transmission contribution", 
        "use_selected_to_active": "Bake shading on the surface of selected objects to the active object", 
        "use_split_materials": "Split external images per material (external only)", 
        "width": "Horizontal dimension of the baking map"
      }
    }, 
    "BevelModifier": {
      "fields": {
        "angle_limit": "Angle above which to bevel edges", 
        "face_strength_mode": "Whether to set face strength, and which faces to set it on", 
        "harden_normals": "Match normals of new faces to adjacent faces", 
        "loop_slide": "Prefer sliding along edges to having even widths", 
        "mark_seam": "Mark Seams along beveled edges", 
        "mark_sharp": "Mark beveled edges as sharp", 
        "material": "Material index of generated faces, -1 for automatic", 
        "miter_inner": "Pattern to use for inside of miters", 
        "miter_outer": "Pattern to use for outside of miters", 
        "offset_type": "What distance Width measures", 
        "profile": "The profile shape (0.5 = round)", 
        "segments": "Number of segments for round edges/verts", 
        "spread": "Spread distance for inner miter arcs", 
        "use_clamp_overlap": "Clamp the width to avoid overlap", 
        "use_only_vertices": "Bevel verts/corners, not edges", 
        "vertex_group": "Vertex group name", 
        "width": "Bevel amount", 
        "width_pct": "Bevel amount for percentage method"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BezierSplinePoint": {
      "fields": {
        "co": "Coordinates of the control point", 
        "handle_left": "Coordinates of the first handle", 
        "handle_left_type": "Handle types", 
        "handle_right": "Coordinates of the second handle", 
        "handle_right_type": "Handle types", 
        "hide": "Visibility status", 
        "radius": "Radius for beveling", 
        "select_control_point": "Control point selection status", 
        "select_left_handle": "Handle 1 selection status", 
        "select_right_handle": "Handle 2 selection status", 
        "tilt": "Tilt in 3D View", 
        "weight_softbody": "Softbody goal weight"
      }
    }, 
    "BlendData": {
      "fields": {
        "actions": "(read-only)    Action data-blocks", 
        "armatures": "(read-only)    Armature data-blocks", 
        "brushes": "(read-only)    Brush data-blocks", 
        "cache_files": "(read-only)    Cache Files data-blocks", 
        "cameras": "(read-only)    Camera data-blocks", 
        "collections": "(read-only)    Collection data-blocks", 
        "curves": "(read-only)    Curve data-blocks", 
        "filepath": "(read-only)    Path to the .blend file", 
        "fonts": "(read-only)    Vector font data-blocks", 
        "grease_pencils": "(read-only)    Grease Pencil data-blocks", 
        "images": "(read-only)    Image data-blocks", 
        "is_dirty": "(read-only)    Have recent edits been saved to disk", 
        "is_saved": "(read-only)    Has the current session been saved to disk as a .blend file", 
        "lattices": "(read-only)    Lattice data-blocks", 
        "libraries": "(read-only)    Library data-blocks", 
        "lightprobes": "(read-only)    LightProbe data-blocks", 
        "lights": "(read-only)    Light data-blocks", 
        "linestyles": "(read-only)    Line Style data-blocks", 
        "masks": "(read-only)    Masks data-blocks", 
        "materials": "(read-only)    Material data-blocks", 
        "meshes": "(read-only)    Mesh data-blocks", 
        "metaballs": "(read-only)    Metaball data-blocks", 
        "movieclips": "(read-only)    Movie Clip data-blocks", 
        "node_groups": "(read-only)    Node group data-blocks", 
        "objects": "(read-only)    Object data-blocks", 
        "paint_curves": "(read-only)    Paint Curves data-blocks", 
        "palettes": "(read-only)    Palette data-blocks", 
        "particles": "(read-only)    Particle data-blocks", 
        "scenes": "(read-only)    Scene data-blocks", 
        "screens": "(read-only)    Screen data-blocks", 
        "shape_keys": "(read-only)    Shape Key data-blocks", 
        "sounds": "(read-only)    Sound data-blocks", 
        "speakers": "(read-only)    Speaker data-blocks", 
        "texts": "(read-only)    Text data-blocks", 
        "textures": "(read-only)    Texture data-blocks", 
        "use_autopack": "Automatically pack all external data into .blend file", 
        "version": "(read-only)    Version of Blender the .blend was saved with", 
        "window_managers": "(read-only)    Window manager data-blocks", 
        "workspaces": "(read-only)    Workspace data-blocks", 
        "worlds": "(read-only)    World data-blocks"
      }
    }, 
    "BlenderRNA": {
      "fields": {
        "structs": "(read-only)"
      }
    }, 
    "BlendTexture": {
      "fields": {
        "progression": "Style of the color blending", 
        "use_flip_axis": "Flip the texture's X and Y axis"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "BoidRule": {
      "fields": {
        "name": "Boid rule name", 
        "type": "(read-only)", 
        "use_in_air": "Use rule when boid is flying", 
        "use_on_land": "Use rule when boid is on land"
      }
    }, 
    "BoidRuleAverageSpeed": {
      "fields": {
        "level": "How much velocity's z-component is kept constant", 
        "speed": "Percentage of maximum speed", 
        "wander": "How fast velocity's direction is randomized"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleAvoid": {
      "fields": {
        "fear_factor": "Avoid object if danger from it is above this threshold", 
        "object": "Object to avoid", 
        "use_predict": "Predict target movement"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleAvoidCollision": {
      "fields": {
        "look_ahead": "Time to look ahead in seconds", 
        "use_avoid": "Avoid collision with other boids", 
        "use_avoid_collision": "Avoid collision with deflector objects"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleFight": {
      "fields": {
        "distance": "Attack boids at max this distance", 
        "flee_distance": "Flee to this distance"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleFollowLeader": {
      "fields": {
        "distance": "Distance behind leader to follow", 
        "object": "Follow this object instead of a boid", 
        "queue_count": "How many boids in a line", 
        "use_line": "Follow leader in a line"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidRuleGoal": {
      "fields": {
        "object": "Goal object", 
        "use_predict": "Predict target movement"
      }, 
      "inherits": [
        "BoidRule"
      ]
    }, 
    "BoidSettings": {
      "fields": {
        "accuracy": "Accuracy of attack", 
        "active_boid_state": "(read-only)", 
        "aggression": "Boid will fight this times stronger enemy", 
        "air_acc_max": "Maximum acceleration in air (relative to maximum speed)", 
        "air_ave_max": "Maximum angular velocity in air (relative to 180 degrees)", 
        "air_personal_space": "Radius of boids personal space in air (% of particle size)", 
        "air_speed_max": "Maximum speed in air", 
        "air_speed_min": "Minimum speed in air (relative to maximum speed)", 
        "bank": "Amount of rotation around velocity vector on turns", 
        "health": "Initial boid health when born", 
        "height": "Boid height relative to particle size", 
        "land_acc_max": "Maximum acceleration on land (relative to maximum speed)", 
        "land_ave_max": "Maximum angular velocity on land (relative to 180 degrees)", 
        "land_jump_speed": "Maximum speed for jumping", 
        "land_personal_space": "Radius of boids personal space on land (% of particle size)", 
        "land_smooth": "How smoothly the boids land", 
        "land_speed_max": "Maximum speed on land", 
        "land_stick_force": "How strong a force must be to start effecting a boid on land", 
        "pitch": "Amount of rotation around side vector", 
        "range": "Maximum distance from which a boid can attack", 
        "states": "(read-only)", 
        "strength": "Maximum caused damage on attack per second", 
        "use_climb": "Allow boids to climb goal objects", 
        "use_flight": "Allow boids to move in air", 
        "use_land": "Allow boids to move on land"
      }
    }, 
    "BoidState": {
      "fields": {
        "active_boid_rule": "(read-only)", 
        "name": "Boid state name", 
        "rules": "(read-only)", 
        "ruleset_type": "How the rules in the list are evaluated"
      }
    }, 
    "Bone": {
      "fields": {
        "bbone_curveinx": "X-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveiny": "Y-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveoutx": "X-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_curveouty": "Y-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_custom_handle_end": "Bone that serves as the end handle for the B-Bone curve", 
        "bbone_custom_handle_start": "Bone that serves as the start handle for the B-Bone curve", 
        "bbone_easein": "Length of first Bezier Handle (for B-Bones only)", 
        "bbone_easeout": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_handle_type_end": "Selects how the end handle of the B-Bone is computed", 
        "bbone_handle_type_start": "Selects how the start handle of the B-Bone is computed", 
        "bbone_rollin": "Roll offset for the start of the B-Bone, adjusts twist", 
        "bbone_rollout": "Roll offset for the end of the B-Bone, adjusts twist", 
        "bbone_scaleinx": "X-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleiny": "Y-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleoutx": "X-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleouty": "Y-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)", 
        "bbone_x": "B-Bone X size", 
        "bbone_z": "B-Bone Z size", 
        "children": "(read-only)    Bones which are children of this bone", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "head": "(read-only)    Location of head end of the bone relative to its parent", 
        "head_local": "(read-only)    Location of head end of the bone relative to armature", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "hide": "Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)", 
        "hide_select": "Bone is able to be selected", 
        "inherit_scale": "Specifies how the bone inherits scaling from the parent bone", 
        "layers": "Layers bone exists in", 
        "length": "(read-only)    Length of the bone", 
        "matrix": "(read-only)    3x3 bone matrix", 
        "matrix_local": "(read-only)    4x4 bone matrix relative to armature", 
        "parent": "(read-only)    Parent bone (in same Armature)", 
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "tail": "(read-only)    Location of tail end of the bone relative to its parent", 
        "tail_local": "(read-only)    Location of tail end of the bone relative to armature", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "use_connect": "(read-only)    When bone has a parent, bone's head is stuck to the parent's tail", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "use_deform": "Enable Bone to deform geometry", 
        "use_endroll_as_inroll": "Add Roll Out of the Start Handle bone to the Roll In value", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "use_inherit_scale": "DEPRECATED: Bone inherits scaling from parent bone", 
        "use_local_location": "Bone location is set in local space", 
        "use_relative_parent": "Object children will use relative transform, like deform"
      }
    }, 
    "BoneGroup": {
      "fields": {
        "color_set": "Custom color set to use", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "is_custom_color_set": "(read-only)    Color set is user-defined instead of a fixed theme color set"
      }
    }, 
    "BoneGroups": {
      "fields": {
        "active": "Active bone group for this pose", 
        "active_index": "Active index in bone groups array"
      }
    }, 
    "BooleanModifier": {
      "fields": {
        "debug_options": "Debugging options, only when started with '-d'", 
        "double_threshold": "Threshold for checking overlapping geometry", 
        "object": "Mesh object to use for Boolean operation"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "BoolProperty": {
      "fields": {
        "array_dimensions": "(read-only)    Length of each dimension of the array", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "is_array": "(read-only)"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "BrightContrastModifier": {
      "fields": {
        "bright": "Adjust the luminosity of the colors", 
        "contrast": "Adjust the difference in luminosity between pixels"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "Brush": {
      "fields": {
        "auto_smooth_factor": "Amount of smoothing to automatically apply to each stroke", 
        "blend": "Brush blending mode", 
        "blur_kernel_radius": "Radius of kernel used for soften and sharpen in pixels", 
        "brush_capabilities": "(read-only)    Brush's capabilities", 
        "clone_alpha": "Opacity of clone image display", 
        "clone_image": "Image for clone tool", 
        "color_type": "Use single color or gradient when painting", 
        "crease_pinch_factor": "How much the crease brush pinches", 
        "cursor_color_add": "Color of cursor when adding", 
        "cursor_color_subtract": "Color of cursor when subtracting", 
        "curve": "(read-only)    Editable falloff curve", 
        "elastic_deform_type": "Deformation type that is used in the brush", 
        "elastic_deform_volume_preservation": "Poisson ratio for elastic deformation. Higher values preserve volume more, but also lead to more bulging", 
        "falloff_angle": "Paint most on faces pointing towards the view according to this angle", 
        "fill_threshold": "Threshold above which filling is not propagated", 
        "gpencil_settings": "(read-only)", 
        "gpencil_tool": "Category of the brush", 
        "grad_spacing": "Spacing before brush gradient goes full circle", 
        "gradient": "(read-only)", 
        "height": "Affectable height of brush (layer height for layer tool, i.e.)", 
        "icon_filepath": "File path to brush icon", 
        "image_paint_capabilities": "(read-only)", 
        "jitter": "Jitter the position of the brush while painting", 
        "jitter_absolute": "Jitter the position of the brush in pixels while painting", 
        "mask_stencil_dimension": "Dimensions of mask stencil in viewport", 
        "mask_stencil_pos": "Position of mask stencil in viewport", 
        "mask_texture_slot": "(read-only)", 
        "normal_radius_factor": "Ratio between the brush radius and the radius that is going to be used to sample the normal", 
        "normal_weight": "How much grab will pull vertexes out of surface during a grab", 
        "paint_curve": "Active Paint Curve", 
        "plane_offset": "Adjust plane on which the brush acts towards or away from the object surface", 
        "plane_trim": "If a vertex is further away from offset plane than this, then it is not affected", 
        "pose_offset": "Offset of the pose origin in relation to the brush radius", 
        "rake_factor": "How much grab will follow cursor rotation", 
        "rate": "Interval between paints for Airbrush", 
        "sculpt_capabilities": "(read-only)", 
        "sharp_threshold": "Threshold below which, no sharpening is done", 
        "size": "Radius of the brush in pixels", 
        "smooth_stroke_factor": "Higher values give a smoother stroke", 
        "smooth_stroke_radius": "Minimum distance from last point before stroke continues", 
        "spacing": "Spacing between brush daubs as a percentage of brush diameter", 
        "stencil_dimension": "Dimensions of stencil in viewport", 
        "stencil_pos": "Position of stencil in viewport", 
        "strength": "How powerful the effect of the brush is when applied", 
        "texture_sample_bias": "Value added to texture samples", 
        "texture_slot": "(read-only)", 
        "topology_rake_factor": "Automatically align edges to the brush direction to generate cleaner topology and define sharp features. Best used on low-poly meshes as it has a performance impact", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_accumulate": "Accumulate stroke daubs on top of each other", 
        "use_adaptive_space": "Space daubs according to surface orientation instead of screen space", 
        "use_airbrush": "Keep applying paint effect while holding mouse (spray)", 
        "use_alpha": "When this is disabled, lock alpha while painting", 
        "use_anchor": "Keep the brush anchored to the initial location", 
        "use_automasking_topology": "Affect only vertices connected to the active vertex under the brush", 
        "use_cursor_overlay": "Show cursor in viewport", 
        "use_cursor_overlay_override": "Don't show overlay during a stroke", 
        "use_curve": "Define the stroke curve with a bezier curve. Dabs are separated according to spacing", 
        "use_custom_icon": "Set the brush icon from an image file", 
        "use_edge_to_edge": "Drag anchor brush from edge-to-edge", 
        "use_frontface": "Brush only affects vertexes that face the viewer", 
        "use_frontface_falloff": "Blend brush influence by how much they face the front", 
        "use_grab_active_vertex": "Apply the maximum grab strength to the active vertex instead of the cursor location", 
        "use_inverse_smooth_pressure": "Lighter pressure causes more smoothing to be applied", 
        "use_line": "Draw a line with dabs separated according to spacing", 
        "use_locked_size": "Measure brush size relative to the view or the scene", 
        "use_offset_pressure": "Enable tablet pressure sensitivity for offset", 
        "use_original_normal": "When locked keep using normal of surface where stroke was initiated", 
        "use_original_plane": "When locked keep using the plane origin of surface where stroke was initiated", 
        "use_paint_grease_pencil": "Use this brush in grease pencil drawing mode", 
        "use_paint_image": "Use this brush in texture paint mode", 
        "use_paint_sculpt": "Use this brush in sculpt mode", 
        "use_paint_uv_sculpt": "Use this brush in UV sculpt mode", 
        "use_paint_vertex": "Use this brush in vertex paint mode", 
        "use_paint_weight": "Use this brush in weight paint mode", 
        "use_persistent": "Sculpt on a persistent layer of the mesh", 
        "use_plane_trim": "Enable Plane Trim", 
        "use_pressure_jitter": "Enable tablet pressure sensitivity for jitter", 
        "use_pressure_masking": "Pen pressure makes texture influence smaller", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "use_pressure_spacing": "Enable tablet pressure sensitivity for spacing", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "use_primary_overlay": "Show texture in viewport", 
        "use_primary_overlay_override": "Don't show overlay during a stroke", 
        "use_projected": "Apply brush influence in 2D circle instead of a sphere", 
        "use_relative_jitter": "Jittering happens in screen space, not relative to brush size", 
        "use_restore_mesh": "Allow a single dot to be carefully positioned", 
        "use_scene_spacing": "Calculate the brush spacing using view or scene distance", 
        "use_secondary_overlay": "Show texture in viewport", 
        "use_secondary_overlay_override": "Don't show overlay during a stroke", 
        "use_smooth_stroke": "Brush lags behind mouse and follows a smoother path", 
        "use_space": "Limit brush application to the distance specified by spacing", 
        "use_space_attenuation": "Automatically adjust strength to give consistent results for different spacings", 
        "vertex_paint_capabilities": "(read-only)", 
        "weight": "Vertex weight when brush is applied", 
        "weight_paint_capabilities": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "BrushCapabilities": {
      "fields": {
        "has_overlay": "(read-only)", 
        "has_random_texture_angle": "(read-only)", 
        "has_smooth_stroke": "(read-only)", 
        "has_spacing": "(read-only)"
      }
    }, 
    "BrushCapabilitiesImagePaint": {
      "fields": {
        "has_accumulate": "(read-only)", 
        "has_color": "(read-only)", 
        "has_radius": "(read-only)", 
        "has_space_attenuation": "(read-only)"
      }
    }, 
    "BrushCapabilitiesSculpt": {
      "fields": {
        "has_accumulate": "(read-only)", 
        "has_auto_smooth": "(read-only)", 
        "has_direction": "(read-only)", 
        "has_gravity": "(read-only)", 
        "has_height": "(read-only)", 
        "has_jitter": "(read-only)", 
        "has_normal_weight": "(read-only)", 
        "has_persistence": "(read-only)", 
        "has_pinch_factor": "(read-only)", 
        "has_plane_offset": "(read-only)", 
        "has_rake_factor": "(read-only)", 
        "has_random_texture_angle": "(read-only)", 
        "has_sculpt_plane": "(read-only)", 
        "has_secondary_color": "(read-only)", 
        "has_smooth_stroke": "(read-only)", 
        "has_space_attenuation": "(read-only)", 
        "has_strength_pressure": "(read-only)", 
        "has_topology_rake": "(read-only)"
      }
    }, 
    "BrushCapabilitiesVertexPaint": {
      "fields": {
        "has_color": "(read-only)"
      }
    }, 
    "BrushCapabilitiesWeightPaint": {
      "fields": {
        "has_weight": "(read-only)"
      }
    }, 
    "BrushGpencilSettings": {
      "fields": {
        "active_smooth_factor": "Amount of smoothing while drawing", 
        "angle": "Direction of the stroke at which brush gives maximal thickness (0\u00b0 for horizontal)", 
        "angle_factor": "Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction", 
        "curve_jitter": "(read-only)    Curve used for the jitter effect", 
        "curve_sensitivity": "(read-only)    Curve used for the sensitivity", 
        "curve_strength": "(read-only)    Curve used for the strength", 
        "eraser_mode": "Eraser Mode", 
        "eraser_strength_factor": "Amount of erasing for strength", 
        "eraser_thickness_factor": "Amount of erasing for thickness", 
        "fill_draw_mode": "Mode to draw boundary limits", 
        "fill_factor": "Multiplier for fill resolution, higher resolution is more accurate but slower", 
        "fill_leak": "Size in pixels to consider the leak closed", 
        "fill_simplify_level": "Number of simplify steps (large values reduce fill accuracy)", 
        "fill_threshold": "Threshold to consider color transparent for filling", 
        "gradient_factor": "Amount of gradient for Dot and Box strokes (set to 1 for full solid)", 
        "input_samples": "Generate intermediate points for very fast mouse movements. Set to 0 to disable", 
        "material": "Material used for strokes drawn using this brush", 
        "pen_jitter": "Jitter factor for new strokes", 
        "pen_sensitivity_factor": "Pressure sensitivity factor for new strokes", 
        "pen_smooth_factor": "Amount of smoothing to apply after finish newly created strokes, to reduce jitter/noise", 
        "pen_smooth_steps": "Number of times to smooth newly created strokes", 
        "pen_strength": "Color strength for new strokes (affect alpha factor of color)", 
        "pen_subdivision_steps": "Number of times to subdivide newly created strokes, for less jagged strokes", 
        "pen_thick_smooth_factor": "Amount of thickness smoothing to apply after finish newly created strokes, to reduce jitter/noise", 
        "pen_thick_smooth_steps": "Number of times to smooth thickness for newly created strokes", 
        "random_pressure": "Randomness factor for pressure in new strokes", 
        "random_strength": "Randomness factor strength in new strokes", 
        "random_subdiv": "Randomness factor for new strokes after subdivision", 
        "show_fill": "Show transparent lines to use as boundary for filling", 
        "show_fill_boundary": "Show help lines for filling to see boundaries", 
        "show_lasso": "Do not draw fill color while drawing the stroke", 
        "simplify_factor": "Factor of Simplify using adaptive algorithm", 
        "trim": "Trim intersecting stroke ends", 
        "use_cursor": "Enable cursor on screen", 
        "use_default_eraser": "Use this brush when enable eraser with fast switch key", 
        "use_jitter_pressure": "Use tablet pressure for jitter", 
        "use_material_pin": "Keep material assigned to brush", 
        "use_occlude_eraser": "Erase only strokes visible and not occluded", 
        "use_pressure": "Use tablet pressure", 
        "use_settings_postprocess": "Additional post processing options for new strokes", 
        "use_settings_random": "Random brush settings", 
        "use_settings_stabilizer": "Draw lines with a delay to allow smooth strokes. Press Shift key to override while drawing", 
        "use_strength_pressure": "Use tablet pressure for color strength", 
        "uv_random": "Random factor for autogenerated UV rotation"
      }
    }, 
    "BrushTextureSlot": {
      "fields": {
        "angle": "Brush texture rotation", 
        "has_random_texture_angle": "(read-only)", 
        "has_texture_angle": "(read-only)", 
        "has_texture_angle_source": "(read-only)", 
        "random_angle": "Brush texture random angle"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "BuildGpencilModifier": {
      "fields": {
        "concurrent_time_alignment": "When should strokes start to appear/disappear", 
        "frame_end": "End Frame (when Restrict Frame Range is enabled)", 
        "frame_start": "Start Frame (when Restrict Frame Range is enabled)", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "length": "Maximum number of frames that the build effect can run for (unless another GP keyframe occurs before this time has elapsed)", 
        "mode": "How many strokes are being animated at a time", 
        "start_delay": "Number of frames after each GP keyframe before the modifier has any effect", 
        "transition": "How are strokes animated (i.e. are they appearing or disappearing)", 
        "use_restrict_frame_range": "Only modify strokes during the specified frame range"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "BuildModifier": {
      "fields": {
        "frame_duration": "Total time the build effect requires", 
        "frame_start": "Start frame of the effect", 
        "seed": "Seed for random if used", 
        "use_random_order": "Randomize the faces or edges during build", 
        "use_reverse": "Deconstruct the mesh instead of building it"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CacheFile": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "filepath": "Path to external displacements file", 
        "frame": "The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence", 
        "frame_offset": "Subtracted from the current frame to use for looking up the data in the cache file, or to determine which file to use in a file sequence", 
        "is_sequence": "Whether the cache is separated in a series of files", 
        "object_paths": "(read-only)    Paths of the objects inside the Alembic archive", 
        "override_frame": "Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame", 
        "scale": "Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Camera": {
      "fields": {
        "angle": "Camera lens field of view", 
        "angle_x": "Camera lens horizontal field of view", 
        "angle_y": "Camera lens vertical field of view", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "background_images": "(read-only)    List of background images", 
        "clip_end": "Camera far clipping distance", 
        "clip_start": "Camera near clipping distance", 
        "cycles": "(read-only)    Cycles camera settings", 
        "display_size": "Apparent size of the Camera object in the 3D View", 
        "dof": "(read-only)", 
        "lens": "Perspective Camera lens value in millimeters", 
        "lens_unit": "Unit to edit lens in for the user interface", 
        "ortho_scale": "Orthographic Camera scale (similar to zoom)", 
        "passepartout_alpha": "Opacity (alpha) of the darkened overlay in Camera view", 
        "sensor_fit": "Method to fit image and field of view angle inside the sensor", 
        "sensor_height": "Vertical size of the image sensor area in millimeters", 
        "sensor_width": "Horizontal size of the image sensor area in millimeters", 
        "shift_x": "Camera horizontal shift", 
        "shift_y": "Camera vertical shift", 
        "show_background_images": "Display reference images behind objects in the 3D View", 
        "show_composition_center": "Display center composition guide inside the camera view", 
        "show_composition_center_diagonal": "Display diagonal center composition guide inside the camera view", 
        "show_composition_golden": "Display golden ratio composition guide inside the camera view", 
        "show_composition_golden_tria_a": "Display golden triangle A composition guide inside the camera view", 
        "show_composition_golden_tria_b": "Display golden triangle B composition guide inside the camera view", 
        "show_composition_harmony_tri_a": "Display harmony A composition guide inside the camera view", 
        "show_composition_harmony_tri_b": "Display harmony B composition guide inside the camera view", 
        "show_composition_thirds": "Display rule of thirds composition guide inside the camera view", 
        "show_limits": "Display the clipping range and focus point on the camera", 
        "show_mist": "Display a line from the Camera to indicate the mist area", 
        "show_name": "Show the active Camera's name in Camera view", 
        "show_passepartout": "Show a darkened overlay outside the image area in Camera view", 
        "show_safe_areas": "Show TV title safe and action safe areas in Camera view", 
        "show_safe_center": "Show safe areas to fit content in a different aspect ratio", 
        "show_sensor": "Show sensor size (film gate) in Camera view", 
        "stereo": "(read-only)", 
        "type": "Camera types"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CameraBackgroundImage": {
      "fields": {
        "alpha": "Image opacity to blend the image against the background color", 
        "clip": "Movie clip displayed and edited in this space", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "display_depth": "Display under or over everything", 
        "frame_method": "How the image fits in the camera frame", 
        "image": "Image displayed and edited in this space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "rotation": "Rotation for the background image (ortho view only)", 
        "scale": "Scale the background image", 
        "show_background_image": "Show this image as background", 
        "show_expanded": "Show the expanded in the user interface", 
        "show_on_foreground": "Show this image in front of objects in viewport", 
        "source": "Data source used for background", 
        "use_camera_clip": "Use movie clip from active scene camera", 
        "use_flip_x": "Flip the background image horizontally", 
        "use_flip_y": "Flip the background image vertically"
      }
    }, 
    "CameraDOFSettings": {
      "fields": {
        "aperture_blades": "Number of blades in aperture for polygonal bokeh (at least 3)", 
        "aperture_fstop": "F-Stop ratio (lower numbers give more defocus, higher numbers give a sharper image)", 
        "aperture_ratio": "Distortion to simulate anamorphic lens bokeh", 
        "aperture_rotation": "Rotation of blades in aperture", 
        "focus_distance": "Distance to the focus point for depth of field", 
        "focus_object": "Use this object to define the depth of field focal point", 
        "use_dof": "Use Depth of Field"
      }
    }, 
    "CameraSolverConstraint": {
      "fields": {
        "clip": "Movie Clip to get tracking data from", 
        "use_active_clip": "Use active clip defined in scene"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CameraStereoData": {
      "fields": {
        "convergence_distance": "The converge point for the stereo cameras (often the distance between a projector and the projection screen)", 
        "interocular_distance": "Set the distance between the eyes - the stereo plane distance / 30 should be fine", 
        "pole_merge_angle_from": "Angle at which interocular distance starts to fade to 0", 
        "pole_merge_angle_to": "Angle at which interocular distance is 0", 
        "use_pole_merge": "Fade interocular distance to 0 after the given cutoff angle", 
        "use_spherical_stereo": "Render every pixel rotating the camera around the middle of the interocular distance"
      }
    }, 
    "CastModifier": {
      "fields": {
        "cast_type": "Target object shape", 
        "object": "Control object: if available, its location determines the center of the effect", 
        "radius": "Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)", 
        "size": "Size of projection shape (leave as 0 for auto)", 
        "use_radius_as_size": "Use radius as size of projection shape (0 = auto)", 
        "use_transform": "Use object transform to control projection shape", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ChildOfConstraint": {
      "fields": {
        "inverse_matrix": "Transformation matrix to apply before", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_location_x": "Use X Location of Parent", 
        "use_location_y": "Use Y Location of Parent", 
        "use_location_z": "Use Z Location of Parent", 
        "use_rotation_x": "Use X Rotation of Parent", 
        "use_rotation_y": "Use Y Rotation of Parent", 
        "use_rotation_z": "Use Z Rotation of Parent", 
        "use_scale_x": "Use X Scale of Parent", 
        "use_scale_y": "Use Y Scale of Parent", 
        "use_scale_z": "Use Z Scale of Parent"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ClampToConstraint": {
      "fields": {
        "main_axis": "Main axis of movement", 
        "target": "Target Object (Curves only)", 
        "use_cyclic": "Treat curve as cyclic curve (no clamping to curve bounding box)"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ClothCollisionSettings": {
      "fields": {
        "collection": "Limit colliders to this Collection", 
        "collision_quality": "How many collision iterations should be done. (higher is better quality but slower)", 
        "damping": "Amount of velocity lost on collision", 
        "distance_min": "Minimum distance between collision objects before collision response takes effect", 
        "friction": "Friction force if a collision happened (higher = less movement)", 
        "impulse_clamp": "Clamp collision impulses to avoid instability (0.0 to disable clamping)", 
        "self_distance_min": "Minimum distance between cloth faces before collision response takes effect", 
        "self_friction": "Friction with self contact", 
        "self_impulse_clamp": "Clamp collision impulses to avoid instability (0.0 to disable clamping)", 
        "use_collision": "Enable collisions with other objects", 
        "use_self_collision": "Enable self collisions", 
        "vertex_group_self_collisions": "Vertex group to define vertices which are not used during self collisions"
      }
    }, 
    "ClothModifier": {
      "fields": {
        "collision_settings": "(read-only)", 
        "hair_grid_max": "(read-only)", 
        "hair_grid_min": "(read-only)", 
        "hair_grid_resolution": "(read-only)", 
        "point_cache": "(read-only)", 
        "settings": "(read-only)", 
        "solver_result": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ClothSettings": {
      "fields": {
        "air_damping": "Air has normally some thickness which slows falling things down", 
        "bending_damping": "Amount of damping in bending behavior", 
        "bending_model": "Physical model for simulating bending forces", 
        "bending_stiffness": "How much the material resists bending", 
        "bending_stiffness_max": "Maximum bending stiffness value", 
        "compression_damping": "Amount of damping in compression behavior", 
        "compression_stiffness": "How much the material resists compression", 
        "compression_stiffness_max": "Maximum compression stiffness value", 
        "density_strength": "Influence of target density on the simulation", 
        "density_target": "Maximum density of hair", 
        "effector_weights": "(read-only)", 
        "goal_default": "Default Goal (vertex target position) value, when no Vertex Group used", 
        "goal_friction": "Goal (vertex target position) friction", 
        "goal_max": "Goal maximum, vertex group weights are scaled to match this range", 
        "goal_min": "Goal minimum, vertex group weights are scaled to match this range", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "gravity": "Gravity or external force vector", 
        "mass": "Mass of cloth material", 
        "pin_stiffness": "Pin (vertex target position) spring stiffness", 
        "quality": "Quality of the simulation in steps per frame (higher is better quality but slower)", 
        "rest_shape_key": "Shape key to use the rest spring lengths from", 
        "sewing_force_max": "Maximum sewing force", 
        "shear_damping": "Amount of damping in shearing behavior", 
        "shear_stiffness": "How much the material resists shearing", 
        "shear_stiffness_max": "Maximum shear scaling value", 
        "shrink_max": "Max amount to shrink cloth by", 
        "shrink_min": "Factor by which to shrink cloth", 
        "tension_damping": "Amount of damping in stretching behavior", 
        "tension_stiffness": "How much the material resists stretching", 
        "tension_stiffness_max": "Maximum tension stiffness value", 
        "time_scale": "Cloth speed is multiplied by this value", 
        "use_dynamic_mesh": "Make simulation respect deformations in the base mesh", 
        "use_sewing_springs": "Pulls loose edges together", 
        "vertex_group_bending": "Vertex group for fine control over bending stiffness", 
        "vertex_group_mass": "Vertex Group for pinning of vertices", 
        "vertex_group_shear_stiffness": "Vertex group for fine control over shear stiffness", 
        "vertex_group_shrink": "Vertex Group for shrinking cloth", 
        "vertex_group_structural_stiffness": "Vertex group for fine control over structural stiffness", 
        "voxel_cell_size": "Size of the voxel grid cells for interaction effects"
      }
    }, 
    "ClothSolverResult": {
      "fields": {
        "avg_error": "(read-only)    Average error during substeps", 
        "avg_iterations": "(read-only)    Average iterations during substeps", 
        "max_error": "(read-only)    Maximum error during substeps", 
        "max_iterations": "(read-only)    Maximum iterations during substeps", 
        "min_error": "(read-only)    Minimum error during substeps", 
        "min_iterations": "(read-only)    Minimum iterations during substeps", 
        "status": "(read-only)    Status of the solver iteration"
      }
    }, 
    "CloudsTexture": {
      "fields": {
        "cloud_type": "Determine whether Noise returns grayscale or RGB values", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_depth": "Depth of the cloud calculation", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "Collection": {
      "fields": {
        "all_objects": "(read-only)    Objects that are in this collection and its child collections", 
        "children": "(read-only)    Collections that are immediate children of this collection", 
        "hide_render": "Globally disable in renders", 
        "hide_select": "Disable selection in viewport", 
        "hide_viewport": "Globally disable in viewports", 
        "instance_offset": "Offset from the origin to use when instancing", 
        "objects": "(read-only)    Objects that are directly in this collection"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CollectionProperty": {
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "CollisionModifier": {
      "fields": {
        "settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CollisionSettings": {
      "fields": {
        "absorption": "How much of effector force gets lost during collision with this object (in percent)", 
        "cloth_friction": "Friction for cloth collisions", 
        "damping": "Amount of damping during collision", 
        "damping_factor": "Amount of damping during particle collision", 
        "damping_random": "Random variation of damping", 
        "friction_factor": "Amount of friction during particle collision", 
        "friction_random": "Random variation of friction", 
        "permeability": "Chance that the particle will pass through the mesh", 
        "stickiness": "Amount of stickiness to surface collision", 
        "thickness_inner": "Inner face thickness (only used by softbodies)", 
        "thickness_outer": "Outer face thickness", 
        "use": "Enable this objects as a collider for physics systems", 
        "use_culling": "Cloth collision acts with respect to the collider normals (improves penetration recovery)", 
        "use_normal": "Cloth collision impulses act in the direction of the collider normals (more reliable in some cases)", 
        "use_particle_kill": "Kill collided particles"
      }
    }, 
    "ColorBalanceModifier": {
      "fields": {
        "color_balance": "(read-only)", 
        "color_multiply": "Multiply the intensity of each pixel"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "ColorGpencilModifier": {
      "fields": {
        "create_materials": "When apply modifier, create new material", 
        "hue": "Color Hue", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "modify_color": "Set what colors of the stroke are affected", 
        "pass_index": "Pass index", 
        "saturation": "Color Saturation", 
        "value": "Color Value"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "ColorManagedDisplaySettings": {
      "fields": {
        "display_device": "Display device name"
      }
    }, 
    "ColorManagedInputColorspaceSettings": {
      "fields": {
        "is_data": "Treat image as non-color data without color management, like normal or displacement maps", 
        "name": "Color space in the image file, to convert to and from when saving and loading the image"
      }
    }, 
    "ColorManagedSequencerColorspaceSettings": {
      "fields": {
        "name": "Color space that the sequencer operates in"
      }
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "curve_mapping": "(read-only)    Color curve mapping applied before display transform", 
        "exposure": "Exposure (stops) applied before display transform", 
        "gamma": "Amount of gamma modification applied after display transform", 
        "look": "Additional transform applied before view transform for an artistic needs", 
        "use_curve_mapping": "Use RGB curved for pre-display transformation", 
        "view_transform": "View used when converting image to a display space"
      }
    }, 
    "ColorMapping": {
      "fields": {
        "blend_color": "Blend color to mix with texture output color", 
        "blend_type": "Mode used to mix with texture output color", 
        "brightness": "Adjust the brightness of the texture", 
        "color_ramp": "(read-only)", 
        "contrast": "Adjust the contrast of the texture", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "use_color_ramp": "Toggle color ramp operations"
      }
    }, 
    "ColorMixSequence": {
      "fields": {
        "blend_effect": "Method for controlling how the strip combines with other strips", 
        "factor": "Percentage of how much the strip's colors affect other strips", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "ColorRamp": {
      "fields": {
        "color_mode": "Set color mode to use for interpolation", 
        "elements": "(read-only)", 
        "hue_interpolation": "Set color interpolation", 
        "interpolation": "Set interpolation between color stops"
      }
    }, 
    "ColorRampElement": {
      "fields": {
        "alpha": "Set alpha of selected color stop", 
        "color": "Set color of selected color stop", 
        "position": "Set position of selected color stop"
      }
    }, 
    "ColorSequence": {
      "fields": {
        "color": "Effect Strip color", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "CompositorNodeAlphaOver": {
      "fields": {
        "premul": "Mix Factor"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBlur": {
      "fields": {
        "aspect_correction": "Type of aspect correction to use", 
        "use_bokeh": "Use circular filter (slower)", 
        "use_extended_bounds": "Extend bounds of the input image to fully fit blurred image", 
        "use_gamma_correction": "Apply filter on gamma corrected values", 
        "use_relative": "Use relative (percent) values to define blur radius", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBokehBlur": {
      "fields": {
        "blur_max": "Blur limit, maximum CoC radius", 
        "use_extended_bounds": "Extend bounds of the input image to fully fit blurred image", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBokehImage": {
      "fields": {
        "angle": "Angle of the bokeh", 
        "catadioptric": "Level of catadioptric of the bokeh", 
        "flaps": "Number of flaps", 
        "rounding": "Level of rounding of the bokeh", 
        "shift": "Shift of the lens components"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBoxMask": {
      "fields": {
        "height": "Height of the box", 
        "rotation": "Rotation angle of the box", 
        "width": "Width of the box", 
        "x": "X position of the middle of the box", 
        "y": "Y position of the middle of the box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeBrightContrast": {
      "fields": {
        "use_premultiply": "Keep output image premultiplied alpha"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeChannelMatte": {
      "fields": {
        "limit_channel": "Limit by this channel's value", 
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_method": "Algorithm to use to limit channel", 
        "limit_min": "Values lower than this setting are 100% keyed", 
        "matte_channel": "Channel used to determine matte"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeChromaMatte": {
      "fields": {
        "gain": "Alpha falloff", 
        "lift": "Alpha lift", 
        "shadow_adjust": "Adjusts the brightness of any shadows captured", 
        "threshold": "Tolerance below which colors will be considered as exact matches", 
        "tolerance": "Tolerance for a color to be considered a keying color"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorBalance": {
      "fields": {
        "gain": "Correction for Highlights", 
        "gamma": "Correction for Midtones", 
        "lift": "Correction for Shadows", 
        "offset": "Correction for entire tonal range", 
        "offset_basis": "Support negative color by using this as the RGB basis", 
        "power": "Correction for Midtones", 
        "slope": "Correction for Highlights"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorCorrection": {
      "fields": {
        "blue": "Blue channel active", 
        "green": "Green channel active", 
        "highlights_contrast": "Highlights contrast", 
        "highlights_gain": "Highlights gain", 
        "highlights_gamma": "Highlights gamma", 
        "highlights_lift": "Highlights lift", 
        "highlights_saturation": "Highlights saturation", 
        "master_contrast": "Master contrast", 
        "master_gain": "Master gain", 
        "master_gamma": "Master gamma", 
        "master_lift": "Master lift", 
        "master_saturation": "Master saturation", 
        "midtones_contrast": "Midtones contrast", 
        "midtones_end": "End of midtones", 
        "midtones_gain": "Midtones gain", 
        "midtones_gamma": "Midtones gamma", 
        "midtones_lift": "Midtones lift", 
        "midtones_saturation": "Midtones saturation", 
        "midtones_start": "Start of midtones", 
        "red": "Red channel active", 
        "shadows_contrast": "Shadows contrast", 
        "shadows_gain": "Shadows gain", 
        "shadows_gamma": "Shadows gamma", 
        "shadows_lift": "Shadows lift", 
        "shadows_saturation": "Shadows saturation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorMatte": {
      "fields": {
        "color_hue": "Hue tolerance for colors to be considered a keying color", 
        "color_saturation": "Saturation Tolerance for the color", 
        "color_value": "Value Tolerance for the color"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeColorSpill": {
      "fields": {
        "ratio": "Scale limit by value", 
        "unspill_blue": "Blue spillmap scale", 
        "unspill_green": "Green spillmap scale", 
        "unspill_red": "Red spillmap scale", 
        "use_unspill": "Compensate all channels (differently) by hand"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeComposite": {
      "fields": {
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCrop": {
      "fields": {
        "relative": "Use relative values to crop image", 
        "use_crop_size": "Whether to crop the size of the input image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCryptomatte": {
      "fields": {
        "add": "Add object or material to matte, by picking a color from the Pick output", 
        "matte_id": "List of object and material crypto IDs to include in matte", 
        "remove": "Remove object or material from matte, by picking a color from the Pick output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCurveRGB": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCurveVec": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeCustomGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDefocus": {
      "fields": {
        "angle": "Bokeh shape rotation offset", 
        "blur_max": "Blur limit, maximum CoC radius", 
        "f_stop": "Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius", 
        "scene": "Scene from which to select the active camera (render scene if undefined)", 
        "threshold": "CoC radius threshold, prevents background bleed on in-focus midground, 0=off", 
        "use_gamma_correction": "Enable gamma correction before and after main process", 
        "use_preview": "Enable low quality mode, useful for preview", 
        "use_zbuffer": "Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)", 
        "z_scale": "Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDenoise": {
      "fields": {
        "use_hdr": "Process HDR images"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDespeckle": {
      "fields": {
        "threshold": "Threshold for detecting pixels to despeckle", 
        "threshold_neighbor": "Threshold for the number of neighbor pixels that must match"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDiffMatte": {
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDilateErode": {
      "fields": {
        "distance": "Distance to grow/shrink (number of iterations)", 
        "edge": "Edge to inset", 
        "falloff": "Falloff type the feather", 
        "mode": "Growing/shrinking mode"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeDistanceMatte": {
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeEllipseMask": {
      "fields": {
        "height": "Height of the ellipse", 
        "rotation": "Rotation angle of the ellipse", 
        "width": "Width of the ellipse", 
        "x": "X position of the middle of the ellipse", 
        "y": "Y position of the middle of the ellipse"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeGlare": {
      "fields": {
        "angle_offset": "Streak angle offset", 
        "color_modulation": "Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect", 
        "fade": "Streak fade-out factor", 
        "mix": "-1 is original image only, 0 is exact 50/50 mix, 1 is processed image only", 
        "quality": "If not set to high quality, the effect will be applied to a low-res copy of the source image", 
        "size": "Glow/glare size (not actual size; relative to initial size of bright area of pixels)", 
        "streaks": "Total number of streaks", 
        "threshold": "The glare filter will only be applied to pixels brighter than this value", 
        "use_rotate_45": "Simple star filter: add 45 degree rotation offset"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeHueCorrect": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeIDMask": {
      "fields": {
        "index": "Pass index number to convert to alpha", 
        "use_antialiasing": "Apply an anti-aliasing filter to the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeImage": {
      "fields": {
        "frame_duration": "Number of images of a movie to use", 
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "has_layers": "(read-only)    True if this image has any named layer", 
        "has_views": "(read-only)    True if this image has multiple views", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "use_cyclic": "Cycle the images in the movie", 
        "use_straight_alpha_output": "Put Node output buffer to straight alpha instead of premultiplied"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeInpaint": {
      "fields": {
        "distance": "Distance to inpaint (number of iterations)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeKeying": {
      "fields": {
        "blur_post": "Matte blur size which applies after clipping and dilate/eroding", 
        "blur_pre": "Chroma pre-blur size which applies before running keyer", 
        "clip_black": "Value of non-scaled matte pixel which considers as fully background pixel", 
        "clip_white": "Value of non-scaled matte pixel which considers as fully foreground pixel", 
        "despill_balance": "Balance between non-key colors used to detect amount of key color to be removed", 
        "despill_factor": "Factor of despilling screen color from image", 
        "dilate_distance": "Matte dilate/erode side", 
        "edge_kernel_radius": "Radius of kernel used to detect whether pixel belongs to edge", 
        "edge_kernel_tolerance": "Tolerance to pixels inside kernel which are treating as belonging to the same plane", 
        "feather_distance": "Distance to grow/shrink the feather", 
        "feather_falloff": "Falloff type the feather", 
        "screen_balance": "Balance between two non-primary channels primary channel is comparing against"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeLensdist": {
      "fields": {
        "use_fit": "For positive distortion factor only: scale image such that black areas are not visible", 
        "use_jitter": "Enable/disable jittering (faster, but also noisier)", 
        "use_projector": "Enable/disable projector mode (the effect is applied in horizontal direction only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeLumaMatte": {
      "fields": {
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_min": "Values lower than this setting are 100% keyed"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMapRange": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMask": {
      "fields": {
        "motion_blur_samples": "Number of motion blur samples", 
        "motion_blur_shutter": "Exposure for motion blur as a factor of FPS", 
        "size_source": "Where to get the mask size from for aspect/size information", 
        "use_feather": "Use feather information from the mask", 
        "use_motion_blur": "Use multi-sampled motion blur of the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMixRGB": {
      "fields": {
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeMovieDistortion": {
      "fields": {
        "distortion_type": "Distortion to use to filter image"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeOutputFile": {
      "fields": {
        "active_input_index": "Active input index in details view list", 
        "base_path": "Base output path for the image", 
        "file_slots": "(read-only)", 
        "format": "(read-only)", 
        "layer_slots": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodePlaneTrackDeform": {
      "fields": {
        "motion_blur_samples": "Number of motion blur samples", 
        "motion_blur_shutter": "Exposure for motion blur as a factor of FPS", 
        "use_motion_blur": "Use multi-sampled motion blur of the mask"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodePremulKey": {
      "fields": {
        "mapping": "Conversion between premultiplied alpha and key alpha"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeRotate": {
      "fields": {
        "filter_type": "Method to use to filter rotation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeScale": {
      "fields": {
        "frame_method": "How the image fits in the camera frame", 
        "offset_x": "Offset image horizontally (factor of image size)", 
        "offset_y": "Offset image vertically (factor of image size)", 
        "space": "Coordinate space to scale relative to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeStabilize": {
      "fields": {
        "filter_type": "Method to use to filter stabilization", 
        "invert": "Invert stabilization to re-introduce motion to the frame"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeSunBeams": {
      "fields": {
        "ray_length": "Length of rays as a factor of the image size", 
        "source": "Source point of rays as a factor of the image width & height"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeSwitch": {
      "fields": {
        "check": "Off: first socket, On: second socket"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTime": {
      "fields": {
        "curve": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTonemap": {
      "fields": {
        "adaptation": "If 0, global; if 1, based on pixel intensity", 
        "contrast": "Set to 0 to use estimate from input image", 
        "correction": "If 0, same for all channels; if 1, each independent", 
        "gamma": "If not used, set to 1", 
        "intensity": "If less than zero, darkens image; otherwise, makes it brighter", 
        "key": "The value the average luminance is mapped to", 
        "offset": "Normally always 1, but can be used as an extra control to alter the brightness curve"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTrackPos": {
      "fields": {
        "frame_relative": "Frame to be used for relative position", 
        "position": "Which marker position to use for output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTransform": {
      "fields": {
        "filter_type": "Method to use to filter transform"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTranslate": {
      "fields": {
        "use_relative": "Use relative (fraction of input image size) values to define translation", 
        "wrap_axis": "Wrap image on a specific axis"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeTree": {
      "fields": {
        "chunk_size": "Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)", 
        "edit_quality": "Quality when editing", 
        "render_quality": "Quality when rendering", 
        "use_groupnode_buffer": "Enable buffering of group nodes", 
        "use_opencl": "Enable GPU calculations", 
        "use_two_pass": "Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes", 
        "use_viewer_border": "Use boundaries for viewer nodes and composite backdrop"
      }, 
      "inherits": [
        "ID", 
        "NodeTree"
      ]
    }, 
    "CompositorNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeVecBlur": {
      "fields": {
        "factor": "Scaling factor for motion vectors (actually, 'shutter speed', in frames)", 
        "speed_max": "Maximum speed, or zero for none", 
        "speed_min": "Minimum speed for a pixel to be blurred (used to separate background from foreground)", 
        "use_curved": "Interpolate between frames in a Bezier curve, rather than linearly"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeViewer": {
      "fields": {
        "tile_order": "Tile order", 
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "CompositorNodeZcombine": {
      "fields": {
        "use_alpha": "Take Alpha channel into account when doing the Z operation", 
        "use_antialias_z": "Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ]
    }, 
    "ConsoleLine": {
      "fields": {
        "body": "Text in the line", 
        "type": "Console line type when used in scrollback"
      }
    }, 
    "Constraint": {
      "fields": {
        "active": "Constraint is the one being edited", 
        "error_location": "(read-only)    Amount of residual error in Blender space unit for constraints that work on position", 
        "error_rotation": "(read-only)    Amount of residual error in radians for constraints that work on orientation", 
        "influence": "Amount of influence constraint will have on the final solution", 
        "is_proxy_local": "(read-only)    Constraint was added in this proxy instance (i.e. did not belong to source Armature)", 
        "is_valid": "(read-only)    Constraint has valid settings and can be evaluated", 
        "mute": "Enable/Disable Constraint", 
        "name": "Constraint name", 
        "owner_space": "Space that owner is evaluated in", 
        "show_expanded": "Constraint's panel is expanded in UI", 
        "target_space": "Space that target is evaluated in", 
        "type": "(read-only)"
      }
    }, 
    "ConstraintTarget": {
      "fields": {
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object"
      }
    }, 
    "ConstraintTargetBone": {
      "fields": {
        "subtarget": "Target armature bone", 
        "target": "Target armature", 
        "weight": "Blending weight of this bone"
      }
    }, 
    "Context": {
      "fields": {
        "area": "(read-only)", 
        "blend_data": "(read-only)", 
        "collection": "(read-only)", 
        "engine": "(read-only)", 
        "gizmo_group": "(read-only)", 
        "layer_collection": "(read-only)", 
        "mode": "(read-only)", 
        "preferences": "(read-only)", 
        "region": "(read-only)", 
        "region_data": "(read-only)", 
        "scene": "(read-only)", 
        "screen": "(read-only)", 
        "space_data": "(read-only)", 
        "tool_settings": "(read-only)", 
        "view_layer": "(read-only)", 
        "window": "(read-only)", 
        "window_manager": "(read-only)", 
        "workspace": "(read-only)"
      }
    }, 
    "ControlFluidSettings": {
      "fields": {
        "attraction_radius": "Force field radius around the control object", 
        "attraction_strength": "Force strength for directional attraction towards the control object", 
        "end_time": "Time when the control particles are deactivated", 
        "quality": "Quality which is used for object sampling (higher = better but slower)", 
        "start_time": "Time when the control particles are activated", 
        "use": "Object contributes to the fluid simulation", 
        "use_reverse_frames": "Reverse control object movement", 
        "velocity_radius": "Force field radius around the control object", 
        "velocity_strength": "Force strength of how much of the control object's velocity is influencing the fluid velocity"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "CopyLocationConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "invert_x": "Invert the X location", 
        "invert_y": "Invert the Y location", 
        "invert_z": "Invert the Z location", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_offset": "Add original location into copied location", 
        "use_x": "Copy the target's X location", 
        "use_y": "Copy the target's Y location", 
        "use_z": "Copy the target's Z location"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CopyRotationConstraint": {
      "fields": {
        "euler_order": "Explicitly specify the euler rotation order", 
        "invert_x": "Invert the X rotation", 
        "invert_y": "Invert the Y rotation", 
        "invert_z": "Invert the Z rotation", 
        "mix_mode": "Specify how the copied and existing rotations are combined", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_offset": "DEPRECATED: Add original rotation into copied rotation", 
        "use_x": "Copy the target's X rotation", 
        "use_y": "Copy the target's Y rotation", 
        "use_z": "Copy the target's Z rotation"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CopyScaleConstraint": {
      "fields": {
        "power": "Raise the target's scale to the specified power", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_add": "Use addition instead of multiplication to combine scale (2.7 compatibility)", 
        "use_make_uniform": "Redistribute the copied change in volume equally between the three axes of the owner", 
        "use_offset": "Combine original scale with copied scale", 
        "use_x": "Copy the target's X scale", 
        "use_y": "Copy the target's Y scale", 
        "use_z": "Copy the target's Z scale"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CopyTransformsConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "mix_mode": "Specify how the copied and existing transformations are combined", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "CorrectiveSmoothModifier": {
      "fields": {
        "factor": "Smooth factor effect", 
        "invert_vertex_group": "Invert vertex group influence", 
        "is_bind": "(read-only)", 
        "rest_source": "Select the source of rest positions", 
        "smooth_type": "Method used for smoothing", 
        "use_only_smooth": "Apply smoothing without reconstructing the surface", 
        "use_pin_boundary": "Excludes boundary vertices from being smoothed", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CrossSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Curve": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "bevel_depth": "Bevel depth when not using a bevel object", 
        "bevel_factor_end": "Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)", 
        "bevel_factor_mapping_end": "Determines how the end bevel factor is mapped to a spline", 
        "bevel_factor_mapping_start": "Determines how the start bevel factor is mapped to a spline", 
        "bevel_factor_start": "Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)", 
        "bevel_object": "Curve object name that defines the bevel shape", 
        "bevel_resolution": "Bevel resolution when depth is non-zero and no specific bevel object has been defined", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "dimensions": "Select 2D or 3D curve type", 
        "eval_time": "Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)", 
        "extrude": "Amount of curve extrusion when not using a bevel object", 
        "fill_mode": "Mode of filling curve", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "materials": "(read-only)", 
        "offset": "Offset the curve to adjust the width of a text", 
        "path_duration": "The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting", 
        "render_resolution_u": "Surface resolution in U direction used while rendering (zero uses preview resolution)", 
        "render_resolution_v": "Surface resolution in V direction used while rendering (zero uses preview resolution)", 
        "resolution_u": "Surface resolution in U direction", 
        "resolution_v": "Surface resolution in V direction", 
        "shape_keys": "(read-only)", 
        "splines": "(read-only)    Collection of splines in this curve data object", 
        "taper_object": "Curve object name that defines the taper (width)", 
        "texspace_location": "Texture space location", 
        "texspace_size": "Texture space size", 
        "twist_mode": "The type of tilt calculation for 3D Curves", 
        "twist_smooth": "Smoothing iteration for tangents", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "use_deform_bounds": "Option for curve-deform: Use the mesh bounds to clamp the deformation", 
        "use_fill_caps": "Fill caps for beveled curves", 
        "use_fill_deform": "Fill curve after applying shape keys and all modifiers", 
        "use_map_taper": "Map effect of the taper object to the beveled part of the curve", 
        "use_path": "Enable the curve to become a translation path", 
        "use_path_follow": "Make curve path children to rotate along the path", 
        "use_radius": "Option for paths and curve-deform: apply the curve radius with path following it and deforming", 
        "use_stretch": "Option for curve-deform: make deformed child to stretch along entire path", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "CurveMap": {
      "fields": {
        "extend": "Extrapolate the curve or extend it horizontally", 
        "points": "(read-only)"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "black_level": "For RGB curves, the color that black is mapped to", 
        "curves": "(read-only)", 
        "tone": "Tone of the curve", 
        "use_clip": "Force the curve view to fit a defined boundary", 
        "white_level": "For RGB curves, the color that white is mapped to"
      }
    }, 
    "CurveMapPoint": {
      "fields": {
        "handle_type": "Curve interpolation at this point: Bezier or vector", 
        "location": "X/Y coordinates of the curve point", 
        "select": "Selection state of the curve point"
      }
    }, 
    "CurveModifier": {
      "fields": {
        "deform_axis": "The axis that the curve deforms along", 
        "object": "Curve object to deform with", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "CurvePaintSettings": {
      "fields": {
        "corner_angle": "Angles above this are considered corners", 
        "curve_type": "Type of curve to use for new strokes", 
        "depth_mode": "Method of projecting depth", 
        "error_threshold": "Allow deviation for a smoother, less precise line", 
        "fit_method": "Curve fitting method", 
        "radius_max": "Radius to use when the maximum pressure is applied (or when a tablet isn't used)", 
        "radius_min": "Minimum radius when the minimum pressure is applied (also the minimum when tapering)", 
        "radius_taper_end": "Taper factor for the radius of each point along the curve", 
        "radius_taper_start": "Taper factor for the radius of each point along the curve", 
        "surface_offset": "Offset the stroke from the surface", 
        "surface_plane": "Plane for projected stroke", 
        "use_corners_detect": "Detect corners and use non-aligned handles", 
        "use_offset_absolute": "Apply a fixed offset (don't scale by the radius)", 
        "use_pressure_radius": "Map tablet pressure to curve radius", 
        "use_stroke_endpoints": "Use the start of the stroke for the depth"
      }
    }, 
    "CurvesModifier": {
      "fields": {
        "curve_mapping": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "CurveSplines": {
      "fields": {
        "active": "Active curve spline"
      }
    }, 
    "CyclesCameraSettings": {
      "fields": {
        "fisheye_fov": "Field of view for the fisheye lens", 
        "fisheye_lens": "Lens focal length (mm)", 
        "latitude_max": "Maximum latitude (vertical angle) for the equirectangular lens", 
        "latitude_min": "Minimum latitude (vertical angle) for the equirectangular lens", 
        "longitude_max": "Maximum longitude (horizontal angle) for the equirectangular lens", 
        "longitude_min": "Minimum longitude (horizontal angle) for the equirectangular lens", 
        "panorama_type": "Distortion to use for the calculation"
      }
    }, 
    "CyclesCurveRenderSettings": {
      "fields": {
        "cull_backfacing": "Do not test the back-face of each strand", 
        "primitive": "Type of primitive used for hair rendering", 
        "resolution": "Resolution of generated mesh", 
        "shape": "Form of hair", 
        "subdivisions": "Number of subdivisions used in Cardinal curve intersection (power of 2)", 
        "use_curves": "Activate Cycles hair rendering for particle system"
      }
    }, 
    "CyclesLightSettings": {
      "fields": {
        "cast_shadow": "Light casts shadows", 
        "is_portal": "Use this area light to guide sampling of the background, note that this will make the light invisible", 
        "max_bounces": "Maximum number of bounces the light will contribute to the render", 
        "samples": "Number of light samples to render for each AA sample", 
        "use_multiple_importance_sampling": "Use multiple importance sampling for the light, reduces noise for area lights and sharp glossy materials"
      }
    }, 
    "CyclesMaterialSettings": {
      "fields": {
        "displacement_method": "Method to use for the displacement", 
        "homogeneous_volume": "When using volume rendering, assume volume has the same density everywhere (not using any textures), for faster rendering", 
        "sample_as_light": "Use multiple importance sampling for this material, disabling may reduce overall noise for large objects that emit little light compared to other light sources", 
        "use_transparent_shadow": "Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows", 
        "volume_interpolation": "Interpolation method to use for smoke/fire volumes", 
        "volume_sampling": "Sampling method to use for volumes"
      }
    }, 
    "CyclesObjectSettings": {
      "fields": {
        "dicing_rate": "Multiplier for scene dicing rate (located in the Subdivision panel)", 
        "is_holdout": "Render objects as a holdout or matte, creating a hole in the image with zero alpha, to fill out in compositing with real footage or another render", 
        "is_shadow_catcher": "Only render shadows on this object, for compositing renders into real footage", 
        "motion_steps": "Control accuracy of motion blur, more steps gives more memory usage (actual number of steps is 2^(steps - 1))", 
        "use_adaptive_subdivision": "Use adaptive render time subdivision", 
        "use_camera_cull": "Allow this object and its duplicators to be culled by camera space culling", 
        "use_deform_motion": "Use deformation motion blur for this object", 
        "use_distance_cull": "Allow this object and its duplicators to be culled by distance from camera", 
        "use_motion_blur": "Use motion blur for this object"
      }
    }, 
    "CyclesRenderLayerSettings": {
      "fields": {
        "denoising_diffuse_direct": "Denoise the direct diffuse lighting", 
        "denoising_diffuse_indirect": "Denoise the indirect diffuse lighting", 
        "denoising_feature_strength": "Controls removal of noisy image feature passes (lower values preserve more detail, but aren't as smooth)", 
        "denoising_glossy_direct": "Denoise the direct glossy lighting", 
        "denoising_glossy_indirect": "Denoise the indirect glossy lighting", 
        "denoising_neighbor_frames": "Number of neighboring frames to use for denoising animations (more frames produce smoother results at the cost of performance)", 
        "denoising_radius": "Size of the image area that's used to denoise a pixel (higher values are smoother, but might lose detail and are slower)", 
        "denoising_relative_pca": "When removing pixels that don't carry information, use a relative threshold instead of an absolute one (can help to reduce artifacts, but might cause detail loss around edges)", 
        "denoising_store_passes": "Store the denoising feature passes and the noisy image", 
        "denoising_strength": "Controls neighbor pixel weighting for the denoising filter (lower values preserve more detail, but aren't as smooth)", 
        "denoising_subsurface_direct": "Denoise the direct subsurface lighting", 
        "denoising_subsurface_indirect": "Denoise the indirect subsurface lighting", 
        "denoising_transmission_direct": "Denoise the direct transmission lighting", 
        "denoising_transmission_indirect": "Denoise the indirect transmission lighting", 
        "pass_crypto_accurate": "Generate a more accurate Cryptomatte pass. CPU only, may render slower and use more memory", 
        "pass_crypto_depth": "Sets how many unique objects can be distinguished per pixel", 
        "pass_debug_bvh_intersections": "Store Debug BVH Intersections", 
        "pass_debug_bvh_traversed_instances": "Store Debug BVH Traversed Instances pass", 
        "pass_debug_bvh_traversed_nodes": "Store Debug BVH Traversed Nodes pass", 
        "pass_debug_ray_bounces": "Store Debug Ray Bounces pass", 
        "pass_debug_render_time": "Render time in milliseconds per sample and pixel", 
        "use_denoising": "Denoise the rendered image", 
        "use_pass_crypto_asset": "Render cryptomatte asset pass, for isolating groups of objects with the same parent", 
        "use_pass_crypto_material": "Render cryptomatte material pass, for isolating materials in compositing", 
        "use_pass_crypto_object": "Render cryptomatte object pass, for isolating objects in compositing", 
        "use_pass_volume_direct": "Deliver direct volumetric scattering pass", 
        "use_pass_volume_indirect": "Deliver indirect volumetric scattering pass"
      }
    }, 
    "CyclesRenderSettings": {
      "fields": {
        "aa_samples": "Number of antialiasing samples to render for each pixel", 
        "ao_bounces": "Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature", 
        "ao_bounces_render": "Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature", 
        "ao_samples": "Number of ambient occlusion samples to render for each AA sample", 
        "bake_type": "Type of pass to bake", 
        "blur_glossy": "Adaptively blur glossy shaders after blurry bounces, to reduce noise at the cost of accuracy", 
        "camera_cull_margin": "Margin for the camera space culling", 
        "caustics_reflective": "Use reflective caustics, resulting in a brighter image (more noise but added realism)", 
        "caustics_refractive": "Use refractive caustics, resulting in a brighter image (more noise but added realism)", 
        "debug_bvh_time_steps": "Split BVH primitives by this number of time steps to speed up render time in cost of memory", 
        "debug_bvh_type": "Choose between faster updates, or faster render", 
        "debug_opencl_mem_limit": "Artificial limit on OpenCL memory usage in MB (0 to disable limit)", 
        "debug_use_hair_bvh": "Use special type BVH optimized for hair (uses more ram but renders faster)", 
        "debug_use_spatial_splits": "Use BVH spatial splits: longer builder time, faster render", 
        "device": "Device to use for rendering", 
        "dicing_camera": "Camera to use as reference point when subdividing geometry, useful to avoid crawling artifacts in animations when the scene camera is moving", 
        "dicing_rate": "Size of a micropolygon in pixels", 
        "diffuse_bounces": "Maximum number of diffuse reflection bounces, bounded by total maximum", 
        "diffuse_samples": "Number of diffuse bounce samples to render for each AA sample", 
        "distance_cull_margin": "Cull objects which are further away from camera than this distance", 
        "feature_set": "Feature set to use for rendering", 
        "film_exposure": "Image brightness scale", 
        "film_transparent_glass": "Render transmissive surfaces as transparent, for compositing glass over another background", 
        "film_transparent_roughness": "For transparent transmission, keep surfaces with roughness above the threshold opaque", 
        "filter_type": "Pixel filter type", 
        "filter_width": "Pixel filter width", 
        "glossy_bounces": "Maximum number of glossy reflection bounces, bounded by total maximum", 
        "glossy_samples": "Number of glossy bounce samples to render for each AA sample", 
        "light_sampling_threshold": "Probabilistically terminate light samples when the light contribution is below this threshold (more noise but faster rendering). Zero disables the test and never ignores lights", 
        "max_bounces": "Total maximum number of bounces", 
        "max_subdivisions": "Stop subdividing when this level is reached even if the dice rate would produce finer tessellation", 
        "mesh_light_samples": "Number of mesh emission light samples to render for each AA sample", 
        "min_light_bounces": "Minimum number of light bounces. Setting this higher reduces noise in the first bounces, but can also be less efficient for more complex geometry like hair and volumes", 
        "min_transparent_bounces": "Minimum number of transparent bounces. Setting this higher reduces noise in the first bounces, but can also be less efficient for more complex geometry like hair and volumes", 
        "motion_blur_position": "Offset for the shutter's time interval, allows to change the motion blur trails", 
        "offscreen_dicing_scale": "Multiplier for dicing rate of geometry outside of the camera view. The dicing rate of objects is gradually increased the further they are outside the camera view. Lower values provide higher quality reflections and shadows for off screen objects, while higher values use less memory", 
        "pixel_filter_type": "Pixel filter type", 
        "preview_aa_samples": "Number of antialiasing samples to render in the viewport, unlimited if 0", 
        "preview_dicing_rate": "Size of a micropolygon in pixels during preview render", 
        "preview_pause": "Pause all viewport preview renders", 
        "preview_samples": "Number of samples to render in the viewport, unlimited if 0", 
        "preview_start_resolution": "Resolution to start rendering preview at, progressively increasing it to the full viewport size", 
        "progressive": "Method to sample lights and materials", 
        "rolling_shutter_duration": "Scanline \"exposure\" time for the rolling shutter effect", 
        "rolling_shutter_type": "Type of rolling shutter effect matching CMOS-based cameras", 
        "sample_all_lights_direct": "Sample all lights (for direct samples), rather than randomly picking one", 
        "sample_all_lights_indirect": "Sample all lights (for indirect samples), rather than randomly picking one", 
        "sample_clamp_direct": "If non-zero, the maximum value for a direct sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy", 
        "sample_clamp_indirect": "If non-zero, the maximum value for an indirect sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy", 
        "samples": "Number of samples to render for each pixel", 
        "sampling_pattern": "Random sampling pattern used by the integrator", 
        "seed": "Seed value for integrator to get different noise patterns", 
        "shading_system": "Use Open Shading Language (CPU rendering only)", 
        "subsurface_samples": "Number of subsurface scattering samples to render for each AA sample", 
        "texture_limit": "Limit texture size used by viewport rendering", 
        "texture_limit_render": "Limit texture size used by final rendering", 
        "tile_order": "Tile order for rendering", 
        "transmission_bounces": "Maximum number of transmission bounces, bounded by total maximum", 
        "transmission_samples": "Number of transmission bounce samples to render for each AA sample", 
        "transparent_max_bounces": "Maximum number of transparent bounces", 
        "use_animated_seed": "Use different seed values (and hence noise patterns) at different frames", 
        "use_bvh_embree": "Use Embree as ray accelerator", 
        "use_camera_cull": "Allow objects to be culled based on the camera frustum", 
        "use_distance_cull": "Allow objects to be culled based on the distance from camera", 
        "use_layer_samples": "How to use per view layer sample settings", 
        "use_progressive_refine": "Instead of rendering each tile until it is finished, refine the whole image progressively (this renders somewhat slower, but time can be saved by manually stopping the render when the noise is low enough)", 
        "use_square_samples": "Square sampling values for easier artist control", 
        "volume_bounces": "Maximum number of volumetric scattering events", 
        "volume_max_steps": "Maximum number of steps through the volume before giving up, to avoid extremely long render times with big objects or small step sizes", 
        "volume_samples": "Number of volume scattering samples to render for each AA sample", 
        "volume_step_size": "Distance between volume shader samples when rendering the volume (lower values give more accurate and detailed results, but also increased render time)"
      }
    }, 
    "CyclesView3DShadingSettings": {
      "fields": {
        "render_pass": "Render pass to show in the 3D Viewport"
      }
    }, 
    "CyclesVisibilitySettings": {
      "fields": {
        "camera": "Object visibility for camera rays", 
        "diffuse": "Object visibility for diffuse reflection rays", 
        "glossy": "Object visibility for glossy reflection rays", 
        "scatter": "Object visibility for volume scatter rays", 
        "shadow": "Object visibility for shadow rays", 
        "transmission": "Object visibility for transmission rays"
      }
    }, 
    "CyclesWorldSettings": {
      "fields": {
        "homogeneous_volume": "When using volume rendering, assume volume has the same density everywhere(not using any textures), for faster rendering", 
        "max_bounces": "Maximum number of bounces the background light will contribute to the render", 
        "sample_map_resolution": "Importance map size is resolution x resolution/2; higher values potentially produce less noise, at the cost of memory and speed", 
        "samples": "Number of light samples to render for each AA sample", 
        "sampling_method": "How to sample the background light", 
        "volume_interpolation": "Interpolation method to use for volumes", 
        "volume_sampling": "Sampling method to use for volumes"
      }
    }, 
    "DampedTrackConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "track_axis": "Axis that points to the target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "DataTransferModifier": {
      "fields": {
        "data_types_edges": "Which edge data layers to transfer", 
        "data_types_loops": "Which face corner data layers to transfer", 
        "data_types_polys": "Which poly data layers to transfer", 
        "data_types_verts": "Which vertex data layers to transfer", 
        "edge_mapping": "Method used to map source edges to destination ones", 
        "invert_vertex_group": "Invert vertex group influence", 
        "islands_precision": "Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)", 
        "layers_uv_select_dst": "How to match source and destination layers", 
        "layers_uv_select_src": "Which layers to transfer, in case of multi-layers types", 
        "layers_vcol_select_dst": "How to match source and destination layers", 
        "layers_vcol_select_src": "Which layers to transfer, in case of multi-layers types", 
        "layers_vgroup_select_dst": "How to match source and destination layers", 
        "layers_vgroup_select_src": "Which layers to transfer, in case of multi-layers types", 
        "loop_mapping": "Method used to map source faces' corners to destination ones", 
        "max_distance": "Maximum allowed distance between source and destination element, for non-topology mappings", 
        "mix_factor": "Factor to use when applying data to destination (exact behavior depends on mix mode, multiplied with weights from vertex group when defined)", 
        "mix_mode": "How to affect destination elements with source values", 
        "object": "Object to transfer data from", 
        "poly_mapping": "Method used to map source faces to destination ones", 
        "ray_radius": "'Width' of rays (especially useful when raycasting against vertices or edges)", 
        "use_edge_data": "Enable edge data transfer", 
        "use_loop_data": "Enable face corner data transfer", 
        "use_max_distance": "Source elements must be closer than given distance from destination one", 
        "use_object_transform": "Evaluate source and destination meshes in global space", 
        "use_poly_data": "Enable face data transfer", 
        "use_vert_data": "Enable vertex data transfer", 
        "vert_mapping": "Method used to map source vertices to destination ones", 
        "vertex_group": "Vertex group name for selecting the affected areas"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DecimateModifier": {
      "fields": {
        "angle_limit": "Only dissolve angles below this (planar only)", 
        "delimit": "Limit merging geometry", 
        "face_count": "(read-only)    The current number of faces in the decimated mesh", 
        "invert_vertex_group": "Invert vertex group influence (collapse only)", 
        "iterations": "Number of times reduce the geometry (unsubdivide only)", 
        "ratio": "Ratio of triangles to reduce to (collapse only)", 
        "symmetry_axis": "Axis of symmetry", 
        "use_collapse_triangulate": "Keep triangulated faces resulting from decimation (collapse only)", 
        "use_dissolve_boundaries": "Dissolve all vertices in between face boundaries (planar only)", 
        "use_symmetry": "Maintain symmetry on an axis", 
        "vertex_group": "Vertex group name (collapse only)", 
        "vertex_group_factor": "Vertex group strength"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Depsgraph": {
      "fields": {
        "ids": "(read-only)    All evaluated datablocks", 
        "mode": "(read-only)    Evaluation mode", 
        "object_instances": "(read-only)    All object instances to display or render (WARNING: only use this as an iterator, never as a sequence, and do not keep any references to its items)", 
        "objects": "(read-only)    Evaluated objects in the dependency graph", 
        "scene": "(read-only)    Original scene dependency graph is built for", 
        "scene_eval": "(read-only)    Original scene dependency graph is built for", 
        "updates": "(read-only)    Updates to datablocks", 
        "view_layer": "(read-only)    Original view layer dependency graph is built for", 
        "view_layer_eval": "(read-only)    Original view layer dependency graph is built for"
      }
    }, 
    "DepsgraphObjectInstance": {
      "fields": {
        "instance_object": "(read-only)    Evaluated object which is being instanced by this iterator", 
        "is_instance": "(read-only)    Denotes if the object is generated by another object", 
        "matrix_world": "(read-only)    Generated transform matrix in world space", 
        "object": "(read-only)    Evaluated object the iterator points to", 
        "orco": "(read-only)    Generated coordinates in parent object space", 
        "parent": "(read-only)    If the object is an instance, the parent object that generated it", 
        "particle_system": "(read-only)    Evaluated particle system that this object was instanced from", 
        "persistent_id": "(read-only)    Persistent identifier for inter-frame matching of objects with motion blur", 
        "random_id": "(read-only)    Random id for this instance, typically for randomized shading", 
        "show_particles": "(read-only)    Particles part of the object should be visible in the render", 
        "show_self": "(read-only)    The object geometry itself should be visible in the render", 
        "uv": "(read-only)    UV coordinates in parent object space"
      }
    }, 
    "DepsgraphUpdate": {
      "fields": {
        "id": "(read-only)    Updated datablock", 
        "is_updated_geometry": "(read-only)    Object geometry is updated", 
        "is_updated_transform": "(read-only)    Object transformation is updated"
      }
    }, 
    "DisplaceModifier": {
      "fields": {
        "mid_level": "Material value that gives no displacement", 
        "strength": "Amount to displace geometry", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "uv_layer": "UV map name", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DisplaySafeAreas": {
      "fields": {
        "action": "Safe area for general elements", 
        "action_center": "Safe area for general elements in a different aspect ratio", 
        "title": "Safe area for text and graphics", 
        "title_center": "Safe area for text and graphics in a different aspect ratio"
      }
    }, 
    "DistortedNoiseTexture": {
      "fields": {
        "distortion": "Amount of distortion", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_distortion": "Noise basis for the distortion", 
        "noise_scale": "Scaling for noise input"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "DomainFluidSettings": {
      "fields": {
        "compressibility": "Allowed compressibility due to gravitational force for standing fluid (directly affects simulation step size)", 
        "end_time": "Simulation time of the last blender frame (in seconds)", 
        "filepath": "Directory (and/or filename prefix) to store baked fluid simulation files in", 
        "fluid_mesh_vertices": "(read-only)    Vertices of the fluid mesh generated by simulation", 
        "frame_offset": "Offset when reading baked cache", 
        "generate_particles": "Amount of particles to generate (0=off, 1=normal, >1=more)", 
        "gravity": "Gravity in X, Y and Z direction", 
        "grid_levels": "Number of coarsened grids to use (-1 for automatic)", 
        "memory_estimate": "(read-only)    Estimated amount of memory needed for baking the domain", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "preview_resolution": "Preview resolution in X,Y and Z direction", 
        "render_display_mode": "How to display the mesh for rendering", 
        "resolution": "Domain resolution in X,Y and Z direction", 
        "simulation_rate": "Fluid motion rate (0 = stationary, 1 = normal speed)", 
        "simulation_scale": "Size of the simulation domain in meters", 
        "start_time": "Simulation time of the first blender frame (in seconds)", 
        "surface_smooth": "Amount of surface smoothing (a value of 0 is off, 1 is normal smoothing and more than 1 is extra smoothing)", 
        "surface_subdivisions": "Number of isosurface subdivisions (this is necessary for the inclusion of particles into the surface generation - WARNING: can lead to longer computation times !)", 
        "threads": "Override number of threads for the simulation, 0 is automatic", 
        "tracer_particles": "Number of tracer particles to generate", 
        "use_reverse_frames": "Reverse fluid frames", 
        "use_speed_vectors": "Generate speed vectors for vector blur", 
        "use_surface_noobs": "Removes the air gap between fluid surface and obstacles - WARNING: Can result in a dissolving surface in other areas", 
        "use_time_override": "Use a custom start and end time (in seconds) instead of the scene's timeline", 
        "viewport_display_mode": "How to display the mesh in the viewport", 
        "viscosity_base": "Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)", 
        "viscosity_exponent": "Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "DopeSheet": {
      "fields": {
        "filter_collection": "Collection that included object should be a member of", 
        "filter_fcurve_name": "F-Curve live filtering string", 
        "filter_text": "Live filtering string", 
        "show_armatures": "Include visualization of armature related animation data", 
        "show_cache_files": "Include visualization of cache file related animation data", 
        "show_cameras": "Include visualization of camera related animation data", 
        "show_curves": "Include visualization of curve related animation data", 
        "show_datablock_filters": "Show options for whether channels related to certain types of data are included", 
        "show_expanded_summary": "Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)", 
        "show_gpencil": "Include visualization of Grease Pencil related animation data and frames", 
        "show_gpencil_3d_only": "Only show Grease Pencil data-blocks used as part of the active scene", 
        "show_hidden": "Include channels from objects/bone that are not visible", 
        "show_lattices": "Include visualization of lattice related animation data", 
        "show_lights": "Include visualization of light related animation data", 
        "show_linestyles": "Include visualization of Line Style related Animation data", 
        "show_materials": "Include visualization of material related animation data", 
        "show_meshes": "Include visualization of mesh related animation data", 
        "show_metaballs": "Include visualization of metaball related animation data", 
        "show_missing_nla": "Include animation data-blocks with no NLA data (NLA editor only)", 
        "show_modifiers": "Include visualization of animation data related to data-blocks linked to modifiers", 
        "show_movieclips": "Include visualization of movie clip related animation data", 
        "show_nodes": "Include visualization of node related animation data", 
        "show_only_errors": "Only include F-Curves and drivers that are disabled or have errors", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "show_particles": "Include visualization of particle related animation data", 
        "show_scenes": "Include visualization of scene related animation data", 
        "show_shapekeys": "Include visualization of shape key related animation data", 
        "show_speakers": "Include visualization of speaker related animation data", 
        "show_summary": "Display an additional 'summary' line (Dope Sheet editors only)", 
        "show_textures": "Include visualization of texture related animation data", 
        "show_transforms": "Include visualization of object-level animation data (mostly transforms)", 
        "show_worlds": "Include visualization of world related animation data", 
        "source": "(read-only)    ID-Block representing source data, usually ID_SCE (i.e. Scene)", 
        "use_datablock_sort": "Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)", 
        "use_multi_word_filter": "Perform fuzzy/multi-word matching (WARNING: May be slow)"
      }
    }, 
    "Driver": {
      "fields": {
        "expression": "Expression to use for Scripted Expression", 
        "is_simple_expression": "(read-only)    The scripted expression can be evaluated without using the full python interpreter", 
        "is_valid": "Driver could not be evaluated in past, so should be skipped", 
        "type": "Driver type", 
        "use_self": "Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)", 
        "variables": "(read-only)    Properties acting as inputs for this driver"
      }
    }, 
    "DriverTarget": {
      "fields": {
        "bone_target": "Name of PoseBone to use as target", 
        "data_path": "RNA Path (from ID-block) to property used", 
        "id": "ID-block that the specific property used can be found from (id_type property must be set first)", 
        "id_type": "Type of ID-block that can be used", 
        "rotation_mode": "Mode for calculating rotation channel values", 
        "transform_space": "Space in which transforms are used", 
        "transform_type": "Driver variable type"
      }
    }, 
    "DriverVariable": {
      "fields": {
        "is_name_valid": "(read-only)    Is this a valid name for a driver variable", 
        "name": "Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)", 
        "targets": "(read-only)    Sources of input data for evaluating this variable", 
        "type": "Driver variable type"
      }
    }, 
    "DynamicPaintBrushSettings": {
      "fields": {
        "invert_proximity": "Proximity falloff is applied inside the volume", 
        "paint_alpha": "Paint alpha", 
        "paint_color": "Color of the paint", 
        "paint_distance": "Maximum distance from brush to mesh surface to affect paint", 
        "paint_ramp": "(read-only)    Color ramp used to define proximity falloff", 
        "paint_wetness": "Paint wetness, visible in wetmap (some effects only affect wet paint)", 
        "particle_system": "The particle system to paint with", 
        "proximity_falloff": "Proximity falloff type", 
        "ray_direction": "Ray direction to use for projection (if brush object is located in that direction it's painted)", 
        "smooth_radius": "Smooth falloff added after solid radius", 
        "smudge_strength": "Smudge effect strength", 
        "solid_radius": "Radius that will be painted solid", 
        "use_absolute_alpha": "Only increase alpha value if paint alpha is higher than existing", 
        "use_negative_volume": "Negate influence inside the volume", 
        "use_paint_erase": "Erase / remove paint instead of adding it", 
        "use_particle_radius": "Use radius from particle settings", 
        "use_proximity_project": "Brush is projected to canvas from defined direction within brush proximity", 
        "use_proximity_ramp_alpha": "Only read color ramp alpha", 
        "use_smudge": "Make this brush to smudge existing paint as it moves", 
        "use_velocity_alpha": "Multiply brush influence by velocity color ramp alpha", 
        "use_velocity_color": "Replace brush color by velocity color ramp", 
        "use_velocity_depth": "Multiply brush intersection depth (displace, waves) by velocity ramp alpha", 
        "velocity_max": "Velocity considered as maximum influence (Blender units per frame)", 
        "velocity_ramp": "(read-only)    Color ramp used to define brush velocity effect", 
        "wave_clamp": "Maximum level of surface intersection used to influence waves (use 0.0 to disable)", 
        "wave_factor": "Multiplier for wave influence of this brush"
      }
    }, 
    "DynamicPaintCanvasSettings": {
      "fields": {
        "canvas_surfaces": "(read-only)    Paint surface list"
      }
    }, 
    "DynamicPaintModifier": {
      "fields": {
        "brush_settings": "(read-only)", 
        "canvas_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "brush_collection": "Only use brush objects from this collection", 
        "brush_influence_scale": "Adjust influence brush objects have on this surface", 
        "brush_radius_scale": "Adjust radius of proximity brushes or particles for this surface", 
        "color_dry_threshold": "The wetness level when colors start to shift to the background", 
        "color_spread_speed": "How fast colors get mixed within wet paint", 
        "depth_clamp": "Maximum level of depth intersection in object space (use 0.0 to disable)", 
        "displace_factor": "Strength of displace when applied to the mesh", 
        "dissolve_speed": "Approximately in how many frames should dissolve happen", 
        "drip_acceleration": "How much surface acceleration affects dripping", 
        "drip_velocity": "How much surface velocity affects dripping", 
        "dry_speed": "Approximately in how many frames should drying happen", 
        "effector_weights": "(read-only)", 
        "frame_end": "Simulation end frame", 
        "frame_start": "Simulation start frame", 
        "frame_substeps": "Do extra frames between scene frames to ensure smooth motion", 
        "image_output_path": "Directory to save the textures", 
        "image_resolution": "Output image resolution", 
        "init_color": "Initial color of the surface", 
        "is_active": "Toggle whether surface is processed or ignored", 
        "is_cache_user": "(read-only)", 
        "name": "Surface name", 
        "output_name_a": "Name used to save output from this surface", 
        "output_name_b": "Name used to save output from this surface", 
        "point_cache": "(read-only)", 
        "shrink_speed": "How fast shrink effect moves on the canvas surface", 
        "spread_speed": "How fast spread effect moves on the canvas surface", 
        "surface_format": "Surface Format", 
        "surface_type": "Surface Type", 
        "use_antialiasing": "Use 5x multisampling to smooth paint edges", 
        "use_dissolve": "Enable to make surface changes disappear over time", 
        "use_dissolve_log": "Use logarithmic dissolve (makes high values to fade faster than low values)", 
        "use_drip": "Process drip effect (drip wet paint to gravity direction)", 
        "use_dry_log": "Use logarithmic drying (makes high values to dry faster than low values)", 
        "use_drying": "Enable to make surface wetness dry over time", 
        "use_incremental_displace": "New displace is added cumulatively on top of existing", 
        "use_output_a": "Save this output layer", 
        "use_output_b": "Save this output layer", 
        "use_premultiply": "Multiply color by alpha (recommended for Blender input)", 
        "use_shrink": "Process shrink effect (shrink paint areas)", 
        "use_spread": "Process spread effect (spread wet paint around surface)", 
        "use_wave_open_border": "Pass waves through mesh edges", 
        "uv_layer": "UV map name", 
        "wave_damping": "Wave damping factor", 
        "wave_smoothness": "Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)", 
        "wave_speed": "Wave propagation speed", 
        "wave_spring": "Spring force that pulls water level back to zero", 
        "wave_timescale": "Wave time scaling factor"
      }
    }, 
    "DynamicPaintSurfaces": {
      "fields": {
        "active": "(read-only)    Active Dynamic Paint surface being displayed"
      }
    }, 
    "EdgeSplitModifier": {
      "fields": {
        "split_angle": "Angle above which to split edges", 
        "use_edge_angle": "Split edges with high angle between faces", 
        "use_edge_sharp": "Split edges that are marked as sharp"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "EditBone": {
      "fields": {
        "bbone_curveinx": "X-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveiny": "Y-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveoutx": "X-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_curveouty": "Y-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_custom_handle_end": "Bone that serves as the end handle for the B-Bone curve", 
        "bbone_custom_handle_start": "Bone that serves as the start handle for the B-Bone curve", 
        "bbone_easein": "Length of first Bezier Handle (for B-Bones only)", 
        "bbone_easeout": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_handle_type_end": "Selects how the end handle of the B-Bone is computed", 
        "bbone_handle_type_start": "Selects how the start handle of the B-Bone is computed", 
        "bbone_rollin": "Roll offset for the start of the B-Bone, adjusts twist", 
        "bbone_rollout": "Roll offset for the end of the B-Bone, adjusts twist", 
        "bbone_scaleinx": "X-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleiny": "Y-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleoutx": "X-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleouty": "Y-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)", 
        "bbone_x": "B-Bone X size", 
        "bbone_z": "B-Bone Z size", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "head": "Location of head end of the bone", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "hide": "Bone is not visible when in Edit Mode", 
        "hide_select": "Bone is able to be selected", 
        "inherit_scale": "Specifies how the bone inherits scaling from the parent bone", 
        "layers": "Layers bone exists in", 
        "length": "Length of the bone. Changing moves the tail end", 
        "lock": "Bone is not able to be transformed when in Edit Mode", 
        "matrix": "Matrix combining loc/rot of the bone (head position, direction and roll), in armature space (WARNING: does not include/support bone's length/size)", 
        "parent": "Parent edit bone (in same Armature)", 
        "roll": "Bone rotation around head-tail axis", 
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "tail": "Location of tail end of the bone", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "use_connect": "When bone has a parent, bone's head is stuck to the parent's tail", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "use_deform": "Enable Bone to deform geometry", 
        "use_endroll_as_inroll": "Add Roll Out of the Start Handle bone to the Roll In value", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "use_inherit_scale": "DEPRECATED: Bone inherits scaling from parent bone", 
        "use_local_location": "Bone location is set in local space", 
        "use_relative_parent": "Object children will use relative transform, like deform"
      }
    }, 
    "EffectorWeights": {
      "fields": {
        "all": "All effector's weight", 
        "apply_to_hair_growing": "Use force fields when growing hair", 
        "boid": "Boid effector weight", 
        "charge": "Charge effector weight", 
        "collection": "Limit effectors to this collection", 
        "curve_guide": "Curve guide effector weight", 
        "drag": "Drag effector weight", 
        "force": "Force effector weight", 
        "gravity": "Global gravity weight", 
        "harmonic": "Harmonic effector weight", 
        "lennardjones": "Lennard-Jones effector weight", 
        "magnetic": "Magnetic effector weight", 
        "smokeflow": "Smoke Flow effector weight", 
        "texture": "Texture effector weight", 
        "turbulence": "Turbulence effector weight", 
        "vortex": "Vortex effector weight", 
        "wind": "Wind effector weight"
      }
    }, 
    "EffectSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "proxy": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "EnumProperty": {
      "fields": {
        "default": "(read-only)    Default value for this enum", 
        "default_flag": "(read-only)    Default value for this enum", 
        "enum_items": "(read-only)    Possible values for the property", 
        "enum_items_static": "(read-only)    Possible values for the property (never calls optional dynamic generation of those)"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "EnumPropertyItem": {
      "fields": {
        "description": "(read-only)    Description of the item's purpose", 
        "icon": "(read-only)    Icon of the item", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "name": "(read-only)    Human readable name", 
        "value": "(read-only)    Value of the item"
      }
    }, 
    "Event": {
      "fields": {
        "alt": "(read-only)    True when the Alt/Option key is held", 
        "ascii": "(read-only)    Single ASCII character for this event", 
        "ctrl": "(read-only)    True when the Ctrl key is held", 
        "is_mouse_absolute": "(read-only)    The last motion event was an absolute input", 
        "is_tablet": "(read-only)    The event has tablet data", 
        "mouse_prev_x": "(read-only)    The window relative horizontal location of the mouse", 
        "mouse_prev_y": "(read-only)    The window relative vertical location of the mouse", 
        "mouse_region_x": "(read-only)    The region relative horizontal location of the mouse", 
        "mouse_region_y": "(read-only)    The region relative vertical location of the mouse", 
        "mouse_x": "(read-only)    The window relative horizontal location of the mouse", 
        "mouse_y": "(read-only)    The window relative vertical location of the mouse", 
        "oskey": "(read-only)    True when the Cmd key is held", 
        "pressure": "(read-only)    The pressure of the tablet or 1.0 if no tablet present", 
        "shift": "(read-only)    True when the Shift key is held", 
        "tilt": "(read-only)    The pressure of the tablet or zeroes if no tablet present", 
        "type": "(read-only)", 
        "unicode": "(read-only)    Single unicode character for this event", 
        "value": "(read-only)    The type of event, only applies to some"
      }
    }, 
    "ExplodeModifier": {
      "fields": {
        "particle_uv": "UV map to change with particle age", 
        "protect": "Clean vertex group edges", 
        "show_alive": "Show mesh when particles are alive", 
        "show_dead": "Show mesh when particles are dead", 
        "show_unborn": "Show mesh when particles are unborn", 
        "use_edge_cut": "Cut face edges for nicer shrapnel", 
        "use_size": "Use particle size for the shrapnel"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "FaceMap": {
      "fields": {
        "index": "(read-only)    Index number of the face map", 
        "name": "Face map name", 
        "select": "Face-map selection state (for tools to use)"
      }
    }, 
    "FaceMaps": {
      "fields": {
        "active": "(read-only)    Face maps of the object", 
        "active_index": "Active index in face map array"
      }
    }, 
    "FCurve": {
      "fields": {
        "array_index": "Index to the specific property affected by F-Curve if applicable", 
        "auto_smoothing": "Algorithm used to compute automatic handles", 
        "color": "Color of the F-Curve in the Graph Editor", 
        "color_mode": "Method used to determine color of F-Curve in Graph Editor", 
        "data_path": "RNA Path to property affected by F-Curve", 
        "driver": "(read-only)    Channel Driver (only set for Driver F-Curves)", 
        "extrapolation": "Method used for evaluating value of F-Curve outside first and last keyframes", 
        "group": "Action Group that this F-Curve belongs to", 
        "hide": "F-Curve and its keyframes are hidden in the Graph Editor graphs", 
        "is_empty": "(read-only)    True if the curve contributes no animation due to lack of keyframes or useful modifiers, and should be deleted", 
        "is_valid": "False when F-Curve could not be evaluated in past, so should be skipped when evaluating", 
        "keyframe_points": "(read-only)    User-editable keyframes", 
        "lock": "F-Curve's settings cannot be edited", 
        "modifiers": "(read-only)    Modifiers affecting the shape of the F-Curve", 
        "mute": "Disable F-Curve Modifier evaluation", 
        "sampled_points": "(read-only)    Sampled animation data", 
        "select": "F-Curve is selected for editing"
      }
    }, 
    "FCurveModifiers": {
      "fields": {
        "active": "Active F-Curve Modifier"
      }
    }, 
    "FCurveSample": {
      "fields": {
        "co": "Point coordinates", 
        "select": "Selection status"
      }
    }, 
    "FFmpegSettings": {
      "fields": {
        "audio_bitrate": "Audio bitrate (kb/s)", 
        "audio_channels": "Audio channel count", 
        "audio_codec": "FFmpeg audio codec to use", 
        "audio_mixrate": "Audio samplerate(samples/s)", 
        "audio_volume": "Audio volume", 
        "buffersize": "Rate control: buffer size (kb)", 
        "codec": "FFmpeg codec to use for video output", 
        "constant_rate_factor": "Constant Rate Factor (CRF); tradeoff between video quality and file size", 
        "ffmpeg_preset": "Tradeoff between encoding speed and compression ratio", 
        "format": "Output file container", 
        "gopsize": "Distance between key frames, also known as GOP size; influences file size and seekability", 
        "max_b_frames": "Maximum number of B-frames between non-B-frames; influences file size and seekability", 
        "maxrate": "Rate control: max rate (kb/s)", 
        "minrate": "Rate control: min rate (kb/s)", 
        "muxrate": "Mux rate (bits/s(!))", 
        "packetsize": "Mux packet size (byte)", 
        "use_autosplit": "Autosplit output at 2GB boundary", 
        "use_lossless_output": "Use lossless output for video streams", 
        "use_max_b_frames": "Set a maximum number of B-frames", 
        "video_bitrate": "Video bitrate (kb/s)"
      }
    }, 
    "FieldSettings": {
      "fields": {
        "apply_to_location": "Affect particle's location", 
        "apply_to_rotation": "Affect particle's dynamic rotation", 
        "distance_max": "Maximum distance for the field to work", 
        "distance_min": "Minimum distance for the field's fall-off", 
        "falloff_power": "How quickly strength falls off with distance from the force field", 
        "flow": "Convert effector force into air flow velocity", 
        "guide_clump_amount": "Amount of clumping", 
        "guide_clump_shape": "Shape of clumping", 
        "guide_free": "Guide-free time from particle life's end", 
        "guide_kink_amplitude": "The amplitude of the offset", 
        "guide_kink_axis": "Which axis to use for offset", 
        "guide_kink_frequency": "The frequency of the offset (1/total length)", 
        "guide_kink_shape": "Adjust the offset to the beginning/end", 
        "guide_kink_type": "Type of periodic offset on the curve", 
        "guide_minimum": "The distance from which particles are affected fully", 
        "harmonic_damping": "Damping of the harmonic force", 
        "inflow": "Inwards component of the vortex force", 
        "linear_drag": "Drag component proportional to velocity", 
        "noise": "Amount of noise for the force strength", 
        "quadratic_drag": "Drag component proportional to the square of velocity", 
        "radial_falloff": "Radial falloff power (real gravitational falloff = 2)", 
        "radial_max": "Maximum radial distance for the field to work", 
        "radial_min": "Minimum radial distance for the field's fall-off", 
        "rest_length": "Rest length of the harmonic force", 
        "seed": "Seed of the noise", 
        "shape": "Which direction is used to calculate the effector force", 
        "size": "Size of the turbulence", 
        "source_object": "Select domain object of the smoke simulation", 
        "strength": "Strength of force field", 
        "texture": "Texture to use as force", 
        "texture_mode": "How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)", 
        "texture_nabla": "Defines size of derivative offset used for calculating gradient and curl", 
        "type": "Type of field", 
        "use_2d_force": "Apply force only in 2D", 
        "use_absorption": "Force gets absorbed by collision objects", 
        "use_global_coords": "Use effector/global coordinates for turbulence", 
        "use_gravity_falloff": "Multiply force by 1/distance\u00b2", 
        "use_guide_path_add": "Based on distance/falloff it adds a portion of the entire path", 
        "use_guide_path_weight": "Use curve weights to influence the particle influence along the curve", 
        "use_max_distance": "Use a maximum distance for the field to work", 
        "use_min_distance": "Use a minimum distance for the field's fall-off", 
        "use_multiple_springs": "Every point is effected by multiple springs", 
        "use_object_coords": "Use object/global coordinates for texture", 
        "use_radial_max": "Use a maximum radial distance for the field to work", 
        "use_radial_min": "Use a minimum radial distance for the field's fall-off", 
        "use_root_coords": "Texture coordinates from root particle locations", 
        "use_smoke_density": "Adjust force strength based on smoke density", 
        "z_direction": "Effect in full or only positive/negative Z direction"
      }
    }, 
    "FileBrowserFSMenuEntry": {
      "fields": {
        "is_valid": "(read-only)    Whether this path is currently reachable", 
        "use_save": "(read-only)    Whether this path is saved in bookmarks, or generated from OS"
      }
    }, 
    "FileSelectParams": {
      "fields": {
        "directory": "Directory displayed in the file browser", 
        "display_size": "Change the size of the display (width of columns or thumbnails size)", 
        "display_type": "Display mode for the file list", 
        "filename": "Active file in the file browser", 
        "filter_glob": "UNIX shell-like filename patterns matching, supports wildcards ('*') and list of patterns separated by ';'", 
        "filter_id": "Which ID types to show/hide, when browsing a library", 
        "filter_id_category": "Which ID categories to show/hide, when browsing a library", 
        "filter_search": "Filter by name, supports '*' wildcard", 
        "recursion_level": "Numbers of dirtree levels to show simultaneously", 
        "show_details_datetime": "Draw a column listing the date and time of modification for each file", 
        "show_details_size": "Draw a column listing the size of each file", 
        "show_hidden": "Show hidden dot files", 
        "title": "(read-only)    Title for the file browser", 
        "use_filter": "Enable filtering of files", 
        "use_filter_backup": "Show .blend1, .blend2, etc. files", 
        "use_filter_blender": "Show .blend files", 
        "use_filter_blendid": "Show .blend files items (objects, materials, etc.)", 
        "use_filter_folder": "Show folders", 
        "use_filter_font": "Show font files", 
        "use_filter_image": "Show image files", 
        "use_filter_movie": "Show movie files", 
        "use_filter_script": "Show script files", 
        "use_filter_sound": "Show sound files", 
        "use_filter_text": "Show text files", 
        "use_library_browsing": "(read-only)    Whether we may browse blender files' content or not", 
        "use_sort_invert": "Sort items descending, from highest value to lowest"
      }
    }, 
    "FloatProperty": {
      "fields": {
        "array_dimensions": "(read-only)    Length of each dimension of the array", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "hard_max": "(read-only)    Maximum value used by buttons", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "is_array": "(read-only)", 
        "precision": "(read-only)    Number of digits after the dot used by buttons", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "FloorConstraint": {
      "fields": {
        "floor_location": "Location of target that object will not pass through", 
        "offset": "Offset of floor from object origin", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_rotation": "Use the target's rotation to determine floor"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FluidFluidSettings": {
      "fields": {
        "initial_velocity": "Initial velocity of fluid", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "FluidSettings": {
      "fields": {
        "type": "Type of participation in the fluid simulation"
      }
    }, 
    "FluidSimulationModifier": {
      "fields": {
        "settings": "(read-only)    Settings for how this object is used in the fluid simulation"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "FluidVertexVelocity": {
      "fields": {
        "velocity": "(read-only)"
      }
    }, 
    "FModifier": {
      "fields": {
        "active": "F-Curve Modifier is the one being edited", 
        "blend_in": "Number of frames from start frame for influence to take effect", 
        "blend_out": "Number of frames from end frame for influence to fade out", 
        "frame_end": "Frame that modifier's influence ends (if Restrict Frame Range is in use)", 
        "frame_start": "Frame that modifier's influence starts (if Restrict Frame Range is in use)", 
        "influence": "Amount of influence F-Curve Modifier will have when not fading in/out", 
        "is_valid": "(read-only)    F-Curve Modifier has invalid settings and will not be evaluated", 
        "mute": "Disable F-Curve Modifier evaluation", 
        "show_expanded": "F-Curve Modifier's panel is expanded in UI", 
        "type": "(read-only)    F-Curve Modifier Type", 
        "use_influence": "F-Curve Modifier's effects will be tempered by a default factor", 
        "use_restricted_range": "F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them"
      }
    }, 
    "FModifierCycles": {
      "fields": {
        "cycles_after": "Maximum number of cycles to allow after last keyframe (0 = infinite)", 
        "cycles_before": "Maximum number of cycles to allow before first keyframe (0 = infinite)", 
        "mode_after": "Cycling mode to use after last keyframe", 
        "mode_before": "Cycling mode to use before first keyframe"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierEnvelope": {
      "fields": {
        "control_points": "(read-only)    Control points defining the shape of the envelope", 
        "default_max": "Upper distance from Reference Value for 1:1 default influence", 
        "default_min": "Lower distance from Reference Value for 1:1 default influence", 
        "reference_value": "Value that envelope's influence is centered around / based on"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierEnvelopeControlPoint": {
      "fields": {
        "frame": "Frame this control-point occurs on", 
        "max": "Upper bound of envelope at this control-point", 
        "min": "Lower bound of envelope at this control-point"
      }
    }, 
    "FModifierFunctionGenerator": {
      "fields": {
        "amplitude": "Scale factor determining the maximum/minimum values", 
        "function_type": "Type of built-in function to use", 
        "phase_multiplier": "Scale factor determining the 'speed' of the function", 
        "phase_offset": "Constant factor to offset time by for function", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them", 
        "value_offset": "Constant factor to offset values by"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierGenerator": {
      "fields": {
        "coefficients": "Coefficients for 'x' (starting from lowest power of x^0)", 
        "mode": "Type of generator to use", 
        "poly_order": "The highest power of 'x' for this polynomial (number of coefficients - 1)", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierLimits": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "use_max_x": "Use the maximum X value", 
        "use_max_y": "Use the maximum Y value", 
        "use_min_x": "Use the minimum X value", 
        "use_min_y": "Use the minimum Y value"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierNoise": {
      "fields": {
        "blend_type": "Method of modifying the existing F-Curve", 
        "depth": "Amount of fine level detail present in the noise", 
        "offset": "Time offset for the noise effect", 
        "phase": "A random seed for the noise effect", 
        "scale": "Scaling (in time) of the noise", 
        "strength": "Amplitude of the noise - the amount that it modifies the underlying curve"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FModifierStepped": {
      "fields": {
        "frame_end": "Frame that modifier's influence ends (if applicable)", 
        "frame_offset": "Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)", 
        "frame_start": "Frame that modifier's influence starts (if applicable)", 
        "frame_step": "Number of frames to hold each value", 
        "use_frame_end": "Restrict modifier to only act before its 'end' frame", 
        "use_frame_start": "Restrict modifier to only act after its 'start' frame"
      }, 
      "inherits": [
        "FModifier"
      ]
    }, 
    "FollowPathConstraint": {
      "fields": {
        "forward_axis": "Axis that points forward along the path", 
        "offset": "Offset from the position corresponding to the time frame", 
        "offset_factor": "Percentage value defining target position along length of curve", 
        "target": "Target Curve object", 
        "up_axis": "Axis that points upward", 
        "use_curve_follow": "Object will follow the heading and banking of the curve", 
        "use_curve_radius": "Object is scaled by the curve radius", 
        "use_fixed_location": "Object will stay locked to a single point somewhere along the length of the curve regardless of time"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FollowTrackConstraint": {
      "fields": {
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "clip": "Movie Clip to get tracking data from", 
        "depth_object": "Object used to define depth in camera space by projecting onto surface of this object", 
        "frame_method": "How the footage fits in the camera frame", 
        "object": "Movie tracking object to follow (if empty, camera object is used)", 
        "track": "Movie tracking track to follow", 
        "use_3d_position": "Use 3D position of track to parent to", 
        "use_active_clip": "Use active clip defined in scene", 
        "use_undistorted_position": "Parent to undistorted position of 2D track"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "FreestyleLineSet": {
      "fields": {
        "collection": "A collection of objects based on which feature edges are selected", 
        "collection_negation": "Specify either inclusion or exclusion of feature edges belonging to a collection of objects", 
        "edge_type_combination": "Specify a logical combination of selection conditions on feature edge types", 
        "edge_type_negation": "Specify either inclusion or exclusion of feature edges selected by edge types", 
        "exclude_border": "Exclude border edges", 
        "exclude_contour": "Exclude contours", 
        "exclude_crease": "Exclude crease edges", 
        "exclude_edge_mark": "Exclude edge marks", 
        "exclude_external_contour": "Exclude external contours", 
        "exclude_material_boundary": "Exclude edges at material boundaries", 
        "exclude_ridge_valley": "Exclude ridges and valleys", 
        "exclude_silhouette": "Exclude silhouette edges", 
        "exclude_suggestive_contour": "Exclude suggestive contours", 
        "face_mark_condition": "Specify a feature edge selection condition based on face marks", 
        "face_mark_negation": "Specify either inclusion or exclusion of feature edges selected by face marks", 
        "linestyle": "Line style settings", 
        "name": "Line set name", 
        "qi_end": "Last QI value of the QI range", 
        "qi_start": "First QI value of the QI range", 
        "select_border": "Select border edges (open mesh edges)", 
        "select_by_collection": "Select feature edges based on a collection of objects", 
        "select_by_edge_types": "Select feature edges based on edge types", 
        "select_by_face_marks": "Select feature edges by face marks", 
        "select_by_image_border": "Select feature edges by image border (less memory consumption)", 
        "select_by_visibility": "Select feature edges based on visibility", 
        "select_contour": "Select contours (outer silhouettes of each object)", 
        "select_crease": "Select crease edges (those between two faces making an angle smaller than the Crease Angle)", 
        "select_edge_mark": "Select edge marks (edges annotated by Freestyle edge marks)", 
        "select_external_contour": "Select external contours (outer silhouettes of occluding and occluded objects)", 
        "select_material_boundary": "Select edges at material boundaries", 
        "select_ridge_valley": "Select ridges and valleys (boundary lines between convex and concave areas of surface)", 
        "select_silhouette": "Select silhouettes (edges at the boundary of visible and hidden faces)", 
        "select_suggestive_contour": "Select suggestive contours (almost silhouette/contour edges)", 
        "show_render": "Enable or disable this line set during stroke rendering", 
        "visibility": "Determine how to use visibility for feature edge selection"
      }
    }, 
    "FreestyleLineStyle": {
      "fields": {
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "alpha": "Base alpha transparency, possibly modified by alpha transparency modifiers", 
        "alpha_modifiers": "(read-only)    List of alpha transparency modifiers", 
        "angle_max": "Maximum 2D angle for splitting chains", 
        "angle_min": "Minimum 2D angle for splitting chains", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "caps": "Select the shape of both ends of strokes", 
        "chain_count": "Chain count for the selection of first N chains", 
        "chaining": "Select the way how feature edges are jointed to form chains", 
        "color": "Base line color, possibly modified by line color modifiers", 
        "color_modifiers": "(read-only)    List of line color modifiers", 
        "dash1": "Length of the 1st dash for dashed lines", 
        "dash2": "Length of the 2nd dash for dashed lines", 
        "dash3": "Length of the 3rd dash for dashed lines", 
        "gap1": "Length of the 1st gap for dashed lines", 
        "gap2": "Length of the 2nd gap for dashed lines", 
        "gap3": "Length of the 3rd gap for dashed lines", 
        "geometry_modifiers": "(read-only)    List of stroke geometry modifiers", 
        "integration_type": "Select the way how the sort key is computed for each chain", 
        "length_max": "Maximum curvilinear 2D length for the selection of chains", 
        "length_min": "Minimum curvilinear 2D length for the selection of chains", 
        "material_boundary": "If true, chains of feature edges are split at material boundaries", 
        "node_tree": "(read-only)    Node tree for node-based shaders", 
        "panel": "Select the property panel to be shown", 
        "rounds": "Number of rounds in a sketchy multiple touch", 
        "sort_key": "Select the sort key to determine the stacking order of chains", 
        "sort_order": "Select the sort order", 
        "split_dash1": "Length of the 1st dash for splitting", 
        "split_dash2": "Length of the 2nd dash for splitting", 
        "split_dash3": "Length of the 3rd dash for splitting", 
        "split_gap1": "Length of the 1st gap for splitting", 
        "split_gap2": "Length of the 2nd gap for splitting", 
        "split_gap3": "Length of the 3rd gap for splitting", 
        "split_length": "Curvilinear 2D length for chain splitting", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "texture_spacing": "Spacing for textures along stroke length", 
        "thickness": "Base line thickness, possibly modified by line thickness modifiers", 
        "thickness_modifiers": "(read-only)    List of line thickness modifiers", 
        "thickness_position": "Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option)", 
        "thickness_ratio": "A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness", 
        "use_angle_max": "Split chains at points with angles larger than the maximum 2D angle", 
        "use_angle_min": "Split chains at points with angles smaller than the minimum 2D angle", 
        "use_chain_count": "Enable the selection of first N chains", 
        "use_chaining": "Enable chaining of feature edges", 
        "use_dashed_line": "Enable or disable dashed line", 
        "use_length_max": "Enable the selection of chains by a maximum 2D length", 
        "use_length_min": "Enable the selection of chains by a minimum 2D length", 
        "use_nodes": "Use shader nodes for the line style", 
        "use_same_object": "If true, only feature edges of the same object are joined", 
        "use_sorting": "Arrange the stacking order of strokes", 
        "use_split_length": "Enable chain splitting by curvilinear 2D length", 
        "use_split_pattern": "Enable chain splitting by dashed line patterns", 
        "use_texture": "Enable or disable textured strokes"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "FreestyleModuleSettings": {
      "fields": {
        "script": "Python script to define a style module", 
        "use": "Enable or disable this style module during stroke rendering"
      }
    }, 
    "FreestyleSettings": {
      "fields": {
        "crease_angle": "Angular threshold for detecting crease edges", 
        "kr_derivative_epsilon": "Kr derivative epsilon for computing suggestive contours", 
        "linesets": "(read-only)", 
        "mode": "Select the Freestyle control mode", 
        "modules": "(read-only)    A list of style modules (to be applied from top to bottom)", 
        "sphere_radius": "Sphere radius for computing curvatures", 
        "use_advanced_options": "Enable advanced edge detection options (sphere radius and Kr derivative epsilon)", 
        "use_culling": "If enabled, out-of-view edges are ignored", 
        "use_material_boundaries": "Enable material boundaries", 
        "use_ridges_and_valleys": "Enable ridges and valleys", 
        "use_smoothness": "Take face smoothness into account in view map calculation", 
        "use_suggestive_contours": "Enable suggestive contours", 
        "use_view_map_cache": "Keep the computed view map and avoid re-calculating it if mesh geometry is unchanged"
      }
    }, 
    "Function": {
      "fields": {
        "description": "(read-only)    Description of the Function's purpose", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "is_registered": "(read-only)    Function is registered as callback as part of type registration", 
        "is_registered_optional": "(read-only)    Function is optionally registered as callback part of type registration", 
        "parameters": "(read-only)    Parameters for the function", 
        "use_self": "(read-only)    Function does not pass its self as an argument (becomes a static method in python)", 
        "use_self_type": "(read-only)    Function passes its self type as an argument (becomes a class method in python if use_self is false)"
      }
    }, 
    "GammaCrossSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "GaussianBlurSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "size_x": "Size of the blur along X axis", 
        "size_y": "Size of the blur along Y axis"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Gizmo": {
      "fields": {
        "group": "(read-only)    Gizmo group this gizmo is a member of", 
        "is_highlight": "(read-only)", 
        "is_modal": "(read-only)", 
        "matrix_world": "(read-only)", 
        "properties": "(read-only)", 
        "select_bias": "Depth bias used for selection", 
        "use_draw_modal": "Draw while dragging", 
        "use_draw_offset_scale": "Scale the offset matrix (use to apply screen-space offset)", 
        "use_draw_scale": "Use scale when calculating the matrix", 
        "use_draw_value": "Show an indicator for the current value while dragging", 
        "use_event_handle_all": "When highlighted, do not pass events through to be handled by other keymaps", 
        "use_operator_tool_properties": "Merge active tool properties on activation (does not overwrite existing)", 
        "use_select_background": "Don't write into the depth buffer"
      }
    }, 
    "GizmoGroup": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "bl_region_type": "The region where the panel is going to be used in", 
        "bl_space_type": "The space where the panel is going to be used in", 
        "gizmos": "(read-only)    List of gizmos in the Gizmo Map", 
        "has_reports": "(read-only)    GizmoGroup has a set of reports (warnings and errors) from last execution", 
        "name": "(read-only)"
      }
    }, 
    "GlowSequence": {
      "fields": {
        "blur_radius": "Radius of glow effect", 
        "boost_factor": "Brightness multiplier", 
        "clamp": "Brightness limit of intensity", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "quality": "Accuracy of the blur effect", 
        "threshold": "Minimum intensity to trigger a glow", 
        "use_only_boost": "Show the glow buffer only"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "GPencilFrame": {
      "fields": {
        "frame_number": "The frame on which this sketch appears", 
        "is_edited": "Frame is being edited (painted on)", 
        "select": "Frame is selected for editing in the Dope Sheet", 
        "strokes": "(read-only)    Freehand curves defining the sketch on this frame"
      }
    }, 
    "GPencilInterpolateSettings": {
      "fields": {
        "amplitude": "Amount to boost elastic bounces for 'elastic' easing", 
        "back": "Amount of overshoot for 'back' easing", 
        "easing": "Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied to", 
        "interpolate_all_layers": "Interpolate all layers, not only active", 
        "interpolate_selected_only": "Interpolate only selected strokes in the original frame", 
        "interpolation_curve": "(read-only)    Custom curve to control 'sequence' interpolation between Grease Pencil frames", 
        "period": "Time between bounces for elastic easing", 
        "type": "Interpolation method to use the next time 'Interpolate Sequence' is run"
      }
    }, 
    "GPencilLayer": {
      "fields": {
        "active_frame": "(read-only)    Frame currently being displayed for this layer", 
        "annotation_hide": "Set annotation Visibility", 
        "annotation_onion_after_color": "Base color for ghosts after the active frame", 
        "annotation_onion_after_range": "Maximum number of frames to show after current frame", 
        "annotation_onion_before_color": "Base color for ghosts before the active frame", 
        "annotation_onion_before_range": "Maximum number of frames to show before current frame", 
        "blend_mode": "Blend mode", 
        "channel_color": "Custom color for animation channel in Dopesheet", 
        "color": "Color for all strokes in this layer", 
        "frames": "(read-only)    Sketches for this layer on different frames", 
        "hide": "Set layer Visibility", 
        "info": "Layer name", 
        "is_parented": "(read-only)    True when the layer parent object is set", 
        "is_ruler": "(read-only)    This is a special ruler layer", 
        "line_change": "Thickness change to apply to current strokes (in pixels)", 
        "lock": "Protect layer from further editing and/or frame changes", 
        "lock_frame": "Lock current frame displayed by layer", 
        "lock_material": "Avoids editing locked materials in the layer", 
        "mask_layer": "Remove any pixel outside underlying layers drawing", 
        "matrix_inverse": "Parent inverse transformation matrix", 
        "opacity": "Layer Opacity", 
        "parent": "Parent Object", 
        "parent_bone": "Name of parent bone in case of a bone parenting relation", 
        "parent_type": "Type of parent relation", 
        "pass_index": "Index number for the \"Layer Index\" pass", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "show_in_front": "Make the layer draw in front of objects", 
        "show_points": "Draw the points which make up the strokes (for debugging purposes)", 
        "thickness": "Thickness of annotation strokes", 
        "tint_color": "Color for tinting stroke colors", 
        "tint_factor": "Factor of tinting color", 
        "use_annotation_onion_skinning": "Display annotation onion skins before and after the current frame", 
        "use_onion_skinning": "Display onion skins before and after the current frame", 
        "use_solo_mode": "In Paint mode display only layers with keyframe in current frame", 
        "viewlayer_render": "Only include Layer in this View Layer render output (leave blank to include always)"
      }
    }, 
    "GpencilModifier": {
      "fields": {
        "name": "Modifier name", 
        "show_expanded": "Set modifier expanded in the user interface", 
        "show_in_editmode": "Display modifier in Edit mode", 
        "show_render": "Use modifier during render", 
        "show_viewport": "Display modifier in viewport", 
        "type": "(read-only)"
      }
    }, 
    "GPencilSculptBrush": {
      "fields": {
        "cursor_color_add": "Color for the cursor for addition", 
        "cursor_color_sub": "Color for the cursor for subtraction", 
        "size": "Radius of the brush in pixels", 
        "strength": "Brush strength", 
        "use_cursor": "Enable cursor on screen", 
        "use_edit_pressure": "Affect pressure values as well when smoothing strokes", 
        "use_falloff": "Strength of brush decays with distance from cursor", 
        "use_pressure_radius": "Enable tablet pressure sensitivity for radius", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "weight": "Target weight (define a maximum range limit for the weight. Any value above will be clamped)"
      }
    }, 
    "GPencilSculptGuide": {
      "fields": {
        "angle": "Direction of lines", 
        "angle_snap": "Angle snapping", 
        "location": "Custom reference point for guides", 
        "reference_object": "Object used for reference point", 
        "reference_point": "Type of speed guide", 
        "spacing": "Guide spacing", 
        "type": "Type of speed guide", 
        "use_guide": "Enable speed guides", 
        "use_snapping": "Enable snapping to guides angle or spacing options"
      }
    }, 
    "GPencilSculptSettings": {
      "fields": {
        "brush": "(read-only)", 
        "guide": "(read-only)", 
        "intersection_threshold": "Threshold for stroke intersections", 
        "multiframe_falloff_curve": "(read-only)    Custom curve to control falloff of brush effect by Grease Pencil frames", 
        "thickness_primitive_curve": "(read-only)    Custom curve to control primitive thickness", 
        "use_edit_position": "The brush affects the position of the point", 
        "use_edit_strength": "The brush affects the color strength of the point", 
        "use_edit_thickness": "The brush affects the thickness of the point", 
        "use_edit_uv": "The brush affects the UV rotation of the point", 
        "use_multiframe_falloff": "Use falloff effect when edit in multiframe mode to compute brush effect by frame", 
        "use_thickness_curve": "Use curve to define primitive stroke thickness", 
        "weight_tool": "Tool for weight painting"
      }
    }, 
    "GPencilStroke": {
      "fields": {
        "display_mode": "Coordinate space that stroke is in", 
        "draw_cyclic": "Enable cyclic drawing, closing the stroke", 
        "end_cap_mode": "Stroke end extreme cap style", 
        "gradient_factor": "Amount of gradient along section of stroke", 
        "groups": "(read-only)    Weights for the vertex groups this vertex is member of", 
        "is_nofill_stroke": "(read-only)    Special stroke to use as boundary for filling areas", 
        "line_width": "Thickness of stroke (in pixels)", 
        "material_index": "Index of material used in this stroke", 
        "points": "(read-only)    Stroke data points", 
        "select": "Stroke is selected for viewport editing", 
        "start_cap_mode": "Stroke start extreme cap style", 
        "triangles": "(read-only)    Triangulation data for HQ fill"
      }
    }, 
    "GPencilStrokePoint": {
      "fields": {
        "pressure": "Pressure of tablet at point when drawing it", 
        "select": "Point is selected for viewport editing", 
        "strength": "Color intensity (alpha factor)", 
        "uv_factor": "Internal UV factor", 
        "uv_rotation": "Internal UV factor for dot mode"
      }
    }, 
    "GPencilTriangle": {
      "fields": {
        "uv1": "(read-only)    First triangle vertex texture coordinates", 
        "uv2": "(read-only)    Second triangle vertex texture coordinates", 
        "uv3": "(read-only)    Third triangle vertex texture coordinates", 
        "v1": "(read-only)    First triangle vertex index", 
        "v2": "(read-only)    Second triangle vertex index", 
        "v3": "(read-only)    Third triangle vertex index"
      }
    }, 
    "GpencilVertexGroupElement": {
      "fields": {
        "group": "(read-only)", 
        "weight": "Vertex Weight"
      }
    }, 
    "GPUFXSettings": {
      "fields": {
        "ssao": "(read-only)", 
        "use_ssao": "Use screen space ambient occlusion of field on viewport"
      }
    }, 
    "GPUSSAOSettings": {
      "fields": {
        "attenuation": "Attenuation constant", 
        "color": "Color for screen space ambient occlusion effect", 
        "distance_max": "Distance of object that contribute to the SSAO effect", 
        "factor": "Strength of the SSAO effect", 
        "samples": "Number of samples"
      }
    }, 
    "GreasePencil": {
      "fields": {
        "after_color": "Base color for ghosts after the active frame", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "before_color": "Base color for ghosts before the active frame", 
        "edit_line_color": "Color for editing line", 
        "ghost_after_range": "Maximum number of frames to show after current frame (0 = don't show any frames after current)", 
        "ghost_before_range": "Maximum number of frames to show before current frame (0 = don't show any frames before current)", 
        "grid": "(read-only)    Settings for grid and canvas in the 3D viewport", 
        "is_annotation": "(read-only)    Current datablock is an annotation", 
        "is_stroke_paint_mode": "(read-only)    Draw Grease Pencil strokes on click/drag", 
        "is_stroke_sculpt_mode": "(read-only)    Sculpt Grease Pencil strokes instead of viewport data", 
        "is_stroke_weight_mode": "(read-only)    Grease Pencil weight paint", 
        "layers": "(read-only)", 
        "materials": "(read-only)", 
        "onion_factor": "Change fade opacity of displayed onion frames", 
        "onion_keyframe_type": "Type of keyframe (for filtering)", 
        "onion_mode": "Mode to display frames", 
        "pixel_factor": "Scale conversion factor for pixel size (use larger values for thicker lines)", 
        "show_stroke_direction": "Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points", 
        "stroke_depth_order": "Defines how the strokes are ordered in 3D space", 
        "stroke_thickness_space": "Set stroke thickness in screen space or world space", 
        "use_adaptive_uv": "Automatic UVs are calculated depending of the stroke size", 
        "use_autolock_layers": "Lock automatically all layers except active one to avoid accidental changes", 
        "use_force_fill_recalc": "Force recalc of fill data after use deformation modifiers (reduce FPS)", 
        "use_ghost_custom_colors": "Use custom colors for ghost frames", 
        "use_ghosts_always": "Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)", 
        "use_multiedit": "Edit strokes from multiple grease pencil keyframes at the same time (keyframes must be selected to be included)", 
        "use_onion_fade": "Display onion keyframes with a fade in color transparency", 
        "use_onion_loop": "Display first onion keyframes using next frame color to show indication of loop start frame", 
        "use_onion_skinning": "Show ghosts of the keyframes before and after the current frame", 
        "use_stroke_edit_mode": "Edit Grease Pencil strokes instead of viewport data", 
        "zdepth_offset": "Offset amount when drawing in surface mode"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "GreasePencilGrid": {
      "fields": {
        "color": "Color for grid lines", 
        "lines": "Number of subdivisions in each side of symmetry line", 
        "offset": "Offset of the canvas", 
        "scale": "Grid scale"
      }
    }, 
    "GreasePencilLayers": {
      "fields": {
        "active": "Active grease pencil layer", 
        "active_index": "Index of active grease pencil layer", 
        "active_note": "Note/Layer to add annotation strokes to"
      }
    }, 
    "Header": {
      "fields": {
        "bl_idname": "If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is \"OBJECT_HT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_HT_hello\"", 
        "bl_region_type": "The region where the header is going to be used in (defaults to header region)", 
        "bl_space_type": "The space where the header is going to be used in", 
        "layout": "(read-only)    Structure of the header in the UI"
      }
    }, 
    "Histogram": {
      "fields": {
        "mode": "Channels to display when drawing the histogram", 
        "show_line": "Display lines rather than filled shapes"
      }
    }, 
    "HookGpencilModifier": {
      "fields": {
        "falloff_curve": "(read-only)    Custom light falloff curve", 
        "falloff_radius": "If not zero, the distance from the hook where influence ends", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "matrix_inverse": "Reverse the transformation between this object and its target", 
        "object": "Parent Object for hook, also recalculates and clears offset", 
        "pass_index": "Pass index", 
        "strength": "Relative force of the hook", 
        "subtarget": "Name of Parent Bone for hook (if applicable), also recalculates and clears offset", 
        "use_falloff_uniform": "Compensate for non-uniform object scale", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "HookModifier": {
      "fields": {
        "center": "Center of the hook, used for falloff and display", 
        "falloff_curve": "(read-only)    Custom falloff curve", 
        "falloff_radius": "If not zero, the distance from the hook where influence ends", 
        "matrix_inverse": "Reverse the transformation between this object and its target", 
        "object": "Parent Object for hook, also recalculates and clears offset", 
        "strength": "Relative force of the hook", 
        "subtarget": "Name of Parent Bone for hook (if applicable), also recalculates and clears offset", 
        "use_falloff_uniform": "Compensate for non-uniform object scale", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "vertex_indices": "(read-only)    Indices of vertices bound to the modifier. For bezier curves, handles count as additional vertices"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "HueCorrectModifier": {
      "fields": {
        "curve_mapping": "(read-only)"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "ID": {
      "fields": {
        "is_evaluated": "(read-only)    Whether this ID is runtime-only, evaluated data-block, or actual data from .blend file", 
        "is_library_indirect": "(read-only)    Is this ID block linked indirectly", 
        "library": "(read-only)    Library file the data-block is linked from", 
        "name": "Unique data-block ID name", 
        "name_full": "(read-only)    Unique data-block ID name, including library one is any", 
        "original": "(read-only)    Actual data-block from .blend file (Main database) that generated that evaluated one", 
        "override_library": "(read-only)    Library override data", 
        "preview": "(read-only)    Preview image and icon of this data-block (None if not supported for this type of data)", 
        "tag": "Tools can use this to tag data for their own purposes (initial state is undefined)", 
        "use_fake_user": "Save this data-block even if it has no users", 
        "users": "(read-only)    Number of times this data-block is referenced"
      }
    }, 
    "IDOverrideLibrary": {
      "fields": {
        "auto_generate": "Automatically generate overriding operations by detecting changes in properties", 
        "properties": "(read-only)    List of overridden properties", 
        "reference": "(read-only)    Linked ID used as reference by this override"
      }
    }, 
    "IDOverrideLibraryProperty": {
      "fields": {
        "operations": "(read-only)    List of overriding operations for a property", 
        "rna_path": "(read-only)    RNA path leading to that property, from owning ID"
      }
    }, 
    "IDOverrideLibraryPropertyOperation": {
      "fields": {
        "flag": "(read-only)    Optional flags (NOT USED)", 
        "operation": "(read-only)    What override operation is performed", 
        "subitem_local_index": "(read-only)    Used to handle insertions into collection", 
        "subitem_local_name": "(read-only)    Used to handle insertions into collection", 
        "subitem_reference_index": "(read-only)    Used to handle insertions into collection", 
        "subitem_reference_name": "(read-only)    Used to handle insertions into collection"
      }
    }, 
    "IKParam": {
      "fields": {
        "ik_solver": "(read-only)    IK solver for which these parameters are defined"
      }
    }, 
    "Image": {
      "fields": {
        "alpha_mode": "Representation of alpha in the image file, to convert to and from when saving and loading the image", 
        "bindcode": "(read-only)    OpenGL bindcode", 
        "channels": "(read-only)    Number of channels in pixels buffer", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "depth": "(read-only)    Image bit depth", 
        "display_aspect": "Display Aspect for this image, does not affect rendering", 
        "file_format": "Format used for re-saving this file", 
        "filepath": "Image/Movie file name", 
        "filepath_raw": "Image/Movie file name (without data refreshing)", 
        "frame_duration": "(read-only)    Duration (in frames) of the image (1 when not a video/sequence)", 
        "generated_color": "Fill color for the generated image", 
        "generated_height": "Generated image height", 
        "generated_type": "Generated image type", 
        "generated_width": "Generated image width", 
        "has_data": "(read-only)    True if the image data is loaded into memory", 
        "is_dirty": "(read-only)    Image has changed and is not saved", 
        "is_float": "(read-only)    True if this image is stored in float buffer", 
        "is_multiview": "(read-only)    Image has more than one view", 
        "is_stereo_3d": "(read-only)    Image has left and right views", 
        "packed_file": "(read-only)    First packed file of the image", 
        "packed_files": "(read-only)    Collection of packed images", 
        "pixels": "Image pixels in floating point values", 
        "render_slots": "(read-only)    Render slots of the image", 
        "resolution": "X/Y pixels per meter", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded", 
        "source": "Where the image comes from", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "type": "(read-only)    How to generate the image", 
        "use_deinterlace": "Deinterlace movie file on load", 
        "use_generated_float": "Generate floating point buffer", 
        "use_multiview": "Use Multiple Views (when available)", 
        "use_view_as_render": "Apply render part of display transformation when displaying this image on the screen", 
        "views_format": "Mode to load image views"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ImageFormatSettings": {
      "fields": {
        "cineon_black": "Log conversion reference blackpoint", 
        "cineon_gamma": "Log conversion gamma", 
        "cineon_white": "Log conversion reference whitepoint", 
        "color_depth": "Bit depth per channel", 
        "color_mode": "Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels", 
        "compression": "Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "exr_codec": "Codec settings for OpenEXR", 
        "file_format": "File format to save the rendered images as", 
        "jpeg2k_codec": "Codec settings for Jpeg2000", 
        "quality": "Quality for image formats that support lossy compression", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "tiff_codec": "Compression mode for TIFF", 
        "use_cineon_log": "Convert to logarithmic color space", 
        "use_jpeg2k_cinema_48": "Use Openjpeg Cinema Preset (48fps)", 
        "use_jpeg2k_cinema_preset": "Use Openjpeg Cinema Preset", 
        "use_jpeg2k_ycc": "Save luminance-chrominance-chrominance channels instead of RGB colors", 
        "use_preview": "When rendering animations, save JPG preview images in same directory", 
        "use_zbuffer": "Save the z-depth per pixel (32 bit unsigned int z-buffer)", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "views_format": "Format of multiview media"
      }
    }, 
    "ImagePackedFile": {
      "fields": {
        "packed_file": "(read-only)"
      }
    }, 
    "ImagePaint": {
      "fields": {
        "canvas": "Image used as canvas", 
        "clone_image": "Image used as clone source", 
        "dither": "Amount of dithering when painting on byte images", 
        "interpolation": "Texture filtering type", 
        "invert_stencil": "Invert the stencil layer", 
        "missing_materials": "(read-only)    The mesh is missing materials", 
        "missing_stencil": "(read-only)    Image Painting does not have a stencil", 
        "missing_texture": "(read-only)    Image Painting does not have a texture to paint on", 
        "missing_uvs": "(read-only)    A UV layer is missing on the mesh", 
        "mode": "Mode of operation for projection painting", 
        "normal_angle": "Paint most on faces pointing towards the view according to this angle", 
        "screen_grab_size": "Size to capture the image for re-projecting", 
        "seam_bleed": "Extend paint beyond the faces UVs to reduce seams (in pixels, slower)", 
        "stencil_color": "Stencil color in the viewport", 
        "stencil_image": "Image used as stencil", 
        "use_backface_culling": "Ignore faces pointing away from the view (faster)", 
        "use_clone_layer": "Use another UV map as clone source, otherwise use the 3D cursor as the source", 
        "use_normal_falloff": "Paint most on faces pointing towards the view", 
        "use_occlude": "Only paint onto the faces directly under the brush (slower)", 
        "use_stencil_layer": "Set the mask layer from the UV map buttons"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "ImagePreview": {
      "fields": {
        "icon_id": "(read-only)    Unique integer identifying this preview as an icon (zero means invalid)", 
        "icon_pixels": "Icon pixels, as bytes (always RGBA 32bits)", 
        "icon_pixels_float": "Icon pixels components, as floats (RGBA concatenated values)", 
        "icon_size": "Width and height in pixels", 
        "image_pixels": "Image pixels, as bytes (always RGBA 32bits)", 
        "image_pixels_float": "Image pixels components, as floats (RGBA concatenated values)", 
        "image_size": "Width and height in pixels", 
        "is_icon_custom": "True if this preview icon has been modified by py script,and is no more auto-generated by Blender", 
        "is_image_custom": "True if this preview image has been modified by py script,and is no more auto-generated by Blender"
      }
    }, 
    "ImageSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "crop": "(read-only)", 
        "elements": "(read-only)", 
        "proxy": "(read-only)", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_multiview": "Use Multiple Views (when available)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing", 
        "views_format": "Mode to load image views"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "ImageTexture": {
      "fields": {
        "checker_distance": "Distance between checker tiles", 
        "crop_max_x": "Maximum X value to crop the image", 
        "crop_max_y": "Maximum Y value to crop the image", 
        "crop_min_x": "Minimum X value to crop the image", 
        "crop_min_y": "Minimum Y value to crop the image", 
        "extension": "How the image is extrapolated past its original bounds", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_lightprobes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "filter_type": "Texture filter to use for sampling image", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "invert_alpha": "Invert all the alpha values in the image", 
        "repeat_x": "Repetition multiplier in the X direction", 
        "repeat_y": "Repetition multiplier in the Y direction", 
        "use_alpha": "Use the alpha channel information in the image", 
        "use_calculate_alpha": "Calculate an alpha channel based on RGB values in the image", 
        "use_checker_even": "Even checker tiles", 
        "use_checker_odd": "Odd checker tiles", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "use_flip_axis": "Flip the texture's X and Y axis", 
        "use_interpolation": "Interpolate pixels using selected filter", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps", 
        "use_mirror_x": "Mirror the image repetition on the X direction", 
        "use_mirror_y": "Mirror the image repetition on the Y direction", 
        "use_normal_map": "Use image RGB values for normal mapping"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "ImageUser": {
      "fields": {
        "frame_current": "Current frame number in image sequence or movie", 
        "frame_duration": "Number of images of a movie to use", 
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "multilayer_layer": "(read-only)    Layer in multilayer image", 
        "multilayer_pass": "(read-only)    Pass in multilayer image", 
        "multilayer_view": "(read-only)    View in multilayer image", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "use_cyclic": "Cycle the images in the movie"
      }
    }, 
    "InflowFluidSettings": {
      "fields": {
        "inflow_velocity": "Initial velocity of fluid", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "use_local_coords": "Use local coordinates for inflow (e.g. for rotating objects)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "IntProperty": {
      "fields": {
        "array_dimensions": "(read-only)    Length of each dimension of the array", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array", 
        "hard_max": "(read-only)    Maximum value used by buttons", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "is_array": "(read-only)", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "Itasc": {
      "fields": {
        "damping_epsilon": "Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)", 
        "damping_max": "Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)", 
        "feedback": "Feedback coefficient for error correction, average response time is 1/feedback (default=20)", 
        "iterations": "Maximum number of iterations for convergence in case of reiteration", 
        "precision": "Precision of convergence in case of reiteration", 
        "reiteration_method": "Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames", 
        "solver": "Solving method selection: automatic damping or manual damping", 
        "step_count": "Divide the frame interval into this many steps", 
        "step_max": "Higher bound for timestep in second in case of automatic substeps", 
        "step_min": "Lower bound for timestep in second in case of automatic substeps", 
        "use_auto_step": "Automatically determine the optimal number of steps for best performance/accuracy trade off", 
        "velocity_max": "Maximum joint velocity in rad/s (default=50)"
      }, 
      "inherits": [
        "IKParam"
      ]
    }, 
    "Key": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "eval_time": "Evaluation time for absolute shape keys", 
        "key_blocks": "(read-only)    Shape keys", 
        "reference_key": "(read-only)", 
        "use_relative": "Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time", 
        "user": "(read-only)    Data-block using these shape keys"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "KeyConfig": {
      "fields": {
        "is_user_defined": "(read-only)    Indicates that a keyconfig was defined by the user", 
        "keymaps": "(read-only)    Key maps configured as part of this configuration", 
        "name": "Name of the key configuration", 
        "preferences": "(read-only)"
      }
    }, 
    "KeyConfigurations": {
      "fields": {
        "active": "Active key configuration (preset)", 
        "addon": "(read-only)    Key configuration that can be extended by add-ons, and is added to the active configuration when handling events", 
        "default": "(read-only)    Default builtin key configuration", 
        "user": "(read-only)    Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user"
      }
    }, 
    "Keyframe": {
      "fields": {
        "amplitude": "Amount to boost elastic bounces for 'elastic' easing", 
        "back": "Amount of overshoot for 'back' easing", 
        "co": "Coordinates of the control point", 
        "easing": "Which ends of the segment between this and the next keyframe easing interpolation is applied to", 
        "handle_left": "Coordinates of the left handle (before the control point)", 
        "handle_left_type": "Handle types", 
        "handle_right": "Coordinates of the right handle (after the control point)", 
        "handle_right_type": "Handle types", 
        "interpolation": "Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe", 
        "period": "Time between bounces for elastic easing", 
        "select_control_point": "Control point selection status", 
        "select_left_handle": "Left handle selection status", 
        "select_right_handle": "Right handle selection status", 
        "type": "Type of keyframe (for visual purposes only)"
      }
    }, 
    "KeyingSet": {
      "fields": {
        "bl_description": "A short description of the keying set", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "is_path_absolute": "(read-only)    Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)", 
        "paths": "(read-only)    Keying Set Paths to define settings that get keyframed together", 
        "type_info": "(read-only)    Callback function defines for built-in Keying Sets", 
        "use_insertkey_needed": "Only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_needed": "Override default setting to only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_visual": "Override default setting to insert keyframes based on 'visual transforms'", 
        "use_insertkey_override_xyz_to_rgb": "Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis", 
        "use_insertkey_visual": "Insert keyframes based on 'visual transforms'", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis"
      }
    }, 
    "KeyingSetInfo": {
      "fields": {
        "bl_description": "A short description of the keying set", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "bl_options": "Keying Set options to use when inserting keyframes"
      }
    }, 
    "KeyingSetPath": {
      "fields": {
        "array_index": "Index to the specific setting if applicable", 
        "data_path": "Path to property setting", 
        "group": "Name of Action Group to assign setting(s) for this path to", 
        "group_method": "Method used to define which Group-name to use", 
        "id": "ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)", 
        "id_type": "Type of ID-block that can be used", 
        "use_entire_array": "When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used", 
        "use_insertkey_needed": "Only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_needed": "Override default setting to only insert keyframes where they're needed in the relevant F-Curves", 
        "use_insertkey_override_visual": "Override default setting to insert keyframes based on 'visual transforms'", 
        "use_insertkey_override_xyz_to_rgb": "Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis", 
        "use_insertkey_visual": "Insert keyframes based on 'visual transforms'", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis"
      }
    }, 
    "KeyingSetPaths": {
      "fields": {
        "active": "Active Keying Set used to insert/delete keyframes", 
        "active_index": "Current Keying Set index"
      }
    }, 
    "KeyingSets": {
      "fields": {
        "active": "Active Keying Set used to insert/delete keyframes", 
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')"
      }
    }, 
    "KeyingSetsAll": {
      "fields": {
        "active": "Active Keying Set used to insert/delete keyframes", 
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')"
      }
    }, 
    "KeyMap": {
      "fields": {
        "bl_owner_id": "Internal owner", 
        "is_modal": "(read-only)    Indicates that a keymap is used for translate modal events for an operator", 
        "is_user_modified": "Keymap is defined by the user", 
        "keymap_items": "(read-only)    Items in the keymap, linking an operator to an input event", 
        "name": "(read-only)    Name of the key map", 
        "region_type": "(read-only)    Optional region type keymap is associated with", 
        "show_expanded_children": "Children expanded in the user interface", 
        "show_expanded_items": "Expanded in the user interface", 
        "space_type": "(read-only)    Optional space type keymap is associated with"
      }
    }, 
    "KeyMapItem": {
      "fields": {
        "active": "Activate or deactivate item", 
        "alt": "Alt key pressed", 
        "any": "Any modifier keys pressed", 
        "ctrl": "Control key pressed", 
        "id": "(read-only)    ID of the item", 
        "idname": "Identifier of operator to call on input event", 
        "is_user_defined": "(read-only)    Is this keymap item user defined (doesn't just replace a builtin item)", 
        "is_user_modified": "(read-only)    Is this keymap item modified by the user", 
        "key_modifier": "Regular key pressed as a modifier", 
        "map_type": "Type of event mapping", 
        "name": "(read-only)    Name of operator (translated) to call on input event", 
        "oskey": "Operating system key pressed", 
        "properties": "(read-only)    Properties to set when the operator is called", 
        "propvalue": "The value this event translates to in a modal keymap", 
        "shift": "Shift key pressed", 
        "show_expanded": "Show key map event and property details in the user interface", 
        "type": "Type of event"
      }
    }, 
    "KinematicConstraint": {
      "fields": {
        "chain_count": "How many bones are included in the IK effect - 0 uses all bones", 
        "distance": "Radius of limiting sphere", 
        "iterations": "Maximum number of solving iterations", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "lock_location_x": "Constraint position along X axis", 
        "lock_location_y": "Constraint position along Y axis", 
        "lock_location_z": "Constraint position along Z axis", 
        "lock_rotation_x": "Constraint rotation along X axis", 
        "lock_rotation_y": "Constraint rotation along Y axis", 
        "lock_rotation_z": "Constraint rotation along Z axis", 
        "orient_weight": "For Tree-IK: Weight of orientation control for this target", 
        "pole_angle": "Pole rotation offset", 
        "pole_target": "Object for pole rotation", 
        "reference_axis": "Constraint axis Lock options relative to Bone or Target reference", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_location": "Chain follows position of target", 
        "use_rotation": "Chain follows rotation of target", 
        "use_stretch": "Enable IK Stretching", 
        "use_tail": "Include bone's tail as last element in chain", 
        "weight": "For Tree-IK: Weight of position control for this target"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LaplacianDeformModifier": {
      "fields": {
        "is_bind": "(read-only)    Whether geometry has been bound to anchors", 
        "vertex_group": "Name of Vertex Group which determines Anchors"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "LaplacianSmoothModifier": {
      "fields": {
        "lambda_border": "Lambda factor in border", 
        "lambda_factor": "Smooth factor effect", 
        "use_normalized": "Improve and stabilize the enhanced shape", 
        "use_volume_preserve": "Apply volume preservation after smooth", 
        "use_x": "Smooth object along X axis", 
        "use_y": "Smooth object along Y axis", 
        "use_z": "Smooth object along Z axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Lattice": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "points": "(read-only)    Points of the lattice", 
        "points_u": "Point in U direction (can't be changed when there are shape keys)", 
        "points_v": "Point in V direction (can't be changed when there are shape keys)", 
        "points_w": "Point in W direction (can't be changed when there are shape keys)", 
        "shape_keys": "(read-only)", 
        "use_outside": "Only draw, and take into account, the outer vertices", 
        "vertex_group": "Vertex group to apply the influence of the lattice"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LatticeGpencilModifier": {
      "fields": {
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "object": "Lattice object to deform with", 
        "pass_index": "Pass index", 
        "strength": "Strength of modifier effect", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "LatticeModifier": {
      "fields": {
        "object": "Lattice object to deform with", 
        "strength": "Strength of modifier effect", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "LatticePoint": {
      "fields": {
        "co": "(read-only)    Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)", 
        "groups": "(read-only)    Weights for the vertex groups this point is member of", 
        "select": "Selection status", 
        "weight_softbody": "Softbody goal weight"
      }
    }, 
    "LayerCollection": {
      "fields": {
        "children": "(read-only)    Child layer collections", 
        "collection": "(read-only)    Collection this layer collection is wrapping", 
        "exclude": "Exclude from view layer", 
        "hide_viewport": "Temporarily hide in viewport", 
        "holdout": "Mask out objects in collection from view layer", 
        "indirect_only": "Objects in collection only contribute indirectly (through shadows and reflections) in the view layer", 
        "is_visible": "(read-only)    Whether this collection is visible for the viewlayer, take into account the collection parent", 
        "name": "(read-only)    Name of this view layer (same as its collection one)"
      }
    }, 
    "LayerObjects": {
      "fields": {
        "active": "Active object for this layer", 
        "selected": "(read-only)    All the selected objects of this layer"
      }
    }, 
    "Library": {
      "fields": {
        "filepath": "Path to the library .blend file", 
        "packed_file": "(read-only)", 
        "parent": "(read-only)", 
        "version": "(read-only)    Version of Blender the library .blend was saved with"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Light": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "color": "Light color", 
        "cutoff_distance": "Distance at which the light influence will be set to 0", 
        "cycles": "(read-only)    Cycles light settings", 
        "distance": "Falloff distance - the light is at half the original intensity at this point", 
        "node_tree": "(read-only)    Node tree for node based lights", 
        "specular_factor": "Specular reflection multiplier", 
        "type": "Type of Light", 
        "use_custom_distance": "Use custom attenuation distance instead of global light threshold", 
        "use_nodes": "Use shader nodes to render the light"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LightProbe": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "clip_end": "Probe clip end, beyond which objects will not appear in reflections", 
        "clip_start": "Probe clip start, below which objects will not appear in reflections", 
        "falloff": "Control how fast the probe influence decreases", 
        "grid_resolution_x": "Number of sample along the x axis of the volume", 
        "grid_resolution_y": "Number of sample along the y axis of the volume", 
        "grid_resolution_z": "Number of sample along the z axis of the volume", 
        "influence_distance": "Influence distance of the probe", 
        "influence_type": "Type of influence volume", 
        "intensity": "Modify the intensity of the lighting captured by this probe", 
        "invert_visibility_collection": "Invert visibility collection", 
        "parallax_distance": "Lowest corner of the parallax bounding box", 
        "parallax_type": "Type of parallax volume", 
        "show_clip": "Show the clipping distances in the 3D view", 
        "show_data": "Show captured lighting data into the 3D view for debugging purpose", 
        "show_influence": "Show the influence volume in the 3D view", 
        "show_parallax": "Show the parallax correction volume in the 3D view", 
        "type": "(read-only)    Type of light probe", 
        "use_custom_parallax": "Enable custom settings for the parallax correction volume", 
        "visibility_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "visibility_blur": "Filter size of the visibility blur", 
        "visibility_buffer_bias": "Bias for reducing self shadowing", 
        "visibility_collection": "Restrict objects visible for this probe"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "LimitDistanceConstraint": {
      "fields": {
        "distance": "Radius of limiting sphere", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LimitLocationConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_z": "Highest Z value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_max_x": "Use the maximum X value", 
        "use_max_y": "Use the maximum Y value", 
        "use_max_z": "Use the maximum Z value", 
        "use_min_x": "Use the minimum X value", 
        "use_min_y": "Use the minimum Y value", 
        "use_min_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LimitRotationConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_z": "Highest Z value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_limit_x": "Use the minimum X value", 
        "use_limit_y": "Use the minimum Y value", 
        "use_limit_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LimitScaleConstraint": {
      "fields": {
        "max_x": "Highest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_z": "Highest Z value to allow", 
        "min_x": "Lowest X value to allow", 
        "min_y": "Lowest Y value to allow", 
        "min_z": "Lowest Z value to allow", 
        "use_max_x": "Use the maximum X value", 
        "use_max_y": "Use the maximum Y value", 
        "use_max_z": "Use the maximum Z value", 
        "use_min_x": "Use the minimum X value", 
        "use_min_y": "Use the minimum Y value", 
        "use_min_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "Linesets": {
      "fields": {
        "active": "(read-only)    Active line set being displayed", 
        "active_index": "Index of active line set slot"
      }
    }, 
    "LineStyleAlphaModifier_AlongStroke": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_CreaseAngle": {
      "fields": {
        "angle_max": "Maximum angle to modify thickness", 
        "angle_min": "Minimum angle to modify thickness", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Curvature_3D": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curvature_max": "Maximum Curvature", 
        "curvature_min": "Minimum Curvature", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_DistanceFromCamera": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_DistanceFromObject": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "target": "Target object from which the distance is measured", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Material": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "material_attribute": "Specify which material attribute is used", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Noise": {
      "fields": {
        "amplitude": "Amplitude of the noise", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "period": "Period of the noise", 
        "seed": "Seed for the noise generation", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleAlphaModifier_Tangent": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ]
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_CreaseAngle": {
      "fields": {
        "angle_max": "Maximum angle to modify thickness", 
        "angle_min": "Minimum angle to modify thickness", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Curvature_3D": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "curvature_max": "Maximum Curvature", 
        "curvature_min": "Minimum Curvature", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "target": "Target object from which the distance is measured", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Material": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "material_attribute": "Specify which material attribute is used", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "use_ramp": "Use color ramp to map the BW average into an RGB color"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Noise": {
      "fields": {
        "amplitude": "Amplitude of the noise", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "period": "Period of the noise", 
        "seed": "Seed for the noise generation", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleColorModifier_Tangent": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "color_ramp": "(read-only)    Color ramp used to change line color", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ]
    }, 
    "LineStyleGeometryModifier_2DOffset": {
      "fields": {
        "end": "Displacement that is applied from the end of the stroke", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "start": "Displacement that is applied from the beginning of the stroke", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "x": "Displacement that is applied to the X coordinates of stroke vertices", 
        "y": "Displacement that is applied to the Y coordinates of stroke vertices"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "fields": {
        "angle": "Rotation angle", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "pivot": "Pivot of scaling and rotation operations", 
        "pivot_u": "Pivot in terms of the stroke point parameter u (0 <= u <= 1)", 
        "pivot_x": "2D X coordinate of the absolute pivot", 
        "pivot_y": "2D Y coordinate of the absolute pivot", 
        "scale_x": "Scaling factor that is applied along the X axis", 
        "scale_y": "Scaling factor that is applied along the Y axis", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_BackboneStretcher": {
      "fields": {
        "backbone_length": "Amount of backbone stretching", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_BezierCurve": {
      "fields": {
        "error": "Maximum distance allowed between the new Bezier curve and the original backbone geometry", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Blueprint": {
      "fields": {
        "backbone_length": "Amount of backbone stretching", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "random_backbone": "Randomness of the backbone stretching", 
        "random_center": "Randomness of the center", 
        "random_radius": "Randomness of the radius", 
        "rounds": "Number of rounds in contour strokes", 
        "shape": "Select the shape of blueprint contour strokes", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_GuidingLines": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "offset": "Displacement that is applied to the main direction line along its normal", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "fields": {
        "amplitude": "Amplitude of the Perlin noise", 
        "angle": "Displacement direction", 
        "expanded": "True if the modifier tab is expanded", 
        "frequency": "Frequency of the Perlin noise", 
        "name": "Name of the modifier", 
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "fields": {
        "amplitude": "Amplitude of the Perlin noise", 
        "angle": "Displacement direction", 
        "expanded": "True if the modifier tab is expanded", 
        "frequency": "Frequency of the Perlin noise", 
        "name": "Name of the modifier", 
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Polygonalization": {
      "fields": {
        "error": "Maximum distance between the original stroke and its polygonal approximation", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "sampling": "New sampling value to be used for subsequent modifiers", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_Simplification": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "tolerance": "Distance below which segments will be merged", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_SinusDisplacement": {
      "fields": {
        "amplitude": "Amplitude of the sinus displacement", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "phase": "Phase of the sinus displacement", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "wavelength": "Wavelength of the sinus displacement"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_SpatialNoise": {
      "fields": {
        "amplitude": "Amplitude of the spatial noise", 
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "octaves": "Number of octaves (i.e., the amount of detail of the spatial noise)", 
        "scale": "Scale of the spatial noise", 
        "smooth": "If true, the spatial noise is smooth", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "use_pure_random": "If true, the spatial noise does not show any coherence"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleGeometryModifier_TipRemover": {
      "fields": {
        "expanded": "True if the modifier tab is expanded", 
        "name": "Name of the modifier", 
        "tip_length": "Length of tips to be removed", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ]
    }, 
    "LineStyleTextureSlot": {
      "fields": {
        "alpha_factor": "Amount texture affects alpha", 
        "diffuse_color_factor": "Amount texture affects diffuse color", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "use_map_alpha": "The texture affects the alpha value", 
        "use_map_color_diffuse": "The texture affects basic color of the stroke"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "LineStyleThicknessModifier_AlongStroke": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "orientation": "Angle of the main direction", 
        "thickness_max": "Maximum thickness in the main direction", 
        "thickness_min": "Minimum thickness in the direction perpendicular to the main direction", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_CreaseAngle": {
      "fields": {
        "angle_max": "Maximum angle to modify thickness", 
        "angle_min": "Minimum angle to modify thickness", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "thickness_max": "Maximum thickness", 
        "thickness_min": "Minimum thickness", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Curvature_3D": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curvature_max": "Maximum Curvature", 
        "curvature_min": "Minimum Curvature", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "thickness_max": "Maximum thickness", 
        "thickness_min": "Minimum thickness", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_DistanceFromCamera": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_DistanceFromObject": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "target": "Target object from which the distance is measured", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Material": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "material_attribute": "Specify which material attribute is used", 
        "name": "Name of the modifier", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Noise": {
      "fields": {
        "amplitude": "Amplitude of the noise", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "name": "Name of the modifier", 
        "period": "Period of the noise", 
        "seed": "Seed for the noise generation", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "use_asymmetric": "Allow thickness to be assigned asymmetrically"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LineStyleThicknessModifier_Tangent": {
      "fields": {
        "blend": "Specify how the modifier value is blended into the base value", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "expanded": "True if the modifier tab is expanded", 
        "influence": "Influence factor by which the modifier changes the property", 
        "invert": "Invert the fade-out direction of the linear mapping", 
        "mapping": "Select the mapping type", 
        "name": "Name of the modifier", 
        "thickness_max": "Maximum thickness", 
        "thickness_min": "Minimum thickness", 
        "type": "(read-only)    Type of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering"
      }, 
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ]
    }, 
    "LockedTrackConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "lock_axis": "Axis that points upward", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "track_axis": "Axis that points to the target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "LoopColors": {
      "fields": {
        "active": "Active vertex color layer", 
        "active_index": "Active vertex color index"
      }
    }, 
    "Macro": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "name": "(read-only)", 
        "properties": "(read-only)"
      }
    }, 
    "MagicTexture": {
      "fields": {
        "noise_depth": "Depth of the noise", 
        "turbulence": "Turbulence of the noise"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "MaintainVolumeConstraint": {
      "fields": {
        "free_axis": "The free scaling axis of the object", 
        "mode": "The way the constraint treats original non-free axis scaling", 
        "volume": "Volume of the bone at rest"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "MarbleTexture": {
      "fields": {
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_depth": "Depth of the cloud calculation", 
        "noise_scale": "Scaling for noise input", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "Mask": {
      "fields": {
        "active_layer_index": "Index of active layer in list of all mask's layers", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "frame_end": "Final frame of the mask (used for sequencer)", 
        "frame_start": "First frame of the mask (used for sequencer)", 
        "layers": "(read-only)    Collection of layers which defines this mask"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MaskLayer": {
      "fields": {
        "alpha": "Render Opacity", 
        "blend": "Method of blending mask layers", 
        "falloff": "Falloff type the feather", 
        "hide": "Restrict visibility in the viewport", 
        "hide_render": "Restrict renderability", 
        "hide_select": "Restrict selection in the viewport", 
        "invert": "Invert the mask black/white", 
        "name": "Unique name of layer", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "splines": "(read-only)    Collection of splines which defines this layer", 
        "use_fill_holes": "Calculate holes when filling overlapping curves", 
        "use_fill_overlap": "Calculate self intersections and overlap before filling"
      }
    }, 
    "MaskLayers": {
      "fields": {
        "active": "Active layer in this mask"
      }
    }, 
    "MaskModifier": {
      "fields": {
        "armature": "Armature to use as source of bones to mask", 
        "invert_vertex_group": "Use vertices that are not part of region defined", 
        "threshold": "Weights over this threshold remain", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MaskParent": {
      "fields": {
        "id": "ID-block to which masking element would be parented to or to it's property", 
        "id_type": "Type of ID-block that can be used", 
        "parent": "Name of parent object in specified data-block to which parenting happens", 
        "sub_parent": "Name of parent sub-object in specified data-block to which parenting happens", 
        "type": "Parent Type"
      }
    }, 
    "MaskSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "mask": "Mask that this sequence uses", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MaskSpline": {
      "fields": {
        "offset_mode": "The method used for calculating the feather offset", 
        "points": "(read-only)    Collection of points", 
        "use_cyclic": "Make this spline a closed loop", 
        "use_fill": "Make this spline filled", 
        "use_self_intersection_check": "Prevent feather from self-intersections", 
        "weight_interpolation": "The type of weight interpolation for spline"
      }
    }, 
    "MaskSplinePoint": {
      "fields": {
        "co": "Coordinates of the control point", 
        "feather_points": "(read-only)    Points defining feather", 
        "handle_left": "Coordinates of the first handle", 
        "handle_left_type": "Handle type", 
        "handle_right": "Coordinates of the second handle", 
        "handle_right_type": "Handle type", 
        "handle_type": "Handle type", 
        "parent": "(read-only)", 
        "select": "Selection status", 
        "weight": "Weight of the point"
      }
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "select": "Selection status", 
        "u": "U coordinate of point along spline segment", 
        "weight": "Weight of feather point"
      }
    }, 
    "MaskSplines": {
      "fields": {
        "active": "Active spline of masking layer", 
        "active_point": "Active spline of masking layer"
      }
    }, 
    "Material": {
      "fields": {
        "alpha_threshold": "A pixel is rendered only if its alpha value is above this threshold", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "blend_method": "Blend Mode for Transparent Faces", 
        "cycles": "(read-only)    Cycles material settings", 
        "diffuse_color": "Diffuse color of the material", 
        "grease_pencil": "(read-only)    Grease pencil color settings for material", 
        "is_grease_pencil": "(read-only)    True if this material has grease pencil data", 
        "line_color": "Line color used for Freestyle line rendering", 
        "line_priority": "The line color of a higher priority is used at material boundaries", 
        "metallic": "Amount of mirror reflection for raytrace", 
        "node_tree": "(read-only)    Node tree for node based materials", 
        "paint_active_slot": "Index of active texture paint slot", 
        "paint_clone_slot": "Index of clone texture paint slot", 
        "pass_index": "Index number for the \"Material Index\" render pass", 
        "preview_render_type": "Type of preview render", 
        "refraction_depth": "Approximate the thickness of the object to compute two refraction event (0 is disabled)", 
        "roughness": "Roughness of the material", 
        "shadow_method": "Shadow mapping method", 
        "show_transparent_back": "Limit transparency to a single layer (avoids transparency sorting problems)", 
        "specular_color": "Specular color of the material", 
        "specular_intensity": "How intense (bright) the specular reflection is", 
        "texture_paint_images": "(read-only)    Texture images used for texture painting", 
        "texture_paint_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "use_backface_culling": "Use back face culling to hide the back side of faces", 
        "use_nodes": "Use shader nodes to render the material", 
        "use_preview_world": "Use the current world background to light the preview render", 
        "use_screen_refraction": "Use raytraced screen space refractions", 
        "use_sss_translucency": "Add translucency effect to subsurface"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MaterialGPencilStyle": {
      "fields": {
        "alignment_mode": "Defines how align Dots and Boxes with drawing path and object rotation", 
        "fill_color": "Color for filling region bounded by each stroke", 
        "fill_style": "Select style used to fill strokes", 
        "flip": "Flip filling colors", 
        "ghost": "Display strokes using this color when showing onion skins", 
        "gradient_type": "Select type of gradient used to fill strokes", 
        "hide": "Set color Visibility", 
        "is_fill_visible": "(read-only)    True when opacity of fill is set high enough to be visible", 
        "is_stroke_visible": "(read-only)    True when opacity of stroke is set high enough to be visible", 
        "lock": "Protect color from further editing and/or frame changes", 
        "mix_color": "Color for mixing with primary filling color", 
        "mix_factor": "Mix Adjustment Factor", 
        "mix_stroke_factor": "Mix Stroke Color", 
        "mode": "Select draw mode for stroke", 
        "pass_index": "Index number for the \"Color Index\" pass", 
        "pattern_angle": "Pattern Orientation Angle", 
        "pattern_gridsize": "Box Size", 
        "pattern_radius": "Pattern Radius", 
        "pattern_scale": "Scale Factor for UV coordinates", 
        "pattern_shift": "Shift filling pattern in 2d space", 
        "pixel_size": "Texture Pixel Size factor along the stroke", 
        "show_fill": "Show stroke fills of this material", 
        "show_stroke": "Show stroke lines of this material", 
        "stroke_style": "Select style used to draw strokes", 
        "texture_angle": "Texture Orientation Angle", 
        "texture_clamp": "Do not repeat texture and clamp to one instance only", 
        "texture_offset": "Shift Texture in 2d Space", 
        "texture_opacity": "Texture Opacity", 
        "texture_scale": "Scale Factor for Texture", 
        "use_fill_pattern": "Use Fill Texture as a pattern to apply color", 
        "use_fill_texture_mix": "Mix texture image with filling color", 
        "use_overlap_strokes": "Disable stencil and overlap self intersections with alpha materials", 
        "use_stroke_pattern": "Use Stroke Texture as a pattern to apply color", 
        "use_stroke_texture_mix": "Mix texture image with stroke color"
      }
    }, 
    "MaterialSlot": {
      "fields": {
        "link": "Link material to object or the object's data", 
        "material": "Material data-block used by this material slot", 
        "name": "(read-only)    Material slot name"
      }
    }, 
    "Menu": {
      "fields": {
        "bl_idname": "If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is \"OBJECT_MT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_MT_hello\")", 
        "bl_label": "The menu label", 
        "layout": "(read-only)    Defines the structure of the menu in the UI"
      }
    }, 
    "Mesh": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "auto_smooth_angle": "Maximum angle between face normals that will be considered as smooth (unused if custom split normals data are available)", 
        "auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "edges": "(read-only)    Edges of the mesh", 
        "face_maps": "(read-only)", 
        "has_custom_normals": "(read-only)    True if there are custom split normals data in this mesh", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "loop_triangles": "(read-only)    Tessellation of mesh polygons into triangles", 
        "loops": "(read-only)    Loops of the mesh (polygon corners)", 
        "materials": "(read-only)", 
        "polygon_layers_float": "(read-only)", 
        "polygon_layers_int": "(read-only)", 
        "polygon_layers_string": "(read-only)", 
        "polygons": "(read-only)    Polygons of the mesh", 
        "remesh_fix_poles": "Produces less poles and a better topology flow", 
        "remesh_preserve_paint_mask": "Keep the current mask on the new mesh", 
        "remesh_preserve_volume": "Projects the mesh to preserve the volume and details of the original mesh", 
        "remesh_smooth_normals": "Smooth the normals of the remesher result", 
        "remesh_voxel_adaptivity": "Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles", 
        "remesh_voxel_size": "Size of the voxel in object space used for volume evaluation. Lower values preserve finer details", 
        "shape_keys": "(read-only)", 
        "skin_vertices": "(read-only)    All skin vertices", 
        "texco_mesh": "Derive texture coordinates from another mesh", 
        "texspace_location": "Texture space location", 
        "texspace_size": "Texture space size", 
        "texture_mesh": "Use another mesh for texture indices (vertex indices must be aligned)", 
        "total_edge_sel": "(read-only)    Selected edge count in editmode", 
        "total_face_sel": "(read-only)    Selected face count in editmode", 
        "total_vert_sel": "(read-only)    Selected vertex count in editmode", 
        "use_auto_smooth": "Auto smooth (based on smooth/sharp faces/edges and angle between faces), or use custom split normals data if available", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "use_mirror_topology": "Use topology based mirroring (for when both sides of mesh have matching, unique topology)", 
        "use_mirror_x": "X Axis mirror editing", 
        "use_mirror_y": "Y Axis mirror editing", 
        "use_mirror_z": "Z Axis mirror editing", 
        "use_paint_mask": "Face selection masking for painting", 
        "use_paint_mask_vertex": "Vertex selection masking for painting", 
        "uv_layer_clone": "UV loop layer to be used as cloning source", 
        "uv_layer_clone_index": "Clone UV loop layer index", 
        "uv_layer_stencil": "UV loop layer to mask the painted area", 
        "uv_layer_stencil_index": "Mask UV loop layer index", 
        "uv_layers": "(read-only)    All UV loop layers", 
        "vertex_colors": "(read-only)    All vertex colors", 
        "vertex_layers_float": "(read-only)", 
        "vertex_layers_int": "(read-only)", 
        "vertex_layers_string": "(read-only)", 
        "vertex_paint_masks": "(read-only)    Vertex paint mask", 
        "vertices": "(read-only)    Vertices of the mesh"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MeshCacheModifier": {
      "fields": {
        "eval_factor": "Evaluation time in seconds", 
        "eval_frame": "The frame to evaluate (starting at 0)", 
        "eval_time": "Evaluation time in seconds", 
        "factor": "Influence of the deformation", 
        "filepath": "Path to external displacements file", 
        "frame_scale": "Evaluation time in seconds", 
        "frame_start": "Add this to the start frame", 
        "time_mode": "Method to control playback time"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshDeformModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "is_bound": "(read-only)    Whether geometry has been bound to control cage", 
        "object": "Mesh object to deform with", 
        "precision": "The grid size for binding", 
        "use_dynamic_bind": "Recompute binding dynamically on top of other deformers (slower and more memory consuming)", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshEdge": {
      "fields": {
        "bevel_weight": "Weight used by the Bevel modifier", 
        "crease": "Weight used by the Subdivision Surface modifier for creasing", 
        "index": "(read-only)    Index of this edge", 
        "is_loose": "Loose edge", 
        "use_edge_sharp": "Sharp edge for the Edge Split modifier", 
        "use_freestyle_mark": "Edge mark for Freestyle line rendering", 
        "use_seam": "Seam edge for UV unwrapping", 
        "vertices": "Vertex indices"
      }
    }, 
    "MeshFaceMapLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of face-map layer"
      }
    }, 
    "MeshFaceMapLayers": {
      "fields": {
        "active": "(read-only)"
      }
    }, 
    "MeshLoop": {
      "fields": {
        "bitangent": "(read-only)    Bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, *use it only if really needed*, slower access than bitangent_sign)", 
        "bitangent_sign": "(read-only)    Sign of the bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))", 
        "edge_index": "Edge index", 
        "index": "(read-only)    Index of this loop", 
        "normal": "Local space unit length split normal vector of this vertex for this polygon (must be computed beforehand using calc_normals_split or calc_tangents)", 
        "tangent": "(read-only)    Local space unit length tangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents)", 
        "vertex_index": "Vertex index"
      }
    }, 
    "MeshLoopColorLayer": {
      "fields": {
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering", 
        "data": "(read-only)", 
        "name": "Name of Vertex color layer"
      }
    }, 
    "MeshLoopTriangle": {
      "fields": {
        "area": "(read-only)    Area of this triangle", 
        "index": "(read-only)    Index of this loop triangle", 
        "loops": "(read-only)    Indices of mesh loops that make up the triangle", 
        "material_index": "(read-only)", 
        "normal": "(read-only)    Local space unit length normal vector for this triangle", 
        "polygon_index": "(read-only)    Index of mesh polygon that the triangle is a part of", 
        "split_normals": "(read-only)    Local space unit length split normals vectors of the vertices of this triangle (must be computed beforehand using calc_normals_split or calc_tangents)", 
        "use_smooth": "(read-only)", 
        "vertices": "(read-only)    Indices of triangle vertices"
      }
    }, 
    "MeshPaintMaskLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshPolygon": {
      "fields": {
        "area": "(read-only)    Read only area of this polygon", 
        "center": "(read-only)    Center of this polygon", 
        "index": "(read-only)    Index of this polygon", 
        "loop_start": "Index of the first loop of this polygon", 
        "loop_total": "Number of loops used by this polygon", 
        "normal": "(read-only)    Local space unit length normal vector for this polygon", 
        "use_freestyle_mark": "Face mark for Freestyle line rendering", 
        "vertices": "Vertex indices"
      }
    }, 
    "MeshPolygonFloatPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshPolygonIntPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshPolygons": {
      "fields": {
        "active": "The active polygon for this mesh"
      }
    }, 
    "MeshPolygonStringPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshSequenceCacheModifier": {
      "fields": {
        "object_path": "Path to the object in the Alembic archive used to lookup geometric data"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MeshSkinVertex": {
      "fields": {
        "radius": "Radius of the skin", 
        "use_loose": "If vertex has multiple adjacent edges, it is hulled to them directly", 
        "use_root": "Vertex is a root for rotation calculations and armature generation, setting this flag does not clear other roots in the same mesh island"
      }
    }, 
    "MeshSkinVertexLayer": {
      "fields": {
        "data": "(read-only)", 
        "name": "Name of skin layer"
      }
    }, 
    "MeshStatVis": {
      "fields": {
        "distort_max": "Maximum angle to display", 
        "distort_min": "Minimum angle to display", 
        "overhang_max": "Maximum angle to display", 
        "overhang_min": "Minimum angle to display", 
        "sharp_max": "Maximum angle to display", 
        "sharp_min": "Minimum angle to display", 
        "thickness_max": "Maximum for measuring thickness", 
        "thickness_min": "Minimum for measuring thickness", 
        "thickness_samples": "Number of samples to test per face", 
        "type": "Type of data to visualize/check"
      }
    }, 
    "MeshUVLoopLayer": {
      "fields": {
        "active": "Set the map as active for display and editing", 
        "active_clone": "Set the map as active for cloning", 
        "active_render": "Set the map as active for rendering", 
        "data": "(read-only)", 
        "name": "Name of UV map"
      }
    }, 
    "MeshVertex": {
      "fields": {
        "bevel_weight": "Weight used by the Bevel modifier 'Only Vertices' option", 
        "groups": "(read-only)    Weights for the vertex groups this vertex is member of", 
        "index": "(read-only)    Index of this vertex", 
        "normal": "Vertex Normal", 
        "undeformed_co": "(read-only)    For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates"
      }
    }, 
    "MeshVertexFloatPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshVertexIntPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshVertexStringPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MetaBall": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "cycles": "(read-only)    Cycles mesh settings", 
        "elements": "(read-only)    Meta elements", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "materials": "(read-only)", 
        "render_resolution": "Polygonization resolution in rendering", 
        "resolution": "Polygonization resolution in the 3D viewport", 
        "texspace_location": "Texture space location", 
        "texspace_size": "Texture space size", 
        "threshold": "Influence of meta elements", 
        "update_method": "Metaball edit update behavior", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MetaBallElements": {
      "fields": {
        "active": "(read-only)    Last selected element"
      }
    }, 
    "MetaElement": {
      "fields": {
        "hide": "Hide element", 
        "rotation": "Normalized quaternion rotation", 
        "size_x": "Size of element, use of components depends on element type", 
        "size_y": "Size of element, use of components depends on element type", 
        "size_z": "Size of element, use of components depends on element type", 
        "stiffness": "Stiffness defines how much of the element to fill", 
        "type": "Metaball types", 
        "use_negative": "Set metaball as negative one"
      }
    }, 
    "MetaSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "proxy": "(read-only)", 
        "sequences": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MirrorGpencilModifier": {
      "fields": {
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "object": "Object used as center", 
        "pass_index": "Pass index", 
        "use_clip": "Clip points", 
        "x_axis": "Mirror this axis", 
        "y_axis": "Mirror this axis", 
        "z_axis": "Mirror this axis"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "MirrorModifier": {
      "fields": {
        "merge_threshold": "Distance within which mirrored vertices are merged", 
        "mirror_object": "Object to use as mirror", 
        "mirror_offset_u": "Amount to offset mirrored UVs flipping point from the 0.5 on the U axis", 
        "mirror_offset_v": "Amount to offset mirrored UVs flipping point from the 0.5 point on the V axis", 
        "offset_u": "Mirrored UV offset on the U axis", 
        "offset_v": "Mirrored UV offset on the V axis", 
        "use_axis": "Enable axis mirror", 
        "use_bisect_axis": "Cuts the mesh across the mirror plane", 
        "use_bisect_flip_axis": "Flips the direction of the slice", 
        "use_clip": "Prevent vertices from going through the mirror during transform", 
        "use_mirror_merge": "Merge vertices within the merge threshold", 
        "use_mirror_u": "Mirror the U texture coordinate around the flip offset point", 
        "use_mirror_v": "Mirror the V texture coordinate around the flip offset point", 
        "use_mirror_vertex_groups": "Mirror vertex groups (e.g. .R->.L)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Modifier": {
      "fields": {
        "name": "Modifier name", 
        "show_expanded": "Set modifier expanded in the user interface", 
        "show_in_editmode": "Display modifier in Edit mode", 
        "show_on_cage": "Adjust edit cage to modifier result", 
        "show_render": "Use modifier during render", 
        "show_viewport": "Display modifier in viewport", 
        "type": "(read-only)", 
        "use_apply_on_spline": "Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface"
      }
    }, 
    "MotionPath": {
      "fields": {
        "color": "Custom color for motion path", 
        "frame_end": "(read-only)    End frame of the stored range", 
        "frame_start": "(read-only)    Starting frame of the stored range", 
        "is_modified": "Path is being edited", 
        "length": "(read-only)    Number of frames cached", 
        "line_thickness": "Line thickness for drawing path", 
        "lines": "Draw straight lines between keyframe points", 
        "points": "(read-only)    Cached positions per frame", 
        "use_bone_head": "(read-only)    For PoseBone paths, use the bone head location when calculating this path", 
        "use_custom_color": "Use custom color for this motion path"
      }
    }, 
    "MotionPathVert": {
      "fields": {
        "select": "Path point is selected for editing"
      }
    }, 
    "MovieClip": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "display_aspect": "Display Aspect for this clip, does not affect rendering", 
        "filepath": "Filename of the movie or sequence file", 
        "fps": "(read-only)    Detected frame rate of the movie clip in frames per second", 
        "frame_duration": "(read-only)    Detected duration of movie clip in frames", 
        "frame_offset": "Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)", 
        "frame_start": "Global scene frame number at which this movie starts playing (affects all data associated with a clip)", 
        "grease_pencil": "Grease pencil data for this movie clip", 
        "proxy": "(read-only)", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded", 
        "source": "(read-only)    Where the clip comes from", 
        "tracking": "(read-only)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this clip", 
        "use_proxy_custom_directory": "Create proxy images in a custom directory (default is movie location)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_100": "Build proxy resolution 100% of the original footage dimension", 
        "build_25": "Build proxy resolution 25% of the original footage dimension", 
        "build_50": "Build proxy resolution 50% of the original footage dimension", 
        "build_75": "Build proxy resolution 75% of the original footage dimension", 
        "build_free_run": "Build free run time code index", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "build_record_run": "Build record run time code index", 
        "build_undistorted_100": "Build proxy resolution 100% of the original undistorted footage dimension", 
        "build_undistorted_25": "Build proxy resolution 25% of the original undistorted footage dimension", 
        "build_undistorted_50": "Build proxy resolution 50% of the original undistorted footage dimension", 
        "build_undistorted_75": "Build proxy resolution 75% of the original undistorted footage dimension", 
        "directory": "Location to store the proxy files", 
        "quality": "JPEG quality of proxy images"
      }
    }, 
    "MovieClipSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "fps": "(read-only)    Frames per second", 
        "stabilize2d": "Use the 2D stabilized version of the clip", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "undistort": "Use the undistorted version of the clip", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MovieClipUser": {
      "fields": {
        "frame_current": "Current frame number in movie or image sequence", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions", 
        "use_render_undistorted": "Render preview using undistorted proxy"
      }
    }, 
    "MovieReconstructedCamera": {
      "fields": {
        "average_error": "(read-only)    Average error of reconstruction", 
        "frame": "(read-only)    Frame number marker is keyframed on", 
        "matrix": "(read-only)    Worldspace transformation matrix"
      }
    }, 
    "MovieSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "crop": "(read-only)", 
        "elements": "(read-only)", 
        "fps": "(read-only)    Frames per second", 
        "mpeg_preseek": "For MPEG movies, preseek this many frames", 
        "proxy": "(read-only)", 
        "stereo_3d_format": "(read-only)    Settings for stereo 3d", 
        "stream_index": "For files with several movie streams, use the stream with the given index", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_multiview": "Use Multiple Views (when available)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing", 
        "views_format": "Mode to load movie views"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "MovieTracking": {
      "fields": {
        "active_object_index": "Index of active object", 
        "camera": "(read-only)", 
        "dopesheet": "(read-only)", 
        "objects": "(read-only)    Collection of objects in this tracking data object", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "reconstruction": "(read-only)", 
        "settings": "(read-only)", 
        "stabilization": "(read-only)", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "distortion_model": "Distortion model used for camera lenses", 
        "division_k1": "First coefficient of second order division distortion", 
        "division_k2": "First coefficient of second order division distortion", 
        "focal_length": "Camera's focal length", 
        "focal_length_pixels": "Camera's focal length", 
        "k1": "First coefficient of third order polynomial radial distortion", 
        "k2": "Second coefficient of third order polynomial radial distortion", 
        "k3": "Third coefficient of third order polynomial radial distortion", 
        "pixel_aspect": "Pixel aspect ratio", 
        "principal": "Optical center of lens", 
        "sensor_width": "Width of CCD sensor in millimeters", 
        "units": "Units used for camera focal length"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "show_hidden": "Include channels from objects/bone that aren't visible", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "sort_method": "Method to be used to sort channels in dopesheet view", 
        "use_invert_sort": "Invert sort order of dopesheet channels"
      }
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "co": "Marker position at frame in normalized coordinates", 
        "frame": "Frame number marker is keyframed on", 
        "is_keyed": "Whether the position of the marker is keyframed or tracked", 
        "mute": "Is marker muted for current frame", 
        "pattern_bound_box": "(read-only)    Pattern area bounding box in normalized coordinates", 
        "pattern_corners": "Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position", 
        "search_max": "Right-bottom corner of search area in normalized coordinates relative to marker position", 
        "search_min": "Left-bottom corner of search area in normalized coordinates relative to marker position"
      }
    }, 
    "MovieTrackingObject": {
      "fields": {
        "is_camera": "(read-only)    Object is used for camera tracking", 
        "keyframe_a": "First keyframe used for reconstruction initialization", 
        "keyframe_b": "Second keyframe used for reconstruction initialization", 
        "name": "Unique name of object", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "reconstruction": "(read-only)", 
        "scale": "Scale of object solution in camera space", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object"
      }
    }, 
    "MovieTrackingObjectPlaneTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MovieTrackingObjects": {
      "fields": {
        "active": "Active object in this tracking data object"
      }
    }, 
    "MovieTrackingObjectTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "corners": "Array of coordinates which represents UI rectangle corners in frame normalized coordinates", 
        "frame": "Frame number marker is keyframed on", 
        "mute": "Is marker muted for current frame"
      }
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "image": "Image displayed in the track during editing in clip editor", 
        "image_opacity": "Opacity of the image", 
        "markers": "(read-only)    Collection of markers in track", 
        "name": "Unique name of track", 
        "select": "Plane track is selected", 
        "use_auto_keying": "Automatic keyframe insertion when moving plane corners"
      }
    }, 
    "MovieTrackingPlaneTracks": {
      "fields": {
        "active": "Active plane track in this tracking data object"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "average_error": "(read-only)    Average error of reconstruction", 
        "cameras": "(read-only)    Collection of solved cameras", 
        "is_valid": "(read-only)    Is tracking data contains valid reconstruction information"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "clean_action": "Cleanup action to execute", 
        "clean_error": "Effect on tracks which have a larger re-projection error", 
        "clean_frames": "Effect on tracks which are tracked less than the specified amount of frames", 
        "default_correlation_min": "Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "default_frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "default_margin": "Default distance from image boundary at which marker stops tracking", 
        "default_motion_model": "Default motion model to use for tracking", 
        "default_pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "default_pattern_size": "Size of pattern area for newly created tracks", 
        "default_search_size": "Size of search area for newly created tracks", 
        "default_weight": "Influence of newly created track on a final solution", 
        "distance": "Distance between two bundles used for scene scaling", 
        "object_distance": "Distance between two bundles used for object scaling", 
        "refine_intrinsics": "Refine intrinsics during camera solving", 
        "show_default_expanded": "Show default options expanded in the user interface", 
        "show_extra_expanded": "Show extra options expanded in the user interface", 
        "speed": "Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)", 
        "use_default_blue_channel": "Use blue channel from footage for tracking", 
        "use_default_brute": "Use a brute-force translation-only initialization when tracking", 
        "use_default_green_channel": "Use green channel from footage for tracking", 
        "use_default_mask": "Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking", 
        "use_default_normalization": "Normalize light intensities while tracking (slower)", 
        "use_default_red_channel": "Use red channel from footage for tracking", 
        "use_keyframe_selection": "Automatically select keyframes when solving camera/object motion", 
        "use_tripod_solver": "Use special solver to track a stable camera position, such as a tripod"
      }
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "active_rotation_track_index": "Index of active track in rotation stabilization tracks list", 
        "active_track_index": "Index of active track in translation stabilization tracks list", 
        "anchor_frame": "Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)", 
        "filter_type": "Interpolation to use for sub-pixel shifts and rotations due to stabilization", 
        "influence_location": "Influence of stabilization algorithm on footage location", 
        "influence_rotation": "Influence of stabilization algorithm on footage rotation", 
        "influence_scale": "Influence of stabilization algorithm on footage scale", 
        "rotation_tracks": "(read-only)    Collection of tracks used for 2D stabilization (translation)", 
        "scale_max": "Limit the amount of automatic scaling", 
        "show_tracks_expanded": "Show UI list of tracks participating in stabilization", 
        "target_position": "Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)", 
        "target_rotation": "Rotation present on original shot, will be compensated (e.g. for deliberate tilting)", 
        "target_scale": "Explicitly scale resulting frame to compensate zoom of original shot", 
        "tracks": "(read-only)    Collection of tracks used for 2D stabilization (translation)", 
        "use_2d_stabilization": "Use 2D stabilization for footage", 
        "use_autoscale": "Automatically scale footage to cover unfilled areas when stabilizing", 
        "use_stabilize_rotation": "Stabilize detected rotation around center of frame", 
        "use_stabilize_scale": "Compensate any scale changes relative to center of rotation"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "average_error": "(read-only)    Average error of re-projection", 
        "bundle": "(read-only)    Position of bundle reconstructed from this track", 
        "color": "Color of the track in the Movie Clip Editor and the 3D viewport after a solve", 
        "correlation_min": "Minimal value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "grease_pencil": "Grease pencil data for this track", 
        "has_bundle": "(read-only)    True if track has a valid bundle", 
        "hide": "Track is hidden", 
        "lock": "Track is locked and all changes to it are disabled", 
        "margin": "Distance from image boundary at which marker stops tracking", 
        "markers": "(read-only)    Collection of markers in track", 
        "motion_model": "Default motion model to use for tracking", 
        "name": "Unique name of track", 
        "offset": "Offset of track from the parenting point", 
        "pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "select": "Track is selected", 
        "select_anchor": "Track's anchor point is selected", 
        "select_pattern": "Track's pattern area is selected", 
        "select_search": "Track's search area is selected", 
        "use_alpha_preview": "Apply track's mask on displaying preview", 
        "use_blue_channel": "Use blue channel from footage for tracking", 
        "use_brute": "Use a brute-force translation only pre-track before refinement", 
        "use_custom_color": "Use custom color instead of theme-defined", 
        "use_grayscale_preview": "Display what the tracking algorithm sees in the preview", 
        "use_green_channel": "Use green channel from footage for tracking", 
        "use_mask": "Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking", 
        "use_normalization": "Normalize light intensities while tracking. Slower", 
        "use_red_channel": "Use red channel from footage for tracking", 
        "weight": "Influence of this track on a final solution", 
        "weight_stab": "Influence of this track on 2D stabilization"
      }
    }, 
    "MovieTrackingTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MulticamSequence": {
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "MultiplySequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "MultiresModifier": {
      "fields": {
        "filepath": "Path to external displacements file", 
        "is_external": "(read-only)    Store multires displacements outside the .blend file, to save memory", 
        "levels": "Number of subdivisions to use in the viewport", 
        "quality": "Accuracy of vertex positions, lower value is faster but less precise", 
        "render_levels": "The subdivision level visible at render time", 
        "sculpt_levels": "Number of subdivisions to use in sculpt mode", 
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "total_levels": "(read-only)    Number of subdivisions for which displacements are stored", 
        "use_creases": "Use mesh edge crease information to sharpen edges", 
        "uv_smooth": "Controls how smoothing is applied to UVs"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "MusgraveTexture": {
      "fields": {
        "dimension_max": "Highest fractal dimension", 
        "gain": "The gain multiplier", 
        "lacunarity": "Gap between successive frequencies", 
        "musgrave_type": "Fractal noise algorithm", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_intensity": "Intensity of the noise", 
        "noise_scale": "Scaling for noise input", 
        "octaves": "Number of frequencies used", 
        "offset": "The fractal offset"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "NlaStrip": {
      "fields": {
        "action": "Action referenced by this strip", 
        "action_frame_end": "Last frame from action to use", 
        "action_frame_start": "First frame from action to use", 
        "active": "(read-only)    NLA Strip is active", 
        "blend_in": "Number of frames at start of strip to fade in influence", 
        "blend_type": "Method used for combining strip's result with accumulated result", 
        "extrapolation": "Action to take for gaps past the strip extents", 
        "fcurves": "(read-only)    F-Curves for controlling the strip's influence and timing", 
        "influence": "Amount the strip contributes to the current result", 
        "modifiers": "(read-only)    Modifiers affecting all the F-Curves in the referenced Action", 
        "mute": "Disable NLA Strip evaluation", 
        "repeat": "Number of times to repeat the action range", 
        "scale": "Scaling factor for action", 
        "select": "NLA Strip is selected", 
        "strip_time": "Frame of referenced Action to evaluate", 
        "strips": "(read-only)    NLA Strips that this strip acts as a container for (if it is of type Meta)", 
        "type": "(read-only)    Type of NLA Strip", 
        "use_animated_influence": "Influence setting is controlled by an F-Curve rather than automatically determined", 
        "use_animated_time": "Strip time is controlled by an F-Curve rather than automatically determined", 
        "use_animated_time_cyclic": "Cycle the animated time within the action start & end", 
        "use_auto_blend": "Number of frames for Blending In/Out is automatically determined from overlapping strips", 
        "use_reverse": "NLA Strip is played back in reverse order (only when timing is automatically determined)", 
        "use_sync_length": "Update range of frames referenced from action after tweaking strip and its keyframes"
      }
    }, 
    "NlaTrack": {
      "fields": {
        "active": "(read-only)    NLA Track is active", 
        "is_solo": "NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)", 
        "lock": "NLA Track is locked", 
        "mute": "Disable NLA Track evaluation", 
        "select": "NLA Track is selected", 
        "strips": "(read-only)    NLA Strips on this NLA-track"
      }
    }, 
    "NlaTracks": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "Node": {
      "fields": {
        "bl_icon": "The node icon", 
        "bl_label": "The node label", 
        "bl_static_type": "Node type (deprecated, use with care)", 
        "color": "Custom color of the node body", 
        "dimensions": "(read-only)    Absolute bounding box dimensions of the node", 
        "height": "Height of the node", 
        "inputs": "(read-only)", 
        "internal_links": "(read-only)    Internal input-to-output connections for muting", 
        "label": "Optional custom node label", 
        "name": "Unique node identifier", 
        "outputs": "(read-only)", 
        "parent": "Parent this node is attached to", 
        "select": "Node selection state", 
        "show_texture": "Draw node in viewport textured draw mode", 
        "type": "(read-only)    Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)", 
        "use_custom_color": "Use custom color for the node", 
        "width": "Width of the node", 
        "width_hidden": "Width of the node in hidden state"
      }
    }, 
    "NodeCustomGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node"
      ]
    }, 
    "NodeFrame": {
      "fields": {
        "label_size": "Font size to use for displaying the label", 
        "shrink": "Shrink the frame to minimal bounding box"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeGroupInput": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeGroupOutput": {
      "fields": {
        "interface": "(read-only)    Interface socket data", 
        "is_active_output": "True if this node is used as the active group output"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal"
      ]
    }, 
    "NodeInternalSocketTemplate": {
      "fields": {
        "identifier": "(read-only)    Identifier of the socket", 
        "name": "(read-only)    Name of the socket", 
        "type": "(read-only)    Data type of the socket"
      }
    }, 
    "NodeLink": {
      "fields": {
        "from_node": "(read-only)", 
        "from_socket": "(read-only)", 
        "is_hidden": "(read-only)    Link is hidden due to invisible sockets", 
        "to_node": "(read-only)", 
        "to_socket": "(read-only)"
      }
    }, 
    "NodeOutputFileSlotFile": {
      "fields": {
        "format": "(read-only)", 
        "path": "Subpath used for this slot"
      }
    }, 
    "NodeOutputFileSlotLayer": {
      "fields": {
        "name": "OpenEXR layer name used for this slot"
      }
    }, 
    "Nodes": {
      "fields": {
        "active": "Active node in this tree"
      }
    }, 
    "NodeSocket": {
      "fields": {
        "display_shape": "Socket shape", 
        "enabled": "Enable the socket", 
        "hide": "Hide the socket", 
        "hide_value": "Hide the socket input value", 
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "is_linked": "(read-only)    True if the socket is connected", 
        "is_output": "(read-only)    True if the socket is an output, otherwise input", 
        "link_limit": "Max number of links allowed for this socket", 
        "name": "Socket name", 
        "node": "(read-only)    Node owning this socket", 
        "show_expanded": "Socket links are expanded in the user interface", 
        "type": "Data type"
      }
    }, 
    "NodeSocketBool": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketColor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloat": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatAngle": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatTime": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketFloatUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketInt": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketInterface": {
      "fields": {
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "is_output": "(read-only)    True if the socket is an output, otherwise input", 
        "name": "Socket name"
      }
    }, 
    "NodeSocketInterfaceBool": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceColor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloat": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatAngle": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatTime": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceFloatUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceInt": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceIntFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceIntPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceIntUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceStandard": {
      "fields": {
        "type": "(read-only)    Data type"
      }, 
      "inherits": [
        "NodeSocketInterface"
      ]
    }, 
    "NodeSocketInterfaceString": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVector": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorAcceleration": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorDirection": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorEuler": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorTranslation": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorVelocity": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketInterfaceVectorXYZ": {
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }, 
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ]
    }, 
    "NodeSocketIntFactor": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketIntPercentage": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketIntUnsigned": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketString": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVector": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorAcceleration": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorDirection": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorEuler": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorTranslation": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorVelocity": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeSocketVectorXYZ": {
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }, 
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ]
    }, 
    "NodeTree": {
      "fields": {
        "active_input": "Index of the active input", 
        "active_output": "Index of the active output", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "bl_icon": "The node tree icon", 
        "bl_label": "The node tree label", 
        "grease_pencil": "Grease Pencil data-block", 
        "inputs": "(read-only)    Node tree inputs", 
        "links": "(read-only)", 
        "nodes": "(read-only)", 
        "outputs": "(read-only)    Node tree outputs", 
        "type": "(read-only)    Node Tree type (deprecated, bl_idname is the actual node tree type identifier)", 
        "view_center": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "NodeTreePath": {
      "fields": {
        "node_tree": "(read-only)    Base node tree from context"
      }
    }, 
    "NoiseGpencilModifier": {
      "fields": {
        "factor": "Amount of noise to apply", 
        "full_stroke": "The noise moves the stroke as a whole, not point by point", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "move_extreme": "The noise moves the stroke extreme points", 
        "pass_index": "Pass index", 
        "random": "Use random values", 
        "seed": "Random seed", 
        "step": "Number of frames before recalculate random values again", 
        "use_edit_position": "The modifier affects the position of the point", 
        "use_edit_strength": "The modifier affects the color strength of the point", 
        "use_edit_thickness": "The modifier affects the thickness of the point", 
        "use_edit_uv": "The modifier affects the UV rotation factor of the point", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "NormalEditModifier": {
      "fields": {
        "invert_vertex_group": "Invert vertex group influence", 
        "mix_factor": "How much of generated normals to mix with exiting ones", 
        "mix_limit": "Maximum angle between old and new normals", 
        "mix_mode": "How to mix generated normals with existing ones", 
        "mode": "How to affect (generate) normals", 
        "no_polynors_fix": "Do not flip polygons when their normals are not consistent with their newly computed custom vertex normals", 
        "offset": "Offset from object's center", 
        "target": "Target object used to affect normals", 
        "use_direction_parallel": "Use same direction for all normals, from origin to target's center (Directional mode only)", 
        "vertex_group": "Vertex group name for selecting/weighting the affected areas"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Object": {
      "fields": {
        "active_material": "Active material being displayed", 
        "active_material_index": "Index of active material slot", 
        "active_shape_key": "(read-only)    Current shape key", 
        "active_shape_key_index": "Current shape key index", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "animation_visualization": "(read-only)    Animation data for this data-block", 
        "bound_box": "(read-only)    Object's bounding box in object-space coordinates, all values are -1.0 when not available", 
        "collision": "(read-only)    Settings for using the object as a collider in physics simulation", 
        "color": "Object color and alpha, used when faces have the ObColor mode enabled", 
        "constraints": "(read-only)    Constraints affecting the transformation of the object", 
        "cycles": "(read-only)    Cycles object settings", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "data": "Object data", 
        "delta_location": "Extra translation added to the location of the object", 
        "delta_rotation_euler": "Extra rotation added to the rotation of the object (when using Euler rotations)", 
        "delta_rotation_quaternion": "Extra rotation added to the rotation of the object (when using Quaternion rotations)", 
        "delta_scale": "Extra scaling added to the scale of the object", 
        "dimensions": "Absolute bounding box dimensions of the object (WARNING: assigning to it or its members multiple consecutive times will not work correctly, as this needs up-to-date evaluated data)", 
        "display": "(read-only)    Object display settings for 3d viewport", 
        "display_bounds_type": "Object boundary display type", 
        "display_type": "How to display object in viewport", 
        "empty_display_size": "Size of display for empties in the viewport", 
        "empty_display_type": "Viewport display style for empties", 
        "empty_image_depth": "Determine which other objects will occlude the image", 
        "empty_image_offset": "Origin offset distance", 
        "empty_image_side": "Show front/back side", 
        "face_maps": "(read-only)    Maps of faces of the object", 
        "field": "(read-only)    Settings for using the object as a field in physics simulation", 
        "grease_pencil_modifiers": "(read-only)    Modifiers affecting the data of the grease pencil object", 
        "hide_render": "Globally disable in renders", 
        "hide_select": "Disable selection in viewport", 
        "hide_viewport": "Globally disable in viewports", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "instance_collection": "Instance an existing collection", 
        "instance_faces_scale": "Scale the face instance objects", 
        "instance_type": "If not None, object instancing method to use", 
        "is_from_instancer": "(read-only)    Object comes from a instancer", 
        "is_from_set": "(read-only)    Object comes from a background set", 
        "is_instancer": "(read-only)", 
        "location": "Location of the object", 
        "lock_location": "Lock editing of location in the interface", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "lock_scale": "Lock editing of scale in the interface", 
        "material_slots": "(read-only)    Material slots in the object", 
        "matrix_basis": "Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied", 
        "matrix_local": "Parent relative transformation matrix - WARNING: Only takes into account 'Object' parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone", 
        "matrix_parent_inverse": "Inverse of object's parent matrix at time of parenting", 
        "matrix_world": "Worldspace transformation matrix", 
        "mode": "(read-only)    Object interaction mode", 
        "modifiers": "(read-only)    Modifiers affecting the geometric data of the object", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "parent": "Parent Object", 
        "parent_bone": "Name of parent bone in case of a bone parenting relation", 
        "parent_type": "Type of parent relation", 
        "parent_vertices": "Indices of vertices in case of a vertex parenting relation", 
        "particle_systems": "(read-only)    Particle systems emitted from the object", 
        "pass_index": "Index number for the \"Object Index\" render pass", 
        "pose": "(read-only)    Current pose for armatures", 
        "pose_library": "Action used as a pose library for armatures", 
        "proxy": "(read-only)    Library object this proxy object controls", 
        "proxy_collection": "(read-only)    Library collection duplicator object this proxy object controls", 
        "rigid_body": "(read-only)    Settings for rigid body simulation", 
        "rigid_body_constraint": "(read-only)    Constraint constraining rigid bodies", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "rotation_euler": "Rotation in Eulers", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "scale": "Scaling of the object", 
        "shader_effects": "(read-only)    Effects affecting display of object", 
        "show_all_edges": "Display all edges for mesh objects", 
        "show_axis": "Display the object's origin and axes", 
        "show_bounds": "Display the object's bounds", 
        "show_empty_image_only_axis_aligned": "Only display the image when it is aligned with the view axis", 
        "show_empty_image_orthographic": "Display image in orthographic mode", 
        "show_empty_image_perspective": "Display image in perspective mode", 
        "show_in_front": "Make the object draw in front of others", 
        "show_instancer_for_render": "Make instancer visible when rendering", 
        "show_instancer_for_viewport": "Make instancer visible in the viewport", 
        "show_name": "Display the object's name", 
        "show_only_shape_key": "Always show the current Shape for this Object", 
        "show_texture_space": "Display the object's texture space", 
        "show_transparent": "Display material transparency in the object", 
        "show_wire": "Add the object's wireframe over solid drawing", 
        "soft_body": "(read-only)    Settings for soft body simulation", 
        "track_axis": "Axis that points in 'forward' direction (applies to InstanceFrame when parent 'Follow' is enabled)", 
        "type": "(read-only)    Type of Object", 
        "up_axis": "Axis that points in the upward direction (applies to InstanceFrame when parent 'Follow' is enabled)", 
        "use_dynamic_topology_sculpting": "(read-only)", 
        "use_empty_image_alpha": "Use alpha blending instead of alpha test (can produce sorting artifacts)", 
        "use_instance_faces_scale": "Scale instance based on face size", 
        "use_instance_vertices_rotation": "Rotate instance according to vertex normal", 
        "use_shape_key_edit_mode": "Apply shape keys in edit mode (for Meshes only)", 
        "vertex_groups": "(read-only)    Vertex groups of the object"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ObjectBase": {
      "fields": {
        "hide_viewport": "Temporarily hide in viewport", 
        "object": "(read-only)    Object this base links to", 
        "select": "Object base selection state"
      }
    }, 
    "ObjectConstraints": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "ObjectDisplay": {
      "fields": {
        "show_shadows": "Object cast shadows in the 3d viewport"
      }
    }, 
    "ObjectSolverConstraint": {
      "fields": {
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "clip": "Movie Clip to get tracking data from", 
        "object": "Movie tracking object to follow", 
        "use_active_clip": "Use active clip defined in scene"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ObstacleFluidSettings": {
      "fields": {
        "impact_factor": "This is an unphysical value for moving objects - it controls the impact an obstacle has on the fluid, =0 behaves a bit like outflow (deleting fluid), =1 is default, while >1 results in high forces (can be used to tweak total mass)", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "OceanModifier": {
      "fields": {
        "bake_foam_fade": "How much foam accumulates over time (baked ocean only)", 
        "choppiness": "Choppiness of the wave's crest (adds some horizontal component to the displacement)", 
        "damping": "Damp reflected waves going in opposite direction to the wind", 
        "depth": "Depth of the solid ground below the water surface", 
        "filepath": "Path to a folder to store external baked images", 
        "foam_coverage": "Amount of generated foam", 
        "foam_layer_name": "Name of the vertex color layer used for foam", 
        "frame_end": "End frame of the ocean baking", 
        "frame_start": "Start frame of the ocean baking", 
        "geometry_mode": "Method of modifying geometry", 
        "is_cached": "(read-only)    Whether the ocean is using cached data or simulating", 
        "random_seed": "Seed of the random generator", 
        "repeat_x": "Repetitions of the generated surface in X", 
        "repeat_y": "Repetitions of the generated surface in Y", 
        "resolution": "Resolution of the generated surface", 
        "size": "Surface scale factor (does not affect the height of the waves)", 
        "spatial_size": "Size of the simulation domain (in meters), and of the generated geometry (in BU)", 
        "time": "Current time of the simulation", 
        "use_foam": "Generate foam mask as a vertex color channel", 
        "use_normals": "Output normals for bump mapping - disabling can speed up performance if its not needed", 
        "wave_alignment": "How much the waves are aligned to each other", 
        "wave_direction": "Main direction of the waves when they are (partially) aligned", 
        "wave_scale": "Scale of the displacement effect", 
        "wave_scale_min": "Shortest allowed wavelength", 
        "wind_velocity": "Wind speed"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "OffsetGpencilModifier": {
      "fields": {
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "location": "Values for change location", 
        "material": "Material name", 
        "pass_index": "Pass index", 
        "rotation": "Values for changes in rotation", 
        "scale": "Values for changes in scale", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "OpacityGpencilModifier": {
      "fields": {
        "create_materials": "When apply modifier, create new material", 
        "factor": "Factor of Opacity", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "modify_color": "Set what colors of the stroke are affected", 
        "opacity_mode": "Set what mode used to define opacity", 
        "pass_index": "Pass index", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "Operator": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "has_reports": "(read-only)    Operator has a set of reports (warnings and errors) from last execution", 
        "layout": "(read-only)", 
        "macros": "(read-only)", 
        "name": "(read-only)", 
        "options": "(read-only)    Runtime options", 
        "properties": "(read-only)"
      }
    }, 
    "OperatorFileListElement": {
      "fields": {
        "name": "Name of a file or directory within a file list"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OperatorMacro": {
      "fields": {
        "properties": "(read-only)"
      }
    }, 
    "OperatorMousePath": {
      "fields": {
        "loc": "Mouse location", 
        "time": "Time of mouse location"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OperatorOptions": {
      "fields": {
        "is_grab_cursor": "(read-only)    True when the cursor is grabbed", 
        "is_invoke": "(read-only)    True when invoked (even if only the execute callbacks available)", 
        "is_repeat": "(read-only)    True when run from the 'Adjust Last Operation' panel", 
        "is_repeat_last": "(read-only)    True when run from the operator 'Repeat Last'", 
        "use_cursor_region": "Enable to use the region under the cursor for modal execution"
      }
    }, 
    "OperatorStrokeElement": {
      "fields": {
        "pressure": "Tablet pressure", 
        "size": "Brush size in screen space"
      }, 
      "inherits": [
        "PropertyGroup"
      ]
    }, 
    "OutflowFluidSettings": {
      "fields": {
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "volume_initialization": "Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "OverDropSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "PackedFile": {
      "fields": {
        "data": "(read-only)    Raw data (bytes, exact content of the embedded file)", 
        "size": "(read-only)    Size of packed file in bytes"
      }
    }, 
    "Paint": {
      "fields": {
        "brush": "Active Brush", 
        "cavity_curve": "(read-only)    Editable cavity curve", 
        "input_samples": "Average multiple input samples together to smooth the brush stroke", 
        "palette": "Active Palette", 
        "show_low_resolution": "For multires, show low resolution while navigating the view", 
        "tile_offset": "Stride at which tiled strokes are copied", 
        "tile_x": "Tile along X axis", 
        "tile_y": "Tile along Y axis", 
        "tile_z": "Tile along Z axis", 
        "tool_slots": "(read-only)", 
        "use_cavity": "Mask painting according to mesh geometry cavity", 
        "use_symmetry_feather": "Reduce the strength of the brush where it overlaps symmetrical daubs", 
        "use_symmetry_x": "Mirror brush across the X axis", 
        "use_symmetry_y": "Mirror brush across the Y axis", 
        "use_symmetry_z": "Mirror brush across the Z axis"
      }
    }, 
    "Palette": {
      "fields": {
        "colors": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "Panel": {
      "fields": {
        "bl_context": "The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)", 
        "bl_idname": "If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is \"OBJECT_PT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_PT_hello\"", 
        "bl_label": "The panel label, shows up in the panel header at the right of the triangle used to collapse the panel", 
        "bl_options": "Options for this panel type", 
        "bl_order": "Panels with lower numbers are default ordered before panels with higher numbers", 
        "bl_parent_id": "If this is set, the panel becomes a sub-panel", 
        "bl_region_type": "The region where the panel is going to be used in", 
        "bl_space_type": "The space where the panel is going to be used in", 
        "bl_ui_units_x": "When set, defines popup panel width", 
        "is_popover": "(read-only)", 
        "layout": "(read-only)    Defines the structure of the panel in the UI", 
        "text": "XXX todo", 
        "use_pin": "Show the panel on all tabs"
      }
    }, 
    "Particle": {
      "fields": {
        "hair_keys": "(read-only)", 
        "is_exist": "(read-only)", 
        "is_visible": "(read-only)", 
        "particle_keys": "(read-only)"
      }
    }, 
    "ParticleBrush": {
      "fields": {
        "count": "Particle count", 
        "curve": "(read-only)", 
        "size": "Radius of the brush in pixels", 
        "steps": "Brush steps", 
        "strength": "Brush strength", 
        "use_puff_volume": "Apply puff to unselected end-points (helps maintain hair volume when puffing root)"
      }
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "count": "The number of times this object is repeated with respect to other objects", 
        "name": "(read-only)    Particle dupliobject name"
      }
    }, 
    "ParticleEdit": {
      "fields": {
        "brush": "(read-only)", 
        "default_key_count": "How many keys to make new particles with", 
        "display_step": "How many steps to display the path with", 
        "emitter_distance": "Distance to keep particles away from the emitter", 
        "fade_frames": "How many frames to fade", 
        "is_editable": "(read-only)    A valid edit mode exists", 
        "is_hair": "(read-only)    Editing hair", 
        "object": "(read-only)    The edited object", 
        "select_mode": "Particle select and display mode", 
        "shape_object": "Outer shape to use for tools", 
        "show_particles": "Display actual particles", 
        "use_auto_velocity": "Calculate point velocities automatically", 
        "use_default_interpolate": "Interpolate new particles from the existing ones", 
        "use_emitter_deflect": "Keep paths from intersecting the emitter", 
        "use_fade_time": "Fade paths and keys further away from current frame", 
        "use_preserve_length": "Keep path lengths constant", 
        "use_preserve_root": "Keep root keys unmodified"
      }
    }, 
    "ParticleFluidSettings": {
      "fields": {
        "alpha_influence": "Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)", 
        "filepath": "Directory (and/or filename prefix) to store and load particles from", 
        "particle_influence": "Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), >1=stronger", 
        "show_tracer": "Show tracer particles", 
        "use_drops": "Show drop particles", 
        "use_floats": "Show floating foam particles"
      }, 
      "inherits": [
        "FluidSettings"
      ]
    }, 
    "ParticleHairKey": {
      "fields": {
        "co": "Location of the hair key in object space", 
        "co_local": "Location of the hair key in its local coordinate system, relative to the emitting face", 
        "time": "Relative time of key over hair length", 
        "weight": "Weight for cloth simulation"
      }
    }, 
    "ParticleInstanceModifier": {
      "fields": {
        "axis": "Pole axis for rotation", 
        "index_layer_name": "Custom data layer name for the index", 
        "object": "Object that has the particle system", 
        "particle_amount": "Amount of particles to use for instancing", 
        "particle_offset": "Relative offset of particles to use for instancing, to avoid overlap of multiple instances", 
        "position": "Position along path", 
        "random_position": "Randomize position along path", 
        "random_rotation": "Randomize rotation around path", 
        "rotation": "Rotation around path", 
        "show_alive": "Show instances when particles are alive", 
        "show_dead": "Show instances when particles are dead", 
        "show_unborn": "Show instances when particles are unborn", 
        "space": "Space to use for copying mesh data", 
        "use_children": "Create instances from child particles", 
        "use_normal": "Create instances from normal particles", 
        "use_path": "Create instances along particle paths", 
        "use_preserve_shape": "Don't stretch the object", 
        "use_size": "Use particle size to scale the instances", 
        "value_layer_name": "Custom data layer name for the randomized value"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ParticleKey": {
      "fields": {
        "angular_velocity": "Key angular velocity", 
        "location": "Key location", 
        "rotation": "Key rotation quaternion", 
        "time": "Time of key over the simulation", 
        "velocity": "Key velocity"
      }
    }, 
    "ParticleSettings": {
      "fields": {
        "active_instanceweight": "(read-only)", 
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "adaptive_angle": "How many degrees path has to curve to make another render segment", 
        "adaptive_pixel": "How many pixels path has to cover to make another render segment", 
        "angular_velocity_factor": "Angular velocity amount (in radians per second)", 
        "angular_velocity_mode": "What axis is used to change particle rotation with time", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "apply_effector_to_children": "Apply effectors to children", 
        "bending_random": "Random stiffness of hairs", 
        "boids": "(read-only)", 
        "branch_threshold": "Threshold of branching", 
        "brownian_factor": "Amount of random, erratic particle movement", 
        "child_length": "Length of child paths", 
        "child_length_threshold": "Amount of particles left untouched by child path length", 
        "child_nbr": "Number of children/parent", 
        "child_parting_factor": "Create parting in the children based on parent strands", 
        "child_parting_max": "Maximum root to tip angle (tip distance/root distance for long hair)", 
        "child_parting_min": "Minimum root to tip angle (tip distance/root distance for long hair)", 
        "child_radius": "Radius of children around parent", 
        "child_roundness": "Roundness of children around parent", 
        "child_size": "A multiplier for the child particle size", 
        "child_size_random": "Random variation to the size of the child particles", 
        "child_type": "Create child particles", 
        "clump_curve": "(read-only)    Curve defining clump tapering", 
        "clump_factor": "Amount of clumping", 
        "clump_noise_size": "Size of clump noise", 
        "clump_shape": "Shape of clumping", 
        "collision_collection": "Limit colliders to this collection", 
        "color_maximum": "Maximum length of the particle color vector", 
        "count": "Total number of particles", 
        "courant_target": "The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range", 
        "create_long_hair_children": "Calculate children that suit long hair well", 
        "damping": "Amount of damping", 
        "display_color": "Draw additional particle data as a color", 
        "display_method": "How particles are drawn in viewport", 
        "display_percentage": "Percentage of particles to display in 3D view", 
        "display_size": "Size of particles on viewport in BU", 
        "display_step": "How many steps paths are drawn with (power of 2)", 
        "distribution": "How to distribute particles on selected element", 
        "drag_factor": "Amount of air-drag", 
        "effect_hair": "Hair stiffness for effectors", 
        "effector_amount": "How many particles are effectors (0 is all particles)", 
        "effector_weights": "(read-only)", 
        "emit_from": "Where to emit particles from", 
        "factor_random": "Give the starting velocity a random variation", 
        "fluid": "(read-only)", 
        "force_field_1": "(read-only)", 
        "force_field_2": "(read-only)", 
        "frame_end": "Frame number to stop emitting particles", 
        "frame_start": "Frame number to start emitting particles", 
        "grid_random": "Add random offset to the grid locations", 
        "grid_resolution": "The resolution of the particle grid", 
        "hair_length": "Length of the hair", 
        "hair_step": "Number of hair segments", 
        "hexagonal_grid": "Create the grid in a hexagonal pattern", 
        "instance_collection": "Show Objects in this collection in place of particles", 
        "instance_object": "Show this Object in place of particles", 
        "instance_weights": "(read-only)    Weights for all of the objects in the dupli collection", 
        "integrator": "Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)", 
        "invert_grid": "Invert what is considered object and what is not", 
        "is_fluid": "(read-only)    Particles were created by a fluid simulation", 
        "jitter_factor": "Amount of jitter applied to the sampling", 
        "keyed_loops": "Number of times the keys are looped", 
        "kink": "Type of periodic offset on the path", 
        "kink_amplitude": "The amplitude of the offset", 
        "kink_amplitude_clump": "How much clump affects kink amplitude", 
        "kink_amplitude_random": "Random variation of the amplitude", 
        "kink_axis": "Which axis to use for offset", 
        "kink_axis_random": "Random variation of the orientation", 
        "kink_extra_steps": "Extra steps for resolution of special kink features", 
        "kink_flat": "How flat the hairs are", 
        "kink_frequency": "The frequency of the offset (1/total length)", 
        "kink_shape": "Adjust the offset to the beginning/end", 
        "length_random": "Give path length a random variation", 
        "lifetime": "Life span of the particles", 
        "lifetime_random": "Give the particle life a random variation", 
        "line_length_head": "Length of the line's head", 
        "line_length_tail": "Length of the line's tail", 
        "lock_boids_to_surface": "Constrain boids to a surface", 
        "mass": "Mass of the particles", 
        "material": "Index of material slot used for rendering particles", 
        "material_slot": "Material slot used for rendering particles", 
        "normal_factor": "Let the surface normal give the particle a starting velocity", 
        "object_align_factor": "Let the emitter object orientation give the particle a starting velocity", 
        "object_factor": "Let the object give the particle a starting velocity", 
        "particle_factor": "Let the target particle give the particle a starting velocity", 
        "particle_size": "The size of the particles", 
        "path_end": "End time of drawn path", 
        "path_start": "Starting time of drawn path", 
        "phase_factor": "Rotation around the chosen orientation axis", 
        "phase_factor_random": "Randomize rotation around the chosen orientation axis", 
        "physics_type": "Particle physics type", 
        "radius_scale": "Multiplier of radius properties", 
        "react_event": "The event of target particles to react on", 
        "reactor_factor": "Let the vector away from the target particle's location give the particle a starting velocity", 
        "render_step": "How many steps paths are rendered with (power of 2)", 
        "render_type": "How particles are rendered", 
        "rendered_child_count": "Number of children/parent for rendering", 
        "root_radius": "Strand width at the root", 
        "rotation_factor_random": "Randomize particle orientation", 
        "rotation_mode": "Particle orientation axis (does not affect Explode modifier's results)", 
        "roughness_1": "Amount of location dependent rough", 
        "roughness_1_size": "Size of location dependent rough", 
        "roughness_2": "Amount of random rough", 
        "roughness_2_size": "Size of random rough", 
        "roughness_2_threshold": "Amount of particles left untouched by random rough", 
        "roughness_curve": "(read-only)    Curve defining roughness", 
        "roughness_end_shape": "Shape of end point rough", 
        "roughness_endpoint": "Amount of end point rough", 
        "shape": "Strand shape parameter", 
        "show_guide_hairs": "Show guide hairs", 
        "show_hair_grid": "Show hair simulation grid", 
        "show_health": "Draw boid health", 
        "show_number": "Show particle number", 
        "show_size": "Show particle size", 
        "show_unborn": "Show particles before they are emitted", 
        "show_velocity": "Show particle velocity", 
        "size_random": "Give the particle size a random variation", 
        "subframes": "Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))", 
        "tangent_factor": "Let the surface tangent give the particle a starting velocity", 
        "tangent_phase": "Rotate the surface tangent", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "time_tweak": "A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)", 
        "timestep": "The simulation timestep per frame (seconds per frame)", 
        "tip_radius": "Strand width at the tip", 
        "trail_count": "Number of trail particles", 
        "twist": "Number of turns around parent along the strand", 
        "twist_curve": "(read-only)    Curve defining twist", 
        "type": "Particle Type", 
        "use_absolute_path_time": "Path timing is in absolute frames", 
        "use_adaptive_subframes": "Automatically set the number of subframes", 
        "use_advanced_hair": "Use full physics calculations for growing hair", 
        "use_close_tip": "Set tip radius to zero", 
        "use_clump_curve": "Use a curve to define clump tapering", 
        "use_clump_noise": "Create random clumps around the parent", 
        "use_collection_count": "Use object multiple times in the same collection", 
        "use_collection_pick_random": "Pick objects from collection randomly", 
        "use_dead": "Show particles after they have died", 
        "use_die_on_collision": "Particles die when they collide with a deflector object", 
        "use_dynamic_rotation": "Particle rotations are affected by collisions and effectors", 
        "use_emit_random": "Emit in random order of elements", 
        "use_even_distribution": "Use even distribution from faces based on face areas or edge lengths", 
        "use_global_instance": "Use object's global coordinates for duplication", 
        "use_hair_bspline": "Interpolate hair using B-Splines", 
        "use_modifier_stack": "Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)", 
        "use_multiply_size_mass": "Multiply mass by particle size", 
        "use_parent_particles": "Render parent particles", 
        "use_react_multiple": "React multiple times", 
        "use_react_start_end": "Give birth to unreacted particles eventually", 
        "use_regrow_hair": "Regrow hair for each frame", 
        "use_render_adaptive": "Draw steps of the particle path", 
        "use_rotation_instance": "Use object's rotation for duplication (global x-axis is aligned particle rotation axis)", 
        "use_rotations": "Calculate particle rotations", 
        "use_roughness_curve": "Use a curve to define roughness", 
        "use_scale_instance": "Use object's scale for duplication", 
        "use_self_effect": "Particle effectors affect themselves", 
        "use_size_deflect": "Use particle's size in deflection", 
        "use_strand_primitive": "Use the strand primitive for rendering", 
        "use_twist_curve": "Use a curve to define twist", 
        "use_velocity_length": "Multiply line length by particle speed", 
        "use_whole_collection": "Use whole collection at once", 
        "userjit": "Emission locations / face (0 = automatic)", 
        "virtual_parents": "Relative amount of virtual parents"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ParticleSettingsTextureSlot": {
      "fields": {
        "clump_factor": "Amount texture affects child clump", 
        "damp_factor": "Amount texture affects particle damping", 
        "density_factor": "Amount texture affects particle density", 
        "field_factor": "Amount texture affects particle force fields", 
        "gravity_factor": "Amount texture affects particle gravity", 
        "kink_amp_factor": "Amount texture affects child kink amplitude", 
        "kink_freq_factor": "Amount texture affects child kink frequency", 
        "length_factor": "Amount texture affects child hair length", 
        "life_factor": "Amount texture affects particle life time", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "rough_factor": "Amount texture affects child roughness", 
        "size_factor": "Amount texture affects physical particle size", 
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "time_factor": "Amount texture affects particle emission time", 
        "twist_factor": "Amount texture affects child twist", 
        "use_map_clump": "Affect the child clumping", 
        "use_map_damp": "Affect the particle velocity damping", 
        "use_map_density": "Affect the density of the particles", 
        "use_map_field": "Affect the particle force fields", 
        "use_map_gravity": "Affect the particle gravity", 
        "use_map_kink_amp": "Affect the child kink amplitude", 
        "use_map_kink_freq": "Affect the child kink frequency", 
        "use_map_length": "Affect the child hair length", 
        "use_map_life": "Affect the life time of the particles", 
        "use_map_rough": "Affect the child rough", 
        "use_map_size": "Affect the particle size", 
        "use_map_time": "Affect the emission time of the particles", 
        "use_map_twist": "Affect the child twist", 
        "use_map_velocity": "Affect the particle initial velocity", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "velocity_factor": "Amount texture affects particle initial velocity"
      }, 
      "inherits": [
        "TextureSlot"
      ]
    }, 
    "ParticleSystem": {
      "fields": {
        "active_particle_target": "(read-only)", 
        "child_particles": "(read-only)    Child particles generated by the particle system", 
        "child_seed": "Offset in the random number table for child particles, to get a different randomized result", 
        "cloth": "(read-only)    Cloth dynamics for hair", 
        "dt_frac": "(read-only)    The current simulation time step size, as a fraction of a frame", 
        "has_multiple_caches": "(read-only)    Particle system has multiple point caches", 
        "invert_vertex_group_clump": "Negate the effect of the clump vertex group", 
        "invert_vertex_group_density": "Negate the effect of the density vertex group", 
        "invert_vertex_group_field": "Negate the effect of the field vertex group", 
        "invert_vertex_group_kink": "Negate the effect of the kink vertex group", 
        "invert_vertex_group_length": "Negate the effect of the length vertex group", 
        "invert_vertex_group_rotation": "Negate the effect of the rotation vertex group", 
        "invert_vertex_group_roughness_1": "Negate the effect of the roughness 1 vertex group", 
        "invert_vertex_group_roughness_2": "Negate the effect of the roughness 2 vertex group", 
        "invert_vertex_group_roughness_end": "Negate the effect of the roughness end vertex group", 
        "invert_vertex_group_size": "Negate the effect of the size vertex group", 
        "invert_vertex_group_tangent": "Negate the effect of the tangent vertex group", 
        "invert_vertex_group_twist": "Negate the effect of the twist vertex group", 
        "invert_vertex_group_velocity": "Negate the effect of the velocity vertex group", 
        "is_editable": "(read-only)    Particle system can be edited in particle mode", 
        "is_edited": "(read-only)    Particle system has been edited in particle mode", 
        "is_global_hair": "(read-only)    Hair keys are in global coordinate space", 
        "name": "Particle system name", 
        "parent": "Use this object's coordinate system instead of global coordinate system", 
        "particles": "(read-only)    Particles generated by the particle system", 
        "point_cache": "(read-only)", 
        "reactor_target_object": "For reactor systems, the object that has the target particle system (empty if same object)", 
        "reactor_target_particle_system": "For reactor systems, index of particle system on the target object", 
        "seed": "Offset in the random number table, to get a different randomized result", 
        "settings": "Particle system settings", 
        "targets": "(read-only)    Target particle systems", 
        "use_hair_dynamics": "Enable hair dynamics using cloth simulation", 
        "use_keyed_timing": "Use key times", 
        "vertex_group_clump": "Vertex group to control clump", 
        "vertex_group_density": "Vertex group to control density", 
        "vertex_group_field": "Vertex group to control field", 
        "vertex_group_kink": "Vertex group to control kink", 
        "vertex_group_length": "Vertex group to control length", 
        "vertex_group_rotation": "Vertex group to control rotation", 
        "vertex_group_roughness_1": "Vertex group to control roughness 1", 
        "vertex_group_roughness_2": "Vertex group to control roughness 2", 
        "vertex_group_roughness_end": "Vertex group to control roughness end", 
        "vertex_group_size": "Vertex group to control size", 
        "vertex_group_tangent": "Vertex group to control tangent", 
        "vertex_group_twist": "Vertex group to control twist", 
        "vertex_group_velocity": "Vertex group to control velocity"
      }
    }, 
    "ParticleSystemModifier": {
      "fields": {
        "particle_system": "(read-only)    Particle System that this modifier controls"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "ParticleSystems": {
      "fields": {
        "active": "(read-only)    Active particle system being displayed", 
        "active_index": "Index of active particle system slot"
      }
    }, 
    "ParticleTarget": {
      "fields": {
        "is_valid": "Keyed particles target is valid", 
        "name": "(read-only)    Particle target name", 
        "object": "The object that has the target particle system (empty if same object)", 
        "system": "The index of particle system on the target object"
      }
    }, 
    "PathCompare": {
      "fields": {
        "use_glob": "Enable wildcard globbing"
      }
    }, 
    "PivotConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "offset": "Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point", 
        "rotation_range": "Rotation range on which pivoting should occur", 
        "target": "Target Object, defining the position of the pivot when defined", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_relative_location": "Offset will be an absolute point in space instead of relative to the target"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "PointCache": {
      "fields": {
        "compression": "Compression method to be used", 
        "filepath": "Cache file path", 
        "frame_end": "Frame on which the simulation stops", 
        "frame_start": "Frame on which the simulation starts", 
        "frame_step": "Number of frames between cached frames", 
        "index": "Index number of cache files", 
        "info": "(read-only)    Info on current cache status", 
        "is_baked": "(read-only)", 
        "is_baking": "(read-only)", 
        "is_frame_skip": "(read-only)", 
        "is_outdated": "(read-only)", 
        "name": "Cache name", 
        "point_caches": "(read-only)", 
        "use_disk_cache": "Save cache files to disk (.blend file must be saved first)", 
        "use_external": "Read cache from an external location", 
        "use_library_path": "Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)"
      }
    }, 
    "PointCacheItem": {
      "fields": {
        "compression": "Compression method to be used", 
        "filepath": "Cache file path", 
        "frame_end": "Frame on which the simulation stops", 
        "frame_start": "Frame on which the simulation starts", 
        "frame_step": "Number of frames between cached frames", 
        "index": "Index number of cache files", 
        "info": "(read-only)    Info on current cache status", 
        "is_baked": "(read-only)", 
        "is_baking": "(read-only)", 
        "is_frame_skip": "(read-only)", 
        "is_outdated": "(read-only)", 
        "name": "Cache name", 
        "use_disk_cache": "Save cache files to disk (.blend file must be saved first)", 
        "use_external": "Read cache from an external location", 
        "use_library_path": "Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)"
      }
    }, 
    "PointerProperty": {
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "PointLight": {
      "fields": {
        "constant_coefficient": "Constant distance attenuation coefficient", 
        "contact_shadow_bias": "Bias to avoid self shadowing", 
        "contact_shadow_distance": "World space distance in which to search for screen space occluder", 
        "contact_shadow_thickness": "Pixel thickness used to detect occlusion", 
        "energy": "Amount of light emitted", 
        "falloff_curve": "(read-only)    Custom light falloff curve", 
        "falloff_type": "Intensity Decay with distance", 
        "linear_attenuation": "Linear distance attenuation", 
        "linear_coefficient": "Linear distance attenuation coefficient", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "quadratic_coefficient": "Quadratic distance attenuation coefficient", 
        "shadow_buffer_bias": "Bias for reducing self shadowing", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_color": "Color of shadows cast by the light", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "use_contact_shadow": "Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps"
      }, 
      "inherits": [
        "ID", 
        "Light"
      ]
    }, 
    "Pose": {
      "fields": {
        "animation_visualization": "(read-only)    Animation data for this data-block", 
        "bone_groups": "(read-only)    Groups of the bones", 
        "bones": "(read-only)    Individual pose bones for the armature", 
        "ik_param": "(read-only)    Parameters for IK solver", 
        "ik_solver": "Selection of IK solver for IK chain", 
        "use_auto_ik": "Add temporary IK constraints while grabbing bones in Pose Mode", 
        "use_mirror_relative": "Apply relative transformations in X-mirror mode", 
        "use_mirror_x": "Apply changes to matching bone on opposite side of X-Axis"
      }
    }, 
    "PoseBone": {
      "fields": {
        "bbone_curveinx": "X-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveiny": "Y-axis handle offset for start of the B-Bone's curve, adjusts curvature", 
        "bbone_curveoutx": "X-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_curveouty": "Y-axis handle offset for end of the B-Bone's curve, adjusts curvature", 
        "bbone_custom_handle_end": "(read-only)    Bone that serves as the end handle for the B-Bone curve", 
        "bbone_custom_handle_start": "(read-only)    Bone that serves as the start handle for the B-Bone curve", 
        "bbone_easein": "Length of first Bezier Handle (for B-Bones only)", 
        "bbone_easeout": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_rollin": "Roll offset for the start of the B-Bone, adjusts twist", 
        "bbone_rollout": "Roll offset for the end of the B-Bone, adjusts twist", 
        "bbone_scaleinx": "X-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleiny": "Y-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleoutx": "X-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bbone_scaleouty": "Y-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)", 
        "bone": "(read-only)    Bone associated with this PoseBone", 
        "bone_group": "Bone Group this pose channel belongs to", 
        "bone_group_index": "Bone Group this pose channel belongs to (0=no group)", 
        "child": "(read-only)    Child of this pose bone", 
        "constraints": "(read-only)    Constraints that act on this PoseChannel", 
        "custom_shape": "Object that defines custom draw type for this bone", 
        "custom_shape_scale": "Adjust the size of the custom shape", 
        "custom_shape_transform": "Bone that defines the display transform of this custom shape", 
        "head": "(read-only)    Location of head of the channel's bone", 
        "ik_linear_weight": "Weight of scale constraint for IK", 
        "ik_max_x": "Maximum angles for IK Limit", 
        "ik_max_y": "Maximum angles for IK Limit", 
        "ik_max_z": "Maximum angles for IK Limit", 
        "ik_min_x": "Minimum angles for IK Limit", 
        "ik_min_y": "Minimum angles for IK Limit", 
        "ik_min_z": "Minimum angles for IK Limit", 
        "ik_rotation_weight": "Weight of rotation constraint for IK", 
        "ik_stiffness_x": "IK stiffness around the X axis", 
        "ik_stiffness_y": "IK stiffness around the Y axis", 
        "ik_stiffness_z": "IK stiffness around the Z axis", 
        "ik_stretch": "Allow scaling of the bone for IK", 
        "is_in_ik_chain": "(read-only)    Is part of an IK chain", 
        "length": "(read-only)    Length of the bone", 
        "lock_ik_x": "Disallow movement around the X axis", 
        "lock_ik_y": "Disallow movement around the Y axis", 
        "lock_ik_z": "Disallow movement around the Z axis", 
        "lock_location": "Lock editing of location in the interface", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "lock_scale": "Lock editing of scale in the interface", 
        "matrix": "Final 4x4 matrix after constraints and drivers are applied (object space)", 
        "matrix_basis": "Alternative access to location/scale/rotation relative to the parent and own rest bone", 
        "matrix_channel": "(read-only)    4x4 matrix, before constraints", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "parent": "(read-only)    Parent of this pose bone", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "rotation_euler": "Rotation in Eulers", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "tail": "(read-only)    Location of tail of the channel's bone", 
        "use_custom_shape_bone_size": "Scale the custom object by the bone length", 
        "use_ik_limit_x": "Limit movement around the X axis", 
        "use_ik_limit_y": "Limit movement around the Y axis", 
        "use_ik_limit_z": "Limit movement around the Z axis", 
        "use_ik_linear_control": "Apply channel size as IK constraint if stretching is enabled", 
        "use_ik_rotation_control": "Apply channel rotation as IK constraint"
      }
    }, 
    "PoseBoneConstraints": {
      "fields": {
        "active": "Active PoseChannel constraint"
      }
    }, 
    "Preferences": {
      "fields": {
        "active_section": "Active section of the preferences shown in the user interface", 
        "addons": "(read-only)", 
        "autoexec_paths": "(read-only)", 
        "edit": "(read-only)    Settings for interacting with Blender data", 
        "filepaths": "(read-only)    Default paths for external files", 
        "inputs": "(read-only)    Settings for input devices", 
        "is_dirty": "Preferences have changed", 
        "keymap": "(read-only)    Shortcut setup for keyboards and other input devices", 
        "studio_lights": "(read-only)", 
        "system": "(read-only)    Graphics driver and operating system settings", 
        "themes": "(read-only)", 
        "ui_styles": "(read-only)", 
        "use_preferences_save": "Save preferences on exit when modified (unless factory settings have been loaded)", 
        "version": "(read-only)    Version of Blender the userpref.blend was saved with", 
        "view": "(read-only)    Preferences related to viewing data"
      }
    }, 
    "PreferencesEdit": {
      "fields": {
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "fcurve_new_auto_smoothing": "Auto Handle Smoothing mode used for newly added F-Curves", 
        "fcurve_unselected_alpha": "Amount that unselected F-Curves stand out from the background (Graph Editor)", 
        "grease_pencil_default_color": "Color of new annotation layers", 
        "grease_pencil_eraser_radius": "Radius of eraser 'brush'", 
        "grease_pencil_euclidean_distance": "Distance moved by mouse when drawing stroke to include", 
        "grease_pencil_manhattan_distance": "Pixels moved by mouse per axis when drawing stroke", 
        "keyframe_new_handle_type": "Handle type for handles of new keyframes", 
        "keyframe_new_interpolation_type": "Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)", 
        "material_link": "Toggle whether the material is linked to object data or the object block", 
        "node_margin": "Minimum distance between nodes for Auto-offsetting nodes", 
        "object_align": "When adding objects from a 3D View menu, either align them with that view or with the world", 
        "sculpt_paint_overlay_color": "Color of texture overlay", 
        "undo_memory_limit": "Maximum memory usage in megabytes (0 means unlimited)", 
        "undo_steps": "Number of undo steps available (smaller values conserve memory)", 
        "use_auto_keying": "Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "use_auto_keying_warning": "Show warning indicators when transforming objects and bones if auto keying is enabled", 
        "use_cursor_lock_adjust": "Place the cursor without 'jumping' to the new location (when lock-to-cursor is used)", 
        "use_duplicate_action": "Causes actions to be duplicated with the object", 
        "use_duplicate_armature": "Causes armature data to be duplicated with the object", 
        "use_duplicate_curve": "Causes curve data to be duplicated with the object", 
        "use_duplicate_fcurve": "Causes F-curve data to be duplicated with the object", 
        "use_duplicate_grease_pencil": "Causes grease pencil data to be duplicated with the object", 
        "use_duplicate_light": "Causes light data to be duplicated with the object", 
        "use_duplicate_lightprobe": "Causes light probe data to be duplicated with the object", 
        "use_duplicate_material": "Causes material data to be duplicated with the object", 
        "use_duplicate_mesh": "Causes mesh data to be duplicated with the object", 
        "use_duplicate_metaball": "Causes metaball data to be duplicated with the object", 
        "use_duplicate_particle": "Causes particle systems to be duplicated with the object", 
        "use_duplicate_surface": "Causes surface data to be duplicated with the object", 
        "use_duplicate_text": "Causes text data to be duplicated with the object", 
        "use_duplicate_texture": "Causes texture data to be duplicated with the object", 
        "use_enter_edit_mode": "Enter Edit Mode automatically after adding a new object", 
        "use_global_undo": "Global undo works by keeping a full copy of the file itself in memory, so takes extra memory", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis", 
        "use_keyframe_insert_available": "Automatic keyframe insertion in available F-Curves", 
        "use_keyframe_insert_needed": "Keyframe insertion only when keyframe needed", 
        "use_mouse_depth_cursor": "Use the surface depth for cursor placement", 
        "use_negative_frames": "Current frame number can be manually set to a negative value", 
        "use_visual_keying": "Use Visual keying automatically for constrained objects"
      }
    }, 
    "PreferencesFilePaths": {
      "fields": {
        "animation_player": "Path to a custom animation/frame sequence player", 
        "animation_player_preset": "Preset configs for external animation players", 
        "auto_save_time": "The time (in minutes) to wait between automatic temporary saves", 
        "font_directory": "The default directory to search for loading fonts", 
        "hide_recent_locations": "Hide recent locations in the file selector", 
        "hide_system_bookmarks": "Hide system bookmarks in the file selector", 
        "i18n_branches_directory": "The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI", 
        "image_editor": "Path to an image editor", 
        "recent_files": "Maximum number of recently opened files to remember", 
        "render_cache_directory": "Where to cache raw render results", 
        "render_output_directory": "The default directory for rendering output, for new scenes", 
        "save_version": "The number of old versions to maintain in the current directory, when manually saving", 
        "script_directory": "Alternate script path, matching the default layout with subdirs: startup, add-ons & modules (requires restart)", 
        "show_hidden_files_datablocks": "Hide files and data-blocks if their name start with a dot (.*)", 
        "sound_directory": "The default directory to search for sounds", 
        "temporary_directory": "The directory for storing temporary save files", 
        "texture_directory": "The default directory to search for textures", 
        "use_auto_save_temporary_files": "Automatic saving of temporary files in temp directory, uses process ID (sculpt & edit-mode data won't be saved!)", 
        "use_file_compression": "Enable file compression when saving .blend files", 
        "use_filter_files": "Display only files with extensions in the image select window", 
        "use_load_ui": "Load user interface setup when loading .blend files", 
        "use_relative_paths": "Default relative path option for the file selector", 
        "use_save_preview_images": "Enables automatic saving of preview images in the .blend file", 
        "use_scripts_auto_execute": "Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)", 
        "use_tabs_as_spaces": "Automatically convert all new tabs into spaces for new and loaded text files"
      }
    }, 
    "PreferencesInput": {
      "fields": {
        "drag_threshold": "Number of pixels to drag before a drag event is triggered for keyboard and other non mouse/tablet input (otherwise click events are detected)", 
        "drag_threshold_mouse": "Number of pixels to drag before a tweak/drag event is triggered for mouse/track-pad input (otherwise click events are detected)", 
        "drag_threshold_tablet": "Number of pixels to drag before a tweak/drag event is triggered for tablet input (otherwise click events are detected)", 
        "invert_mouse_zoom": "Invert the axis of mouse movement for zooming", 
        "invert_zoom_wheel": "Swap the Mouse Wheel zoom direction", 
        "mouse_double_click_time": "Time/delay (in ms) for a double click", 
        "mouse_emulate_3_button_modifier": "Hold this modifier to emulate the middle mouse button", 
        "move_threshold": "Number of pixels to before the cursor is considered to have moved (used for cycling selected items on successive clicks)", 
        "navigation_mode": "Which method to use for viewport navigation", 
        "ndof_deadzone": "Threshold of initial movement needed from the device's rest position", 
        "ndof_fly_helicopter": "Device up/down directly controls your Z position", 
        "ndof_lock_horizon": "Keep horizon level while flying with 3D Mouse", 
        "ndof_orbit_sensitivity": "Overall sensitivity of the 3D Mouse for orbiting", 
        "ndof_pan_yz_swap_axis": "Pan using up/down on the device (otherwise forward/backward)", 
        "ndof_sensitivity": "Overall sensitivity of the 3D Mouse for panning", 
        "ndof_show_guide": "Display the center and axis during rotation", 
        "ndof_view_navigate_method": "Navigation style in the viewport", 
        "ndof_view_rotate_method": "Rotation style in the viewport", 
        "ndof_zoom_invert": "Zoom using opposite direction", 
        "pressure_softness": "Adjusts softness of the low pressure response onset using a gamma curve", 
        "pressure_threshold_max": "Raw input pressure value that is interpreted as 100% by Blender", 
        "tablet_api": "Select the tablet API to use for pressure sensitivity", 
        "use_auto_perspective": "Automatically switch between orthographic and perspective when changing from top/front/side views", 
        "use_camera_lock_parent": "When the camera is locked to the view and in fly mode, transform the parent rather than the camera", 
        "use_drag_immediately": "Moving things with a mouse drag confirms when releasing the button", 
        "use_emulate_numpad": "Main 1 to 0 keys act as the numpad ones (useful for laptops)", 
        "use_mouse_continuous": "Allow moving the mouse outside the view on some manipulations (transform, ui control drag)", 
        "use_mouse_depth_navigate": "Use the depth under the mouse to improve view pan/rotate/zoom functionality", 
        "use_mouse_emulate_3_button": "Emulate Middle Mouse with Alt+Left Mouse", 
        "use_ndof": "(read-only)", 
        "use_numeric_input_advanced": "When entering numbers while transforming, default to advanced mode for full math expression evaluation", 
        "use_rotate_around_active": "Use selection as the pivot point", 
        "use_trackpad_natural": "If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI", 
        "use_zoom_to_mouse": "Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center", 
        "view_rotate_method": "Orbit method in the viewport", 
        "view_rotate_sensitivity_trackball": "Scale trackball orbit sensitivity", 
        "view_rotate_sensitivity_turntable": "Rotation amount per-pixel to control how fast the viewport orbits", 
        "view_zoom_axis": "Axis of mouse movement to zoom in or out on", 
        "view_zoom_method": "Which style to use for viewport scaling", 
        "walk_navigation": "(read-only)    Settings for walk navigation mode", 
        "wheel_scroll_lines": "Number of lines scrolled at a time with the mouse wheel"
      }
    }, 
    "PreferencesKeymap": {
      "fields": {
        "active_keyconfig": "The name of the active key configuration"
      }
    }, 
    "PreferencesSystem": {
      "fields": {
        "anisotropic_filter": "Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)", 
        "audio_channels": "Audio channel count", 
        "audio_device": "Audio output device", 
        "audio_mixing_buffer": "Number of samples used by the audio mixing buffer", 
        "audio_sample_format": "Audio sample format", 
        "audio_sample_rate": "Audio sample rate", 
        "dpi": "(read-only)", 
        "gl_clip_alpha": "Clip alpha below this threshold in the 3D textured view", 
        "gl_texture_limit": "Limit the texture size to save graphics memory", 
        "gpencil_multi_sample": "Enable Grease Pencil OpenGL multi-sampling, only for systems that support it", 
        "image_draw_method": "Method used for displaying images on the screen", 
        "legacy_compute_device_type": "(read-only)    For backwards compatibility only", 
        "light_ambient": "Color of the ambient light that uniformly lit the scene", 
        "memory_cache_limit": "Memory cache limit (in megabytes)", 
        "multi_sample": "Enable OpenGL multi-sampling, only for systems that support it", 
        "opensubdiv_compute_type": "Type of computer back-end used with OpenSubdiv", 
        "pixel_size": "(read-only)", 
        "prefetch_frames": "Number of frames to render ahead during playback (sequencer only)", 
        "scrollback": "Maximum number of lines to store for the console buffer", 
        "solid_lights": "(read-only)    Lights user to display objects in solid draw mode", 
        "texture_collection_rate": "Number of seconds between each run of the GL texture garbage collector", 
        "texture_time_out": "Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)", 
        "ui_line_width": "(read-only)    Suggested line thickness and point size in pixels, for add-ons drawing custom user interface elements, based on operating system settings and Blender UI scale", 
        "ui_scale": "(read-only)    Size multiplier to use when drawing custom user interface elements, so that they are scaled correctly on screens with different DPI. This value is based on operating system DPI settings and Blender display scale", 
        "use_edit_mode_smooth_wire": "Enable Edit-Mode edge smoothing, reducing aliasing, requires restart", 
        "use_region_overlap": "Draw tool/property regions over the main region", 
        "use_select_pick_depth": "Use the depth buffer for picking 3D View selection (without this the front most object may not be selected first)", 
        "use_studio_light_edit": "View the result of the studio light editor in the viewport", 
        "vbo_collection_rate": "Number of seconds between each run of the GL Vertex buffer object garbage collector", 
        "vbo_time_out": "Time since last access of a GL Vertex buffer object in seconds after which it is freed (set to 0 to keep vbo allocated)", 
        "viewport_aa": "Method of anti-aliasing in 3d viewport"
      }
    }, 
    "PreferencesView": {
      "fields": {
        "color_picker_type": "Different styles of displaying the color picker widget", 
        "factor_display_type": "How factor values are displayed", 
        "filebrowser_display_type": "Default location where the File Editor will be displayed in", 
        "font_path_ui": "Path to interface font", 
        "font_path_ui_mono": "Path to interface mono-space Font", 
        "gizmo_size": "Diameter of the gizmo", 
        "header_align": "Default header position for new space-types", 
        "language": "Language used for translation", 
        "lookdev_sphere_size": "Maximum diameter of the look development sphere size", 
        "mini_axis_brightness": "Brightness of the icon", 
        "mini_axis_size": "The axes icon's size", 
        "mini_axis_type": "Show a small rotating 3D axes in the top right corner of the 3D View", 
        "open_sublevel_delay": "Time delay in 1/10 seconds before automatically opening sub level menus", 
        "open_toplevel_delay": "Time delay in 1/10 seconds before automatically opening top level menus", 
        "pie_animation_timeout": "Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)", 
        "pie_initial_timeout": "Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)", 
        "pie_menu_confirm": "Distance threshold after which selection is made (zero to disable)", 
        "pie_menu_radius": "Pie menu size in pixels", 
        "pie_menu_threshold": "Distance from center needed before a selection can be made", 
        "pie_tap_timeout": "Pie menu button held longer than this will dismiss menu on release.(in 1/100ths of sec)", 
        "render_display_type": "Default location where rendered images will be displayed in", 
        "rotation_angle": "Rotation step for numerical pad keys (2 4 6 8)", 
        "show_addons_enabled_only": "Only show enabled add-ons. Un-check to see all installed add-ons", 
        "show_column_layout": "Use a column layout for toolbox", 
        "show_developer_ui": "Show options for developers (edit source in context menu, geometry indices)", 
        "show_gizmo": "Use transform gizmos by default", 
        "show_large_cursors": "Use large mouse cursors when available", 
        "show_layout_ui": "Split and join editors by dragging from corners", 
        "show_navigate_ui": "Show navigation controls in 2D & 3D views which do not have scroll bars", 
        "show_object_info": "Display objects name and frame number in 3D view", 
        "show_playback_fps": "Show the frames per second screen refresh rate, while animation is played back", 
        "show_splash": "Display splash screen on startup", 
        "show_tooltips": "Display tooltips (when off hold Alt to force display)", 
        "show_tooltips_python": "Show Python references in tooltips", 
        "show_view_name": "Show the name of the view's direction in each 3D View", 
        "smooth_view": "Time to animate the view in milliseconds, zero to disable", 
        "text_hinting": "Method for making user interface text render sharp", 
        "timecode_style": "Format of Time Codes displayed when not displaying timing in terms of frames", 
        "ui_line_width": "Changes the thickness of widget outlines, lines and points in the interface, for high DPI displays", 
        "ui_scale": "Changes the size of the fonts and widgets in the interface", 
        "use_directional_menus": "Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction", 
        "use_international_fonts": "Enable UI translation and use international fonts", 
        "use_mouse_over_open": "Open menu buttons and pulldowns automatically when the mouse is hovering", 
        "use_save_prompt": "Ask for confirmation when quitting with unsaved changes", 
        "use_text_antialiasing": "Draw user interface text anti-aliased", 
        "use_translate_interface": "Translate all labels in menus, buttons and panels (note that this might make it hard to follow tutorials or the manual)", 
        "use_translate_new_dataname": "Translate the names of new data-blocks (objects, materials...)", 
        "use_translate_tooltips": "Translate the descriptions when hovering UI elements (recommended)", 
        "use_weight_color_range": "Enable color range used for weight visualization in weight painting mode", 
        "view2d_grid_spacing_min": "Minimum number of pixels between each gridline in 2D Viewports", 
        "view_frame_keyframes": "Keyframes around cursor that we zoom around", 
        "view_frame_seconds": "Seconds around cursor that we zoom around", 
        "view_frame_type": "How zooming to frame focuses around current frame", 
        "weight_color_range": "(read-only)    Color range used for weight visualization in weight painting mode"
      }
    }, 
    "Property": {
      "fields": {
        "description": "(read-only)    Description of the property for tooltips", 
        "icon": "(read-only)    Icon of the item", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "is_animatable": "(read-only)    Property is animatable through RNA", 
        "is_argument_optional": "(read-only)    True when the property is optional in a Python function implementing an RNA function", 
        "is_enum_flag": "(read-only)    True when multiple enums", 
        "is_hidden": "(read-only)    True when the property is hidden", 
        "is_library_editable": "(read-only)    Property is editable from linked instances (changes not saved)", 
        "is_never_none": "(read-only)    True when this value can't be set to None", 
        "is_output": "(read-only)    True when this property is an output value from an RNA function", 
        "is_overridable": "(read-only)    Property is overridable through RNA", 
        "is_readonly": "(read-only)    Property is editable through RNA", 
        "is_registered": "(read-only)    Property is registered as part of type registration", 
        "is_registered_optional": "(read-only)    Property is optionally registered as part of type registration", 
        "is_required": "(read-only)    False when this property is an optional argument in an RNA function", 
        "is_runtime": "(read-only)    Property has been dynamically created at runtime", 
        "is_skip_save": "(read-only)    True when the property is not saved in presets", 
        "name": "(read-only)    Human readable name", 
        "srna": "(read-only)    Struct definition used for properties assigned to this item", 
        "subtype": "(read-only)    Semantic interpretation of the property", 
        "tags": "(read-only)    Subset of tags (defined in parent struct) that are set for this property", 
        "translation_context": "(read-only)    Translation context of the property's name", 
        "type": "(read-only)    Data type of the property", 
        "unit": "(read-only)    Type of units for this property"
      }
    }, 
    "PropertyGroup": {
      "fields": {
        "name": "Unique name used in the code and scripting"
      }
    }, 
    "PropertyGroupItem": {
      "fields": {
        "collection": "(read-only)", 
        "group": "(read-only)", 
        "id": "(read-only)", 
        "idp_array": "(read-only)"
      }
    }, 
    "PythonConstraint": {
      "fields": {
        "has_script_error": "(read-only)    The linked Python script has thrown an error", 
        "target_count": "Usually only 1-3 are needed", 
        "targets": "(read-only)    Target Objects", 
        "text": "The text object that contains the Python script", 
        "use_targets": "Use the targets indicated in the constraint panel"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "Region": {
      "fields": {
        "alignment": "(read-only)    Alignment of the region within the area", 
        "height": "(read-only)    Region height", 
        "type": "(read-only)    Type of this region", 
        "view2d": "(read-only)    2D view of the region", 
        "width": "(read-only)    Region width", 
        "x": "(read-only)    The window relative vertical location of the region", 
        "y": "(read-only)    The window relative horizontal location of the region"
      }
    }, 
    "RegionView3D": {
      "fields": {
        "is_orthographic_side_view": "Is current view an orthographic side view", 
        "lock_rotation": "Lock view rotation in side views", 
        "perspective_matrix": "(read-only)    Current perspective matrix (``window_matrix * view_matrix``)", 
        "show_sync_view": "Sync view position between side views", 
        "use_box_clip": "Clip objects based on what's visible in other side views", 
        "view_camera_offset": "View shift in camera view", 
        "view_camera_zoom": "Zoom factor in camera view", 
        "view_distance": "Distance to the view location", 
        "view_location": "View pivot location", 
        "view_matrix": "Current view matrix", 
        "view_perspective": "View Perspective", 
        "view_rotation": "Rotation in quaternions (keep normalized)", 
        "window_matrix": "(read-only)    Current window matrix"
      }
    }, 
    "RemeshModifier": {
      "fields": {
        "octree_depth": "Resolution of the octree; higher values give finer details", 
        "scale": "The ratio of the largest dimension of the model over the size of the grid", 
        "sharpness": "Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input", 
        "threshold": "If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "RenderEngine": {
      "fields": {
        "bl_use_eevee_viewport": "Uses Eevee for viewport shading in LookDev shading mode", 
        "bl_use_postprocess": "Apply compositing on render results", 
        "bl_use_preview": "Render engine supports being used for rendering previews of materials, lights and worlds", 
        "bl_use_save_buffers": "Support render to an on disk buffer during rendering", 
        "bl_use_shading_nodes_custom": "Don't expose Cycles and Eevee shading nodes in the node editor user interface, so own nodes can be used instead", 
        "bl_use_spherical_stereo": "Support spherical stereo camera models", 
        "camera_override": "(read-only)", 
        "render": "(read-only)", 
        "resolution_x": "(read-only)", 
        "resolution_y": "(read-only)"
      }
    }, 
    "RenderLayer": {
      "fields": {
        "invert_zmask": "(read-only)    For Zmask, only render what is behind solid z values instead of in front", 
        "name": "(read-only)    View layer name", 
        "passes": "(read-only)", 
        "use_all_z": "(read-only)    Fill in Z values for solid faces in invisible layers, for masking", 
        "use_ao": "(read-only)    Render Ambient Occlusion in this Layer", 
        "use_edge_enhance": "(read-only)    Render Edge-enhance in this Layer (only works for Solid faces)", 
        "use_halo": "(read-only)    Render Halos in this Layer (on top of Solid)", 
        "use_pass_ambient_occlusion": "(read-only)    Deliver Ambient Occlusion pass", 
        "use_pass_combined": "(read-only)    Deliver full combined RGBA buffer", 
        "use_pass_diffuse_color": "(read-only)    Deliver diffuse color pass", 
        "use_pass_diffuse_direct": "(read-only)    Deliver diffuse direct pass", 
        "use_pass_diffuse_indirect": "(read-only)    Deliver diffuse indirect pass", 
        "use_pass_emit": "(read-only)    Deliver emission pass", 
        "use_pass_environment": "(read-only)    Deliver environment lighting pass", 
        "use_pass_glossy_color": "(read-only)    Deliver glossy color pass", 
        "use_pass_glossy_direct": "(read-only)    Deliver glossy direct pass", 
        "use_pass_glossy_indirect": "(read-only)    Deliver glossy indirect pass", 
        "use_pass_material_index": "(read-only)    Deliver material index pass", 
        "use_pass_mist": "(read-only)    Deliver mist factor pass (0.0-1.0)", 
        "use_pass_normal": "(read-only)    Deliver normal pass", 
        "use_pass_object_index": "(read-only)    Deliver object index pass", 
        "use_pass_shadow": "(read-only)    Deliver shadow pass", 
        "use_pass_subsurface_color": "(read-only)    Deliver subsurface color pass", 
        "use_pass_subsurface_direct": "(read-only)    Deliver subsurface direct pass", 
        "use_pass_subsurface_indirect": "(read-only)    Deliver subsurface indirect pass", 
        "use_pass_transmission_color": "(read-only)    Deliver transmission color pass", 
        "use_pass_transmission_direct": "(read-only)    Deliver transmission direct pass", 
        "use_pass_transmission_indirect": "(read-only)    Deliver transmission indirect pass", 
        "use_pass_uv": "(read-only)    Deliver texture UV pass", 
        "use_pass_vector": "(read-only)    Deliver speed vector pass", 
        "use_pass_z": "(read-only)    Deliver Z values pass", 
        "use_sky": "(read-only)    Render Sky in this Layer", 
        "use_solid": "(read-only)    Render Solid faces in this Layer", 
        "use_strand": "(read-only)    Render Strands in this Layer", 
        "use_zmask": "(read-only)    Only render what's in front of the solid z values", 
        "use_ztransp": "(read-only)    Render Z-Transparent faces in this Layer (on top of Solid and Halos)"
      }
    }, 
    "RenderPass": {
      "fields": {
        "channel_id": "(read-only)", 
        "channels": "(read-only)", 
        "fullname": "(read-only)", 
        "name": "(read-only)", 
        "view_id": "(read-only)"
      }
    }, 
    "RenderResult": {
      "fields": {
        "layers": "(read-only)", 
        "resolution_x": "(read-only)", 
        "resolution_y": "(read-only)", 
        "views": "(read-only)"
      }
    }, 
    "RenderSettings": {
      "fields": {
        "bake": "(read-only)", 
        "bake_bias": "Bias towards faces further away from the object (in blender units)", 
        "bake_margin": "Extends the baked result as a post process filter", 
        "bake_samples": "Number of samples used for ambient occlusion baking from multires", 
        "bake_type": "Choose shading information to bake into the image", 
        "bake_user_scale": "Instead of automatically normalizing to 0..1, apply a user scale to the derivative map", 
        "border_max_x": "Maximum X value for the render region", 
        "border_max_y": "Maximum Y value for the render region", 
        "border_min_x": "Minimum X value for the render region", 
        "border_min_y": "Minimum Y value for the render region", 
        "dither_intensity": "Amount of dithering noise added to the rendered image to break up banding", 
        "engine": "Engine to use for rendering", 
        "ffmpeg": "(read-only)    FFmpeg related settings for the scene", 
        "file_extension": "(read-only)    The file extension used for saving renders", 
        "filepath": "Directory/name to save animations, # characters defines the position and length of frame numbers", 
        "film_transparent": "World background is transparent, for compositing the render over another background", 
        "filter_size": "Width over which the reconstruction filter combines samples", 
        "fps": "Framerate, expressed in frames per second", 
        "fps_base": "Framerate base", 
        "frame_map_new": "How many frames the Map Old will last", 
        "frame_map_old": "Old mapping value in frames", 
        "hair_subdiv": "Additional subdivision along the hair", 
        "hair_type": "Hair shape type", 
        "has_multiple_engines": "(read-only)    More than one rendering engine is available", 
        "image_settings": "(read-only)", 
        "is_movie_format": "(read-only)    When true the format is a movie", 
        "line_thickness": "Line thickness in pixels", 
        "line_thickness_mode": "Line thickness mode for Freestyle line drawing", 
        "motion_blur_shutter": "Time taken in frames between shutter open and close", 
        "motion_blur_shutter_curve": "(read-only)    Curve defining the shutter's openness over time", 
        "pixel_aspect_x": "Horizontal aspect ratio - for anamorphic or non-square pixel output", 
        "pixel_aspect_y": "Vertical aspect ratio - for anamorphic or non-square pixel output", 
        "preview_pixel_size": "Pixel size for viewport rendering", 
        "preview_start_resolution": "Resolution to start rendering preview at, progressively increasing it to the full viewport size", 
        "resolution_percentage": "Percentage scale for render resolution", 
        "resolution_x": "Number of horizontal pixels in the rendered image", 
        "resolution_y": "Number of vertical pixels in the rendered image", 
        "sequencer_gl_preview": "Method to draw in the sequencer view", 
        "simplify_child_particles": "Global child particles percentage", 
        "simplify_child_particles_render": "Global child particles percentage during rendering", 
        "simplify_gpencil": "Simplify Grease Pencil drawing", 
        "simplify_gpencil_blend": "Do not display blend layers", 
        "simplify_gpencil_onplay": "Simplify Grease Pencil only during animation playback", 
        "simplify_gpencil_remove_lines": "Disable external lines of fill strokes", 
        "simplify_gpencil_shader_fx": "Do not apply shader fx", 
        "simplify_gpencil_tint": "Do not display layer tint", 
        "simplify_gpencil_view_fill": "Disable fill strokes in the viewport", 
        "simplify_gpencil_view_modifier": "Do not apply modifiers in the viewport", 
        "simplify_subdivision": "Global maximum subdivision level", 
        "simplify_subdivision_render": "Global maximum subdivision level during rendering", 
        "stamp_background": "Color to use behind stamp text", 
        "stamp_font_size": "Size of the font used when rendering stamp text", 
        "stamp_foreground": "Color to use for stamp text", 
        "stamp_note_text": "Custom text to appear in the stamp note", 
        "stereo_views": "(read-only)", 
        "threads": "Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)", 
        "threads_mode": "Determine the amount of render threads used", 
        "tile_x": "Horizontal tile size to use while rendering", 
        "tile_y": "Vertical tile size to use while rendering", 
        "use_bake_clear": "Clear Images before baking", 
        "use_bake_lores_mesh": "Calculate heights against unsubdivided low resolution mesh", 
        "use_bake_multires": "Bake directly from multires object", 
        "use_bake_selected_to_active": "Bake shading on the surface of selected objects to the active object", 
        "use_bake_user_scale": "Use a user scale for the derivative map", 
        "use_border": "Render a user-defined render region, within the frame size", 
        "use_compositing": "Process the render result through the compositing pipeline, if compositing nodes are enabled", 
        "use_crop_to_border": "Crop the rendered frame to the defined render region size", 
        "use_file_extension": "Add the file format extensions to the rendered file name (eg: filename + .jpg)", 
        "use_freestyle": "Draw stylized strokes using Freestyle", 
        "use_full_sample": "Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)", 
        "use_lock_interface": "Lock interface during rendering in favor of giving more memory to the renderer", 
        "use_motion_blur": "Use multi-sampled 3D scene motion blur", 
        "use_multiview": "Use multiple views in the scene", 
        "use_overwrite": "Overwrite existing files while rendering", 
        "use_persistent_data": "Keep render data around for faster re-renders", 
        "use_placeholder": "Create empty placeholder files while rendering frames (similar to Unix 'touch')", 
        "use_render_cache": "Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)", 
        "use_save_buffers": "Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)", 
        "use_sequencer": "Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist", 
        "use_sequencer_override_scene_strip": "Use workbench render settings from the sequencer scene, instead of each individual scene used in the strip", 
        "use_simplify": "Enable simplification of scene for quicker preview renders", 
        "use_simplify_smoke_highres": "Display high-resolution smoke in the viewport", 
        "use_single_layer": "Only render the active layer. Only affects rendering from the interface, ignored for rendering from command line", 
        "use_spherical_stereo": "(read-only)    Active render engine supports spherical stereo rendering", 
        "use_stamp": "Render the stamp info text in the rendered image", 
        "use_stamp_camera": "Include the name of the active camera in image metadata", 
        "use_stamp_date": "Include the current date in image/video metadata", 
        "use_stamp_filename": "Include the .blend filename in image/video metadata", 
        "use_stamp_frame": "Include the frame number in image metadata", 
        "use_stamp_frame_range": "Include the rendered frame range in image/video metadata", 
        "use_stamp_hostname": "Include the hostname of the machine that rendered the frame", 
        "use_stamp_labels": "Display stamp labels (\"Camera\" in front of camera name, etc.)", 
        "use_stamp_lens": "Include the active camera's lens in image metadata", 
        "use_stamp_marker": "Include the name of the last marker in image metadata", 
        "use_stamp_memory": "Include the peak memory usage in image metadata", 
        "use_stamp_note": "Include a custom note in image/video metadata", 
        "use_stamp_render_time": "Include the render time in image metadata", 
        "use_stamp_scene": "Include the name of the active scene in image/video metadata", 
        "use_stamp_sequencer_strip": "Include the name of the foreground sequence strip in image metadata", 
        "use_stamp_strip_meta": "Use metadata from the strips in the sequencer", 
        "use_stamp_time": "Include the rendered frame timecode as HH:MM:SS.FF in image metadata", 
        "views": "(read-only)"
      }
    }, 
    "RenderSlot": {
      "fields": {
        "name": "Render slot name"
      }
    }, 
    "RenderSlots": {
      "fields": {
        "active": "Active render slot of the image", 
        "active_index": "Active render slot of the image"
      }
    }, 
    "RenderView": {
      "fields": {
        "name": "(read-only)"
      }
    }, 
    "RenderViews": {
      "fields": {
        "active": "Active Render View", 
        "active_index": "Active index in render view array"
      }
    }, 
    "RigidBodyConstraint": {
      "fields": {
        "breaking_threshold": "Impulse threshold that must be reached for the constraint to break", 
        "disable_collisions": "Disable collisions between constrained rigid bodies", 
        "enabled": "Enable this constraint", 
        "limit_ang_x_lower": "Lower limit of X axis rotation", 
        "limit_ang_x_upper": "Upper limit of X axis rotation", 
        "limit_ang_y_lower": "Lower limit of Y axis rotation", 
        "limit_ang_y_upper": "Upper limit of Y axis rotation", 
        "limit_ang_z_lower": "Lower limit of Z axis rotation", 
        "limit_ang_z_upper": "Upper limit of Z axis rotation", 
        "limit_lin_x_lower": "Lower limit of X axis translation", 
        "limit_lin_x_upper": "Upper limit of X axis translation", 
        "limit_lin_y_lower": "Lower limit of Y axis translation", 
        "limit_lin_y_upper": "Upper limit of Y axis translation", 
        "limit_lin_z_lower": "Lower limit of Z axis translation", 
        "limit_lin_z_upper": "Upper limit of Z axis translation", 
        "motor_ang_max_impulse": "Maximum angular motor impulse", 
        "motor_ang_target_velocity": "Target angular motor velocity", 
        "motor_lin_max_impulse": "Maximum linear motor impulse", 
        "motor_lin_target_velocity": "Target linear motor velocity", 
        "object1": "First Rigid Body Object to be constrained", 
        "object2": "Second Rigid Body Object to be constrained", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "spring_damping_ang_x": "Damping on the X rotational axis", 
        "spring_damping_ang_y": "Damping on the Y rotational axis", 
        "spring_damping_ang_z": "Damping on the Z rotational axis", 
        "spring_damping_x": "Damping on the X axis", 
        "spring_damping_y": "Damping on the Y axis", 
        "spring_damping_z": "Damping on the Z axis", 
        "spring_stiffness_ang_x": "Stiffness on the X rotational axis", 
        "spring_stiffness_ang_y": "Stiffness on the Y rotational axis", 
        "spring_stiffness_ang_z": "Stiffness on the Z rotational axis", 
        "spring_stiffness_x": "Stiffness on the X axis", 
        "spring_stiffness_y": "Stiffness on the Y axis", 
        "spring_stiffness_z": "Stiffness on the Z axis", 
        "spring_type": "Which implementation of spring to use", 
        "type": "Type of Rigid Body Constraint", 
        "use_breaking": "Constraint can be broken if it receives an impulse above the threshold", 
        "use_limit_ang_x": "Limit rotation around X axis", 
        "use_limit_ang_y": "Limit rotation around Y axis", 
        "use_limit_ang_z": "Limit rotation around Z axis", 
        "use_limit_lin_x": "Limit translation on X axis", 
        "use_limit_lin_y": "Limit translation on Y axis", 
        "use_limit_lin_z": "Limit translation on Z axis", 
        "use_motor_ang": "Enable angular motor", 
        "use_motor_lin": "Enable linear motor", 
        "use_override_solver_iterations": "Override the number of solver iterations for this constraint", 
        "use_spring_ang_x": "Enable spring on X rotational axis", 
        "use_spring_ang_y": "Enable spring on Y rotational axis", 
        "use_spring_ang_z": "Enable spring on Z rotational axis", 
        "use_spring_x": "Enable spring on X axis", 
        "use_spring_y": "Enable spring on Y axis", 
        "use_spring_z": "Enable spring on Z axis"
      }
    }, 
    "RigidBodyObject": {
      "fields": {
        "angular_damping": "Amount of angular velocity that is lost over time", 
        "collision_collections": "Collision collections rigid body belongs to", 
        "collision_margin": "Threshold of distance near surface where collisions are still considered (best results when non-zero)", 
        "collision_shape": "Collision Shape of object in Rigid Body Simulations", 
        "deactivate_angular_velocity": "Angular Velocity below which simulation stops simulating object", 
        "deactivate_linear_velocity": "Linear Velocity below which simulation stops simulating object", 
        "enabled": "Rigid Body actively participates to the simulation", 
        "friction": "Resistance of object to movement", 
        "kinematic": "Allow rigid body to be controlled by the animation system", 
        "linear_damping": "Amount of linear velocity that is lost over time", 
        "mass": "How much the object 'weighs' irrespective of gravity", 
        "mesh_source": "Source of the mesh used to create collision shape", 
        "restitution": "Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)", 
        "type": "Role of object in Rigid Body Simulations", 
        "use_deactivation": "Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)", 
        "use_deform": "Rigid body deforms during simulation", 
        "use_margin": "Use custom collision margin (some shapes will have a visible gap around them)", 
        "use_start_deactivated": "Deactivate rigid body at the start of the simulation"
      }
    }, 
    "RigidBodyWorld": {
      "fields": {
        "collection": "Collection containing objects participating in this simulation", 
        "constraints": "Collection containing rigid body constraint objects", 
        "effector_weights": "(read-only)", 
        "enabled": "Simulation will be evaluated", 
        "point_cache": "(read-only)", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "steps_per_second": "Number of simulation steps taken per second (higher values are more accurate but slower)", 
        "time_scale": "Change the speed of the simulation", 
        "use_split_impulse": "Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)"
      }
    }, 
    "Scene": {
      "fields": {
        "active_clip": "Active movie clip used for constraints and viewport drawing", 
        "animation_data": "(read-only)    Animation data for this data-block", 
        "audio_distance_model": "Distance model for distance attenuation calculation", 
        "audio_doppler_factor": "Pitch factor for Doppler effect calculation", 
        "audio_doppler_speed": "Speed of sound for Doppler effect calculation", 
        "audio_volume": "Audio volume", 
        "background_set": "Background set scene", 
        "camera": "Active camera, used for rendering the scene", 
        "collection": "(read-only)    Scene master collection that objects and other collections in the scene", 
        "cursor": "(read-only)", 
        "cycles": "(read-only)    Cycles render settings", 
        "cycles_curves": "(read-only)    Cycles hair rendering settings", 
        "display": "(read-only)    Scene display settings for 3d viewport", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "eevee": "(read-only)    EEVEE settings for the scene", 
        "frame_current": "Current Frame, to update animation data from python frame_set() instead", 
        "frame_current_final": "(read-only)    Current frame with subframe and time remapping applied", 
        "frame_end": "Final frame of the playback/rendering range", 
        "frame_preview_end": "Alternative end frame for UI playback", 
        "frame_preview_start": "Alternative start frame for UI playback", 
        "frame_start": "First frame of the playback/rendering range", 
        "frame_step": "Number of frames to skip forward while rendering/playing back each frame", 
        "gravity": "Constant acceleration in a given direction", 
        "grease_pencil": "Grease Pencil data-block used for annotations in the 3D view", 
        "is_nla_tweakmode": "(read-only)    Whether there is any action referenced by NLA being edited (strictly read-only)", 
        "keying_sets": "(read-only)    Absolute Keying Sets for this Scene", 
        "keying_sets_all": "(read-only)    All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)", 
        "lock_frame_selection_to_range": "Don't allow frame to be selected with mouse outside of frame range", 
        "node_tree": "(read-only)    Compositing node tree", 
        "objects": "(read-only)", 
        "render": "(read-only)", 
        "rigidbody_world": "(read-only)", 
        "safe_areas": "(read-only)", 
        "sequence_editor": "(read-only)", 
        "sequencer_colorspace_settings": "(read-only)    Settings of color space sequencer is working in", 
        "show_keys_from_selected_only": "Consider keyframes for active Object and/or its selected bones only (in timeline and when jumping between keyframes)", 
        "show_subframe": "Show current scene subframe and allow set it using interface tools", 
        "sync_mode": "How to sync playback", 
        "timeline_markers": "(read-only)    Markers used in all timelines for the current scene", 
        "tool_settings": "(read-only)", 
        "transform_orientation_slots": "(read-only)", 
        "unit_settings": "(read-only)    Unit editing settings", 
        "use_audio": "Play back of audio from Sequence Editor will be muted", 
        "use_audio_scrub": "Play audio from Sequence Editor while scrubbing", 
        "use_gravity": "Use global gravity for all dynamics", 
        "use_nodes": "Enable the compositing node tree", 
        "use_preview_range": "Use an alternative start/end frame range for animation playback and view renders", 
        "use_stamp_note": "User defined note for the render stamping", 
        "view_layers": "(read-only)", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "world": "World used for rendering the scene"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SceneDisplay": {
      "fields": {
        "light_direction": "Direction of the light for shadows and highlights", 
        "matcap_ssao_attenuation": "Attenuation constant", 
        "matcap_ssao_distance": "Distance of object that contribute to the Cavity/Edge effect", 
        "matcap_ssao_samples": "Number of samples", 
        "render_aa": "Method of anti-aliasing when rendering final image", 
        "shading": "(read-only)    Shading settings for OpenGL render engine", 
        "shadow_focus": "Shadow factor hardness", 
        "shadow_shift": "Shadow termination angle", 
        "viewport_aa": "Method of anti-aliasing when rendering 3d viewport"
      }
    }, 
    "SceneEEVEE": {
      "fields": {
        "bloom_clamp": "Maximum intensity a bloom pixel can have (0 to disabled)", 
        "bloom_color": "Color applied to the bloom effect", 
        "bloom_intensity": "Blend factor", 
        "bloom_knee": "Makes transition between under/over-threshold gradual", 
        "bloom_radius": "Bloom spread distance", 
        "bloom_threshold": "Filters out pixels under this level of brightness", 
        "bokeh_max_size": "Max size of the bokeh shape for the depth of field (lower is faster)", 
        "bokeh_threshold": "Brightness threshold for using sprite base depth of field", 
        "gi_auto_bake": "Auto bake indirect lighting when editing probes", 
        "gi_cache_info": "(read-only)    Info on current cache status", 
        "gi_cubemap_display_size": "Size of the cubemap spheres to debug captured light", 
        "gi_cubemap_resolution": "Size of every cubemaps", 
        "gi_diffuse_bounces": "Number of time the light is reinjected inside light grids, 0 disable indirect diffuse light", 
        "gi_filter_quality": "Take more samples during cubemap filtering to remove artifacts", 
        "gi_glossy_clamp": "Clamp pixel intensity to reduce noise inside glossy reflections from reflection cubemaps (0 to disabled)", 
        "gi_irradiance_display_size": "Size of the irradiance sample spheres to debug captured light", 
        "gi_irradiance_smoothing": "Smoother irradiance interpolation but introduce light bleeding", 
        "gi_show_cubemaps": "Display captured cubemaps in the viewport", 
        "gi_show_irradiance": "Display irradiance samples in the viewport", 
        "gi_visibility_resolution": "Size of the shadow map applied to each irradiance sample", 
        "gtao_distance": "Distance of object that contribute to the ambient occlusion effect", 
        "gtao_factor": "Factor for ambient occlusion blending", 
        "gtao_quality": "Precision of the horizon search", 
        "light_threshold": "Minimum light intensity for a light to contribute to the lighting", 
        "motion_blur_samples": "Number of samples to take with motion blur", 
        "motion_blur_shutter": "Time taken in frames between shutter open and close", 
        "overscan_size": "Percentage of render size to add as overscan to the internal render buffers", 
        "shadow_cascade_size": "Size of sun light shadow maps", 
        "shadow_cube_size": "Size of point and area light shadow maps", 
        "ssr_border_fade": "Screen percentage used to fade the SSR", 
        "ssr_firefly_fac": "Clamp pixel intensity to remove noise (0 to disabled)", 
        "ssr_max_roughness": "Do not raytrace reflections for roughness above this value", 
        "ssr_quality": "Precision of the screen space raytracing", 
        "ssr_thickness": "Pixel thickness used to detect intersection", 
        "sss_jitter_threshold": "Rotate samples that are below this threshold", 
        "sss_samples": "Number of samples to compute the scattering effect", 
        "taa_render_samples": "Number of samples per pixels for rendering", 
        "taa_samples": "Number of samples, unlimited if 0", 
        "use_bloom": "High brightness pixels generate a glowing effect", 
        "use_gtao": "Enable ambient occlusion to simulate medium scale indirect shadowing", 
        "use_gtao_bent_normals": "Compute main non occluded direction to sample the environment", 
        "use_gtao_bounce": "An approximation to simulate light bounces giving less occlusion on brighter objects", 
        "use_motion_blur": "Enable motion blur effect (only in camera view)", 
        "use_overscan": "Internally render past the image border to avoid screen-space effects disappearing", 
        "use_shadow_high_bitdepth": "Use 32bit shadows", 
        "use_soft_shadows": "Randomize shadowmaps origin to create soft shadows", 
        "use_ssr": "Enable screen space reflection", 
        "use_ssr_halfres": "Raytrace at a lower resolution", 
        "use_ssr_refraction": "Enable screen space Refractions", 
        "use_taa_reprojection": "Denoise image using temporal reprojection (can leave some ghosting)", 
        "use_volumetric_lights": "Enable scene light interactions with volumetrics", 
        "use_volumetric_shadows": "Generate shadows from volumetric material (Very expensive)", 
        "volumetric_end": "End distance of the volumetric effect", 
        "volumetric_light_clamp": "Maximum light contribution, reducing noise", 
        "volumetric_sample_distribution": "Distribute more samples closer to the camera", 
        "volumetric_samples": "Number of samples to compute volumetric effects", 
        "volumetric_shadow_samples": "Number of samples to compute volumetric shadowing", 
        "volumetric_start": "Start distance of the volumetric effect", 
        "volumetric_tile_size": "Control the quality of the volumetric effects (lower size increase vram usage and quality)"
      }
    }, 
    "SceneRenderView": {
      "fields": {
        "camera_suffix": "Suffix to identify the cameras to use, and added to the render images for this view", 
        "file_suffix": "Suffix added to the render images for this view", 
        "name": "Render view name", 
        "use": "Disable or enable the render view"
      }
    }, 
    "SceneSequence": {
      "fields": {
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "color_saturation": "Adjust the intensity of the input's color", 
        "crop": "(read-only)", 
        "fps": "(read-only)    Frames per second", 
        "proxy": "(read-only)", 
        "scene": "Scene that this sequence uses", 
        "scene_camera": "Override the scenes active camera", 
        "scene_input": "Input type to use for the Scene strip", 
        "strobe": "Only display every nth frame", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_deinterlace": "Remove fields from video movies", 
        "use_flip_x": "Flip on the X axis", 
        "use_flip_y": "Flip on the Y axis", 
        "use_float": "Convert input to float data", 
        "use_grease_pencil": "Show Grease Pencil strokes in OpenGL previews", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_reverse_frames": "Reverse frame order", 
        "use_translation": "Translate image before processing"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "Scopes": {
      "fields": {
        "accuracy": "Proportion of original image source pixel lines to sample", 
        "histogram": "(read-only)    Histogram for viewing image statistics", 
        "use_full_resolution": "Sample every pixel of the image", 
        "vectorscope_alpha": "Opacity of the points", 
        "waveform_alpha": "Opacity of the points"
      }
    }, 
    "Screen": {
      "fields": {
        "areas": "(read-only)    Areas the screen is subdivided into", 
        "is_animation_playing": "(read-only)    Animation playback is active", 
        "is_temporary": "(read-only)", 
        "show_fullscreen": "(read-only)    An area is maximized, filling this screen", 
        "show_statusbar": "Show status bar", 
        "use_follow": "Follow current frame in editors"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "ScrewModifier": {
      "fields": {
        "angle": "Angle of revolution", 
        "axis": "Screw axis", 
        "iterations": "Number of times to apply the screw operation", 
        "merge_threshold": "Limit below which to merge vertices", 
        "object": "Object to define the screw axis", 
        "render_steps": "Number of steps in the revolution", 
        "screw_offset": "Offset the revolution along its axis", 
        "steps": "Number of steps in the revolution", 
        "use_merge_vertices": "Merge adjacent vertices (screw offset must be zero)", 
        "use_normal_calculate": "Calculate the order of edges (needed for meshes, but not curves)", 
        "use_normal_flip": "Flip normals of lathed faces", 
        "use_object_screw_offset": "Use the distance between the objects to make a screw", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "use_stretch_u": "Stretch the U coordinates between 0-1 when UV's are present", 
        "use_stretch_v": "Stretch the V coordinates between 0-1 when UV's are present"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Sculpt": {
      "fields": {
        "constant_detail_resolution": "Maximum edge length for dynamic topology sculpting (as divisor of blender unit - higher value means smaller edge length)", 
        "detail_percent": "Maximum edge length for dynamic topology sculpting (in brush percenage)", 
        "detail_refine_method": "In dynamic-topology mode, how to add or remove mesh detail", 
        "detail_size": "Maximum edge length for dynamic topology sculpting (in pixels)", 
        "detail_type_method": "In dynamic-topology mode, how mesh detail size is calculated", 
        "gravity": "Amount of gravity after each dab", 
        "gravity_object": "Object whose Z axis defines orientation of gravity", 
        "lock_x": "Disallow changes to the X axis of vertices", 
        "lock_y": "Disallow changes to the Y axis of vertices", 
        "lock_z": "Disallow changes to the Z axis of vertices", 
        "radial_symmetry": "Number of times to copy strokes across the surface", 
        "show_mask": "Show mask as overlay on object", 
        "symmetrize_direction": "Source and destination for symmetrize operator", 
        "use_deform_only": "Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)", 
        "use_smooth_shading": "Show faces in dynamic-topology mode with smooth shading rather than flat shaded", 
        "use_threaded": "Take advantage of multiple CPU cores to improve sculpting performance"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "Sequence": {
      "fields": {
        "blend_alpha": "Percentage of how much the strip's colors affect other strips", 
        "blend_type": "Method for controlling how the strip combines with other strips", 
        "channel": "Y position of the sequence strip", 
        "effect_fader": "Custom fade value", 
        "frame_duration": "(read-only)    The length of the contents of this strip before the handles are applied", 
        "frame_final_duration": "The length of the contents of this strip after the handles are applied", 
        "frame_final_end": "End frame displayed in the sequence editor after offsets are applied", 
        "frame_final_start": "Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame", 
        "frame_start": "X position where the strip begins", 
        "lock": "Lock strip so that it cannot be transformed", 
        "modifiers": "(read-only)    Modifiers affecting this strip", 
        "mute": "Disable strip so that it cannot be viewed in the output", 
        "override_cache_settings": "Override global cache settings", 
        "speed_factor": "Multiply the current speed of the sequence with this number or remap current frame to this frame", 
        "type": "(read-only)", 
        "use_cache_composite": "Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage", 
        "use_cache_preprocessed": "Cache preprocessed images, for faster tweaking of effects at the cost of memory usage", 
        "use_cache_raw": "Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage", 
        "use_default_fade": "Fade effect using the built-in default (usually make transition as long as effect strip)", 
        "use_linear_modifiers": "Calculate modifiers in linear space instead of sequencer's space"
      }
    }, 
    "SequenceColorBalanceData": {
      "fields": {
        "gain": "Color balance gain (highlights)", 
        "gamma": "Color balance gamma (midtones)", 
        "invert_gain": "Invert the gain color`", 
        "invert_gamma": "Invert the gamma color", 
        "invert_lift": "Invert the lift color", 
        "lift": "Color balance lift (shadows)"
      }
    }, 
    "SequenceCrop": {
      "fields": {
        "max_x": "Number of pixels to crop from the right side", 
        "max_y": "Number of pixels to crop from the top", 
        "min_x": "Number of pixels to crop from the left side", 
        "min_y": "Number of pixels to crop from the bottom"
      }
    }, 
    "SequenceEditor": {
      "fields": {
        "active_strip": "Sequencer's active strip", 
        "meta_stack": "(read-only)    Meta strip stack, last is currently edited meta strip", 
        "overlay_frame": "Number of frames to offset", 
        "proxy_storage": "How to store proxies for this project", 
        "recycle_max_cost": "Only frames with cost lower than this value will be recycled", 
        "sequences": "(read-only)    Top-level strips only", 
        "sequences_all": "(read-only)    All strips, recursively including those inside metastrips", 
        "show_cache": "Visualize cached images on the timeline", 
        "show_cache_composite": "Visualize cached composite images", 
        "show_cache_final_out": "Visualize cached complete frames", 
        "show_cache_preprocessed": "Visualize cached preprocessed images", 
        "show_cache_raw": "Visualize cached raw images", 
        "show_overlay": "Partial overlay on top of the sequencer with a frame offset", 
        "use_cache_composite": "Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage", 
        "use_cache_final": "Cache final image for each frame", 
        "use_cache_preprocessed": "Cache preprocessed images, for faster tweaking of effects at the cost of memory usage", 
        "use_cache_raw": "Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage", 
        "use_prefetch": "Render frames ahead of playhead in background for faster playback"
      }
    }, 
    "SequenceElement": {
      "fields": {
        "filename": "Name of the source file", 
        "orig_height": "(read-only)    Original image height", 
        "orig_width": "(read-only)    Original image width"
      }
    }, 
    "SequenceModifier": {
      "fields": {
        "input_mask_id": "Mask ID used as mask input for the modifier", 
        "input_mask_strip": "Strip used as mask input for the modifier", 
        "input_mask_type": "Type of input data used for mask", 
        "mask_time": "Time to use for the Mask animation", 
        "mute": "Mute this modifier", 
        "show_expanded": "Mute expanded settings for the modifier", 
        "type": "(read-only)"
      }
    }, 
    "SequenceProxy": {
      "fields": {
        "build_100": "Build 100% proxy resolution", 
        "build_25": "Build 25% proxy resolution", 
        "build_50": "Build 50% proxy resolution", 
        "build_75": "Build 75% proxy resolution", 
        "build_free_run": "Build free run time code index", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "build_record_run": "Build record run time code index", 
        "directory": "Location to store the proxy files", 
        "filepath": "Location of custom proxy file", 
        "quality": "JPEG Quality of proxies to build", 
        "timecode": "Method for reading the inputs timecode", 
        "use_overwrite": "Overwrite existing proxy files when building", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from"
      }
    }, 
    "SequencerTonemapModifierData": {
      "fields": {
        "adaptation": "If 0, global; if 1, based on pixel intensity", 
        "contrast": "Set to 0 to use estimate from input image", 
        "correction": "If 0, same for all channels; if 1, each independent", 
        "gamma": "If not used, set to 1", 
        "intensity": "If less than zero, darkens image; otherwise, makes it brighter", 
        "key": "The value the average luminance is mapped to", 
        "offset": "Normally always 1, but can be used as an extra control to alter the brightness curve", 
        "tonemap_type": "Tone mapping algorithm"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "SequenceTransform": {
      "fields": {
        "offset_x": "Amount to move the input on the X axis within its boundaries", 
        "offset_y": "Amount to move the input on the Y axis within its boundaries"
      }
    }, 
    "ShaderFx": {
      "fields": {
        "name": "Effect name", 
        "show_expanded": "Set effect expanded in the user interface", 
        "show_in_editmode": "Display effect in Edit mode", 
        "show_render": "Use effect during render", 
        "show_viewport": "Display effect in viewport", 
        "type": "(read-only)"
      }
    }, 
    "ShaderFxBlur": {
      "fields": {
        "coc": "Define circle of confusion for depth of field", 
        "factor": "Factor of Blur", 
        "samples": "Number of Blur Samples (zero, disable blur)", 
        "use_dof_mode": "Blur using focal plane distance as factor to simulate depth of field effect (only in camera view)"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxColorize": {
      "fields": {
        "factor": "Mix factor", 
        "high_color": "Second color used for effect", 
        "low_color": "First color used for effect", 
        "mode": "Effect mode"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxFlip": {
      "fields": {
        "flip_horizontal": "Flip image horizontally", 
        "flip_vertical": "Flip image vertically"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxGlow": {
      "fields": {
        "glow_color": "Color used for generated glow", 
        "mode": "Glow mode", 
        "radius": "Number of pixels for blurring glow (set to 0 to disable)", 
        "samples": "Number of Blur Samples", 
        "select_color": "Color selected to apply glow", 
        "threshold": "Limit to select color for glow effect", 
        "use_alpha_mode": "Glow only areas with alpha"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxLight": {
      "fields": {
        "ambient": "Strength of ambient light source", 
        "energy": "Strength of light source", 
        "object": "Object to determine light source location"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxPixel": {
      "fields": {
        "color": "Color used for lines", 
        "size": "Pixel size", 
        "use_lines": "Display lines between pixels"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxRim": {
      "fields": {
        "blur": "Number of pixels for blurring rim (set to 0 to disable)", 
        "mask_color": "Color that must be kept", 
        "mode": "Blend mode", 
        "offset": "Offset of the rim", 
        "rim_color": "Color used for Rim", 
        "samples": "Number of Blur Samples (zero, disable blur)"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxShadow": {
      "fields": {
        "amplitude": "Amplitude of Wave", 
        "blur": "Number of pixels for blurring shadow (set to 0 to disable)", 
        "object": "Object to determine center of rotation", 
        "offset": "Offset of the shadow", 
        "orientation": "Direction of the wave", 
        "period": "Period of Wave", 
        "phase": "Phase Shift of Wave", 
        "rotation": "Rotation around center or object", 
        "samples": "Number of Blur Samples (zero, disable blur)", 
        "scale": "Offset of the shadow", 
        "shadow_color": "Color used for Shadow", 
        "use_object": "Use object as center of rotation", 
        "use_wave": "Use wave effect"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxSwirl": {
      "fields": {
        "angle": "Angle of rotation", 
        "object": "Object to determine center location", 
        "radius": "Radius to apply", 
        "use_transparent": "Make image transparent outside of radius"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderFxWave": {
      "fields": {
        "amplitude": "Amplitude of Wave", 
        "orientation": "Direction of the wave", 
        "period": "Period of Wave", 
        "phase": "Phase Shift of Wave"
      }, 
      "inherits": [
        "ShaderFx"
      ]
    }, 
    "ShaderNodeAmbientOcclusion": {
      "fields": {
        "inside": "Trace rays towards the inside of the object", 
        "only_local": "Only consider the object itself when computing AO", 
        "samples": "Number of rays to trace per shader evaluation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeBevel": {
      "fields": {
        "samples": "Number of rays to trace per shader evaluation"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeBsdfHairPrincipled": {
      "fields": {
        "parametrization": "Select the shader's color parametrization"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeBsdfPrincipled": {
      "fields": {
        "subsurface_method": "Method for rendering subsurface scattering"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeBump": {
      "fields": {
        "invert": "Invert the bump mapping direction to push into the surface instead of out"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeCustomGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeDisplacement": {
      "fields": {
        "space": "Space of the input height"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMapping": {
      "fields": {
        "vector_type": "Type of vector that the mapping transforms"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMapRange": {
      "fields": {
        "clamp": "Clamp the result to the target range [To Min, To Max]"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeMixRGB": {
      "fields": {
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeNormalMap": {
      "fields": {
        "space": "Space of the input normal", 
        "uv_map": "UV Map for tangent space maps"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputLight": {
      "fields": {
        "is_active_output": "True if this node is used as the active output", 
        "target": "Which renderer and viewport shading types to use the shaders for"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputLineStyle": {
      "fields": {
        "is_active_output": "True if this node is used as the active output", 
        "target": "Which renderer and viewport shading types to use the shaders for", 
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputMaterial": {
      "fields": {
        "is_active_output": "True if this node is used as the active output", 
        "target": "Which renderer and viewport shading types to use the shaders for"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeOutputWorld": {
      "fields": {
        "is_active_output": "True if this node is used as the active output", 
        "target": "Which renderer and viewport shading types to use the shaders for"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeRGBCurve": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeScript": {
      "fields": {
        "bytecode": "Compile bytecode for shader script node", 
        "bytecode_hash": "Hash of compile bytecode, for quick equality checking", 
        "filepath": "Shader script path", 
        "script": "Internal shader script to define the shader", 
        "use_auto_update": "Automatically update the shader when the .osl file changes (external scripts only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeSubsurfaceScattering": {
      "fields": {
        "falloff": "Function to determine how much light nearby points contribute based on their distance to the shading point"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTangent": {
      "fields": {
        "axis": "Axis for radial tangents", 
        "direction_type": "Method to use for the tangent", 
        "uv_map": "UV Map for tangent generated from UV"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexBrick": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexChecker": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexCoord": {
      "fields": {
        "from_instancer": "Use the parent of the dupli object if possible", 
        "object": "Use coordinates from this object (for object texture coordinates output)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexEnvironment": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "interpolation": "Texture interpolation", 
        "projection": "Projection of the input image", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexGradient": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "gradient_type": "Style of the color blending", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexIES": {
      "fields": {
        "filepath": "IES light path", 
        "ies": "Internal IES file", 
        "mode": "Whether the IES file is loaded from disk or from a Text datablock"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexImage": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "extension": "How the image is extrapolated past its original bounds", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "interpolation": "Texture interpolation", 
        "projection": "Method to project 2D image on object with a 3D texture vector", 
        "projection_blend": "For box projection, amount of blend to use between sides", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexMagic": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "turbulence_depth": "Level of detail in the added turbulent noise"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexMusgrave": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexNoise": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "noise_dimensions": "The dimensions of the space to evaluate the noise in", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexPointDensity": {
      "fields": {
        "interpolation": "Texture interpolation", 
        "object": "Object to take point data from", 
        "particle_color_source": "Data to derive color results from", 
        "particle_system": "Particle System to render as points", 
        "point_source": "Point data to use as renderable point density", 
        "radius": "Radius from the shaded sample to look for points within", 
        "resolution": "Resolution used by the texture holding the point density", 
        "space": "Coordinate system to calculate voxels in", 
        "vertex_attribute_name": "Vertex attribute to use for color", 
        "vertex_color_source": "Data to derive color results from"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexSky": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "ground_albedo": "Ground color that is subtly reflected in the sky", 
        "sun_direction": "Direction from where the sun is shining", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "turbidity": "Atmospheric turbidity"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexVoronoi": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexWave": {
      "fields": {
        "color_mapping": "(read-only)    Color mapping settings", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeTexWhiteNoise": {
      "fields": {
        "noise_dimensions": "The dimensions of the space to evaluate the noise in"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeUVAlongStroke": {
      "fields": {
        "use_tips": "Lower half of the texture is for tips of the stroke"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeUVMap": {
      "fields": {
        "from_instancer": "Use the parent of the dupli object if possible", 
        "uv_map": "UV coordinates to be used for mapping"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeVectorCurve": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeVectorDisplacement": {
      "fields": {
        "space": "Space of the input height"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeVectorTransform": {
      "fields": {
        "convert_from": "Space to convert from", 
        "convert_to": "Space to convert to"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeVertexColor": {
      "fields": {
        "layer_name": "Vertex Color"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShaderNodeWireframe": {
      "fields": {
        "use_pixel_size": "Use screen pixel size instead of world units"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ]
    }, 
    "ShapeKey": {
      "fields": {
        "data": "(read-only)", 
        "frame": "(read-only)    Frame for absolute keys", 
        "interpolation": "Interpolation type for absolute shape keys", 
        "mute": "Toggle this shape key", 
        "name": "Name of Shape Key", 
        "relative_key": "Shape used as a relative key", 
        "slider_max": "Maximum for slider", 
        "slider_min": "Minimum for slider", 
        "value": "Value of shape key at the current frame", 
        "vertex_group": "Vertex weight group, to blend with basis shape"
      }
    }, 
    "ShapeKeyBezierPoint": {
      "fields": {
        "radius": "Radius for beveling", 
        "tilt": "Tilt in 3D View"
      }
    }, 
    "ShapeKeyCurvePoint": {
      "fields": {
        "radius": "Radius for beveling", 
        "tilt": "Tilt in 3D View"
      }
    }, 
    "ShrinkwrapConstraint": {
      "fields": {
        "cull_face": "Stop vertices from projecting to a face on the target when facing towards/away", 
        "distance": "Distance to Target", 
        "project_axis": "Axis constrain to", 
        "project_axis_space": "Space for the projection axis", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "shrinkwrap_type": "Select type of shrinkwrap algorithm for target position", 
        "target": "Target Mesh object", 
        "track_axis": "Axis that is aligned to the normal", 
        "use_invert_cull": "When projecting in the opposite direction invert the face cull mode", 
        "use_project_opposite": "Project in both specified and opposite directions", 
        "use_track_normal": "Align the specified axis to the surface normal", 
        "wrap_mode": "Select how to constrain the object to the target surface"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "ShrinkwrapModifier": {
      "fields": {
        "auxiliary_target": "Additional mesh target to shrink to", 
        "cull_face": "Stop vertices from projecting to a face on the target when facing towards/away", 
        "invert_vertex_group": "Invert vertex group influence", 
        "offset": "Distance to keep from the target", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "subsurf_levels": "Number of subdivisions that must be performed before extracting vertices' positions and normals", 
        "target": "Mesh target to shrink to", 
        "use_invert_cull": "When projecting in the negative direction invert the face cull mode", 
        "use_negative_direction": "Allow vertices to move in the negative direction of axis", 
        "use_positive_direction": "Allow vertices to move in the positive direction of axis", 
        "vertex_group": "Vertex group name", 
        "wrap_mode": "Select how vertices are constrained to the target surface"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SimpleDeformModifier": {
      "fields": {
        "angle": "Angle of deformation", 
        "deform_axis": "Deform around local axis", 
        "factor": "Amount to deform object", 
        "invert_vertex_group": "Invert vertex group influence", 
        "limits": "Lower/Upper limits for deform", 
        "lock_x": "Do not allow deformation along the X axis", 
        "lock_y": "Do not allow deformation along the Y axis", 
        "lock_z": "Do not allow deformation along the Z axis", 
        "origin": "Offset the origin and orientation of the deformation", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SimplifyGpencilModifier": {
      "fields": {
        "distance": "Distance between points", 
        "factor": "Factor of Simplify", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "length": "Length of each segment", 
        "material": "Material name", 
        "mode": "How to simplify the stroke", 
        "pass_index": "Pass index", 
        "step": "Number of times to apply simplify"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "SkinModifier": {
      "fields": {
        "branch_smoothing": "Smooth complex geometry around branches", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "use_x_symmetry": "Avoid making unsymmetrical quads across the X axis", 
        "use_y_symmetry": "Avoid making unsymmetrical quads across the Y axis", 
        "use_z_symmetry": "Avoid making unsymmetrical quads across the Z axis"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SmokeCollSettings": {
      "fields": {
        "collision_type": "Collision type"
      }
    }, 
    "SmokeDomainSettings": {
      "fields": {
        "adapt_margin": "Margin added around fluid to minimize boundary interference", 
        "adapt_threshold": "Maximum amount of fluid cell can contain before it is considered empty", 
        "additional_res": "Maximum number of additional cells", 
        "alpha": "How much density affects smoke motion (higher value results in faster rising smoke)", 
        "amplify": "Enhance the resolution of smoke by this factor using noise", 
        "beta": "How much heat affects smoke motion (higher value results in faster rising smoke)", 
        "burning_rate": "Speed of the burning reaction (use larger values for smaller flame)", 
        "cache_file_format": "Select the file format to be used for caching", 
        "cell_size": "(read-only)    Cell Size", 
        "clipping": "Value under which voxels are considered empty space to optimize caching and rendering", 
        "coba_field": "Simulation field to color map", 
        "collision_collection": "Limit collisions to this collection", 
        "collision_extents": "Select which domain border will be treated as collision object", 
        "color_grid": "(read-only)    Smoke color grid", 
        "color_ramp": "(read-only)", 
        "data_depth": "Bit depth for writing all scalar (including vector) lower values reduce file size", 
        "density_grid": "(read-only)    Smoke density grid", 
        "display_interpolation": "Interpolation method to use for smoke/fire volumes in solid mode", 
        "display_thickness": "Thickness of smoke drawing in the viewport", 
        "dissolve_speed": "Dissolve Speed", 
        "domain_resolution": "(read-only)    Smoke Grid Resolution", 
        "effector_collection": "Limit effectors to this collection", 
        "effector_weights": "(read-only)", 
        "flame_grid": "(read-only)    Smoke flame grid", 
        "flame_ignition": "Minimum temperature of flames", 
        "flame_max_temp": "Maximum temperature of flames", 
        "flame_smoke": "Amount of smoke created by burning fuel", 
        "flame_smoke_color": "Color of smoke emitted from burning fuel", 
        "flame_vorticity": "Additional vorticity for the flames", 
        "fluid_collection": "Limit fluid objects to this collection", 
        "heat_grid": "(read-only)    Smoke heat grid", 
        "highres_sampling": "Method for sampling the high resolution flow", 
        "noise_type": "Noise method which is used for creating the high resolution", 
        "openvdb_cache_compress_type": "Compression method to be used", 
        "point_cache": "(read-only)", 
        "point_cache_compress_type": "Compression method to be used", 
        "resolution_max": "Maximal resolution used in the fluid domain", 
        "show_high_resolution": "Show high resolution (using amplification)", 
        "show_velocity": "Toggle visualization of the velocity field as needles", 
        "slice_depth": "Position of the slice", 
        "slice_method": "How to slice the volume for viewport rendering", 
        "slice_per_voxel": "How many slices per voxel should be generated", 
        "start_point": "(read-only)    Start point", 
        "strength": "Strength of noise", 
        "temperature_grid": "(read-only)    Smoke temperature grid, range 0..1 represents 0..1000K", 
        "time_scale": "Adjust simulation speed", 
        "use_adaptive_domain": "Adapt simulation resolution and size to fluid", 
        "use_color_ramp": "Render a simulation field while mapping its voxels values to the colors of a ramp", 
        "use_dissolve_smoke": "Enable smoke to disappear over time", 
        "use_dissolve_smoke_log": "Using 1/x", 
        "use_high_resolution": "Enable high resolution (using amplification)", 
        "vector_scale": "Multiplier for scaling the vectors", 
        "velocity_grid": "(read-only)    Smoke velocity grid", 
        "vorticity": "Amount of turbulence/rotation in fluid"
      }
    }, 
    "SmokeFlowSettings": {
      "fields": {
        "density_vertex_group": "Name of vertex group which determines surface emission rate", 
        "noise_texture": "Texture that controls emission strength", 
        "particle_size": "Particle size in simulation cells", 
        "particle_system": "Particle systems emitted from the object", 
        "smoke_color": "Color of smoke", 
        "smoke_flow_source": "Change how smoke is emitted", 
        "smoke_flow_type": "Change how flow affects the simulation", 
        "subframes": "Number of additional samples to take between frames to improve quality of fast moving flows", 
        "surface_distance": "Maximum distance from mesh surface to emit smoke", 
        "temperature": "Temperature difference to ambient temperature", 
        "texture_map_type": "Texture mapping type", 
        "texture_offset": "Z-offset of texture mapping", 
        "texture_size": "Size of texture mapping", 
        "use_absolute": "Only allow given density value in emitter area", 
        "use_initial_velocity": "Smoke has some initial velocity when it is emitted", 
        "use_particle_size": "Set particle size in simulation cells or use nearest cell", 
        "use_texture": "Use a texture to control emission strength", 
        "uv_layer": "UV map name", 
        "velocity_factor": "Multiplier of source velocity passed to smoke", 
        "velocity_normal": "Amount of normal directional velocity", 
        "velocity_random": "Amount of random velocity", 
        "volume_density": "Factor for smoke emitted from inside the mesh volume"
      }
    }, 
    "SmokeModifier": {
      "fields": {
        "coll_settings": "(read-only)", 
        "domain_settings": "(read-only)", 
        "flow_settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SmoothGpencilModifier": {
      "fields": {
        "factor": "Amount of smooth to apply", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "pass_index": "Pass index", 
        "step": "Number of times to apply smooth (high numbers can reduce fps)", 
        "use_edit_position": "The modifier affects the position of the point", 
        "use_edit_strength": "The modifier affects the color strength of the point", 
        "use_edit_thickness": "The modifier affects the thickness of the point", 
        "use_edit_uv": "The modifier affects the UV rotation factor of the point", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "SmoothModifier": {
      "fields": {
        "factor": "Strength of modifier effect", 
        "use_x": "Smooth object along X axis", 
        "use_y": "Smooth object along Y axis", 
        "use_z": "Smooth object along Z axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SoftBodyModifier": {
      "fields": {
        "point_cache": "(read-only)", 
        "settings": "(read-only)"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SoftBodySettings": {
      "fields": {
        "aero": "Make edges 'sail'", 
        "aerodynamics_type": "Method of calculating aerodynamic interaction", 
        "ball_damp": "Blending to inelastic collision", 
        "ball_size": "Absolute ball size or factor if not manually adjusted", 
        "ball_stiff": "Ball inflating pressure", 
        "bend": "Bending Stiffness", 
        "choke": "'Viscosity' inside collision target", 
        "collision_collection": "Limit colliders to this collection", 
        "collision_type": "Choose Collision Type", 
        "damping": "Edge spring friction", 
        "effector_weights": "(read-only)", 
        "error_threshold": "The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed", 
        "friction": "General media friction for point movements", 
        "fuzzy": "Fuzziness while on collision, high values make collision handling faster but less stable", 
        "goal_default": "Default Goal (vertex target position) value", 
        "goal_friction": "Goal (vertex target position) friction", 
        "goal_max": "Goal maximum, vertex weights are scaled to match this range", 
        "goal_min": "Goal minimum, vertex weights are scaled to match this range", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "gravity": "Apply gravitation to point movement", 
        "location_mass_center": "Location of center of mass", 
        "mass": "General Mass value", 
        "plastic": "Permanent deform", 
        "pull": "Edge spring stiffness when longer than rest length", 
        "push": "Edge spring stiffness when shorter than rest length", 
        "rotation_estimate": "Estimated rotation matrix", 
        "scale_estimate": "Estimated scale matrix", 
        "shear": "Shear Stiffness", 
        "speed": "Tweak timing for physics to control frequency and speed", 
        "spring_length": "Alter spring length to shrink/blow up (unit %) 0 to disable", 
        "step_max": "Maximal # solver steps/frame", 
        "step_min": "Minimal # solver steps/frame", 
        "use_auto_step": "Use velocities for automagic step sizes", 
        "use_diagnose": "Turn on SB diagnose console prints", 
        "use_edge_collision": "Edges collide too", 
        "use_edges": "Use Edges as springs", 
        "use_estimate_matrix": "Estimate matrix... split to COM, ROT, SCALE", 
        "use_face_collision": "Faces collide too, can be very slow", 
        "use_goal": "Define forces for vertices to stick to animated position", 
        "use_self_collision": "Enable naive vertex ball self collision", 
        "use_stiff_quads": "Add diagonal springs on 4-gons", 
        "vertex_group_goal": "Control point weight values", 
        "vertex_group_mass": "Control point mass values", 
        "vertex_group_spring": "Control point spring strength values"
      }
    }, 
    "SolidifyModifier": {
      "fields": {
        "edge_crease_inner": "Assign a crease to inner edges", 
        "edge_crease_outer": "Assign a crease to outer edges", 
        "edge_crease_rim": "Assign a crease to the edges making up the rim", 
        "invert_vertex_group": "Invert the vertex group influence", 
        "material_offset": "Offset material index of generated faces", 
        "material_offset_rim": "Offset material index of generated rim faces", 
        "offset": "Offset the thickness from the center", 
        "thickness": "Thickness of the shell", 
        "thickness_clamp": "Offset clamp based on geometry scale", 
        "thickness_vertex_group": "Thickness factor to use for zero vertex group influence", 
        "use_even_offset": "Maintain thickness by adjusting for sharp corners (slow, disable when not needed)", 
        "use_flip_normals": "Invert the face direction", 
        "use_quality_normals": "Calculate normals which result in more even thickness (slow, disable when not needed)", 
        "use_rim": "Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)", 
        "use_rim_only": "Only add the rim to the original data", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "Sound": {
      "fields": {
        "filepath": "Sound sample file used by this Sound data-block", 
        "packed_file": "(read-only)", 
        "use_memory_cache": "The sound file is decoded and loaded into RAM", 
        "use_mono": "If the file contains multiple audio channels they are rendered to a single one"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SoundSequence": {
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "pan": "Playback panning of the sound (only for Mono sources)", 
        "pitch": "Playback pitch of the sound", 
        "show_waveform": "Display the audio waveform inside the strip", 
        "sound": "Sound data-block used by this sequence", 
        "volume": "Playback volume of the sound"
      }, 
      "inherits": [
        "Sequence"
      ]
    }, 
    "Space": {
      "fields": {
        "type": "(read-only)    Space data type"
      }
    }, 
    "SpaceClipEditor": {
      "fields": {
        "clip": "Movie clip displayed and edited in this space", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "grease_pencil_source": "Where the grease pencil comes from", 
        "lock_selection": "Lock viewport to selected markers during playback", 
        "lock_time_cursor": "Lock curves view to time cursor during playback and tracking", 
        "mask": "Mask displayed and edited in this space", 
        "mask_display_type": "Display type for mask splines", 
        "mask_overlay_mode": "Overlay mode of rasterized mask", 
        "mode": "Editing context being displayed", 
        "path_length": "Length of displaying path, in frames", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "scopes": "(read-only)    Scopes to visualize movie clip statistics", 
        "show_annotation": "Show annotations for this view", 
        "show_blue_channel": "Show blue channel in the frame", 
        "show_bundles": "Show projection of 3D markers into footage", 
        "show_disabled": "Show disabled tracks from the footage", 
        "show_filters": "Show filters for graph editor", 
        "show_graph_frames": "Show curve for per-frame average error (camera motion should be solved first)", 
        "show_graph_hidden": "Include channels from objects/bone that aren't visible", 
        "show_graph_only_selected": "Only include channels relating to selected objects and data", 
        "show_graph_tracks_error": "Display the reprojection error curve for selected tracks", 
        "show_graph_tracks_motion": "Display the speed curves (in \"x\" direction red, in \"y\" direction green) for the selected tracks", 
        "show_green_channel": "Show green channel in the frame", 
        "show_grid": "Show grid showing lens distortion", 
        "show_marker_pattern": "Show pattern boundbox for markers", 
        "show_marker_search": "Show search boundbox for markers", 
        "show_metadata": "Show metadata of clip", 
        "show_names": "Show track names and status", 
        "show_red_channel": "Show red channel in the frame", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_stable": "Show stable footage in editor (if stabilization is enabled)", 
        "show_tiny_markers": "Show markers in a more compact manner", 
        "show_track_path": "Show path of how track moves", 
        "use_grayscale_preview": "Display frame in grayscale mode", 
        "use_manual_calibration": "Use manual calibration helpers", 
        "use_mute_footage": "Mute footage and show black background instead", 
        "view": "Type of the clip editor view"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceConsole": {
      "fields": {
        "font_size": "Font size to use for displaying the text", 
        "history": "(read-only)    Command history", 
        "language": "Command line prompt language", 
        "prompt": "Command line prompt", 
        "scrollback": "(read-only)    Command output"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceDopeSheetEditor": {
      "fields": {
        "action": "Action displayed and edited in this space", 
        "auto_snap": "Automatic time snapping settings for transformations", 
        "cache_cloth": "Show the active object's cloth point cache", 
        "cache_dynamicpaint": "Show the active object's Dynamic Paint cache", 
        "cache_particles": "Show the active object's particle point cache", 
        "cache_rigidbody": "Show the active object's Rigid Body cache", 
        "cache_smoke": "Show the active object's smoke cache", 
        "cache_softbody": "Show the active object's softbody point cache", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "mode": "Editing context being displayed", 
        "show_cache": "Show the status of cached frames in the timeline", 
        "show_extremes": "Mark keyframes where the key value flow changes direction, based on comparison with adjacent keys", 
        "show_group_colors": "Display groups and channels with colors matching their corresponding groups (pose bones only currently)", 
        "show_interpolation": "Display keyframe handle types and non-bezier interpolation modes", 
        "show_marker_lines": "Show a vertical line for every marker", 
        "show_pose_markers": "Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "ui_mode": "Editing context being displayed", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "use_marker_sync": "Sync Markers with keyframe edits", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceFileBrowser": {
      "fields": {
        "active_operator": "(read-only)", 
        "bookmarks": "(read-only)    User's bookmarks", 
        "bookmarks_active": "Index of active bookmark (-1 if none)", 
        "operator": "(read-only)", 
        "params": "(read-only)    Parameters and Settings for the Filebrowser", 
        "recent_folders": "(read-only)", 
        "recent_folders_active": "Index of active recent folder (-1 if none)", 
        "system_bookmarks": "(read-only)    System's bookmarks", 
        "system_bookmarks_active": "Index of active system bookmark (-1 if none)", 
        "system_folders": "(read-only)    System's folders (usually root, available hard drives, etc)", 
        "system_folders_active": "Index of active system folder (-1 if none)"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceGraphEditor": {
      "fields": {
        "auto_snap": "Automatic time snapping settings for transformations", 
        "cursor_position_x": "Graph Editor 2D-Value cursor - X-Value component", 
        "cursor_position_y": "Graph Editor 2D-Value cursor - Y-Value component", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "has_ghost_curves": "(read-only)    Graph Editor instance has some ghost curves stored", 
        "mode": "Editing context being displayed", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "show_cursor": "Show 2D cursor", 
        "show_group_colors": "Display groups and channels with colors matching their corresponding groups", 
        "show_handles": "Show handles of Bezier control points", 
        "show_marker_lines": "Show a vertical line for every marker", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "use_auto_normalization": "Automatically recalculate curve normalization on every curve edit", 
        "use_beauty_drawing": "Display F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)", 
        "use_normalization": "Display curves in normalized to -1..1 range, for easier editing of multiple curves with different ranges", 
        "use_only_selected_curves_handles": "Only keyframes of selected F-Curves are visible and editable", 
        "use_only_selected_keyframe_handles": "Only show and edit handles of selected keyframes", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceImageEditor": {
      "fields": {
        "cursor_location": "2D cursor location for this view", 
        "display_channels": "Channels of the image to draw", 
        "grease_pencil": "Grease pencil data for this space", 
        "image": "Image displayed and edited in this space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "mask": "Mask displayed and edited in this space", 
        "mask_display_type": "Display type for mask splines", 
        "mask_overlay_mode": "Overlay mode of rasterized mask", 
        "mode": "Editing context being displayed", 
        "pivot_point": "Rotation/Scaling Pivot", 
        "sample_histogram": "(read-only)    Sampled colors along line", 
        "scopes": "(read-only)    Scopes to visualize image statistics", 
        "show_annotation": "Show annotations for this view", 
        "show_maskedit": "(read-only)    Show Mask editing related properties", 
        "show_paint": "(read-only)    Show paint related properties", 
        "show_render": "(read-only)    Show render related properties", 
        "show_repeat": "Display the image repeated outside of the main view", 
        "show_stereo_3d": "Display the image in Stereo 3D", 
        "show_uvedit": "(read-only)    Show UV editing related properties", 
        "ui_mode": "Editing context being displayed", 
        "use_image_pin": "Display current image regardless of object selection", 
        "use_realtime_update": "Update other affected window spaces automatically to reflect changes during interactive operations such as transform", 
        "uv_editor": "(read-only)    UV editor settings", 
        "zoom": "(read-only)    Zoom factor"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceInfo": {
      "fields": {
        "show_report_debug": "Display debug reporting info", 
        "show_report_error": "Display error text", 
        "show_report_info": "Display general information", 
        "show_report_operator": "Display the operator log", 
        "show_report_warning": "Display warnings"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceNLA": {
      "fields": {
        "auto_snap": "Automatic time snapping settings for transformations", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "show_local_markers": "Show action-local markers on the strips, useful when synchronizing timing across strips", 
        "show_marker_lines": "Show a vertical line for every marker", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_strip_curves": "Show influence F-Curves on strips", 
        "use_realtime_update": "When transforming strips, changes to the animation data are flushed to other views"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceNodeEditor": {
      "fields": {
        "backdrop_channels": "Channels of the image to draw", 
        "backdrop_offset": "Backdrop offset", 
        "backdrop_zoom": "Backdrop zoom factor", 
        "cursor_location": "Location for adding new nodes", 
        "edit_tree": "(read-only)    Node tree being displayed and edited", 
        "id": "(read-only)    Data-block whose nodes are being edited", 
        "id_from": "(read-only)    Data-block from which the edited data-block is linked", 
        "insert_offset_direction": "Direction to offset nodes on insertion", 
        "node_tree": "Base node tree from context", 
        "path": "(read-only)    Path from the data-block to the currently edited node tree", 
        "pin": "Use the pinned node tree", 
        "shader_type": "Type of data to take shader from", 
        "show_annotation": "Show annotations for this view", 
        "show_backdrop": "Use active Viewer Node output as backdrop for compositing nodes", 
        "texture_type": "Type of data to take texture from", 
        "tree_type": "Node tree type to display and edit", 
        "use_auto_render": "Re-render and composite changed layers on 3D edits", 
        "use_insert_offset": "Automatically offset the following or previous nodes in a chain when inserting a new node"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceNodeEditorPath": {
      "fields": {
        "to_string": "(read-only)"
      }
    }, 
    "SpaceOutliner": {
      "fields": {
        "display_mode": "Type of information to display", 
        "filter_id_type": "Data-block type to show", 
        "filter_text": "Live search filtering string", 
        "show_restrict_column_enable": "Exclude from view layer", 
        "show_restrict_column_hide": "Temporarily hide in viewport", 
        "show_restrict_column_holdout": "Holdout", 
        "show_restrict_column_indirect_only": "Indirect only", 
        "show_restrict_column_render": "Globally disable in renders", 
        "show_restrict_column_select": "Selectable", 
        "show_restrict_column_viewport": "Globally disable in viewports", 
        "use_filter_case_sensitive": "Only use case sensitive matches of search string", 
        "use_filter_children": "Show children", 
        "use_filter_collection": "Show collections", 
        "use_filter_complete": "Only use complete matches of search string", 
        "use_filter_id_type": "Show only data-blocks of one type", 
        "use_filter_object": "Show objects", 
        "use_filter_object_armature": "Show armature objects", 
        "use_filter_object_camera": "Show camera objects", 
        "use_filter_object_content": "Show what is inside the objects elements", 
        "use_filter_object_empty": "Show empty objects", 
        "use_filter_object_light": "Show light objects", 
        "use_filter_object_mesh": "Show mesh objects", 
        "use_filter_object_others": "Show curves, lattices, light probes, fonts, ...", 
        "use_sync_select": "Sync outliner selection with other editors"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpacePreferences": {
      "fields": {
        "filter_text": "Search term for filtering in the UI", 
        "filter_type": "Filter method"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceProperties": {
      "fields": {
        "use_pin_id": "Use the pinned context"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceSequenceEditor": {
      "fields": {
        "display_channel": "The channel number shown in the image preview. 0 is the result of all strips combined", 
        "display_mode": "View mode to use for displaying sequencer output", 
        "grease_pencil": "Grease Pencil data for this Preview region", 
        "overlay_type": "Overlay draw type", 
        "preview_channels": "Channels of the preview to draw", 
        "proxy_render_size": "Display preview using full resolution or different proxy resolutions", 
        "show_annotation": "Show annotations for this view", 
        "show_backdrop": "Display result under strips", 
        "show_frames": "Display frames rather than seconds", 
        "show_marker_lines": "Show a vertical line for every marker", 
        "show_metadata": "Show metadata of first visible strip", 
        "show_overexposed": "Show overexposed areas with zebra stripes", 
        "show_safe_areas": "Show TV title safe and action safe areas in preview", 
        "show_safe_center": "Show safe areas to fit content in a different aspect ratio", 
        "show_seconds": "Show timing in seconds not frames", 
        "show_separate_color": "Separate color channels in preview", 
        "show_strip_offset": "Display strip in/out offsets", 
        "use_marker_sync": "Transform markers as well as strips", 
        "view_type": "Type of the Sequencer view (sequencer, preview or both)", 
        "waveform_display_type": "How Waveforms are drawn"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceTextEditor": {
      "fields": {
        "find_text": "Text to search for with the find tool", 
        "font_size": "Font size to use for displaying the text", 
        "margin_column": "Column number to show right margin at", 
        "replace_text": "Text to replace selected text with using the replace tool", 
        "show_line_highlight": "Highlight the current line", 
        "show_line_numbers": "Show line numbers next to the text", 
        "show_margin": "Show right margin", 
        "show_syntax_highlight": "Syntax highlight for scripting", 
        "show_word_wrap": "Wrap words if there is not enough horizontal space", 
        "tab_width": "Number of spaces to display tabs with", 
        "text": "Text displayed and edited in this space", 
        "top": "Top line visible", 
        "use_find_all": "Search in all text data-blocks, instead of only the active one", 
        "use_find_wrap": "Search again from the start of the file when reaching the end", 
        "use_live_edit": "Run python while editing", 
        "use_match_case": "Search string is sensitive to uppercase and lowercase letters", 
        "use_overwrite": "Overwrite characters when typing rather than inserting them", 
        "visible_lines": "(read-only)    Amount of lines that can be visible in current editor"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "SpaceUVEditor": {
      "fields": {
        "display_stretch_type": "Type of stretch to draw", 
        "edge_display_type": "Display style for UV edges", 
        "lock_bounds": "Constraint to stay within the image bounds while editing", 
        "pixel_snap_mode": "Snap UVs to pixels while editing", 
        "show_faces": "Display faces over the image", 
        "show_metadata": "Display metadata properties of the image", 
        "show_modified_edges": "Display edges after modifiers are applied", 
        "show_pixel_coords": "Display UV coordinates in pixels rather than from 0.0 to 1.0", 
        "show_smooth_edges": "Display UV edges anti-aliased", 
        "show_stretch": "Display faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)", 
        "show_texpaint": "Display overlay of texture paint uv layer", 
        "sticky_select_mode": "Automatically select also UVs sharing the same vertex as the ones being selected", 
        "use_live_unwrap": "Continuously unwrap the selected UV island while transforming pinned vertices"
      }
    }, 
    "SpaceView3D": {
      "fields": {
        "camera": "Active camera used in this view (when unlocked from the scene's active camera)", 
        "clip_end": "3D View far clipping distance", 
        "clip_start": "3D View near clipping distance (perspective view only)", 
        "fx_settings": "(read-only)    Options used for real time compositing", 
        "icon_from_show_object_viewport": "(read-only)", 
        "lens": "Viewport lens angle", 
        "local_view": "(read-only)    Display an isolated sub-set of objects, apart from the scene visibility", 
        "lock_bone": "3D View center is locked to this bone's position", 
        "lock_camera": "Enable view navigation within the camera view", 
        "lock_cursor": "3D View center is locked to the cursor's position", 
        "lock_object": "3D View center is locked to this object's position", 
        "overlay": "(read-only)    Settings for display of overlays in the 3D viewport", 
        "region_3d": "(read-only)    3D region in this space, in case of quad view the camera region", 
        "region_quadviews": "(read-only)    3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')", 
        "render_border_max_x": "Maximum X value for the render region", 
        "render_border_max_y": "Maximum Y value for the render region", 
        "render_border_min_x": "Minimum X value for the render region", 
        "render_border_min_y": "Minimum Y value for the render region", 
        "shading": "(read-only)    Settings for shading in the 3D viewport", 
        "show_bundle_names": "Show names for reconstructed tracks objects", 
        "show_camera_path": "Show reconstructed camera path", 
        "show_gizmo": "Show gizmos of all types", 
        "show_gizmo_camera_dof_distance": "Gizmo to adjust camera focus distance (depends on limits display)", 
        "show_gizmo_camera_lens": "Gizmo to adjust camera lens & ortho size", 
        "show_gizmo_context": "Context sensitive gizmos for the active item", 
        "show_gizmo_empty_force_field": "Gizmo to adjust the force field", 
        "show_gizmo_empty_image": "Gizmo to adjust image size and position", 
        "show_gizmo_light_look_at": "Gizmo to adjust the direction of the light", 
        "show_gizmo_light_size": "Gizmo to adjust spot and area size", 
        "show_gizmo_navigate": "Viewport navigation gizmo", 
        "show_gizmo_object_rotate": "Gizmo to adjust rotation", 
        "show_gizmo_object_scale": "Gizmo to adjust scale", 
        "show_gizmo_object_translate": "Gizmo to adjust location", 
        "show_gizmo_tool": "Active tool gizmo", 
        "show_reconstruction": "Display reconstruction data from active movie clip", 
        "show_stereo_3d_cameras": "Show the left and right cameras", 
        "show_stereo_3d_convergence_plane": "Show the stereo 3d convergence plane", 
        "show_stereo_3d_volume": "Show the stereo 3d frustum volume", 
        "stereo_3d_convergence_plane_alpha": "Opacity (alpha) of the convergence plane", 
        "stereo_3d_eye": "(read-only)    Current stereo eye being drawn", 
        "stereo_3d_volume_alpha": "Opacity (alpha) of the cameras' frustum volume", 
        "tracks_display_size": "Display size of tracks from reconstructed data", 
        "tracks_display_type": "Viewport display style for tracks", 
        "use_local_camera": "Use a local camera in this view, rather than scene's active camera", 
        "use_local_collections": "Display a different set of collections in this viewport", 
        "use_render_border": "Use a region within the frame size for rendered viewport(when not viewing through the camera)"
      }, 
      "inherits": [
        "Space"
      ]
    }, 
    "Speaker": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "attenuation": "How strong the distance affects volume, depending on distance model", 
        "cone_angle_inner": "Angle of the inner cone, in degrees, inside the cone the volume is 100 %", 
        "cone_angle_outer": "Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated", 
        "cone_volume_outer": "Volume outside the outer cone", 
        "distance_max": "Maximum distance for volume calculation, no matter how far away the object is", 
        "distance_reference": "Reference distance at which volume is 100 %", 
        "muted": "Mute the speaker", 
        "pitch": "Playback pitch of the sound", 
        "sound": "Sound data-block used by this speaker", 
        "volume": "How loud the sound is", 
        "volume_max": "Maximum volume, no matter how near the object is", 
        "volume_min": "Minimum volume, no matter how far away the object is"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "SpeedControlSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "multiply_speed": "Multiply the resulting speed after the speed factor", 
        "use_as_speed": "Interpret the value as speed instead of a frame number", 
        "use_scale_to_length": "Scale values from 0.0 to 1.0 to target sequence length"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "SPHFluidSettings": {
      "fields": {
        "buoyancy": "Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid", 
        "fluid_radius": "Fluid interaction radius", 
        "linear_viscosity": "Linear viscosity", 
        "plasticity": "How much the spring rest length can change after the elastic limit is crossed", 
        "repulsion": "How strongly the fluid tries to keep from clustering (factor of stiffness)", 
        "rest_density": "Fluid rest density", 
        "rest_length": "Spring rest length (factor of particle radius)", 
        "solver": "The code used to calculate internal forces on particles", 
        "spring_force": "Spring force", 
        "spring_frames": "Create springs for this number of frames since particles birth (0 is always)", 
        "stiff_viscosity": "Creates viscosity for expanding fluid", 
        "stiffness": "How incompressible the fluid is (speed of sound)", 
        "use_factor_density": "Density is calculated as a factor of default density (depends on particle size)", 
        "use_factor_radius": "Interaction radius is a factor of 4 * particle size", 
        "use_factor_repulsion": "Repulsion is a factor of stiffness", 
        "use_factor_rest_length": "Spring rest length is a factor of 2 * particle size", 
        "use_factor_stiff_viscosity": "Stiff viscosity is a factor of normal viscosity", 
        "use_initial_rest_length": "Use the initial length as spring rest length instead of 2 * particle size", 
        "use_viscoelastic_springs": "Use viscoelastic springs instead of Hooke's springs", 
        "yield_ratio": "How much the spring has to be stretched/compressed in order to change it's rest length"
      }
    }, 
    "Spline": {
      "fields": {
        "bezier_points": "(read-only)    Collection of points for Bezier curves only", 
        "character_index": "(read-only)    Location of this character in the text data (only for text curves)", 
        "hide": "Hide this curve in Edit mode", 
        "order_u": "NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)", 
        "order_v": "NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)", 
        "point_count_u": "(read-only)    Total number points for the curve or surface in the U direction", 
        "point_count_v": "(read-only)    Total number points for the surface on the V direction", 
        "points": "(read-only)    Collection of points that make up this poly or nurbs spline", 
        "radius_interpolation": "The type of radius interpolation for Bezier curves", 
        "resolution_u": "Curve or Surface subdivisions per segment", 
        "resolution_v": "Surface subdivisions per segment", 
        "tilt_interpolation": "The type of tilt interpolation for 3D, Bezier curves", 
        "type": "The interpolation type for this curve element", 
        "use_bezier_u": "Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)", 
        "use_bezier_v": "Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)", 
        "use_cyclic_u": "Make this curve or surface a closed loop in the U direction", 
        "use_cyclic_v": "Make this surface a closed loop in the V direction", 
        "use_endpoint_u": "Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)", 
        "use_endpoint_v": "Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)", 
        "use_smooth": "Smooth the normals of the surface or beveled curve"
      }
    }, 
    "SplineIKConstraint": {
      "fields": {
        "bulge": "Factor between volume variation and stretching", 
        "bulge_max": "Maximum volume stretching factor", 
        "bulge_min": "Minimum volume stretching factor", 
        "bulge_smooth": "Strength of volume stretching clamping", 
        "chain_count": "How many bones are included in the chain", 
        "joint_bindings": "(EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages", 
        "target": "Curve that controls this relationship", 
        "use_bulge_max": "Use upper limit for volume variation", 
        "use_bulge_min": "Use lower limit for volume variation", 
        "use_chain_offset": "Offset the entire chain relative to the root joint", 
        "use_curve_radius": "Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode", 
        "use_even_divisions": "Ignore the relative lengths of the bones when fitting to the curve", 
        "use_original_scale": "Apply volume preservation over the original scaling", 
        "xz_scale_mode": "Method used for determining the scaling of the X and Z axes of the bones", 
        "y_scale_mode": "Method used for determining the scaling of the Y axis of the bones, on top of the shape and scaling of the curve itself"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "SplinePoint": {
      "fields": {
        "co": "Point coordinates", 
        "hide": "Visibility status", 
        "radius": "Radius for beveling", 
        "select": "Selection status", 
        "tilt": "Tilt in 3D View", 
        "weight": "NURBS weight", 
        "weight_softbody": "Softbody goal weight"
      }
    }, 
    "SpotLight": {
      "fields": {
        "constant_coefficient": "Constant distance attenuation coefficient", 
        "contact_shadow_bias": "Bias to avoid self shadowing", 
        "contact_shadow_distance": "World space distance in which to search for screen space occluder", 
        "contact_shadow_thickness": "Pixel thickness used to detect occlusion", 
        "energy": "Amount of light emitted", 
        "falloff_curve": "(read-only)    Custom light falloff curve", 
        "falloff_type": "Intensity Decay with distance", 
        "linear_attenuation": "Linear distance attenuation", 
        "linear_coefficient": "Linear distance attenuation coefficient", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "quadratic_coefficient": "Quadratic distance attenuation coefficient", 
        "shadow_buffer_bias": "Bias for reducing self shadowing", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_color": "Color of shadows cast by the light", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "show_cone": "Draw transparent cone in 3D view to visualize which objects are contained in it", 
        "spot_blend": "The softness of the spotlight edge", 
        "spot_size": "Angle of the spotlight beam", 
        "use_contact_shadow": "Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps", 
        "use_square": "Cast a square spot light shape"
      }, 
      "inherits": [
        "ID", 
        "Light"
      ]
    }, 
    "Stereo3dDisplay": {
      "fields": {
        "use_interlace_swap": "Swap left and right stereo channels", 
        "use_sidebyside_crosseyed": "Right eye should see left image and vice-versa"
      }
    }, 
    "Stereo3dFormat": {
      "fields": {
        "use_interlace_swap": "Swap left and right stereo channels", 
        "use_sidebyside_crosseyed": "Right eye should see left image and vice-versa", 
        "use_squeezed_frame": "Combine both views in a squeezed image"
      }
    }, 
    "StretchToConstraint": {
      "fields": {
        "bulge": "Factor between volume variation and stretching", 
        "bulge_max": "Maximum volume stretching factor", 
        "bulge_min": "Minimum volume stretching factor", 
        "bulge_smooth": "Strength of volume stretching clamping", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "keep_axis": "Axis to maintain during stretch", 
        "rest_length": "Length at rest position", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_bulge_max": "Use upper limit for volume variation", 
        "use_bulge_min": "Use lower limit for volume variation", 
        "volume": "Maintain the object's volume as it stretches"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "StringProperty": {
      "fields": {
        "default": "(read-only)    string default value", 
        "length_max": "(read-only)    Maximum length of the string, 0 means unlimited"
      }, 
      "inherits": [
        "Property"
      ]
    }, 
    "Struct": {
      "fields": {
        "base": "(read-only)    Struct definition this is derived from", 
        "description": "(read-only)    Description of the Struct's purpose", 
        "functions": "(read-only)", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "name": "(read-only)    Human readable name", 
        "name_property": "(read-only)    Property that gives the name of the struct", 
        "nested": "(read-only)    Struct in which this struct is always nested, and to which it logically belongs", 
        "properties": "(read-only)    Properties in the struct", 
        "property_tags": "(read-only)    Tags that properties can use to influence behavior", 
        "translation_context": "(read-only)    Translation context of the struct's name"
      }
    }, 
    "StucciTexture": {
      "fields": {
        "noise_basis": "Noise basis used for turbulence", 
        "noise_scale": "Scaling for noise input", 
        "turbulence": "Turbulence of the noise"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "StudioLight": {
      "fields": {
        "has_specular_highlight_pass": "(read-only)    Studio light image file has separate \"diffuse\" and \"specular\" passes", 
        "index": "(read-only)", 
        "is_user_defined": "(read-only)", 
        "light_ambient": "(read-only)    Color of the ambient light that uniformly lit the scene", 
        "name": "(read-only)", 
        "path": "(read-only)", 
        "path_irr_cache": "(read-only)    Path where the irradiance cache is stored", 
        "path_sh_cache": "(read-only)    Path where the spherical harmonics cache is stored", 
        "solid_lights": "(read-only)    Lights user to display objects in solid draw mode", 
        "spherical_harmonics_coefficients": "(read-only)", 
        "type": "(read-only)"
      }
    }, 
    "SubdivGpencilModifier": {
      "fields": {
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "level": "Number of subdivisions", 
        "material": "Material name", 
        "pass_index": "Pass index", 
        "simple": "The modifier only add control points"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "SubsurfModifier": {
      "fields": {
        "levels": "Number of subdivisions to perform", 
        "quality": "Accuracy of vertex positions, lower value is faster but less precise", 
        "render_levels": "Number of subdivisions to perform when rendering", 
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "use_creases": "Use mesh edge crease information to sharpen edges", 
        "uv_smooth": "Controls how smoothing is applied to UVs"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "SubtractSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "SunLight": {
      "fields": {
        "angle": "Angular diameter of the Sun as seen from the Earth", 
        "contact_shadow_bias": "Bias to avoid self shadowing", 
        "contact_shadow_distance": "World space distance in which to search for screen space occluder", 
        "contact_shadow_thickness": "Pixel thickness used to detect occlusion", 
        "energy": "Amount of light emitted", 
        "shadow_buffer_bias": "Bias for reducing self shadowing", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_cascade_count": "Number of texture used by the cascaded shadow map", 
        "shadow_cascade_exponent": "Higher value increase resolution towards the viewpoint", 
        "shadow_cascade_fade": "How smooth is the transition between each cascade", 
        "shadow_cascade_max_distance": "End distance of the cascaded shadow map (only in perspective view)", 
        "shadow_color": "Color of shadows cast by the light", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "use_contact_shadow": "Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps"
      }, 
      "inherits": [
        "ID", 
        "Light"
      ]
    }, 
    "SurfaceCurve": {
      "fields": {
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID", 
        "Curve"
      ]
    }, 
    "SurfaceDeformModifier": {
      "fields": {
        "falloff": "Controls how much nearby polygons influence deformation", 
        "is_bound": "(read-only)    Whether geometry has been bound to target mesh", 
        "target": "Mesh object to deform with"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "TexMapping": {
      "fields": {
        "max": "Maximum value for clipping", 
        "min": "Minimum value for clipping", 
        "use_max": "Whether to use maximum clipping value", 
        "use_min": "Whether to use minimum clipping value", 
        "vector_type": "Type of vector that the mapping transforms"
      }
    }, 
    "TexPaintSlot": {
      "fields": {
        "is_valid": "(read-only)    Slot has a valid image and UV map", 
        "uv_layer": "Name of UV map"
      }
    }, 
    "Text": {
      "fields": {
        "current_character": "Index of current character in current line, and also start index of character in selection if one exists", 
        "current_line": "(read-only)    Current line, and start line of selection if one exists", 
        "current_line_index": "Index of current TextLine in TextLine collection", 
        "filepath": "Filename of the text file", 
        "indentation": "Use tabs or spaces for indentation", 
        "is_dirty": "(read-only)    Text file has been edited since last save", 
        "is_in_memory": "(read-only)    Text file is in memory, without a corresponding file on disk", 
        "is_modified": "(read-only)    Text file on disk is different than the one in memory", 
        "lines": "(read-only)    Lines of text", 
        "select_end_character": "Index of character after end of selection in the selection end line", 
        "select_end_line": "(read-only)    End line of selection", 
        "select_end_line_index": "Index of last TextLine in selection", 
        "use_module": "Run this text as a script on loading, Text name must end with \".py\""
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "TextCharacterFormat": {
      "fields": {
        "kerning": "Spacing between characters"
      }
    }, 
    "TextCurve": {
      "fields": {
        "align_x": "Text horizontal align from the object center", 
        "align_y": "Text vertical align from the object center", 
        "body": "Content of this text object", 
        "body_format": "(read-only)    Stores the style of each character", 
        "edit_format": "(read-only)    Editing settings character formatting", 
        "family": "Use Objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Duplication)", 
        "follow_curve": "Curve deforming text object", 
        "offset_x": "Horizontal offset from the object origin", 
        "offset_y": "Vertical offset from the object origin", 
        "overflow": "Handle the text behavior when it doesn't fit in the text boxes", 
        "shear": "Italic angle of the characters", 
        "small_caps_scale": "Scale of small capitals", 
        "text_boxes": "(read-only)", 
        "underline_position": "Vertical position of underline", 
        "use_fast_edit": "Don't fill polygons while editing", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }, 
      "inherits": [
        "ID", 
        "Curve"
      ]
    }, 
    "TextLine": {
      "fields": {
        "body": "Text in the line"
      }
    }, 
    "TextSequence": {
      "fields": {
        "align_x": "Align the text along the X axis, relative to the text midpoint", 
        "align_y": "Align the image along the Y axis, relative to the text midpoint", 
        "color": "Text color", 
        "font": "Font of the text. Falls back to the UI font by default", 
        "font_size": "Size of the text", 
        "input_count": "(read-only)", 
        "location": "Location of the text", 
        "text": "Text that will be displayed", 
        "use_shadow": "Display shadow behind text", 
        "wrap_width": "Word wrap width as factor, zero disables"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "Texture": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "color_ramp": "(read-only)", 
        "contrast": "Adjust the contrast of the texture", 
        "intensity": "Adjust the brightness of the texture", 
        "node_tree": "(read-only)    Node tree for node-based textures", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "use_clamp": "Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range", 
        "use_color_ramp": "Toggle color ramp operations", 
        "use_nodes": "Make this a node-based texture", 
        "use_preview_alpha": "Show Alpha in Preview Render"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "TextureNodeBricks": {
      "fields": {
        "offset_frequency": "Offset every N rows", 
        "squash_frequency": "Squash every N rows"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeCurveRGB": {
      "fields": {
        "mapping": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeCurveTime": {
      "fields": {
        "curve": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeGroup": {
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeImage": {
      "fields": {
        "image_user": "(read-only)    Parameters defining the image duration, offset and related settings"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeMath": {
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeMixRGB": {
      "fields": {
        "use_alpha": "Include alpha of second input in this operation", 
        "use_clamp": "Clamp result of the node to 0..1 range"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeTexture": {
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureNodeValToRGB": {
      "fields": {
        "color_ramp": "(read-only)"
      }, 
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ]
    }, 
    "TextureSlot": {
      "fields": {
        "blend_type": "Mode used to apply the texture", 
        "color": "Default color for textures that don't return RGB or when RGB to intensity is enabled", 
        "default_value": "Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard", 
        "name": "(read-only)    Texture slot name", 
        "offset": "Fine tune of the texture mapping X, Y and Z locations", 
        "output_node": "Which output node to use, for node-based textures", 
        "scale": "Set scaling for the texture's X, Y and Z sizes", 
        "texture": "Texture data-block used by this texture slot"
      }
    }, 
    "Theme": {
      "fields": {
        "bone_color_sets": "(read-only)", 
        "clip_editor": "(read-only)", 
        "console": "(read-only)", 
        "dopesheet_editor": "(read-only)", 
        "file_browser": "(read-only)", 
        "graph_editor": "(read-only)", 
        "image_editor": "(read-only)", 
        "info": "(read-only)", 
        "name": "Name of the theme", 
        "nla_editor": "(read-only)", 
        "node_editor": "(read-only)", 
        "outliner": "(read-only)", 
        "preferences": "(read-only)", 
        "properties": "(read-only)", 
        "sequence_editor": "(read-only)", 
        "statusbar": "(read-only)", 
        "text_editor": "(read-only)", 
        "topbar": "(read-only)", 
        "user_interface": "(read-only)", 
        "view_3d": "(read-only)"
      }
    }, 
    "ThemeBoneColorSet": {
      "fields": {
        "active": "Color used for active bones", 
        "normal": "Color used for the surface of bones", 
        "select": "Color used for selected bones", 
        "show_colored_constraints": "Allow the use of colors indicating constraints/keyed status"
      }
    }, 
    "ThemeClipEditor": {
      "fields": {
        "active_marker": "Color of active marker", 
        "disabled_marker": "Color of disabled marker", 
        "locked_marker": "Color of locked marker", 
        "marker": "Color of marker", 
        "marker_outline": "Color of marker's outline", 
        "path_after": "Color of path after current frame", 
        "path_before": "Color of path before current frame", 
        "path_keyframe_after": "Color of path after current frame", 
        "path_keyframe_before": "Color of path before current frame", 
        "selected_marker": "Color of selected marker", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list"
      }
    }, 
    "ThemeConsole": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeDopeSheet": {
      "fields": {
        "interpolation_line": "Color of lines showing non-bezier interpolation modes", 
        "keyframe": "Color of Keyframe", 
        "keyframe_border": "Color of keyframe border", 
        "keyframe_border_selected": "Color of selected keyframe border", 
        "keyframe_breakdown": "Color of breakdown keyframe", 
        "keyframe_breakdown_selected": "Color of selected breakdown keyframe", 
        "keyframe_extreme": "Color of extreme keyframe", 
        "keyframe_extreme_selected": "Color of selected extreme keyframe", 
        "keyframe_jitter": "Color of jitter keyframe", 
        "keyframe_jitter_selected": "Color of selected jitter keyframe", 
        "keyframe_movehold": "Color of moving hold keyframe", 
        "keyframe_movehold_selected": "Color of selected moving hold keyframe", 
        "keyframe_scale_factor": "Scale factor for adjusting the height of keyframes", 
        "keyframe_selected": "Color of selected keyframe", 
        "preview_range": "Color of preview range overlay", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list", 
        "summary": "Color of summary channel"
      }
    }, 
    "ThemeFileBrowser": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeFontStyle": {
      "fields": {
        "font_kerning_style": "Which style to use for font kerning", 
        "shadow": "Shadow size (0, 3 and 5 supported)", 
        "shadow_offset_x": "Shadow offset in pixels", 
        "shadow_offset_y": "Shadow offset in pixels", 
        "shadow_value": "Shadow color in gray value"
      }
    }, 
    "ThemeGradientColors": {
      "fields": {
        "show_grad": "Do a gradient for the background of the viewport working area"
      }
    }, 
    "ThemeGraphEditor": {
      "fields": {
        "preview_range": "Color of preview range overlay", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list"
      }
    }, 
    "ThemeImageEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeInfo": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeNLAEditor": {
      "fields": {
        "active_action": "Animation data-block has active action", 
        "active_action_unset": "Animation data-block doesn't have active action", 
        "dopesheet_channel": "Nonlinear Animation Channel", 
        "keyframe_border": "Color of keyframe border", 
        "keyframe_border_selected": "Color of selected keyframe border", 
        "meta_strips": "Meta Strip - Unselected (for grouping related strips)", 
        "meta_strips_selected": "Meta Strip - Selected (for grouping related strips)", 
        "nla_track": "Nonlinear Animation Track", 
        "preview_range": "Color of preview range overlay", 
        "sound_strips": "Sound Strip - Unselected (for timing speaker sounds)", 
        "sound_strips_selected": "Sound Strip - Selected (for timing speaker sounds)", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list", 
        "strips": "Action-Clip Strip - Unselected", 
        "strips_selected": "Action-Clip Strip - Selected", 
        "transition_strips": "Transition Strip - Unselected", 
        "transition_strips_selected": "Transition Strip - Selected", 
        "tweak": "Color for strip/action being 'tweaked' or edited", 
        "tweak_duplicate": "Warning/error indicator color for strips referencing the strip being tweaked"
      }
    }, 
    "ThemeNodeEditor": {
      "fields": {
        "noodle_curving": "Curving of the noodle", 
        "space": "(read-only)    Settings for space", 
        "space_list": "(read-only)    Settings for space list"
      }
    }, 
    "ThemeOutliner": {
      "fields": {
        "row_alternate": "Overlay color on every other row", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemePreferences": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeProperties": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeSequenceEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeSpaceGeneric": {
      "fields": {
        "panelcolors": "(read-only)"
      }
    }, 
    "ThemeSpaceGradient": {
      "fields": {
        "gradients": "(read-only)", 
        "panelcolors": "(read-only)"
      }
    }, 
    "ThemeStatusBar": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeStyle": {
      "fields": {
        "panel_title": "(read-only)", 
        "widget": "(read-only)", 
        "widget_label": "(read-only)"
      }
    }, 
    "ThemeTextEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeTopBar": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeUserInterface": {
      "fields": {
        "editor_outline": "Color of the outline of the editors and their round corners", 
        "icon_alpha": "Transparency of icons in the interface, to reduce contrast", 
        "icon_border_intensity": "Control the intensity of the border around themes icons", 
        "icon_folder": "Color of folders in the file browser", 
        "icon_saturation": "Saturation of icons in the interface", 
        "menu_shadow_fac": "Blending factor for menu shadows", 
        "menu_shadow_width": "Width of menu shadows, set to zero to disable", 
        "wcol_box": "(read-only)", 
        "wcol_list_item": "(read-only)", 
        "wcol_menu": "(read-only)", 
        "wcol_menu_back": "(read-only)", 
        "wcol_menu_item": "(read-only)", 
        "wcol_num": "(read-only)", 
        "wcol_numslider": "(read-only)", 
        "wcol_option": "(read-only)", 
        "wcol_pie_menu": "(read-only)", 
        "wcol_progress": "(read-only)", 
        "wcol_pulldown": "(read-only)", 
        "wcol_radio": "(read-only)", 
        "wcol_regular": "(read-only)", 
        "wcol_scroll": "(read-only)", 
        "wcol_state": "(read-only)", 
        "wcol_tab": "(read-only)", 
        "wcol_text": "(read-only)", 
        "wcol_toggle": "(read-only)", 
        "wcol_tool": "(read-only)", 
        "wcol_toolbar_item": "(read-only)", 
        "wcol_tooltip": "(read-only)", 
        "widget_emboss": "Color of the 1px shadow line underlying widgets"
      }
    }, 
    "ThemeView3D": {
      "fields": {
        "object_origin_size": "Diameter in Pixels for Object/Light origin display", 
        "space": "(read-only)    Settings for space", 
        "text_grease_pencil": "Color for indicating Grease Pencil keyframes", 
        "text_keyframe": "Color for indicating Object keyframes", 
        "wire_edit": "Color for wireframe when in edit mode, but edge selection is active"
      }
    }, 
    "ThemeWidgetColors": {
      "fields": {
        "roundness": "Amount of edge rounding"
      }
    }, 
    "ThickGpencilModifier": {
      "fields": {
        "curve": "(read-only)    Custom Thickness Curve", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "invert_vertex": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "normalize_thickness": "Normalize the full stroke to modifier thickness", 
        "pass_index": "Pass index", 
        "thickness": "Factor of thickness change", 
        "use_custom_curve": "Use a custom curve to define thickness changes", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "TimeGpencilModifier": {
      "fields": {
        "frame_end": "Final frame of the range", 
        "frame_scale": "Evaluation time in seconds", 
        "frame_start": "First frame of the range", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "offset": "Number of frames to offset original keyframe number or frame to fix", 
        "use_custom_frame_range": "Define a custom range of frames to use in modifier", 
        "use_keep_loop": "Retiming end frames and move to start of animation to keep loop"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "TimelineMarker": {
      "fields": {
        "camera": "Camera that becomes active on this frame", 
        "frame": "The frame on which the timeline marker appears", 
        "select": "Marker selection state"
      }
    }, 
    "Timer": {
      "fields": {
        "time_delta": "(read-only)    Time since last step in seconds", 
        "time_duration": "(read-only)    Time since last step in seconds", 
        "time_step": "(read-only)"
      }
    }, 
    "TintGpencilModifier": {
      "fields": {
        "color": "Color used for tinting", 
        "create_materials": "When apply modifier, create new material", 
        "factor": "Factor for mixing color", 
        "invert_layer_pass": "Inverse filter", 
        "invert_layers": "Inverse filter", 
        "invert_material_pass": "Inverse filter", 
        "invert_materials": "Inverse filter", 
        "layer": "Layer name", 
        "layer_pass": "Layer pass index", 
        "material": "Material name", 
        "modify_color": "Set what colors of the stroke are affected", 
        "pass_index": "Pass index"
      }, 
      "inherits": [
        "GpencilModifier"
      ]
    }, 
    "ToolSettings": {
      "fields": {
        "annotation_stroke_placement_view3d": "How annotation strokes are orientated in 3D space", 
        "annotation_thickness": "Thickness of annotation strokes", 
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones", 
        "curve_paint_settings": "(read-only)", 
        "double_threshold": "Threshold distance for Auto Merge", 
        "gpencil_interpolate": "(read-only)    Settings for Grease Pencil Interpolation tools", 
        "gpencil_paint": "(read-only)", 
        "gpencil_sculpt": "(read-only)    Settings for stroke sculpting tools and brushes", 
        "image_paint": "(read-only)", 
        "keyframe_type": "Type of keyframes to create when inserting keyframes", 
        "lock_markers": "Prevent marker editing", 
        "lock_object_mode": "Restrict select to the current mode", 
        "mesh_select_mode": "Which mesh elements selection works on", 
        "normal_vector": "Normal Vector used to copy, add or multiply", 
        "particle_edit": "(read-only)", 
        "proportional_edit_falloff": "Falloff type for proportional editing mode", 
        "proportional_size": "Display size for proportional editing circle", 
        "sculpt": "(read-only)", 
        "show_uv_local_view": "Display only faces with the currently displayed image assigned", 
        "snap_elements": "Type of element to snap to", 
        "snap_node_element": "Type of element to snap to", 
        "snap_target": "Which part to snap onto the target", 
        "snap_uv_element": "Type of element to snap to", 
        "statvis": "(read-only)", 
        "transform_pivot_point": "Pivot center for rotation/scaling", 
        "unified_paint_settings": "(read-only)", 
        "use_auto_normalize": "Ensure all bone-deforming vertex groups add up to 1.0 while weight painting", 
        "use_edge_path_live_unwrap": "Changing edges seam re-calculates UV unwrap", 
        "use_gpencil_draw_additive": "When creating new frames, the strokes from the previous/active frame are included as the basis for the new one", 
        "use_gpencil_draw_onback": "When draw new strokes, the new stroke is drawn below of all strokes in the layer", 
        "use_gpencil_select_mask_point": "Only sculpt selected stroke points", 
        "use_gpencil_select_mask_segment": "Only sculpt selected stroke points between other strokes", 
        "use_gpencil_select_mask_stroke": "Only sculpt selected stroke", 
        "use_gpencil_stroke_endpoints": "Only use the first and last parts of the stroke for snapping", 
        "use_gpencil_thumbnail_list": "Show compact list of color instead of thumbnails", 
        "use_gpencil_weight_data_add": "When creating new strokes, the weight data is added according to the current vertex group and weight, if no vertex group selected, weight is not added", 
        "use_keyframe_cycle_aware": "For channels with cyclic extrapolation, keyframe insertion is automatically remapped inside the cycle time range, and keeps ends in sync", 
        "use_keyframe_insert_auto": "Automatic keyframe insertion for Objects and Bones", 
        "use_keyframe_insert_keyingset": "Automatic keyframe insertion using active Keying Set only", 
        "use_mesh_automerge": "Automatically merge vertices moved to the same location", 
        "use_mesh_automerge_and_split": "Automatically split edges and faces", 
        "use_multipaint": "Paint across the weights of all selected bones, maintaining their relative influence", 
        "use_proportional_action": "Proportional editing in action editor", 
        "use_proportional_connected": "Proportional Editing using connected geometry only", 
        "use_proportional_edit": "Proportional edit mode", 
        "use_proportional_edit_mask": "Proportional editing mask mode", 
        "use_proportional_edit_objects": "Proportional editing object mode", 
        "use_proportional_fcurve": "Proportional editing in FCurve editor", 
        "use_proportional_projected": "Proportional Editing using screen space locations", 
        "use_record_with_nla": "Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking", 
        "use_snap": "Snap during transform", 
        "use_snap_align_rotation": "Align rotation with the snapping target", 
        "use_snap_grid_absolute": "Absolute grid alignment while translating (based on the pivot center)", 
        "use_snap_peel_object": "Consider objects as whole when finding volume center", 
        "use_snap_project": "Project individual elements on the surface of other objects", 
        "use_snap_rotate": "Rotate is affected by the snapping settings", 
        "use_snap_scale": "Scale is affected by snapping settings", 
        "use_snap_self": "Snap onto itself (Edit Mode Only)", 
        "use_snap_translate": "Move is affected by snapping settings", 
        "use_transform_data_origin": "Manipulate object data", 
        "use_transform_pivot_point_align": "Manipulate origins (object, pose and weight paint mode only)", 
        "use_transform_skip_children": "Don't transform children", 
        "use_uv_select_sync": "Keep UV and edit mode mesh selection in sync", 
        "uv_relax_method": "Algorithm used for UV relaxation", 
        "uv_sculpt": "(read-only)", 
        "uv_sculpt_all_islands": "Brush operates on all islands", 
        "uv_sculpt_lock_borders": "Disable editing of boundary edges", 
        "uv_select_mode": "UV selection and display mode", 
        "vertex_group_subset": "Filter Vertex groups for Display", 
        "vertex_group_user": "Display unweighted vertices", 
        "vertex_group_weight": "Weight to assign in vertex groups", 
        "vertex_paint": "(read-only)", 
        "weight_paint": "(read-only)"
      }
    }, 
    "TrackToConstraint": {
      "fields": {
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "track_axis": "Axis that points to the target object", 
        "up_axis": "Axis that points upward", 
        "use_bbone_shape": "Follow shape of B-Bone segments when calculating Head/Tail position", 
        "use_target_z": "Target's Z axis, not World Z axis, will constraint the Up direction"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformCacheConstraint": {
      "fields": {
        "object_path": "Path to the object in the Alembic archive used to lookup the transform matrix"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformConstraint": {
      "fields": {
        "from_max_x": "Top range of X axis source motion", 
        "from_max_x_rot": "Top range of X axis source motion", 
        "from_max_x_scale": "Top range of X axis source motion", 
        "from_max_y": "Top range of Y axis source motion", 
        "from_max_y_rot": "Top range of Y axis source motion", 
        "from_max_y_scale": "Top range of Y axis source motion", 
        "from_max_z": "Top range of Z axis source motion", 
        "from_max_z_rot": "Top range of Z axis source motion", 
        "from_max_z_scale": "Top range of Z axis source motion", 
        "from_min_x": "Bottom range of X axis source motion", 
        "from_min_x_rot": "Bottom range of X axis source motion", 
        "from_min_x_scale": "Bottom range of X axis source motion", 
        "from_min_y": "Bottom range of Y axis source motion", 
        "from_min_y_rot": "Bottom range of Y axis source motion", 
        "from_min_y_scale": "Bottom range of Y axis source motion", 
        "from_min_z": "Bottom range of Z axis source motion", 
        "from_min_z_rot": "Bottom range of Z axis source motion", 
        "from_min_z_scale": "Bottom range of Z axis source motion", 
        "from_rotation_mode": "Specify the type of rotation channels to use", 
        "map_from": "The transformation type to use from the target", 
        "map_to": "The transformation type to affect of the constrained object", 
        "map_to_x_from": "The source axis constrained object's X axis uses", 
        "map_to_y_from": "The source axis constrained object's Y axis uses", 
        "map_to_z_from": "The source axis constrained object's Z axis uses", 
        "mix_mode": "Specify how to combine the new location with original", 
        "mix_mode_rot": "Specify how to combine the new rotation with original", 
        "mix_mode_scale": "Specify how to combine the new scale with original", 
        "subtarget": "Armature bone, mesh or lattice vertex group, ...", 
        "target": "Target object", 
        "to_euler_order": "Explicitly specify the output euler rotation order", 
        "to_max_x": "Top range of X axis destination motion", 
        "to_max_x_rot": "Top range of X axis destination motion", 
        "to_max_x_scale": "Top range of X axis destination motion", 
        "to_max_y": "Top range of Y axis destination motion", 
        "to_max_y_rot": "Top range of Y axis destination motion", 
        "to_max_y_scale": "Top range of Y axis destination motion", 
        "to_max_z": "Top range of Z axis destination motion", 
        "to_max_z_rot": "Top range of Z axis destination motion", 
        "to_max_z_scale": "Top range of Z axis destination motion", 
        "to_min_x": "Bottom range of X axis destination motion", 
        "to_min_x_rot": "Bottom range of X axis destination motion", 
        "to_min_x_scale": "Bottom range of X axis destination motion", 
        "to_min_y": "Bottom range of Y axis destination motion", 
        "to_min_y_rot": "Bottom range of Y axis destination motion", 
        "to_min_y_scale": "Bottom range of Y axis destination motion", 
        "to_min_z": "Bottom range of Z axis destination motion", 
        "to_min_z_rot": "Bottom range of Z axis destination motion", 
        "to_min_z_scale": "Bottom range of Z axis destination motion", 
        "use_motion_extrapolate": "Extrapolate ranges"
      }, 
      "inherits": [
        "Constraint"
      ]
    }, 
    "TransformOrientation": {
      "fields": {
        "name": "Name of the custom transform orientation"
      }
    }, 
    "TransformOrientationSlot": {
      "fields": {
        "custom_orientation": "(read-only)", 
        "type": "Transformation orientation", 
        "use": "Use scene orientation instead of a custom setting"
      }
    }, 
    "TransformSequence": {
      "fields": {
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)", 
        "interpolation": "Method to determine how missing pixels are created", 
        "rotation_start": "Degrees to rotate the input", 
        "scale_start_x": "Amount to scale the input in the X axis", 
        "scale_start_y": "Amount to scale the input in the Y axis", 
        "translate_start_x": "Amount to move the input on the X axis", 
        "translate_start_y": "Amount to move the input on the Y axis", 
        "translation_unit": "Unit of measure to translate the input", 
        "use_uniform_scale": "Scale uniformly, preserving aspect ratio"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "TriangulateModifier": {
      "fields": {
        "keep_custom_normals": "Try to preserve custom normals (WARNING: depending on chosen triangulation method, shading may not be fully preserved, 'Fixed' method usually gives the best result here)", 
        "min_vertices": "Triangulate only polygons with vertex count greater than or equal to this number", 
        "ngon_method": "Method for splitting the polygons into triangles", 
        "quad_method": "Method for splitting the quads into triangles"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "UILayout": {
      "fields": {
        "activate_init": "When true, buttons defined in popups will be activated on first display (use so you can type into a field without having to click on it first)", 
        "active_default": "When true, an operator button defined after this will be activated when pressing return(use with popup dialogs)", 
        "direction": "(read-only)", 
        "enabled": "When false, this (sub)layout is grayed out", 
        "scale_x": "Scale factor along the X for items in this (sub)layout", 
        "scale_y": "Scale factor along the Y for items in this (sub)layout", 
        "ui_units_x": "Fixed Size along the X for items in this (sub)layout", 
        "ui_units_y": "Fixed Size along the Y for items in this (sub)layout"
      }
    }, 
    "UIList": {
      "fields": {
        "bitflag_filter_item": "(read-only)    The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)", 
        "bl_idname": "If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is \"OBJECT_UL_vgroups\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_UL_vgroups\")", 
        "filter_name": "Only show items matching this name (use '*' as wildcard)", 
        "layout_type": "(read-only)", 
        "use_filter_invert": "Invert filtering (show hidden items, and vice-versa)", 
        "use_filter_show": "Show filtering options", 
        "use_filter_sort_alpha": "Sort items by their name", 
        "use_filter_sort_lock": "Lock the order of shown items (user cannot change it)", 
        "use_filter_sort_reverse": "Reverse the order of shown items"
      }
    }, 
    "UIPieMenu": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "UIPopover": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "UIPopupMenu": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "UnifiedPaintSettings": {
      "fields": {
        "size": "Radius of the brush", 
        "strength": "How powerful the effect of the brush is when applied", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_locked_size": "Measure brush size relative to the view or the scene", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "use_unified_color": "Instead of per-brush color, the color is shared across brushes", 
        "use_unified_size": "Instead of per-brush radius, the radius is shared across brushes", 
        "use_unified_strength": "Instead of per-brush strength, the strength is shared across brushes", 
        "use_unified_weight": "Instead of per-brush weight, the weight is shared across brushes", 
        "weight": "Weight to assign in vertex groups"
      }
    }, 
    "UnitSettings": {
      "fields": {
        "length_unit": "Unit that will be used to display length values", 
        "mass_unit": "Unit that will be used to display mass values", 
        "scale_length": "Scale to use when converting between blender units and dimensions. When working at microscopic or astronomical scale, a small or large unit scale respectively can be used to avoid numerical precision problems", 
        "system": "The unit system to use for user interface controls", 
        "system_rotation": "Unit to use for displaying/editing rotation values", 
        "time_unit": "Unit that will be used to display time values", 
        "use_separate": "Display units in pairs (e.g. 1m 0cm)"
      }
    }, 
    "UserSolidLight": {
      "fields": {
        "diffuse_color": "Color of the light's diffuse highlight", 
        "direction": "Direction that the light is shining", 
        "smooth": "Smooth the lighting from this light", 
        "specular_color": "Color of the light's specular highlight", 
        "use": "Enable this light in solid draw mode"
      }
    }, 
    "UVLoopLayers": {
      "fields": {
        "active": "Active UV loop layer", 
        "active_index": "Active UV loop layer index"
      }
    }, 
    "UVProjectModifier": {
      "fields": {
        "projector_count": "Number of projectors to use", 
        "projectors": "(read-only)", 
        "uv_layer": "UV map name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "UVProjector": {
      "fields": {
        "object": "Object to use as projector transform"
      }
    }, 
    "UVWarpModifier": {
      "fields": {
        "axis_u": "Pole axis for rotation", 
        "axis_v": "Pole axis for rotation", 
        "bone_from": "Bone defining offset", 
        "bone_to": "Bone defining offset", 
        "center": "Center point for rotate/scale", 
        "object_from": "Object defining offset", 
        "object_to": "Object defining offset", 
        "uv_layer": "UV Layer name", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VectorFont": {
      "fields": {
        "packed_file": "(read-only)"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "VertexGroup": {
      "fields": {
        "index": "(read-only)    Index number of the vertex group", 
        "lock_weight": "Maintain the relative weights for the group", 
        "name": "Vertex group name"
      }
    }, 
    "VertexGroupElement": {
      "fields": {
        "group": "(read-only)", 
        "weight": "Vertex Weight"
      }
    }, 
    "VertexGroups": {
      "fields": {
        "active": "(read-only)    Vertex groups of the object", 
        "active_index": "Active index in vertex group array"
      }
    }, 
    "VertexPaint": {
      "fields": {
        "radial_symmetry": "Number of times to copy strokes across the surface", 
        "use_group_restrict": "Restrict painting to vertices in the group"
      }, 
      "inherits": [
        "Paint"
      ]
    }, 
    "VertexWeightEditModifier": {
      "fields": {
        "add_threshold": "Lower bound for a vertex's weight to be added to the vgroup", 
        "default_weight": "Default weight a vertex will have if it is not in the vgroup", 
        "falloff_type": "How weights are mapped to their new values", 
        "map_curve": "(read-only)    Custom mapping curve", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "remove_threshold": "Upper bound for a vertex's weight to be removed from the vgroup", 
        "use_add": "Add vertices with weight over threshold to vgroup", 
        "use_remove": "Remove vertices with weight below threshold from vgroup", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VertexWeightMixModifier": {
      "fields": {
        "default_weight_a": "Default weight a vertex will have if it is not in the first A vgroup", 
        "default_weight_b": "Default weight a vertex will have if it is not in the second B vgroup", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "mix_mode": "How weights from vgroup B affect weights of vgroup A", 
        "mix_set": "Which vertices should be affected", 
        "vertex_group_a": "First vertex group name", 
        "vertex_group_b": "Second vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "VertexWeightProximityModifier": {
      "fields": {
        "falloff_type": "How weights are mapped to their new values", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_texture": "Masking texture", 
        "mask_vertex_group": "Masking vertex group name", 
        "max_dist": "Distance mapping to weight 1.0", 
        "min_dist": "Distance mapping to weight 0.0", 
        "proximity_geometry": "Use the shortest computed distance to target object's geometry as weight", 
        "proximity_mode": "Which distances to target object to use", 
        "target": "Object to calculate vertices distances from", 
        "vertex_group": "Vertex group name"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "View3DCursor": {
      "fields": {
        "matrix": "Matrix combining loc/rot of the cursor", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "rotation_euler": "3D rotation", 
        "rotation_quaternion": "Rotation in quaternions (keep normalized)"
      }
    }, 
    "View3DOverlay": {
      "fields": {
        "backwire_opacity": "Opacity when rendering transparent wires", 
        "gpencil_fade_layer": "Fade layer opacity for Grease Pencil layers except the active one", 
        "gpencil_grid_opacity": "Canvas grid opacity", 
        "gpencil_paper_opacity": "Fade factor", 
        "grid_lines": "Number of grid lines to display in perspective view", 
        "grid_scale": "Distance between 3D View grid lines", 
        "grid_scale_unit": "(read-only)    Grid cell size scaled by scene unit system settings", 
        "grid_subdivisions": "Number of subdivisions between grid lines", 
        "normals_length": "Display size for normals in the 3D view", 
        "show_annotation": "Show annotations for this view", 
        "show_axis_x": "Show the X axis line", 
        "show_axis_y": "Show the Y axis line", 
        "show_axis_z": "Show the Z axis line", 
        "show_bones": "Display bones (disable to show motion paths only)", 
        "show_cursor": "Display 3D Cursor Overlay", 
        "show_curve_handles": "Display Bezier handles in editmode", 
        "show_curve_normals": "Display 3D curve normals in editmode", 
        "show_edge_bevel_weight": "Display weights created for the Bevel modifier", 
        "show_edge_crease": "Display creases created for Subdivision Surface modifier", 
        "show_edge_seams": "Display UV unwrapping seams", 
        "show_edge_sharp": "Display sharp edges, used with the Edge Split modifier", 
        "show_edges": "Highlight selected edges", 
        "show_extra_edge_angle": "Display selected edge angle, using global values when set in the transform panel", 
        "show_extra_edge_length": "Display selected edge lengths, using global values when set in the transform panel", 
        "show_extra_face_angle": "Display the angles in the selected edges, using global values when set in the transform panel", 
        "show_extra_face_area": "Display the area of selected faces, using global values when set in the transform panel", 
        "show_extra_indices": "Display the index numbers of selected vertices, edges, and faces", 
        "show_extras": "Object details, including empty wire, cameras and other visual guides", 
        "show_face_center": "Display face center", 
        "show_face_normals": "Display face normals as lines", 
        "show_face_orientation": "Show the Face Orientation Overlay", 
        "show_faces": "Highlight selected faces", 
        "show_floor": "Show the ground plane grid", 
        "show_freestyle_edge_marks": "Display Freestyle edge marks, used with the Freestyle renderer", 
        "show_freestyle_face_marks": "Display Freestyle face marks, used with the Freestyle renderer", 
        "show_look_dev": "Show look development spheres", 
        "show_motion_paths": "Show the Motion Paths Overlay", 
        "show_object_origins": "Show object center dots", 
        "show_object_origins_all": "Show the object origin center dot for all (selected and unselected) objects", 
        "show_occlude_wire": "Use hidden wireframe display", 
        "show_onion_skins": "Show the Onion Skinning Overlay", 
        "show_ortho_grid": "Show grid in othographic side view", 
        "show_outline_selected": "Show an outline highlight around selected objects", 
        "show_overlays": "Display overlays like gizmos and outlines", 
        "show_paint_wire": "Use wireframe display in painting modes", 
        "show_relationship_lines": "Show dashed lines indicating parent or constraint relationships", 
        "show_split_normals": "Display vertex-per-face normals as lines", 
        "show_statvis": "Display statistical information about the mesh", 
        "show_text": "Display overlay text", 
        "show_vertex_normals": "Display vertex normals as lines", 
        "show_weight": "Display weights in editmode", 
        "show_wireframes": "Show face edges wires", 
        "show_wpaint_contours": "Show contour lines formed by points with the same interpolated weight", 
        "show_xray_bone": "Show the bone selection overlay", 
        "texture_paint_mode_opacity": "Opacity of the texture paint mode stencil mask overlay", 
        "use_gpencil_edit_lines": "Show edit lines when editing strokes", 
        "use_gpencil_fade_layers": "Toggle fading of Grease Pencil layers except the active one", 
        "use_gpencil_fade_objects": "Fade Grease Pencil Objects, except the active one", 
        "use_gpencil_grid": "Display a grid over grease pencil paper", 
        "use_gpencil_multiedit_line_only": "Only show edit lines for additional frames", 
        "use_gpencil_onion_skin": "Show ghosts of the keyframes before and after the current frame", 
        "use_gpencil_paper": "Fade all viewport objects with a full color layer to improve visibility", 
        "vertex_opacity": "Opacity for edit vertices", 
        "vertex_paint_mode_opacity": "Opacity of the vertex paint mode overlay", 
        "weight_paint_mode_opacity": "Opacity of the weight paint mode overlay", 
        "wireframe_threshold": "Adjust the number of wires displayed (1 for all wires)", 
        "xray_alpha_bone": "Opacity to use for bone selection"
      }
    }, 
    "View3DShading": {
      "fields": {
        "background_color": "Color for custom background color", 
        "background_type": "Way to draw the background", 
        "cavity_ridge_factor": "Factor for the cavity ridges", 
        "cavity_type": "Way to draw the cavity shading", 
        "cavity_valley_factor": "Factor for the cavity valleys", 
        "color_type": "Color Type", 
        "curvature_ridge_factor": "Factor for the curvature ridges", 
        "curvature_valley_factor": "Factor for the curvature valleys", 
        "cycles": "(read-only)", 
        "light": "Lighting Method for Solid/Texture Viewport Shading", 
        "object_outline_color": "Color for object outline", 
        "selected_studio_light": "(read-only)    Selected StudioLight", 
        "shadow_intensity": "Darkness of shadows", 
        "show_backface_culling": "Use back face culling to hide the back side of faces", 
        "show_cavity": "Show Cavity", 
        "show_object_outline": "Show Object Outline", 
        "show_shadows": "Show Shadow", 
        "show_specular_highlight": "Render specular highlights", 
        "show_xray": "Show whole scene transparent", 
        "show_xray_wireframe": "Show whole scene transparent", 
        "single_color": "Color for single color mode", 
        "studio_light": "Studio lighting setup", 
        "studiolight_background_alpha": "Show the studiolight in the background", 
        "studiolight_intensity": "Strength of the studiolight", 
        "studiolight_rotate_z": "Rotation of the studiolight around the Z-Axis", 
        "type": "Method to display/shade objects in the 3D View", 
        "use_dof": "Use depth of field on viewport using the values from the active camera", 
        "use_scene_lights": "Render lights and light probes of the scene", 
        "use_scene_lights_render": "Render lights and light probes of the scene", 
        "use_scene_world": "Use scene world for lighting", 
        "use_scene_world_render": "Use scene world for lighting", 
        "use_world_space_lighting": "Make the lighting fixed and not follow the camera", 
        "wireframe_color_type": "Color Type", 
        "xray_alpha": "Amount of alpha to use", 
        "xray_alpha_wireframe": "Amount of alpha to use"
      }
    }, 
    "ViewLayer": {
      "fields": {
        "active_layer_collection": "Active layer collection in this view layer's hierarchy", 
        "cycles": "(read-only)    Cycles ViewLayer Settings", 
        "depsgraph": "(read-only)    Dependencies in the scene data", 
        "freestyle_settings": "(read-only)", 
        "invert_zmask": "For Zmask, only render what is behind solid z values instead of in front", 
        "layer_collection": "(read-only)    Root of collections hierarchy of this view layer,its 'collection' pointer property is the same as the scene's master collection", 
        "material_override": "Material to override all other materials in this view layer", 
        "name": "View layer name", 
        "objects": "(read-only)    All the objects in this layer", 
        "pass_alpha_threshold": "Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold", 
        "samples": "Override number of render samples for this view layer, 0 will use the scene setting", 
        "use": "Enable or disable rendering of this View Layer", 
        "use_all_z": "Fill in Z values for solid faces in invisible layers, for masking", 
        "use_ao": "Render Ambient Occlusion in this Layer", 
        "use_edge_enhance": "Render Edge-enhance in this Layer (only works for Solid faces)", 
        "use_freestyle": "Render stylized strokes in this Layer", 
        "use_halo": "Render Halos in this Layer (on top of Solid)", 
        "use_pass_ambient_occlusion": "Deliver Ambient Occlusion pass", 
        "use_pass_combined": "Deliver full combined RGBA buffer", 
        "use_pass_diffuse_color": "Deliver diffuse color pass", 
        "use_pass_diffuse_direct": "Deliver diffuse direct pass", 
        "use_pass_diffuse_indirect": "Deliver diffuse indirect pass", 
        "use_pass_emit": "Deliver emission pass", 
        "use_pass_environment": "Deliver environment lighting pass", 
        "use_pass_glossy_color": "Deliver glossy color pass", 
        "use_pass_glossy_direct": "Deliver glossy direct pass", 
        "use_pass_glossy_indirect": "Deliver glossy indirect pass", 
        "use_pass_material_index": "Deliver material index pass", 
        "use_pass_mist": "Deliver mist factor pass (0.0-1.0)", 
        "use_pass_normal": "Deliver normal pass", 
        "use_pass_object_index": "Deliver object index pass", 
        "use_pass_shadow": "Deliver shadow pass", 
        "use_pass_subsurface_color": "Deliver subsurface color pass", 
        "use_pass_subsurface_direct": "Deliver subsurface direct pass", 
        "use_pass_subsurface_indirect": "Deliver subsurface indirect pass", 
        "use_pass_transmission_color": "Deliver transmission color pass", 
        "use_pass_transmission_direct": "Deliver transmission direct pass", 
        "use_pass_transmission_indirect": "Deliver transmission indirect pass", 
        "use_pass_uv": "Deliver texture UV pass", 
        "use_pass_vector": "Deliver speed vector pass", 
        "use_pass_z": "Deliver Z values pass", 
        "use_sky": "Render Sky in this Layer", 
        "use_solid": "Render Solid faces in this Layer", 
        "use_strand": "Render Strands in this Layer", 
        "use_zmask": "Only render what's in front of the solid z values", 
        "use_ztransp": "Render Z-Transparent faces in this Layer (on top of Solid and Halos)"
      }
    }, 
    "VoronoiTexture": {
      "fields": {
        "distance_metric": "Algorithm used to calculate distance of sample points to feature points", 
        "minkovsky_exponent": "Minkowski exponent", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_intensity": "Scales the intensity of the noise", 
        "noise_scale": "Scaling for noise input", 
        "weight_1": "Voronoi feature weight 1", 
        "weight_2": "Voronoi feature weight 2", 
        "weight_3": "Voronoi feature weight 3", 
        "weight_4": "Voronoi feature weight 4"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "WalkNavigation": {
      "fields": {
        "jump_height": "Maximum height of a jump", 
        "mouse_speed": "Speed factor for when looking around, high values mean faster mouse movement", 
        "teleport_time": "Interval of time warp when teleporting in navigation mode", 
        "use_gravity": "Walk with gravity, or free navigate", 
        "use_mouse_reverse": "Reverse the vertical movement of the mouse", 
        "view_height": "View distance from the floor when walking", 
        "walk_speed": "Base speed for walking and flying", 
        "walk_speed_factor": "Multiplication factor when using the fast or slow modifiers"
      }
    }, 
    "WarpModifier": {
      "fields": {
        "falloff_curve": "(read-only)    Custom falloff curve", 
        "falloff_radius": "Radius to apply", 
        "object_from": "Object to transform from", 
        "object_to": "Object to transform to", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "use_volume_preserve": "Preserve volume when rotations are used", 
        "uv_layer": "UV map name", 
        "vertex_group": "Vertex group name for modulating the deform"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WaveModifier": {
      "fields": {
        "damping_time": "Number of frames in which the wave damps out after it dies", 
        "falloff_radius": "Distance after which it fades out", 
        "height": "Height of the wave", 
        "lifetime": "Lifetime of the wave in frames, zero means infinite", 
        "narrowness": "Distance between the top and the base of a wave, the higher the value, the more narrow the wave", 
        "speed": "Speed of the wave, towards the starting point when negative", 
        "start_position_object": "Object which defines the wave center", 
        "start_position_x": "X coordinate of the start position", 
        "start_position_y": "Y coordinate of the start position", 
        "texture_coords_object": "Object to set the texture coordinates", 
        "time_offset": "Either the starting frame (for positive speed) or ending frame (for negative speed.)", 
        "use_cyclic": "Cyclic wave effect", 
        "use_normal": "Displace along normals", 
        "use_normal_x": "Enable displacement along the X normal", 
        "use_normal_y": "Enable displacement along the Y normal", 
        "use_normal_z": "Enable displacement along the Z normal", 
        "use_x": "X axis motion", 
        "use_y": "Y axis motion", 
        "uv_layer": "UV map name", 
        "vertex_group": "Vertex group name for modulating the wave", 
        "width": "Distance between the waves"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WeightedNormalModifier": {
      "fields": {
        "face_influence": "Use influence of face for weighting", 
        "invert_vertex_group": "Invert vertex group influence", 
        "keep_sharp": "Keep sharp edges as computed for default split normals, instead of setting a single weighted normal for each vertex", 
        "mode": "Weighted vertex normal mode to use", 
        "thresh": "Threshold value for different weights to be considered equal", 
        "vertex_group": "Vertex group name for modifying the selected areas", 
        "weight": "Corrective factor applied to faces' weights, 50 is neutral, lower values increase weight of weak faces, higher values increase weight of strong faces"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WhiteBalanceModifier": {
      "fields": {
        "white_value": "This color defines white in the strip"
      }, 
      "inherits": [
        "SequenceModifier"
      ]
    }, 
    "Window": {
      "fields": {
        "height": "(read-only)    Window height", 
        "parent": "(read-only)    Active workspace and scene follow this window", 
        "scene": "Active scene to be edited in the window", 
        "screen": "Active workspace screen showing in the window", 
        "stereo_3d_display": "(read-only)    Settings for stereo 3d display", 
        "view_layer": "The active workspace view layer showing in the window", 
        "width": "(read-only)    Window width", 
        "workspace": "Active workspace showing in the window", 
        "x": "(read-only)    Horizontal location of the window", 
        "y": "(read-only)    Vertical location of the window"
      }
    }, 
    "WindowManager": {
      "fields": {
        "addon_filter": "Filter add-ons by category", 
        "addon_search": "Search within the selected filter", 
        "addon_support": "Display support level", 
        "keyconfigs": "(read-only)    Registered key configurations", 
        "operators": "(read-only)    Operator registry", 
        "preset_name": "Name for new preset", 
        "windows": "(read-only)    Open windows"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "WipeSequence": {
      "fields": {
        "angle": "Edge angle", 
        "blur_width": "Width of the blur edge, in percentage relative to the image size", 
        "direction": "Wipe direction", 
        "input_1": "First input for the effect strip", 
        "input_2": "Second input for the effect strip", 
        "input_count": "(read-only)"
      }, 
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ]
    }, 
    "WireframeModifier": {
      "fields": {
        "crease_weight": "Crease weight (if active)", 
        "invert_vertex_group": "Invert vertex group influence", 
        "material_offset": "Offset material index of generated faces", 
        "offset": "Offset the thickness from the center", 
        "thickness": "Thickness factor", 
        "thickness_vertex_group": "Thickness factor to use for zero vertex group influence", 
        "use_boundary": "Support face boundaries", 
        "use_crease": "Crease hub edges for improved subsurf", 
        "use_even_offset": "Scale the offset to give more even thickness", 
        "use_relative_offset": "Scale the offset by surrounding geometry", 
        "use_replace": "Remove original geometry", 
        "vertex_group": "Vertex group name for selecting the affected areas"
      }, 
      "inherits": [
        "Modifier"
      ]
    }, 
    "WoodTexture": {
      "fields": {
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_basis": "Noise basis used for turbulence", 
        "noise_scale": "Scaling for noise input", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types"
      }, 
      "inherits": [
        "ID", 
        "Texture"
      ]
    }, 
    "WorkSpace": {
      "fields": {
        "object_mode": "Switch to this object mode when activating the workspace", 
        "owner_ids": "(read-only)", 
        "screens": "(read-only)    Screen layouts of a workspace", 
        "tools": "(read-only)", 
        "use_filter_by_owner": "Filter the UI by tags"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "WorkSpaceTool": {
      "fields": {
        "has_datablock": "(read-only)", 
        "index": "(read-only)", 
        "mode": "(read-only)", 
        "space_type": "(read-only)", 
        "widget": "(read-only)"
      }
    }, 
    "World": {
      "fields": {
        "animation_data": "(read-only)    Animation data for this data-block", 
        "color": "Color of the background", 
        "cycles": "(read-only)    Cycles world settings", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "light_settings": "(read-only)    World lighting settings", 
        "mist_settings": "(read-only)    World mist settings", 
        "node_tree": "(read-only)    Node tree for node based worlds", 
        "use_nodes": "Use shader nodes to render the world"
      }, 
      "inherits": [
        "ID"
      ]
    }, 
    "WorldLighting": {
      "fields": {
        "ao_factor": "Factor for ambient occlusion blending", 
        "distance": "Length of rays, defines how far away other faces give occlusion effect", 
        "use_ambient_occlusion": "Use Ambient Occlusion to add shadowing based on distance between objects"
      }
    }, 
    "WorldMistSettings": {
      "fields": {
        "depth": "Distance over which the mist effect fades in", 
        "falloff": "Type of transition used to fade mist", 
        "height": "Control how much mist density decreases with height", 
        "intensity": "Overall minimum intensity of the mist effect", 
        "start": "Starting distance of the mist, measured from the camera", 
        "use_mist": "Occlude objects with the environment color as they are further away"
      }
    }
  }, 
  "system": "Blender", 
  "version": "2.81"
}