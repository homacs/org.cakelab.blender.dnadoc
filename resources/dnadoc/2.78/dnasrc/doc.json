{
  "system": "Blender", 
  "structs": {
    "FreestyleLineSet": {
      "fields": {
        "selection": "<p> selection criteria </p>", 
        "name": "<p> line set name, MAX_NAME </p>", 
        "qi": "<p> quantitative invisibility </p>", 
        "exclude_edge_types": "<p> feature edge types </p>", 
        "group": "<p> group of target objects </p>"
      }
    }, 
    "bAddon": {
      "doc": "<p> for the moment only the name. may want to store options with this later </p>", 
      "fields": {
        "prop": "<p> User-Defined Properties on this Addon (for storing preferences) </p>"
      }
    }, 
    "bScreen": {
      "fields": {
        "temp": "<p> temp screen in a temp window, don't save (like user prefs) </p>", 
        "regionbase": "<p> screen level regions (menus), runtime only </p>", 
        "swap": "<p> indicator to survive swap-exchange systems </p>", 
        "animtimer": "<p> if set, screen has timer handler added in window </p>", 
        "newscene": "<p> temporary when switching </p>", 
        "winid": "<p> winid from WM, starts with 1 </p>", 
        "do_draw_paintcursor": "<p> notifier for paint cursor draw. </p>", 
        "skip_handling": "<p> set to delay screen handling after switching back from maximized area </p>", 
        "mainwin": "<p> screensize subwindow, for screenedges and global menus </p>", 
        "redraws_flag": "<p> user-setting for which editors get redrawn during anim playback (used to be time->redraws) </p>", 
        "do_draw_gesture": "<p> notifier for gesture draw. </p>", 
        "context": "<p> context callback </p>", 
        "do_refresh": "<p> notifier for scale screen, changed screen, etc </p>", 
        "do_draw": "<p> notifier for drawing edges </p>", 
        "subwinactive": "<p> active subwindow </p>", 
        "vertbase": "<p> screens have vertices/edges to define areas </p>", 
        "state": "<p> temp screen for image render display or fileselect </p>", 
        "do_draw_drag": "<p> notifier for dragging draw. </p>", 
        "scrubbing": "<p> set when scrubbing to avoid some costly updates </p>"
      }
    }, 
    "DisplaceModifierData": {
      "fields": {
        "strength": "<p> end {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "Tex": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "mg_H": "<p> newnoise: musgrave parameters </p>", 
        "vn_w1": "<p> newnoise: voronoi nearest neighbor weights, minkovsky exponent, distance metric & color type </p>", 
        "dist_amount": "<p> newnoise: distorted noise amount, musgrave & voronoi output scale </p>", 
        "fie_ima": "<p> variables disabled, moved to struct iuser </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "noisebasis": "<p> newnoise: noisebasis type for clouds/marble/etc, noisebasis2 only used for distorted noise </p>", 
        "noisetype": "<p> noisedepth MUST be <= 30 else we get floating point exceptions </p>"
      }
    }, 
    "BevPoint": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "quat": "<p> 3D Only </p>", 
        "cosa": "<p> 2D Only </p>"
      }
    }, 
    "Ipo": {
      "doc": "<p><mdash/>  ID-Datablock <mdash/>  IPO Data-Block </p>", 
      "fields": {
        "cur": "<p> Rect defining extents of keyframes? </p>", 
        "pad": "<p> muteipo: either 0 or 1 (whether ipo block is muted) </p>", 
        "curve": "<p> A list of {@link IpoCurve}  structs in a linked list. </p>", 
        "showkey": "<p> blocktype: self-explanatory; showkey: either 0 or 1 (show vertical yellow lines for editing) </p>"
      }
    }, 
    "bRigidBodyJointConstraint": {
      "doc": "<p> Rigid Body constraint </p>"
    }, 
    "bKeyboardSensor": {
      "fields": {
        "targetName": "<p> Name of the target propertyMAX_NAME </p>", 
        "toggleName": "<p> Name of the toggle propertyMAX_NAME </p>"
      }
    }, 
    "AnimOverride": {
      "doc": "<p><hr/> \n Animation Data {@link AnimOverride}  -------------------------------<mdash/><mdash/>  Animation Override (aor)</p><p> This is used to as temporary storage of values which have been changed by the user, but not yet keyframed (thus, would get overwritten by the animation system before the user had a chance to see the changes that were made).</p><p> It is probably not needed for overriding keyframed values in most cases, as those will only get evaluated on frame-change now. That situation may change in future. </p>", 
      "fields": {
        "rna_path": "<p> RNA-path to use to resolve data-access </p>", 
        "array_index": "<p> if applicable, the index of the RNA-array item to get </p>", 
        "value": "<p> value to override setting with </p>"
      }
    }, 
    "bNode": {
      "doc": "<p> limit data in {@link bNode}  to what we want to see saved? </p>", 
      "fields": {
        "parent": "<p> parent node </p>", 
        "stack_index": "<p> for groupnode, offset in global caller stack </p>", 
        "nr": "<p> number of this node in list, used for UI exec events </p>", 
        "color": "<p> custom user-defined color </p>", 
        "idname": "<p> runtime type identifier </p>", 
        "update": "<p> update flags </p>", 
        "prvr": "<p> optional preview area </p>", 
        "storage": "<p> custom data, must be struct, for storage in file </p>", 
        "locy": "<p> root offset for drawing (parent space) </p>", 
        "totr": "<p> entire boundbox (worldspace) </p>", 
        "typeinfo": "<p> runtime type information </p>", 
        "threaddata": "<p> optional extra storage for use in thread (read only then!) </p>", 
        "prop": "<p> user-defined properties </p>", 
        "miniwidth": "<p> node width if hidden </p>", 
        "block": "<p> runtime during drawing </p>", 
        "id": "<p> optional link to libdata </p>", 
        "custom2": "<p> to be abused for buttons </p>", 
        "preview_xsize": "<p> XXX TODO Node totr size depends on the prvr size, which in turn is determined from preview size. In earlier versions {@link bNodePreview}  was stored directly in nodes, but since now there can be multiple instances using different preview images it is possible that required node size varies between instances. preview_xsize, preview_ysize defines a common reserved size for preview rect for now, could be replaced by more accurate node instance drawing, but that requires removing totr from DNA and replacing all uses with per-instance data. </p>", 
        "height": "<p> node custom width and height </p>", 
        "menunr": "<p> lasty: check preview render status, menunr: browse {@link ID}  blocks </p>", 
        "original": "<p> the original node in the tree (for localized tree) </p>", 
        "level": "<p> both for dependency and sorting </p>", 
        "anim_ofsx": "<p> offset that will be added to locx for insert offset animation </p>", 
        "label": "<p> custom user-defined label, MAX_NAME </p>", 
        "anim_init_locx": "<p> initial locx for insert offset animation </p>", 
        "preview_ysize": "<p> reserved size of the preview rect </p>", 
        "offsety": "<p> additional offset from loc </p>", 
        "name": "<p> MAX_NAME </p>", 
        "internal_links": "<p> list of cached internal links (input to output), for muted nodes and operators </p>", 
        "exec": "<p> need_exec is set as UI execution event, exec is flag during exec </p>", 
        "butr": "<p> optional buttons area </p>"
      }
    }, 
    "TFace": {
      "doc": "<p> deprecated by {@link MTFace} , only here for file reading </p>", 
      "fields": {
        "tpage": "<p> the faces image for the active UVLayer </p>"
      }
    }, 
    "TransformOrientation": {
      "doc": "<p><hr/> \n Transform Orientations </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "MFace": {
      "doc": "<p> tessellation face, see MLoop/MPoly for the real face data </p>", 
      "fields": {
        "flag": "<p> we keep edcode, for conversion to edges draw flags in old files </p>"
      }
    }, 
    "SceneRenderLayer": {
      "doc": "<p><hr/> \n Render Layers Render Layer </p>", 
      "fields": {
        "lay_zmask": "<p> has to be after lay, this is for Z-masking </p>", 
        "lay": "<p> scene->lay itself has priority over this </p>", 
        "lay_exclude": "<p> not used by internal, exclude </p>", 
        "name": "<p> MAX_NAME </p>", 
        "passflag": "<p> pass_xor has to be after passflag </p>"
      }
    }, 
    "NodeShaderTexPointDensity": {
      "fields": {
        "vertex_attribute_name": "<p> vertex attribute layer for color source, MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "SequencerScopes": {
      "doc": "<p> ***************** {@link Scopes}  ****************** </p>"
    }, 
    "CharInfo": {
      "fields": {
        "mat_nr": "<p> index start at 1, unlike mesh & nurbs </p>"
      }
    }, 
    "MeshDeformModifierData": {
      "fields": {
        "bindinfluences": "<p> result of static binding influences </p>", 
        "dynverts": "<p> is this vertex bound or not? </p>", 
        "dyninfluences": "<p> dynamic binding vertex influences </p>", 
        "bindcos": "<p> deprecated storage of cage coords </p>", 
        "bindfunc": "<p> runtime </p>", 
        "dyncellmin": "<p> offset of the dynamic bind grid </p>", 
        "dyncellwidth": "<p> width of dynamic bind cell </p>", 
        "defgrp_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "bindmat": "<p> matrix of cage at binding time </p>", 
        "totcagevert": "<p> total vertices in mesh and cage </p>", 
        "totinfluence": "<p> total number of vertex influences </p>", 
        "dyngrid": "<p> result of dynamic binding grid with dynamic binding cell points </p>", 
        "dyngridsize": "<p> size of the dynamic bind grid </p>", 
        "bindcagecos": "<p> coordinates that cage was bound with </p>", 
        "bindoffsets": "<p> offsets into influences array </p>", 
        "bindweights": "<p> deprecated storage deprecated inefficient storage </p>", 
        "object": "<p> mesh object </p>"
      }
    }, 
    "SpaceInfo": {
      "doc": "<p> Space Info ========================================== Info Header </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "blockhandler": "<p><p> XXX make deprecated </p>\n@deprecated\n DeprecatedXXX make deprecated </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "MFloatProperty": {
      "doc": "<p> Custom Data Properties </p>"
    }, 
    "FMod_Generator": {
      "doc": "<p><hr/> \n Generator modifier data </p>", 
      "fields": {
        "mode": "<p> which 'generator' to use eFMod_Generator_Modes </p>", 
        "flag": "<p> settings settings </p>", 
        "arraysize": "<p> size of the coefficients array </p>", 
        "poly_order": "<p> order of polynomial generated (i.e. 1 for linear, 2 for quadratic) </p>", 
        "coefficients": "<p> general generator information coefficients array </p>"
      }
    }, 
    "RigidBodyWorld": {
      "doc": "<p><hr/> \n RigidBody {@link World}  {@link RigidBodyWorld}  (rbw)</p><p> Represents a \"simulation scene\" existing within the parent scene. </p>", 
      "fields": {
        "ltime": "<p> last frame world was evaluated for (internal) </p>", 
        "flag": "<p> (eRigidBodyWorld_Flag) settings for this {@link RigidBodyWorld}  </p>", 
        "effector_weights": "<p> Sim {@link World}  Settings -------------------------------------------------------<mdash/><mdash/>  effectors info </p>", 
        "num_solver_iterations": "<p> number of constraint solver iterations made per simulation step </p>", 
        "time_scale": "<p> used to speed up or slow down the simulation </p>", 
        "objects": "<p> Array to access group objects by index, only used at runtime </p>", 
        "numbodies": "<p> number of objects in rigid body group </p>", 
        "steps_per_second": "<p> number of simulation steps thaken per second </p>", 
        "pointcache": "<p> cache </p>", 
        "constraints": "<p>{@link Group}  containing objects to use for Rigid Body Constraints </p>", 
        "physics_world": "<p> References to Physics Sim objects. Exist at runtime only ----------------<mdash/><mdash/>  Physics sim world (i.e. btDiscreteDynamicsWorld) </p>", 
        "group": "<p>{@link Group}  containing objects to use for Rigid Bodies </p>"
      }
    }, 
    "bTransLikeConstraint": {
      "doc": "<p> Copy Transform Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "DynamicPaintBrushSettings": {
      "doc": "<p>{@link Brush}  settings </p>", 
      "fields": {
        "pmd": "<p> for fast RNA access </p>", 
        "paint_ramp": "<p> color ramps Proximity paint falloff </p>", 
        "vel_ramp": "<p> Velocity paint ramp </p>"
      }
    }, 
    "bTransformConstraint": {
      "doc": "<p> Generic Transform->Transform Constraint </p>", 
      "fields": {
        "from_min_scale": "<p> from_min/max defines range of target transform </p>", 
        "tar": "<p> target (i.e. 'driver' object/bone) </p>", 
        "from_max_scale": "<p> to map on to to_min/max range. </p>", 
        "from_min": "<p> from_min/max defines range of target transform </p>", 
        "from_min_rot": "<p> from_min/max defines range of target transform </p>", 
        "to_min_scale": "<p> range of motion on owner caused by target </p>", 
        "to_min_rot": "<p> range of motion on owner caused by target </p>", 
        "to_min": "<p> range of motion on owner caused by target </p>", 
        "from_max_rot": "<p> to map on to to_min/max range. </p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "from_max": "<p> to map on to to_min/max range. </p>", 
        "to": "<p> can be loc(0), rot(1) or size(2) </p>", 
        "map": "<p> defines which target-axis deform is copied by each owner-axis </p>", 
        "expo": "<p> extrapolate motion? if 0, confine to ranges </p>"
      }
    }, 
    "FileSelectParams": {
      "doc": "<p> File Selector ========================================== Config and Input for File Selector </p>", 
      "fields": {
        "recursion_level": "<p> max number of levels in dirtree to show at once, 0 to disable recursion. </p>", 
        "highlight_file": "<p> file under cursor </p>", 
        "flag": "<p> settings for filter, hiding dots files,... </p>", 
        "display": "<p> display mode flag </p>", 
        "filter_search": "<p> text items' name must match to be shown. </p>", 
        "sort": "<p> sort order </p>", 
        "title": "<p> title, also used for the text of the execute button </p>", 
        "dir": "<p> directory, FILE_MAX_LIBEXTRA, 1024 + 66, this is for extreme case when 1023 length path needs to be linked in, where foo.blend/Armature need adding </p>", 
        "type": "<p> short XXXXX for now store type here, should be moved to the operator </p>", 
        "f_fp": "<p> XXX <mdash/>  still unused <ndash/>  show font preview </p>", 
        "filter": "<p> filter when (flags & FILE_FILTER) is true </p>", 
        "filter_glob": "<p> list of filetypes to filter </p>", 
        "file": "<p> file </p>", 
        "filter_id": "<p> same as filter, but for {@link ID}  types (aka library groups). </p>", 
        "renameedit": "<p> annoying but the first is only used for initialization </p>", 
        "fp_str": "<p> string to use for font preview </p>", 
        "active_file": "<p> active file used for keyboard navigation </p>"
      }
    }, 
    "bLocateLikeConstraint": {
      "doc": "<p> Copy Location Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "doc": "<p> Distance from {@link Object}  modifiers </p>"
    }, 
    "Link": {
      "doc": "<p> generic - all structs which are put into linked lists begin with this </p>"
    }, 
    "MeshStatVis": {
      "doc": "<p><hr/> \n Stats Stats for Meshes </p>", 
      "fields": {
        "overhang_axis": "<p> overhang </p>", 
        "distort_min": "<p> distort </p>", 
        "sharp_min": "<p> sharp </p>", 
        "thickness_min": "<p> thickness </p>"
      }
    }, 
    "NodeColorBalance": {
      "fields": {
        "lift": "<p> LGG parameters </p>", 
        "slope": "<p> ASC CDL parameters </p>"
      }
    }, 
    "wmWindow": {
      "doc": "<p> IME is win32 only! the savable part, rest of data is local in ghostwinlay </p>", 
      "fields": {
        "cursor": "<p> current mouse cursor type </p>", 
        "screen": "<p> active screen </p>", 
        "winid": "<p> winid also in screens, is for retrieving this window after read </p>", 
        "ime_data": "<p> Input Method Editor data - complex character input (esp. for asian character input) Currently WIN32, runtime-only data </p>", 
        "gesture": "<p> gesture stuff </p>", 
        "drawdata": "<p> internal for wm_draw.c only </p>", 
        "lastcursor": "<p> previous cursor when setting modal one </p>", 
        "last_pie_event": "<p> exception to the above rule for nested pies, store last pie event for operators that spawn a new pie right after destruction of last pie </p>", 
        "multisamples": "<p> amount of samples for OpenGL FSA the ghost window was created with, if zero no FSA </p>", 
        "windowstate": "<p> borderless, full </p>", 
        "screenname": "<p> MAX_ID_NAME for matching window with active screen after file read </p>", 
        "drawfail": "<p> internal for wm_draw.c only </p>", 
        "sizey": "<p> window coords </p>", 
        "addmousemove": "<p> internal: tag this for extra mousemove event, makes cursors/buttons active on UI switching </p>", 
        "subwindows": "<p> opengl stuff for sub windows, see notes in wm_subwindow.c </p>", 
        "newscreen": "<p> temporary when switching </p>", 
        "curswin": "<p> internal for wm_subwindow.c only </p>", 
        "active": "<p> set to 1 if an active window, for quick rejects </p>", 
        "monitor": "<p> multiscreen... no idea how to store yet </p>", 
        "modalhandlers": "<p> priority handlers, handled first </p>", 
        "grabcursor": "<p> cursor grab mode </p>", 
        "eventstate": "<p> storage for event system </p>", 
        "tweak": "<p> internal for wm_operators.c </p>", 
        "handlers": "<p> window+screen handlers, handled last </p>", 
        "stereo3d_format": "<p> properties for stereoscopic displays </p>", 
        "ghostwin": "<p> don't want to include ghost.h stuff </p>", 
        "lock_pie_event": "<p> internal, lock pie creation from this event until released </p>", 
        "queue": "<p> all events (ghost level events were handled) </p>", 
        "modalcursor": "<p> the current modal cursor </p>"
      }
    }, 
    "bNodeSocket": {
      "fields": {
        "identifier": "<p> unique identifier for mapping </p>", 
        "cache": "<p> cached data from execution </p>", 
        "stack_index": "<p> execution data local stack index </p>", 
        "own_index": "<p> internal data to retrieve relations and groups DEPRECATED, now uses the generic identifier string instead<p> group socket identifiers, to find matching pairs after reading files </p>\n@deprecated\n Deprecatedgroup socket identifiers, to find matching pairs after reading files </p>", 
        "ns": "<p> XXX deprecated, socket input values are stored in default_value now. kept for forward compatibility <p> custom data for inputs, only UI writes in this </p>\n@deprecated\n Deprecatedcustom data for inputs, only UI writes in this </p>", 
        "idname": "<p> runtime type identifier </p>", 
        "link": "<p> a link pointer, set in ntreeUpdateTree </p>", 
        "default_value": "<p> default input value used for unlinked sockets </p>", 
        "groupsock": "<p> XXX deprecated, still forward compatible since verification restores pointer from matching own_index. \n@deprecated\n Deprecated</p>", 
        "storage": "<p> XXX deprecated, only used for the {@link Image}  and OutputFile nodes, should be removed at some point.custom storage </p>", 
        "typeinfo": "<p> runtime type information </p>", 
        "in_out": "<p> input/output type </p>", 
        "stack_type": "<p> XXX deprecated, kept for forward compatibility \n@deprecated\n Deprecated</p>", 
        "prop": "<p> user-defined properties </p>", 
        "name": "<p> MAX_NAME </p>", 
        "limit": "<p> max. number of links </p>", 
        "to_index": "<p> XXX deprecated, only used for restoring old group node links \n@deprecated\n Deprecated</p>"
      }
    }, 
    "bNodeSocketValueFloat": {
      "fields": {
        "subtype": "<p> RNA subtype </p>"
      }
    }, 
    "FileDirEntryRevision": {
      "doc": "<p> Container for a revision, only relevant in asset context. </p>", 
      "fields": {
        "size_str": "<p> Temp caching of UI-generated strings... </p>"
      }
    }, 
    "MDeformVert": {
      "fields": {
        "flag": "<p> flag only in use for weightpaint now </p>"
      }
    }, 
    "PathPoint": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "vec": "<p> grr, cant get rid of tilt yet </p>"
      }
    }, 
    "CurveMap": {
      "fields": {
        "curve": "<p> actual curve </p>", 
        "maxtable": "<p> the x-axis range for the table </p>", 
        "range": "<p> quick multiply value for reading table </p>", 
        "ext_out": "<p> for extrapolated curves, the direction vector </p>", 
        "premultable": "<p> for RGB curves, premulled table </p>", 
        "table": "<p> display and evaluate table </p>", 
        "premul_ext_in": "<p> for RGB curves, premulled extrapolation vector </p>"
      }
    }, 
    "rcti": {
      "doc": "<p> typedef struct vec3d { double x, y, z; } vec3d;</p><p> typedef struct vec4i { int x, y, z, w; } vec4i;</p><p> typedef struct vec4f { float x, y, z, w; } vec4f;</p><p> typedef struct vec4d { double x, y, z, w; } vec4d;integer rectangle. </p>"
    }, 
    "rctf": {
      "doc": "<p> float rectangle. </p>"
    }, 
    "HookModifierData": {
      "fields": {
        "parentinv": "<p> matrix making current transform unmodified </p>", 
        "falloff_type": "<p> use enums from WarpModifier (exact same functionality) </p>", 
        "falloff": "<p> if not zero, falloff is distance where influence zero </p>", 
        "cent": "<p> visualization of hook </p>", 
        "indexar": "<p> if NULL, it's using vertexgroup </p>", 
        "name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "subtarget": "<p> optional name of bone target, MAX_ID_NAME-2 </p>"
      }
    }, 
    "Speaker": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "volume": "<p> animatable properties </p>", 
        "flag": "<p> flag </p>", 
        "volume_max": "<p> not animatable properties </p>"
      }
    }, 
    "Path": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "ExplodeModifierData": {
      "fields": {
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "LaplacianSmoothModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "NodeGeometry": {
      "fields": {
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "MovieTracking": {
      "fields": {
        "settings": "<p> different tracking-related settings </p>", 
        "stabilization": "<p> stabilization data </p>", 
        "stats": "<p> statistics displaying in clip editor </p>", 
        "plane_tracks": "<p> list of plane tracks used by camera object </p>", 
        "act_track": "<p> active track </p>", 
        "reconstruction": "<p> reconstruction data for camera object </p>", 
        "tot_object": "<p> index of active object and total number of objects </p>", 
        "dopesheet": "<p> dopesheet data </p>", 
        "camera": "<p> camera intrinsics </p>", 
        "act_plane_track": "<p> active plane track </p>", 
        "tracks": "<p> list of tracks used for camera object </p>"
      }
    }, 
    "MetaStack": {
      "fields": {
        "disp_range": "<p> the startdisp/enddisp when entering the meta </p>"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "default_frames_limit": "<p> number of frames to be tarcked during single tracking session (if TRACKING_FRAMES_LIMIT is set) </p>", 
        "keyframe2": "<p><p> two keyframes for reconstruction initialization were moved to per-tracking object settings </p>\n@deprecated\n Deprecatedtwo keyframes for reconstruction initialization were moved to per-tracking object settings </p>", 
        "object_distance": "<p> set object scale distance between two bundles used for object scaling </p>", 
        "keyframe1": "<p> ** reconstruction settings ** \n@deprecated\n Deprecated</p>", 
        "default_minimum_correlation": "<p> minimal correlation which is still treated as successful tracking </p>", 
        "default_pattern_match": "<p> re-adjust every N frames </p>", 
        "dist": "<p> ** tool settings ** set scale distance between two bundles used for scene scaling </p>", 
        "default_weight": "<p> default weight of the track </p>", 
        "refine_camera_intrinsics": "<p> which camera intrinsics to refine. uses on the REFINE_* flags </p>", 
        "speed": "<p> ** common tracker settings ** speed of tracking </p>", 
        "default_motion_model": "<p> ** default tracker settings model of the motion for this track </p>", 
        "default_margin": "<p> margin from frame boundaries </p>", 
        "default_algorithm_flag": "<p> flags for the tracking algorithm (use brute, use esm, use pyramid, etc </p>", 
        "default_search_size": "<p> size of search area for new tracks </p>", 
        "clean_frames": "<p> cleanup </p>", 
        "motion_flag": "<p> flags describes motion type </p>", 
        "default_pattern_size": "<p> size of pattern area for new tracks </p>", 
        "default_flag": "<p> default flags like color channels used by default </p>"
      }
    }, 
    "MRecast": {
      "doc": "<p> End {@link Multires}  </p>"
    }, 
    "bActuatorSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "uiPreview": {
      "fields": {
        "next": "<p> some preview UI data need to be saved in file </p>", 
        "preview_id": "<p> defined as UI_MAX_NAME_STR </p>"
      }
    }, 
    "wmWindowManager": {
      "doc": "<p> reports need to be before {@link wmWindowManager}  windowmanager is saved, tag WMAN </p>", 
      "fields": {
        "reports": "<p> information and error reports </p>", 
        "timers": "<p> active timers </p>", 
        "file_saved": "<p> indicator whether data was saved </p>", 
        "keyconfigs": "<p> known key configurations </p>", 
        "paintcursors": "<p> extra overlay cursors to draw, like circles </p>", 
        "winactive": "<p> separate active from drawable </p>", 
        "is_interface_locked": "<p> indicates whether interface is locked for user interaction </p>", 
        "jobs": "<p> threaded jobs manager </p>", 
        "drags": "<p> active dragged items </p>", 
        "userconf": "<p> user configuration </p>", 
        "autosavetimer": "<p> timer for auto save </p>", 
        "op_undo_depth": "<p> operator stack depth to avoid nested undo pushes </p>", 
        "operators": "<p> operator registry </p>", 
        "initialized": "<p> set on file read </p>", 
        "addonconf": "<p> addon configuration </p>", 
        "queue": "<p> refresh/redraw wmNotifier structs </p>", 
        "defaultconf": "<p> default configuration </p>"
      }
    }, 
    "SpaceSeq": {
      "doc": "<p>{@link Sequence}  Editor ======================================= Sequencer </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "mainb": "<p> weird name for the sequencer subtype (seq, image, luma... etc) </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "zoom": "<p><p> deprecated, handled by {@link View2D}  now </p>\n@deprecated\n Deprecateddeprecated, handled by View2D now </p>", 
        "multiview_eye": "<p> multiview current eye - for internal use </p>", 
        "xof": "<p>\n@deprecated\n Deprecated</p>", 
        "yof": "<p><p> deprecated: offset for drawing the image preview </p>\n@deprecated\n Deprecateddeprecated: offset for drawing the image preview </p>", 
        "view": "<p> see SEQ_VIEW_* below </p>", 
        "render_size": "<p> eSpaceSeq_Proxy_RenderSize </p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "scopes": "<p> different scoped displayed in space </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "draw_flag": "<p> overlay an image of the editing on below the strips </p>"
      }
    }, 
    "CustomDataLayer": {
      "doc": "<p> descriptor and storage for a custom data layer </p>", 
      "fields": {
        "uid": "<p> shape keyblock unique id reference </p>", 
        "flag": "<p> general purpose flag </p>", 
        "offset": "<p> in editmode, offset of layer in block </p>", 
        "data": "<p> layer data </p>", 
        "active_rnd": "<p> number of the layer to render </p>", 
        "active_mask": "<p> number of the layer to render </p>", 
        "name": "<p> layer name, MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "active": "<p> number of the active layer of this type </p>", 
        "type": "<p> type of data in layer </p>", 
        "active_clone": "<p> number of the layer to render </p>"
      }
    }, 
    "MeshCacheModifierData": {
      "doc": "<p> cache modifier </p>", 
      "fields": {
        "forward_axis": "<p> axis conversion </p>", 
        "filepath": "<p> FILE_MAX </p>", 
        "type": "<p> file format </p>", 
        "eval_frame": "<p> play_mode == MOD_MESHCACHE_PLAY_EVAL we could use one float for all these but their purpose is very different </p>", 
        "frame_start": "<p> play_mode == MOD_MESHCACHE_PLAY_CFEA </p>"
      }
    }, 
    "AviCodecData": {
      "doc": "<p><hr/> \n Output Format Data </p>", 
      "fields": {
        "dwInterleaveEvery": "<p> for non-video streams only </p>", 
        "cbParms": "<p> size of lpParms buffer </p>", 
        "dwBytesPerSecond": "<p> bytes per second </p>", 
        "lpFormat": "<p> save format </p>", 
        "fccType": "<p> stream type, for consistency </p>", 
        "fccHandler": "<p> compressor </p>", 
        "lpParms": "<p> compressor options </p>", 
        "dwFlags": "<p> flags... see below </p>", 
        "dwQuality": "<p> compress quality 0-10,000 </p>", 
        "cbFormat": "<p> size of lpFormat buffer </p>", 
        "dwKeyFrameEvery": "<p> keyframe rate </p>"
      }
    }, 
    "WeightVGProximityModifierData": {
      "fields": {
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "falloff_type": "<p> Put here to avoid breaking existing struct... Using MOD_WVG_MAPPING_* enums. </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "proximity_ob_target": "<p> Target object from which to calculate vertices distances. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME </p>", 
        "defgrp_name": "<p> Name of vertex group to modify/weight. MAX_VGROUP_NAME. </p>", 
        "max_dist": "<p> Distances mapping to 0.0/1.0 weights. </p>", 
        "pad_s1": "<p> Padding... </p>", 
        "proximity_mode": "<p> Proximity modes. </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV Map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_tex_mapping": "<p> How to map the texture! </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>"
      }
    }, 
    "SpaceIpo": {
      "doc": "<p> Graph Editor ========================================= 'Graph' Editor (formerly known as the IPO Editor) </p>", 
      "fields": {
        "mode": "<p> mode for the Graph editor (eGraphEdit_Mode) </p>", 
        "ads": "<p> settings for filtering animation data (NOTE: we use a pointer due to code-linking issues) </p>", 
        "flag": "<p> settings for Graph editor (eGraphEdit_Flag) </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "autosnap": "<p> time-transform autosnapping settings for Graph editor (eAnimEdit_AutoSnap in {@link DNA_action_types.h} ) </p>", 
        "ghostCurves": "<p> sampled snapshots of F-Curves used as in-session guides </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "cursorTime": "<p> time value for cursor (when in drivers mode; animation uses current frame) </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "around": "<p> pivot point for transforms </p>", 
        "cursorVal": "<p> cursor value (y-value, x-value is current frame) </p>"
      }
    }, 
    "MTFace": {
      "doc": "<p> tessellation uv face data </p>"
    }, 
    "GameData": {
      "fields": {
        "lodflag": "<p>{@link Scene}  LoD </p>", 
        "flag": "<p> bit 3: (gameengine): Activity culling is enabled. bit 5: (gameengine) : enable Bullet DBVT tree for view frustum culling </p>", 
        "framing": "<p> standalone player </p>", 
        "vsync": "<p> Controls vsync: off, on, or adaptive (if supported) </p>", 
        "gravity": "<p> physics (it was in world) Gravitation constant for the game world </p>", 
        "activityBoxRadius": "<p> Radius of the activity bubble, in Manhattan length. Objects outside the box are activity-culled. </p>", 
        "dome": "<p> stereo/dome mode </p>", 
        "occlusionRes": "<p> resolution of occlusion Z buffer in pixel </p>"
      }
    }, 
    "IpoCurve": {
      "doc": "<p><mdash/>  IPO {@link Curve}  <mdash/>  IPO {@link Curve}  </p>", 
      "fields": {
        "rt": "<p> flag= settings; rt= ??? </p>", 
        "bezt": "<p> array of BezTriples (sizeof(BezTriple) * totvert) - i.e. user-editable keyframes </p>", 
        "vartype": "<p> blocktype= ipo-blocktype; adrcode= type of ipo-curve; vartype= 'format' of data </p>", 
        "ymax": "<p> minimum/maximum y-extents for curve </p>", 
        "driver": "<p> pointer to ipo-driver for this curve </p>", 
        "curval": "<p> value of ipo-curve for current frame </p>", 
        "extrap": "<p> interpolation and extrapolation modes </p>", 
        "totvert": "<p> total number of BezTriples (i.e. keyframes) on curve </p>", 
        "bitmask": "<p> ??? </p>", 
        "slide_max": "<p> minimum/maximum values for sliders (in action editor) </p>", 
        "bp": "<p> array of BPoints (sizeof(BPoint) * totvert) - i.e. baked/imported data </p>", 
        "totrct": "<p> bounding boxes </p>"
      }
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "rt": "<p> only updated on file save and used on file load </p>"
      }
    }, 
    "bPythonConstraint": {
      "doc": "<p> Python {@link Script}  Constraint </p>", 
      "fields": {
        "flag": "<p> general settings/state indicators accessed by bitmapping </p>", 
        "tar": "<p> target from previous implementation (version-patch sets this to NULL on file-load) </p>", 
        "prop": "<p> 'id-properties' used to store custom properties for constraint </p>", 
        "subtarget": "<p> subtarger from previous implentation (version-patch sets this to \"\" on file-load), MAX_ID_NAME-2 </p>", 
        "text": "<p> text-buffer (containing script) to execute </p>", 
        "targets": "<p> a list of targets that this constraint has (bConstraintTarget-s) </p>", 
        "tarnum": "<p> number of targets - usually only 1-3 are needed </p>"
      }
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "doc": "<p> Distance from {@link Camera}  modifiers </p>"
    }, 
    "bRadarSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "SpaceLink": {
      "doc": "<p>{@link SpaceLink}  ({@link Base} ) ==================================== The base structure all the other spaces are derived (implicitly) from. Would be good to make this explicit. </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "blockhandler": "<p><p> XXX make deprecated </p>\n@deprecated\n DeprecatedXXX make deprecated </p>", 
        "blockscale": "<p><p> XXX make deprecated </p>\n@deprecated\n DeprecatedXXX make deprecated </p>"
      }
    }, 
    "uiFont": {
      "doc": "<p> default fonts to load/initalize first font is the default (index 0), others optional </p>", 
      "fields": {
        "blf_id": "<p> from blfont lib </p>", 
        "filename": "<p> 1024 = FILE_MAX </p>", 
        "uifont_id": "<p> own id </p>", 
        "r_to_l": "<p> fonts that read from left to right </p>"
      }
    }, 
    "ParticleKey": {
      "fields": {
        "ave": "<p> angular velocity </p>", 
        "rot": "<p> rotation quaternion </p>", 
        "time": "<p> when this key happens </p>", 
        "co": "<p> when changed update size of struct to copy_particleKey()!! location </p>", 
        "vel": "<p> velocity </p>"
      }
    }, 
    "bPathCompare": {
      "fields": {
        "path": "<p> FILE_MAXDIR </p>"
      }
    }, 
    "Camera": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "stereo": "<p> Stereo settings </p>", 
        "dtx": "<p> draw type extra </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "type": "<p> CAM_PERSP, CAM_ORTHO or CAM_PANO </p>", 
        "YF_dofdist": "<p> yafray: dof params qdn: yafray var 'YF_dofdist' now enabled for defocus composite node as well. The name was not changed so that no other files need to be modified </p>"
      }
    }, 
    "DataTransferModifierData": {
      "fields": {
        "layers_select_src": "<p> DT_MULTILAYER_INDEX_MAX; See DT_FROMLAYERS_ enum in ED_object.h </p>", 
        "layers_select_dst": "<p> DT_MULTILAYER_INDEX_MAX; See DT_TOLAYERS_ enum in ED_object.h </p>", 
        "mix_mode": "<p> See CDT_MIX_ enum in BKE_customdata.h </p>", 
        "vmap_mode": "<p> See MREMAP_MODE_ enum in BKE_mesh_mapping.h </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "data_types": "<p> See DT_TYPE_ enum in ED_object.h </p>"
      }
    }, 
    "LineStyleColorModifier_Tangent": {
      "doc": "<p> Tangent modifiers </p>"
    }, 
    "NlaStrip": {
      "doc": "<p><hr/> \n NLA - Non-Linear Animation NLA Strips -------------------------------<mdash/><mdash/>  NLA {@link Strip}  (strip)</p><p> A NLA {@link Strip}  is a container for the reuse of Action data, defining parameters to control the remapping of the Action data to some destination. </p>", 
      "fields": {
        "flag": "<p> settings </p>", 
        "blendmode": "<p> strip blending mode (layer-based mixing) </p>", 
        "actend": "<p> range of the action to use </p>", 
        "scale": "<p> The amount the action range is scaled by (only when no F-Curves) </p>", 
        "extendmode": "<p> strip extrapolation mode (time-based mixing) </p>", 
        "modifiers": "<p> TODO: move out? </p><p> F-Curve modifiers to be applied to the entire strip's referenced F-Curves </p>", 
        "type": "<p> type of NLA strip </p>", 
        "strips": "<p> 'Child' strips (used for 'meta' strips) </p>", 
        "influence": "<p> Influence of strip </p>", 
        "strip_time": "<p> Current 'time' within action being used (automatically evaluated, but can be overridden) </p>", 
        "act": "<p> Action that is referenced by this strip (strip is 'user' of the action) </p>", 
        "speaker_handle": "<p> handle for speaker objects </p>", 
        "repeat": "<p> The number of times to repeat the action range (only when no F-Curves) </p>", 
        "blendout": "<p> strip blending length (only used when there are no F-Curves) </p>", 
        "name": "<p> User-Visible Identifier for {@link Strip}  - MAX_ID_NAME-2 </p>", 
        "end": "<p> extents of the strip </p>", 
        "fcurves": "<p> F-Curves for controlling this strip's influence and timing </p>", 
        "remap": "<p> Remapping info this strip (for tweaking correspondence of action with context) </p>"
      }
    }, 
    "ListBase": {
      "doc": "<p> never change the size of this! genfile.c detects pointerlen with it </p>"
    }, 
    "Paint": {
      "doc": "<p>{@link Paint}  Tool {@link Base}  </p>", 
      "fields": {
        "cavity_curve": "<p> cavity curve </p>", 
        "paint_cursor": "<p> WM {@link Paint}  cursor </p>", 
        "num_input_samples": "<p>{@link Paint}  stroke can use up to PAINT_MAX_INPUT_SAMPLES inputs to smooth the stroke </p>", 
        "symmetry_flags": "<p> flags used for symmetry </p>", 
        "flags": "<p> enum PaintFlags </p>"
      }
    }, 
    "Scene": {
      "doc": "<p><hr/> \n {@link Scene}  ID-Block </p>", 
      "fields": {
        "cursor": "<p> 3d cursor location </p>", 
        "flag": "<p> various settings </p>", 
        "physics_settings": "<p> Physics simulation settings </p>", 
        "customdata_mask": "<p> XXX. runtime flag for drawing, actually belongs in the window, only used by BKE_object_handle_update() </p>", 
        "twcent": "<p> center for transform widget </p>", 
        "customdata_mask_modal": "<p> XXX. same as above but for temp operator use (gl renders) </p>", 
        "active_keyingset": "<p> User-Defined KeyingSets index of the active {@link KeyingSet} . first {@link KeyingSet}  has index 1, 'none' active is 0, 'add new' is -1 </p>", 
        "keyingsets": "<p> s for this scene </p>", 
        "stats": "<p> default allocated now </p>", 
        "toolsettings": "<p> default allocated now </p>", 
        "gpd": "<p> Grease Pencil </p>", 
        "twmax": "<p> boundbox of selection for transform widget </p>", 
        "lay_updated": "<p> runtime flag, has layer ever been updated since load? </p>", 
        "ed": "<p> sequence editor data is allocated here </p>", 
        "fps_info": "<p> (runtime) info/cache used for presenting playback framerate info to the user </p>", 
        "depsgraph": "<p> none of the dependency graph vars is mean to be saved </p>", 
        "obedit": "<p> name replaces old G.obedit </p>", 
        "framing": "<p> Game Settings </p>", 
        "lay": "<p> bitflags for layer visibility </p>", 
        "rigidbody_world": "<p> RigidBody simulation world+settings </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "r": "<p> migrate or replace? depends on some internal things... no, is on the right place (ton) </p>", 
        "unit": "<p> Units </p>", 
        "layact": "<p> active layer </p>", 
        "basact": "<p> active base </p>", 
        "view_settings": "<p> Color Management </p>", 
        "clip": "<p> Movie Tracking active movie clip </p>"
      }
    }, 
    "ImageFormatData": {
      "doc": "<p><hr/> \n Generic image format settings, this is used for {@link NodeImageFile}  and IMAGE_OT_save_as operator too.</p><p> note: its a bit strange that even though this is an image format struct the imtype can still be used to select video formats. RNA ensures these enum's are only selectable for render output. </p>", 
      "fields": {
        "exr_codec": "<p><mdash/>  format specific <mdash/>  OpenEXR </p>", 
        "depth": "<p> note, video types should only ever be set from this structure when used from {@link RenderData}  bits per channel, R_IMF_CHAN_DEPTH_8 -> 32, not a flag, only set 1 at a time </p>", 
        "flag": "<p> generic options for all image types, alpha zbuffer </p>", 
        "tiff_codec": "<p> TIFF </p>", 
        "compress": "<p> (0 - 100), eg: png compression </p>", 
        "views_format": "<p> Multiview </p>", 
        "planes": "<p><ul><li><p> R_IMF_PLANES_BW, R_IMF_PLANES_RGB, R_IMF_PLANES_RGBA </p></li></ul> \nR_IMF_PLANES_BW, R_IMF_PLANES_RGB, R_IMF_PLANES_RGBA \n</p>", 
        "view_settings": "<p> color management </p>", 
        "jp2_flag": "<p> Jpeg2000 </p>", 
        "imtype": "<p> R_IMF_IMTYPE_PNG, R_... </p>", 
        "cineon_flag": "<p> Cineon </p>", 
        "quality": "<p> (0 - 100), eg: jpeg quality </p>"
      }
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "doc": "<p> Calligraphic thickness modifier </p>", 
      "fields": {
        "orientation": "<p> in radians! </p>"
      }
    }, 
    "GP_BrushEdit_Settings": {
      "doc": "<p> GPencil Stroke Sculpting Settings </p>", 
      "fields": {
        "brush": "<p> TOT_GP_EDITBRUSH_TYPES </p>", 
        "flag": "<p> eGP_BrushEdit_SettingsFlag </p>", 
        "alpha": "<p> alpha factor for selection color </p>", 
        "paintcursor": "<p> runtime </p>", 
        "brushtype": "<p> eGP_EditBrush_Types </p>"
      }
    }, 
    "bMotionPathVert": {
      "doc": "<p><hr/> \n Visualization Motion Paths ---------------------------<mdash/><mdash/><mdash/>  (used for Pose Channels and Objects) Data point for motion path (mpv) </p>", 
      "fields": {
        "flag": "<p> quick settings </p>", 
        "co": "<p> coordinates of point in 3D-space </p>"
      }
    }, 
    "CastModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "bJoystickSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "MovieClip": {
      "fields": {
        "cache": "<p> cache for different stuff, not in file </p>", 
        "lastsize": "<p> size of last accessed frame </p>", 
        "colorspace_settings": "<p> from a file. affects only a way how scene frame is mapping to a file name and not touches other data associated with a clip color management </p>", 
        "tracking_context": "<p> context of tracking job used to synchronize data like framenumber in {@link SpaceClip}  clip user </p>", 
        "start_frame": "<p> scene frame number footage starts playing at </p>", 
        "source": "<p> sequence or movie </p>", 
        "tracking": "<p> data for SfM tracking </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "proxy": "<p> proxy to clip data </p>", 
        "frame_offset": "<p> affects all data which is associated with a clip such as motion tracking, camera reconstruciton and so offset which is adding to a file number when reading frame </p>", 
        "len": "<p> length of movie </p>", 
        "lastframe": "<p> last accessed frame number </p>", 
        "aspy": "<p> display aspect </p>", 
        "name": "<p> file path, 1024 = FILE_MAX </p>", 
        "gpd": "<p> grease pencil data </p>", 
        "anim": "<p> movie source data </p>"
      }
    }, 
    "wmKeyMapDiffItem": {
      "doc": "<p> used instead of {@link wmKeyMapItem}  for diff keymaps </p>"
    }, 
    "bMouseSensor": {
      "doc": "<p> Defines the settings of a mouse sensor. </p>", 
      "fields": {
        "mode": "<p> flag to choose material or property </p>", 
        "type": "<p> The type of key this sensor listens to. </p>"
      }
    }, 
    "CameraStereoSettings": {
      "doc": "<p><hr/> \n Stereo Settings </p>", 
      "fields": {
        "pole_merge_angle_from": "<p> Cut-off angle at which interocular distance start to fade down. </p>", 
        "pole_merge_angle_to": "<p> Cut-off angle at which interocular distance stops to fade down. </p>"
      }
    }, 
    "bDeformGroup": {
      "doc": "<p> Vertex Groups - Name Info </p>", 
      "fields": {
        "flag": "<p> need this flag for locking weights </p>", 
        "name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "ImageUser": {
      "doc": "<p>{@link ImageUser}  is in Texture, in Nodes, Background {@link Image} , {@link Image}  Window, .... should be used in conjunction with an {@link ID}  * to {@link Image} . </p>", 
      "fields": {
        "cycl": "<p> fields/image in movie, cyclic flag </p>", 
        "frames": "<p> total amount of frames to use </p>", 
        "sfra": "<p> offset within movie, start frame in global time </p>", 
        "multiview_eye": "<p> multiview current eye - for internal use of drawing routines </p>", 
        "layer": "<p> listbase indices, for menu browsing or retrieve buffer </p>", 
        "scene": "<p> to retrieve render result </p>", 
        "framenr": "<p> movies, sequences: current to display </p>"
      }
    }, 
    "MTex": {
      "fields": {
        "norfac": "<p> material </p>", 
        "timefac": "<p> particles </p>", 
        "shadowfac": "<p> lamp </p>", 
        "uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "zenupfac": "<p> world </p>", 
        "colfac": "<p> common </p>"
      }
    }, 
    "GPUDOFSettings": {
      "doc": "<p> properties for dof effect </p>", 
      "fields": {
        "focus_distance": "<p> focal distance for depth of field </p>"
      }
    }, 
    "uiList": {
      "fields": {
        "next": "<p> some list UI data need to be saved in file </p>", 
        "list_id": "<p> defined as UI_MAX_NAME_STR </p>", 
        "dyn_data": "<p> Dynamic data (runtime). </p>", 
        "filter_byname": "<p> Filtering data. defined as UI_MAX_NAME_STR </p>", 
        "layout_type": "<p> How items are layedout in the list </p>", 
        "type": "<p> runtime </p>", 
        "properties": "<p> Custom sub-classes properties. </p>"
      }
    }, 
    "ParticleSystemModifierData": {
      "fields": {
        "dm_deformed": "<p> Deformed-onle DM - its topology is same as orig mesh one. </p>", 
        "dm_final": "<p> Final DM - its topology may differ from orig mesh. </p>"
      }
    }, 
    "SurfaceModifierData": {
      "fields": {
        "v": "<p> velocity </p>", 
        "x": "<p> old position </p>", 
        "bvhtree": "<p> bounding volume hierarchy of the mesh faces </p>"
      }
    }, 
    "GameDome": {
      "doc": "<p><hr/> \n Game Engine - Dome </p>"
    }, 
    "Brush": {
      "fields": {
        "smooth_stroke_radius": "<p> turning radius (in pixels) for smooth stroke </p>", 
        "flag": "<p> general purpose flag </p>", 
        "fill_threshold": "<p> fill tool </p>", 
        "curve": "<p> falloff curve </p>", 
        "blend": "<p> blend mode </p>", 
        "gradient_stroke_mode": "<p> source for stroke color gradient application </p>", 
        "vertexpaint_tool": "<p> active vertex/weight paint blend mode (poorly named) </p>", 
        "sharp_threshold": "<p> soften/sharpen </p>", 
        "rgb": "<p> color </p>", 
        "spacing": "<p> spacing of paint operations </p>", 
        "smooth_stroke_factor": "<p> higher values limit fast changes in the stroke direction </p>", 
        "rate": "<p> paint operations / second (airbrush) </p>", 
        "alpha": "<p> opacity </p>", 
        "height": "<p> affectable height of brush (layer height for layer tool, i.e.) </p>", 
        "mask_tool": "<p> enum BrushMaskTool, only used if sculpt_tool is SCULPT_TOOL_MASK </p>", 
        "mask_pressure": "<p> pressure influence for mask </p>", 
        "icon_filepath": "<p> 1024 = FILE_MAX </p>", 
        "rake_factor": "<p> rake actual data (not texture), used for sculpt </p>", 
        "gradient": "<p> color gradient </p>", 
        "weight": "<p> brush weight </p>", 
        "sculpt_tool": "<p> active sculpt tool </p>", 
        "texture_overlay_alpha": "<p> overlay </p>", 
        "jitter_absolute": "<p> absolute jitter in pixels </p>", 
        "secondary_rgb": "<p> background color </p>", 
        "ob_mode": "<p> & with ob->mode to see if the brush is compatible, use for display only. </p>", 
        "jitter": "<p> jitter the position of the brush </p>", 
        "size": "<p> brush diameter </p>", 
        "sculpt_plane": "<p> the direction of movement for sculpt vertices </p>", 
        "imagepaint_tool": "<p> active image paint tool </p>", 
        "plane_offset": "<p> offset for plane brushes (clay, flatten, fill, scrape) </p>", 
        "gradient_fill_mode": "<p> source for fill tool color gradient application </p>"
      }
    }, 
    "FMod_Envelope": {
      "doc": "<p> envelope-like adjustment to values (for fade in/out) </p>", 
      "fields": {
        "data": "<p> data-points defining envelope to apply (array) </p>", 
        "max": "<p> distances from 'middle-value' for 1:1 envelope influence </p>", 
        "totvert": "<p> number of envelope points </p>", 
        "midval": "<p> value that envelope's influence is centered around / based on </p>"
      }
    }, 
    "bRaySensor": {
      "fields": {
        "mode": "<p> struct {@link Material}  *ma; ////< XXX remove materialName </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "wmOperator": {
      "doc": "<p> this one is the operator itself, stored in files for macros etc operator + operatortype should be able to redo entirely, but for different contextes </p>", 
      "fields": {
        "layout": "<p> runtime for drawing </p>", 
        "reports": "<p> errors and warnings storage </p>", 
        "macro": "<p> list of operators, can be a tree </p>", 
        "idname": "<p> saved used to retrieve type pointer </p>", 
        "customdata": "<p> custom storage, only while operator runs </p>", 
        "py_instance": "<p> python stores the class instance here </p>", 
        "type": "<p> runtime operator type definition from idname </p>", 
        "opm": "<p> current running macro, not saved </p>", 
        "properties": "<p> saved, user-settable properties </p>", 
        "ptr": "<p> rna pointer to access properties </p>"
      }
    }, 
    "EditNurb": {
      "fields": {
        "nurbs": "<p> base of nurbs' list (old Curve->editnurb) </p>", 
        "shapenr": "<p> shape key being edited </p>", 
        "keyindex": "<p> index data for shape keys </p>"
      }
    }, 
    "bConstraint": {
      "doc": "<p> A Constraint </p>", 
      "fields": {
        "lin_error": "<p> old animation system, deprecated for 2.5 below are readonly fields that are set at runtime by the solver for use in the GE (only IK atm) residual error on constraint expressed in blender unit </p>", 
        "flag": "<p> Flag - General Settings </p>", 
        "data": "<p> Constraint data (a valid constraint type) </p>", 
        "ownspace": "<p> Space that owner should be evaluated in </p>", 
        "tarspace": "<p> Space that target should be evaluated in (only used if 1 target) </p>", 
        "name": "<p> Constraint name, MAX_NAME </p>", 
        "enforce": "<p> Amount of influence exherted by constraint (0.0-1.0) </p>", 
        "ipo": "<p><p> local influence ipo or driver </p>\n@deprecated\n Deprecatedlocal influence ipo or driver </p>", 
        "type": "<p> Constraint type </p>", 
        "headtail": "<p> Point along subtarget bone where the actual target is. 0=head (default for all), 1=tail </p>", 
        "rot_error": "<p> residual error on constraint expressed in radiant </p>"
      }
    }, 
    "bMouseActuator": {
      "fields": {
        "type": "<p> 0=Visibility, 1=Look </p>"
      }
    }, 
    "FModifier": {
      "doc": "<p><hr/> \n F-Curve DataTypes Modifiers --------------------------------<mdash/><mdash/>  F-Curve Modifiers (fcm)</p><p> These alter the way F-Curves behave, by altering the value that is returned when evaluating the curve's data at some time (t). </p>", 
      "fields": {
        "flag": "<p> settings for the modifier </p>", 
        "data": "<p> pointer to modifier data </p>", 
        "blendin": "<p> number of frames from sfra before modifier takes full influence </p>", 
        "sfra": "<p> start frame of restricted frame-range </p>", 
        "blendout": "<p> number of frames from efra before modifier fades out </p>", 
        "name": "<p> user-defined description for the modifier - MAX_ID_NAME-2 </p>", 
        "type": "<p> type of f-curve modifier </p>", 
        "influence": "<p> the amount that the modifier should influence the value </p>", 
        "efra": "<p> end frame of restricted frame-range </p>"
      }
    }, 
    "ConsoleLine": {
      "doc": "<p> Console ================================================ Console content </p>", 
      "fields": {
        "len_alloc": "<p> keep these 3 vars so as to share free, realloc funcs allocated length </p>", 
        "len": "<p> real len - strlen() </p>", 
        "type": "<p> only for use when in the 'scrollback' listbase </p>"
      }
    }, 
    "BGpic": {
      "doc": "<p> This is needed to not let VC choke on near and far... old proprietary MS extensions... ******************************** The near/far thing is a Win EXCEPTION. Thus, leave near/far in the code, and patch for windows. Background Picture in 3D-View </p>"
    }, 
    "FPoint": {
      "doc": "<p> F-Curves --------------------------------<mdash/><mdash/>  {@link FPoint}  (fpt)</p><p> This is the bare-minimum data required storing motion samples. Should be more efficient than using BPoints, which contain a lot of other unnecessary data... </p>", 
      "fields": {
        "flag": "<p> selection info </p>", 
        "vec": "<p> time + value </p>"
      }
    }, 
    "MultiresCol": {
      "doc": "<p>{@link Multires}  structs kept for compatibility with old files </p>"
    }, 
    "Report": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "len": "<p> strlen(message), saves some time calculating the word wrap </p>", 
        "type": "<p> ReportType </p>"
      }
    }, 
    "SmokeModifierData": {
      "fields": {
        "coll": "<p> collision objects </p>", 
        "type": "<p> domain, inflow, outflow, ... </p>", 
        "flow": "<p> inflow, outflow, smoke objects </p>"
      }
    }, 
    "LaplacianDeformModifierData": {
      "fields": {
        "anchor_grp_name": "<p> MAX_VGROUP_NAME </p>", 
        "cache_system": "<p> runtime only </p>"
      }
    }, 
    "ThemeWireColor": {
      "doc": "<p> set of colors for use as a custom color set for Objects/Bones wire drawing </p>"
    }, 
    "ParticleSystem": {
      "fields": {
        "next": "<p> note1: make sure all (runtime) are NULL's in 'copy_particlesystem' XXX, this function is no more! - need to invstigate note2: make sure any uses of this struct in DNA are accounted for in 'BKE_object_copy_particlesystems' </p>", 
        "parent": "<p> particles from global space -> parent space </p>", 
        "hair_out_dm": "<p> input/output for cloth simulation </p>", 
        "part": "<p> particle settings </p>", 
        "childcachebufs": "<p> buffers for the above </p>", 
        "targets": "<p> used for keyed and boid physics </p>", 
        "pathcache": "<p> path cache (runtime) </p>", 
        "childcache": "<p> child cache (runtime) </p>", 
        "lattice_deform_data": "<p> run-time only lattice deformation data </p>", 
        "pointcache": "<p> point cache </p>", 
        "particles": "<p> (parent) particles </p>", 
        "bvhtree": "<p> used for interactions with self and other systems </p>", 
        "free_edit": "<p> free callback </p>", 
        "edit": "<p> particle editmode (runtime) </p>", 
        "bb_uvname": "<p> billboard uv name, MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "imat": "<p> used for duplicators </p>", 
        "tree": "<p> used for interactions with self and other systems </p>", 
        "clmd": "<p> cloth simulation for hair </p>", 
        "rt3": "<p> vertex groups, 0==disable, 1==starting index </p>", 
        "dt_frac": "<p> current time step, as a fraction of a frame </p>", 
        "renderdata": "<p> temporary storage during render </p>", 
        "vgroup": "<p> if you change these remember to update array lengths to PSYS_TOT_VG! </p>", 
        "name": "<p> particle system name, MAX_NAME </p>", 
        "_pad": "<p> spare capacity </p>", 
        "child": "<p> child particles </p>"
      }
    }, 
    "Material": {
      "fields": {
        "texco": "<p> runtime - OR'd from 'mtex' </p>", 
        "lbias": "<p> factor to multiply lampbias with (0.0 = no mult) </p>", 
        "ramp_col": "<p> ramp colors </p>", 
        "shadowonly_flag": "<p> \"shadowsonly\" type </p>", 
        "rgbsel": "<p> for buttons and render </p>", 
        "vol": "<p> end synced with render_types.h </p>", 
        "param": "<p> XXX param[4] needs review and improvement (shader system as whole anyway) This is nasty reused variable for different goals and not easy to RNAify nicely. -jesterKing size, smooth, size, smooth, for toonshader, 0 (fac) and 1 (fresnel) also for fresnel shader </p>", 
        "diff_shader": "<p> shaders </p>", 
        "mode_l": "<p> mode_l is the or-ed result of all layer modes </p>", 
        "group": "<p> light group </p>", 
        "sss_radius": "<p> subsurface scattering </p>", 
        "shad_alpha": "<p> in use for irregular shadowbuffer </p>", 
        "strand_uvname": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "index": "<p> custom index for render passes </p>", 
        "line_col": "<p> Freestyle line settings </p>", 
        "gpumaterial": "<p> runtime </p>", 
        "shade_flag": "<p> like Cubic interpolation </p>", 
        "sbias": "<p> shadow bias to prevent terminator prob </p>", 
        "friction": "<p> dynamic properties </p>", 
        "mapflag": "<p> mapping </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "filter": "<p> filter added, for raytrace transparency and transmissivity </p>", 
        "ml_flag": "<p> ml_flag is for disable base material </p>", 
        "texpaintslot": "<p> cached slot for painting. Make sure to recalculate before use with refresh_texpaint_image_cache </p>", 
        "r": "<p> note, keep this below synced with render_types.h </p>", 
        "paint_active_slot": "<p> texture painting </p>", 
        "mapto_textured": "<p> render-time cache to optimize texture lookups </p>", 
        "mode2_l": "<p> additional mode flags </p>", 
        "nmap_tangent_names": "<p> multiple tangent (Normal Map node) [MAX_MTFACE+1][MAX_NAME]; +1 for empty name </p>"
      }
    }, 
    "bNodeSocketValueString": {
      "fields": {
        "value": "<p> 1024 = FILEMAX </p>"
      }
    }, 
    "MLoop": {
      "doc": "<p> the e here is because we want to move away from relying on edge hashes. </p>", 
      "fields": {
        "e": "<p> edge index </p>", 
        "v": "<p> vertex index </p>"
      }
    }, 
    "SimpleDeformModifierData": {
      "fields": {
        "mode": "<p> deform function </p>", 
        "origin": "<p> object to control the origin of modifier space coordinates </p>", 
        "limit": "<p> lower and upper limit </p>", 
        "vgroup_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "factor": "<p> factors to control simple deforms </p>", 
        "axis": "<p> lock axis (for taper and strech) </p>"
      }
    }, 
    "NodeShaderScript": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "ShrinkwrapModifierData": {
      "fields": {
        "subsurfLevels": "<p> If using projection over vertex normal this controls the level of subsurface that must be done before getting the vertex coordinates and normal </p>", 
        "projLimit": "<p> limit the projection ray cast </p>", 
        "auxTarget": "<p> additional shrink target </p>", 
        "shrinkType": "<p> shrink type projection </p>", 
        "shrinkOpts": "<p> shrink options </p>", 
        "projAxis": "<p> axis to project over </p>", 
        "vgroup_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "keepDist": "<p> distance offset to keep from mesh/projection point </p>", 
        "target": "<p> shrink target </p>"
      }
    }, 
    "ClothSimSettings": {
      "doc": "<p> This struct contains all the global data required to run a simulation. At the time of this writing, this structure contains data appropriate to run a simulation as described in Deformation Constraints in a Mass-Spring Model to Describe Rigid Cloth Behavior by Xavier Provot.</p><p> I've tried to keep similar, if not exact names for the variables as are presented in the paper. Where I've changed the concept slightly, as in stepsPerFrame compared to the time step in the paper, I've used variables with different names to minimize confusion. </p>", 
      "fields": {
        "bending_damping": "<p> XXX various hair stuff should really be separate, this struct is a horrible mess alreadydamping of bending springs </p>", 
        "velocity_smooth": "<p> smoothing of velocities for hair </p>", 
        "max_shear": "<p> max shear scaling value, UNUSED </p>", 
        "avg_spring_len": "<p> used for normalized springs </p>", 
        "mass": "<p> The mass of the entire cloth. </p>", 
        "flags": "<p> flags, see CSIMSETT_FLAGS enum above. </p>", 
        "vgroup_shrink": "<p> vertex group for shrinking cloth </p>", 
        "eff_wind_scale": "<p> Scaling of effector wind (see softbody_calc_forces). </p>", 
        "dt": "<p> This is the duration of our time step, computed. </p>", 
        "structural": "<p> Structural spring stiffness. </p>", 
        "max_struct": "<p> max structural scaling value, min is \"structural\" </p>", 
        "vgroup_struct": "<p> vertex group for scaling structural stiffness </p>", 
        "eff_force_scale": "<p> Scaling of effector forces (see softbody_calc_forces). </p>", 
        "mingoal": "<p> see SB </p>", 
        "stepsPerFrame": "<p> Number of time steps per frame. </p>", 
        "shrink_min": "<p> min amount to shrink cloth by 0.0f (no shrink) - 1.0f (shrink to nothing) </p>", 
        "timescale": "<p> parameter how fast cloth runs </p>", 
        "vel_damping": "<p> damp the velocity to speed up getting to the resting position </p>", 
        "cache": "<p> UNUSED atm </p>", 
        "shear": "<p> Shear spring stiffness. </p>", 
        "preroll": "<p><p> How many frames of simulation to do before we start. </p>\n@deprecated\n DeprecatedHow many frames of simulation to do before we start. </p>", 
        "density_strength": "<p> influence of hair density </p>", 
        "shrink_max": "<p> max amount to shrink cloth by 0.0f (no shrink) - 1.0f (shrink to nothing) </p>", 
        "solver_type": "<p> which solver should be used? txold </p>", 
        "max_sewing": "<p> max sewing force </p>", 
        "density_target": "<p> minimum density for hair </p>", 
        "maxgoal": "<p> see SB </p>", 
        "maxspringlen": "<p> in percent!; if tearing enabled, a spring will get cut </p>", 
        "bending": "<p> Flexion spring stiffness. </p>", 
        "voxel_cell_size": "<p> size of voxel grid cells for continuum dynamics </p>", 
        "vgroup_mass": "<p> optional vertexgroup name for assigning weight. </p>", 
        "presets": "<p> used for presets on GUI </p>", 
        "Cdis": "<p> Mechanical damping of springs. </p>", 
        "time_scale": "<p> multiplies cloth speed </p>", 
        "gravity": "<p> Gravity/external force vector. </p>", 
        "Cvi": "<p> Viscous/fluid damping. </p>", 
        "shapekey_rest": "<p> vertex group for scaling structural stiffness </p>", 
        "collider_friction": "<p> friction with colliders </p>", 
        "vgroup_bend": "<p> vertex group for scaling bending stiffness </p>", 
        "max_bend": "<p> max bending scaling value, min is \"bending\" </p>"
      }
    }, 
    "BuildModifierData": {
      "fields": {
        "seed": "<p> (int) random seed </p>", 
        "randomize": "<p> (bool) whether order of vertices is randomized - legacy files (for readfile conversion) </p>"
      }
    }, 
    "QuicktimeCodecSettings": {
      "fields": {
        "codec": "<p> Settings not available in current QTKit API </p>", 
        "codecTemporalQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>", 
        "bitRate": "<p> bitrate in bps </p>", 
        "codecSpatialQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>", 
        "minTemporalQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>", 
        "audiocodecType": "<p> Audio Codec settings </p>", 
        "codecType": "<p> Codec settings detailed for 2.5 implementation Types defined in quicktime_export.h </p>", 
        "minSpatialQuality": "<p> in 0-100 scale, to be translated in 0-1024 for qt use </p>"
      }
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "exposure": "<p> fstop exposure </p>", 
        "curve_mapping": "<p> pre-display RGB curves transform </p>", 
        "look": "<p> look which is being applied when displaying buffer on the screen (prior to view transform) </p>", 
        "gamma": "<p> post-display gamma transform </p>", 
        "view_transform": "<p> view transform which is being applied when displaying buffer on the screen </p>"
      }
    }, 
    "bDistLimitConstraint": {
      "doc": "<p> Limit Distance Constraint </p>", 
      "fields": {
        "mode": "<p> how to limit in relation to clamping sphere </p>", 
        "flag": "<p> settings </p>", 
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "dist": "<p> distance (radius of clamping sphere) from target </p>", 
        "soft": "<p> distance from clamping-sphere to start applying 'fade' </p>"
      }
    }, 
    "bStateActuator": {
      "fields": {
        "type": "<p> 0=Set, 1=Add, 2=Rem, 3=Chg </p>", 
        "mask": "<p> the bits to change </p>"
      }
    }, 
    "EffectorWeights": {
      "fields": {
        "weight": "<p> effector type specific weights </p>", 
        "group": "<p> only use effectors from this group of objects </p>"
      }
    }, 
    "FMod_FunctionGenerator": {
      "doc": "<p> 'Built-In Function' Generator modifier data</p><p> This uses the general equation for equations: y = amplitude * fn(phase_multiplier*x + phase_offset) + y_offset</p><p> where amplitude, phase_multiplier/offset, y_offset are user-defined coefficients, x is the evaluation 'time', and 'y' is the resultant value </p>", 
      "fields": {
        "amplitude": "<p> coefficients for general equation (as above) </p>", 
        "flag": "<p> eFMod_Generator_flags </p>", 
        "type": "<p> flags eFMod_Generator_Functions </p>"
      }
    }, 
    "BoidState": {
      "fields": {
        "signal_id": "<p> signal </p>", 
        "ruleset_type": "<p> rules </p>"
      }
    }, 
    "Image": {
      "fields": {
        "renders": "<p> IMA_MAX_RENDER_SLOT </p>", 
        "cache": "<p> not written in file </p>", 
        "repbind": "<p> for repeat of parts of images </p>", 
        "colorspace_settings": "<p> color management </p>", 
        "anims": "<p> sources from: </p>", 
        "gputexture": "<p> not written in file 2 = TEXTARGET_COUNT </p>", 
        "tpageflag": "<p> texture page </p>", 
        "bindcode": "<p> only for current image... 2 = TEXTARGET_COUNT </p>", 
        "render_slots": "<p> 8 = IMA_MAX_RENDER_SLOT </p>", 
        "eye": "<p> Multiview for viewer node stereoscopy </p>", 
        "gen_x": "<p> for generated images </p>", 
        "aspx": "<p> display aspect - for UV editing images resized for faster openGL display </p>", 
        "name": "<p> file path, 1024 = FILE_MAX </p>", 
        "lastupdate": "<p> game engine tile animation </p>", 
        "packedfile": "<p><p> deprecated </p>\n@deprecated\n Deprecateddeprecated </p>", 
        "views": "<p>{@link ImageView}  </p>"
      }
    }, 
    "RegionView3D": {
      "doc": "<p><hr/> \n </p>", 
      "fields": {
        "camdy": "<p> camera view offsets, 1.0 = viewplane moves entire width/height </p>", 
        "ofs_lock": "<p> normalized offset for locked view: (-1, -1) bottom left, (1, 1) upper right </p>", 
        "viewmat": "<p> GL_MODELVIEW matrix </p>", 
        "dist": "<p> distance from 'ofs' along -viewinv[2] vector, where result is negative as is 'ofs' </p>", 
        "viewcamtexcofac": "<p> offset/scale for camera glsl texcoords </p>", 
        "winmat": "<p> GL_PROJECTION matrix </p>", 
        "viewmatob": "<p> viewmat/persmat multiplied with object matrix, while drawing and selection </p>", 
        "pixsize": "<p> runtime only </p>", 
        "sms": "<p> animated smooth view </p>", 
        "is_persp": "<p> check if persp/ortho view, since 'persp' cant be used for this since it can have cameras assigned as well. (only set in view3d_winmatrix_set) </p>", 
        "lviewquat": "<p> last view (use when switching out of camera view) </p>", 
        "clip_local": "<p> clip in object space, means we can test for clipping in editmode without first going into worldspace </p>", 
        "persmat": "<p> viewmat*winmat </p>", 
        "viewlock_quad": "<p> options for quadview (store while out of quad view) </p>", 
        "twmat": "<p> transform widget matrix </p>", 
        "viewquat": "<p> view rotation, must be kept normalized </p>", 
        "camzoom": "<p> viewport zoom on the camera frame, see BKE_screen_view3d_zoom_to_fac </p>", 
        "localvd": "<p> allocated backup of its self while in localview </p>", 
        "tw_idot": "<p> manipulator runtime: (1 - dot) product with view vector (used to check view alignment) </p>", 
        "persinv": "<p> inverse of persmat </p>", 
        "lview": "<p> lpersp can never be set to 'RV3D_CAMOB' </p>", 
        "ofs": "<p> view center & orbit pivot, negative of worldspace location, also matches -viewinv[3][0:3] in ortho mode. </p>", 
        "clip": "<p> user defined clipping planes </p>", 
        "rot_angle": "<p> active rotation from NDOF or elsewhere </p>", 
        "viewinv": "<p> inverse of viewmat </p>"
      }
    }, 
    "SpaceAction": {
      "doc": "<p> Action Editor Space. This is defined here instead of in {@link DNA_space_types.h}  </p>", 
      "fields": {
        "ads": "<p> the currently active context (when not showing action) </p>", 
        "timeslide": "<p> for Time-Slide transform mode drawing - current frame? </p>", 
        "flag": "<p> flag: bitmapped settings; </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "autosnap": "<p> mode: editing context; autosnap: automatic keyframe snapping mode </p>", 
        "v2d": "<p><p> copied to region </p>\n@deprecated\n Deprecatedcopied to region </p>", 
        "action": "<p> the currently active action </p>"
      }
    }, 
    "SpaceFile": {
      "doc": "<p> File Browser </p>", 
      "fields": {
        "op": "<p> operator that is invoking fileselect op->exec() will be called on the 'Load' button. if operator provides op->cancel(), then this will be invoked on the cancel button. </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "files": "<p> holds the list of files to show </p>", 
        "params": "<p> config and input for file select </p>", 
        "folders_next": "<p> holds the list of next directories (pushed from previous) to show </p>", 
        "folders_prev": "<p> holds the list of previous directories to show </p>"
      }
    }, 
    "ChildParticle": {
      "doc": "<p> Child particles are created around or between parent particles </p>", 
      "fields": {
        "parent": "<p> num is face index on the final derived mesh </p>", 
        "pa": "<p> nearest particles to the child, used for the interpolation </p>", 
        "w": "<p> interpolation weights for the above particles </p>", 
        "foffset": "<p> face vertex weights and offset </p>"
      }
    }, 
    "FileGlobal": {
      "doc": "<p>{@link FileGlobal}  stores a part of the current user-interface settings at the moment of saving, and the file-specific settings. </p>", 
      "fields": {
        "build_commit_timestamp": "<p> commit timestamp from buildinfo </p>", 
        "filename": "<p> file path where this was saved, for recover 1024 = FILE_MAX </p>", 
        "subvstr": "<p> needs to be here, for human fileformat recognition </p>", 
        "build_hash": "<p> hash from buildinfo </p>"
      }
    }, 
    "StripProxy": {
      "fields": {
        "file": "<p> (defaults to BL_proxy) </p>", 
        "build_tc_flags": "<p> to build </p>", 
        "build_flags": "<p> to build </p>"
      }
    }, 
    "bPivotConstraint": {
      "doc": "<p> Pivot Constraint </p>", 
      "fields": {
        "flag": "<p> General flags ePivotConstraint_Flag </p>", 
        "tar": "<p> Pivot Point: Either target object + offset, or just offset is usedtarget object (optional) </p>", 
        "offset": "<p> offset from the target to use, regardless of whether it exists </p>", 
        "subtarget": "<p> subtarget name (optional), MAX_ID_NAME-2 </p>", 
        "rotAxis": "<p> Rotation-driven activation: This option provides easier one-stop setups for footrollsrotation axes to consider for this (ePivotConstraint_Axis) </p>"
      }
    }, 
    "VFont": {
      "fields": {
        "temp_pf": "<p> runtime only, holds memory for freetype to read from TODO, replace this with blf_font_new() style loading </p>", 
        "name": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "ID": {
      "doc": "<p> There's a nasty circular dependency here.... 'void *' to the rescue! I really wonder why this is needed. </p>", 
      "fields": {
        "flag": "<p> LIB_... flags report on status of the datablock this {@link ID}  belongs to (persistent, saved to and read from .blend). </p>", 
        "name": "<p> MAX_ID_NAME </p>", 
        "tag": "<p> LIB_TAG_... tags (runtime only, cleared at read time). </p>"
      }
    }, 
    "AnimData": {
      "doc": "<p>{@link AnimData}  -------------------------------<mdash/><mdash/>  Animation data for some {@link ID}  block (adt)</p><p> This block of data is used to provide all of the necessary animation data for a datablock. Currently, this data will not be reusable, as there shouldn't be any need to do so.</p><p> This information should be made available for most if not all ID-blocks, which should enable all of its settings to be animatable locally. Animation from 'higher-up' ID-AnimData blocks may override local settings.</p><p> This datablock should be placed immediately after the {@link ID}  block where it is used, so that the code which retrieves this data can do so in an easier manner. See blenkernel/intern/anim_sys.c for details. </p>", 
      "fields": {
        "flag": "<p> settings for animation evaluation user-defined settings </p>", 
        "overrides": "<p> temp storage ({@link AnimOverride} ) of values for settings that are animated (but the value hasn't been keyframed) </p>", 
        "act_blendmode": "<p> settings for active action evaluation (based on NLA strip settings) accumulation mode for active action </p>", 
        "act_extendmode": "<p> extrapolation mode for active action </p>", 
        "recalc": "<p> depsgraph recalculation flags </p>", 
        "nla_tracks": "<p> nla-tracks </p>", 
        "act_track": "<p> active NLA-track (only set/used during tweaking, so no need to worry about dangling pointers) </p>", 
        "action": "<p> active action - acts as the 'tweaking track' for the NLA </p>", 
        "act_influence": "<p> influence for active action </p>", 
        "tmpact": "<p> temp-storage for the 'real' active action (i.e. the one used before the tweaking-action took over to be edited in the Animation Editors) </p>", 
        "drivers": "<p> 'drivers' for this ID-block's settings - FCurves, but are completely separate from those for animation datastandard user-created Drivers/Expressions (used as part of a rig) </p>", 
        "actstrip": "<p> active NLA-strip (only set/used during tweaking, so no need to worry about dangling pointers) </p>", 
        "remap": "<p> remapping-info for active action - should only be used if needed (for 'foreign' actions that aren't working correctly) </p>"
      }
    }, 
    "StripAnim": {
      "doc": "<p> strlens; 256= FILE_MAXFILE, 768= FILE_MAXDIR </p>"
    }, 
    "bNodeTreePath": {
      "doc": "<p> Nodes Editor =========================================== Node Editor </p>", 
      "fields": {
        "parent_key": "<p> base key for nodes in this tree instance </p>", 
        "view_center": "<p> v2d center point, so node trees can have different offsets in editors </p>", 
        "node_name": "<p> MAX_NAME </p>"
      }
    }, 
    "bGPDstroke": {
      "doc": "<p> Grease-Pencil Annotations - 'Stroke' -> A stroke represents a (simplified version) of the curve drawn by the user in one 'mousedown'->'mouseup' operation </p>", 
      "fields": {
        "triangles": "<p> tesselated triangles for GP Fill </p>", 
        "colorname": "<p> The pointer to color is only used during drawing, but not saved colorname is the join with the palette, but when draw, the pointer is update if the value is NULL to speed up the drawingcolor name </p>", 
        "pad": "<p> various settings about this stroke </p>", 
        "tmp_layerinfo": "<p> temporary layer name only used during copy/paste to put the stroke in the original layer </p>", 
        "inittime": "<p> Init time of stroke </p>", 
        "thickness": "<p> thickness of stroke </p>", 
        "tot_triangles": "<p> number of triangles in array </p>", 
        "palcolor": "<p> current palette color </p>", 
        "points": "<p> array of data-points for stroke </p>", 
        "totpoints": "<p> number of data-points in array </p>"
      }
    }, 
    "ScrEdge": {
      "fields": {
        "border": "<p> 1 when at edge of screen </p>"
      }
    }, 
    "bMinMaxConstraint": {
      "doc": "<p> Floor Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "pad2": "<p> for backward compatibility </p>"
      }
    }, 
    "PartEff": {
      "fields": {
        "vgroupname_v": "<p> MAX_VGROUP_NAME </p>", 
        "imat": "<p> inverse matrix of parent {@link Object}  </p>"
      }
    }, 
    "SpaceConsole": {
      "doc": "<p> Console View </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "lheight": "<p> space vars </p>", 
        "language": "<p> multiple consoles are possible, not just python </p>", 
        "history": "<p>{@link ConsoleLine} ; command history, current edited line is the first </p>", 
        "scrollback": "<p>{@link ConsoleLine} ; output </p>"
      }
    }, 
    "BoidRuleGoalAvoid": {
      "fields": {
        "signal_id": "<p> signals </p>"
      }
    }, 
    "ClothModifierData": {
      "fields": {
        "coll_parms": "<p> definition is in {@link DNA_cloth_types.h}  </p>", 
        "hairdata": "<p> XXX nasty hack, remove once hair can be separated from cloth modifier data </p>", 
        "clothObject": "<p> The internal data structure for cloth. </p>", 
        "sim_parms": "<p> definition is in {@link DNA_cloth_types.h}  </p>", 
        "point_cache": "<p> definition is in {@link DNA_object_force.h}  </p>", 
        "hair_grid_min": "<p> grid geometry values of hair continuum </p>", 
        "scene": "<p> the context, time etc is here </p>"
      }
    }, 
    "ImagePackedFile": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "RenderSlot": {
      "fields": {
        "name": "<p> 64 = MAX_NAME </p>"
      }
    }, 
    "UnifiedPaintSettings": {
      "doc": "<p><hr/> \n Unified {@link Paint}  Settings These settings can override the equivalent fields in the active {@link Brush}  for any paint mode; the flag field controls whether these values are used </p>", 
      "fields": {
        "flag": "<p> user preferences for sculpt and paint </p>", 
        "pixel_radius": "<p> radius of brush, premultiplied with pressure. In case of anchored brushes contains the anchored radius </p>", 
        "weight": "<p> unified brush weight, [0, 1] </p>", 
        "overlap_factor": "<p> normalization factor due to accumulated value of curve along spacing. Calculated when brush spacing changes to dampen strength of stroke if space attenuation is used </p>", 
        "rgb": "<p> unified brush color </p>", 
        "last_rake": "<p> rake rotation record movement of mouse so that rake can start at an intuitive angle </p>", 
        "unprojected_radius": "<p> unified radius of brush in Blender units </p>", 
        "last_location": "<p> store last location of stroke or whether the mesh was hit. Valid only while stroke is active </p>", 
        "secondary_rgb": "<p> unified brush secondary color </p>", 
        "size": "<p> unified radius of brush in pixels </p>", 
        "mask_tex_mouse": "<p> position of mouse, used to sample the mask texture </p>", 
        "colorspace": "<p> ColorSpace cache to avoid locking up during sampling </p>", 
        "stroke_active": "<p> check is there an ongoing stroke right now </p>", 
        "alpha": "<p> unified strength of brush </p>", 
        "tex_mouse": "<p> position of mouse, used to sample the texture </p>", 
        "size_pressure_value": "<p> drawing pressure </p>"
      }
    }, 
    "MappingInfoModifierData": {
      "doc": "<p> not a real modifier </p>", 
      "fields": {
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "GameFraming": {
      "doc": "<p><hr/> \n Game Engine </p>"
    }, 
    "bSensor": {
      "fields": {
        "invert": "<p> just add here, to avoid align errors... Whether or not to invert the output. </p>", 
        "level": "<p> Whether the sensor is level base (edge by default) </p>", 
        "name": "<p> MAX_NAME </p>", 
        "pad2": "<p> freq makes reference to skipped ticks between 2 active pulses </p>", 
        "type": "<p> pulse and freq are the bool toggle and frame count for pulse mode </p>"
      }
    }, 
    "MetaBall": {
      "fields": {
        "mat": "<p> material of the mother ball will define the material used of all others </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "pad": "<p> used to store MB_AUTOSPACE </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "flag2": "<p> flag is enum for updates, flag2 is bitflags for settings </p>", 
        "editelems": "<p> not saved in files, note we use pointer for editmode check </p>", 
        "rendersize": "<p> display and render res </p>", 
        "thresh": "<p> bias elements to have an offset volume. mother ball changes will effect other objects thresholds, but these may also have their own thresh as an offset </p>", 
        "lastelem": "<p> used in editmode {@link ListBase}  edit_elems; </p>"
      }
    }, 
    "bGPDbrush": {
      "doc": "<p> GP brush (used for new strokes) </p>", 
      "fields": {
        "draw_angle": "<p> angle when the brush has full thickness </p>", 
        "draw_smoothlvl": "<p> number of times to apply smooth factor to new strokes </p>", 
        "draw_angle_factor": "<p> factor to apply when angle change (only 90 degrees) </p>", 
        "draw_jitter": "<p> amount of jitter to apply to newly created strokes </p>", 
        "thickness": "<p> thickness to apply to strokes </p>", 
        "draw_smoothfac": "<p> amount of smoothing to apply to newly created strokes </p>", 
        "draw_sensitivity": "<p> amount of sensivity to apply to newly created strokes </p>", 
        "draw_random_sub": "<p> factor of randomness for subdivision </p>", 
        "sublevel": "<p> number of times to subdivide new strokes </p>", 
        "draw_strength": "<p> amount of alpha strength to apply to newly created strokes </p>", 
        "info": "<p>{@link Brush}  name. Must be unique. </p>", 
        "draw_random_press": "<p> factor of randomness for sensitivity and strength </p>"
      }
    }, 
    "FileDirEntryVariant": {
      "doc": "<p> Container for a variant, only relevant in asset context. In case there are no variants, a single one shall exist, with NULL name/description. </p>"
    }, 
    "SmokeDomainSettings": {
      "fields": {
        "p0": "<p> simulation data start point of BB in local space (includes sub-cell shift for adaptive domain) </p>", 
        "p1": "<p> end point of BB in local space </p>", 
        "adapt_margin": "<p> user settings </p>", 
        "shift": "<p> current domain shift in simulation cells </p>", 
        "flags": "<p> show up-res or low res, etc </p>", 
        "scale": "<p> largest domain size </p>", 
        "global_size": "<p> global size of domain axises </p>", 
        "smd": "<p> for fast RNA access </p>", 
        "amplify": "<p> wavelet amplification </p>", 
        "openvdb_comp": "<p> OpenVDB cache options </p>", 
        "res_min": "<p> cell min </p>", 
        "cell_size": "<p> size of simulation cell in local space </p>", 
        "dx": "<p> 1.0f / res </p>", 
        "diss_speed": "<p> in frames </p>", 
        "active_color": "<p> monitor color situation of simulation </p>", 
        "noise": "<p> noise type: wave, curl, anisotropic </p>", 
        "cache_comp": "<p> point cache options </p>", 
        "base_res": "<p> initial \"non-adapted\" resolution </p>", 
        "point_cache": "<p> Smoke uses only one cache from now on (index [0]), but keeping the array for now for reading old files. definition is in {@link DNA_object_force.h}  </p>", 
        "border_collisions": "<p> How domain border collisions are handled </p>", 
        "fluidmat_wt": "<p> high res fluid matrix </p>", 
        "fluidmat": "<p> low res fluid matrix </p>", 
        "res": "<p> data resolution (res_max-res_min) </p>", 
        "res_max": "<p> cell max </p>", 
        "dp0": "<p> difference from object center to grid start point </p>", 
        "imat": "<p> domain object imat </p>", 
        "obmat": "<p> domain obmat </p>", 
        "obj_shift_f": "<p> how much object has shifted since previous smoke frame (used to \"lock\" domain while drawing) </p>", 
        "maxres": "<p> longest axis on the BB gets this resolution assigned </p>", 
        "burning_rate": "<p> flame parameters </p>", 
        "shift_f": "<p> exact domain shift </p>"
      }
    }, 
    "TriangulateModifierData": {
      "doc": "<p> Triangulate modifier </p>"
    }, 
    "bExpressionCont": {
      "doc": "<p> ****************** CONTROLLERS ********************* </p>"
    }, 
    "bArmatureActuator": {
      "fields": {
        "posechannel": "<p> MAX_NAME </p>", 
        "constraint": "<p> MAX_NAME </p>", 
        "type": "<p> 0=run, 1=enable, 2=disable, 3=set target, 4=set weight </p>"
      }
    }, 
    "EnvMap": {
      "fields": {
        "viewscale": "<p> viewscale is for planar envmaps to zoom in or out </p>", 
        "cube": "<p> these images are dynamic, not part of the main struct </p>", 
        "ima": "<p> type ENV_LOAD </p>"
      }
    }, 
    "NormalEditModifierData": {
      "doc": "<p> Set Split Normals modifier </p>", 
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "target": "<p> Source of normals, or center of ellipsoid. </p>"
      }
    }, 
    "bConstraintChannel": {
      "doc": "<p> XXX deprecated... old AnimSys. </p><p> channels reside in {@link Object}  or Action ({@link ListBase} ) constraintChannels </p>"
    }, 
    "bItasc": {
      "doc": "<p> bPose->ikparam when bPose->iksolver=1 </p>", 
      "fields": {
        "dampeps": "<p> threshold of singular value from which the damping start progressively </p>", 
        "maxvel": "<p> max velocity to SDLS solver </p>", 
        "dampmax": "<p> maximum damping for DLS solver </p>"
      }
    }, 
    "bNodeInstanceKey": {
      "doc": "<p> Unique hash key for identifying node instances Defined as a struct because DNA does not support other typedefs. </p>"
    }, 
    "NodeImageAnim": {
      "doc": "<p> this one has been replaced with {@link ImageUser} , keep it for do_versions() </p>", 
      "fields": {
        "frames": "<p>\n@deprecated\n Deprecated</p>", 
        "nr": "<p>\n@deprecated\n Deprecated</p>", 
        "movie": "<p>\n@deprecated\n Deprecated</p>", 
        "sfra": "<p>\n@deprecated\n Deprecated</p>", 
        "cyclic": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "PointDensity": {
      "fields": {
        "vertex_attribute_name": "<p> vertex attribute layer for color source, MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "point_tree": "<p> the acceleration tree containing points </p>", 
        "coba": "<p> for time -> color </p>", 
        "falloff_curve": "<p> falloff density curve </p>", 
        "psys_cache_space": "<p> cache points in worldspace, object space, ... ? </p>", 
        "psys": "<p> index+1 in ob.particlesystem, non-ID pointer not allowed </p>", 
        "point_data": "<p> dynamically allocated extra for extra information, like particle age </p>", 
        "color_source": "<p> psys_color_source </p>", 
        "ob_cache_space": "<p> cache points in worldspace, object space, ... ? </p>", 
        "object": "<p> for '{@link Object} ' or '{@link Particle}  system' type - source object </p>"
      }
    }, 
    "bStats": {
      "doc": "<p><hr/> \n Assorted {@link Scene}  Data -------------------------------------<mdash/><mdash/>  Stats (show in Info header) </p>", 
      "fields": {
        "totobj": "<p> scene totals for visible layers </p>"
      }
    }, 
    "FSMenuEntry": {
      "doc": "<p>{@link FSMenuEntry} 's without paths indicate separators </p>", 
      "fields": {
        "name": "<p> FILE_MAXFILE </p>"
      }
    }, 
    "wmKeyMapItem": {
      "doc": "<p> partial copy of the event, for matching by eventhandler </p>", 
      "fields": {
        "val": "<p> KM_ANY, KM_PRESS, KM_NOTHING etc </p>", 
        "flag": "<p> flag: inactive, expanded </p>", 
        "idname": "<p> operator used to retrieve operator type pointer </p>", 
        "maptype": "<p> runtime keymap editor </p>", 
        "oskey": "<p> oskey is apple or windowskey, value denotes order of pressed </p>", 
        "propvalue_str": "<p> modal runtime temporary storage for loading </p>", 
        "propvalue": "<p> if used, the item is from modal map </p>", 
        "id": "<p> unique identifier. Positive for kmi that override builtins, negative otherwise </p>", 
        "type": "<p> event event code itself </p>", 
        "properties": "<p> operator properties, assigned to ptr->data and can be written to a file </p>", 
        "keymodifier": "<p> rawkey modifier </p>", 
        "ptr": "<p> rna pointer to access properties </p>"
      }
    }, 
    "NodeTonemap": {
      "doc": "<p> qdn: tonemap node </p>"
    }, 
    "ColorBand": {
      "doc": "<p> 32 = MAXCOLORBAND note that this has to remain a single struct, for {@link UserDef}  </p>"
    }, 
    "bTransformCacheConstraint": {
      "doc": "<p> Transform matrix cache constraint </p>", 
      "fields": {
        "object_path": "<p> FILE_MAX </p>"
      }
    }, 
    "ChannelDriver": {
      "doc": "<p><hr/> \n Channel Driver (i.e. Drivers / Expressions) (driver)</p><p> Channel Drivers are part of the dependency system, and are executed in addition to normal user-defined animation. They take the animation result of some channel(s), and use that (optionally combined with its own F-Curve for modification of results) to define the value of some setting semi-procedurally.</p><p> Drivers are stored as part of F-Curve data, so that the F-Curve's RNA-path settings (for storing what setting the driver will affect). The order in which they are stored defines the order that they're evaluated in. This order is set by the Depsgraph's sorting stuff. </p>", 
      "fields": {
        "expr_comp": "<p> PyObject - compiled expression, don't save this </p>", 
        "variables": "<p> targets for this driver (i.e. list of {@link DriverVar} ) </p>", 
        "expression": "<p> python expression to execute (may call functions defined in an accessory file) which relates the target 'variables' in some way to yield a single usable valueexpression to compile for evaluation </p>", 
        "flag": "<p> settings of driver </p>", 
        "curval": "<p> result of previous evaluation </p>", 
        "type": "<p> XXX to be implemented... this is like the constraint influence setting. </p><p> general settings type of driver </p>", 
        "influence": "<p> influence of driver on result </p>"
      }
    }, 
    "bFollowTrackConstraint": {
      "doc": "<p> Follow Track constraints </p>", 
      "fields": {
        "track": "<p> MAX_NAME </p>", 
        "object": "<p> MAX_NAME </p>"
      }
    }, 
    "ParticleSettings": {
      "fields": {
        "acc": "<p> global physical properties </p>", 
        "rotfrom": "<p>\n@deprecated\n Deprecated</p>", 
        "rough1": "<p> rough </p>", 
        "mass": "<p> physical properties </p>", 
        "parting_fac": "<p> parting </p>", 
        "clumpfac": "<p> clumping </p>", 
        "child_flag": "<p> children </p>", 
        "draw_step": "<p> number of path segments, power of 2 except </p>", 
        "normfac": "<p> initial velocity factors </p>", 
        "phystype": "<p> physics modes </p>", 
        "clength": "<p> length </p>", 
        "bending_random": "<p> hair dynamics </p>", 
        "sta": "<p> time and emission </p>", 
        "use_modifier_stack": "<p> modified dm support </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "randlength": "<p> length </p>", 
        "branch_thres": "<p> branching </p>", 
        "kink_amp": "<p> kink </p>", 
        "draw_line": "<p> drawing stuff </p>", 
        "adapt_angle": "<p> adaptive path rendering </p>", 
        "simplify_flag": "<p> simplification </p>", 
        "color_vec_max": "<p> draw color </p>", 
        "bb_align": "<p> billboards </p>", 
        "keyed_loops": "<p> keyed particles </p>"
      }
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "flag": "<p> different flags of this point </p>", 
        "w": "<p> u coordinate along spline segment and weight of this point </p>"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "flag": "<p> dopesheet building flag such as inverted order of sort </p>", 
        "channels": "<p> detailed </p>", 
        "sort_method": "<p> method to be used to sort tracks </p>", 
        "coverage_segments": "<p> ** runtime stuff ** summary </p>", 
        "ok": "<p> flag if dopesheet information is still relevant </p>"
      }
    }, 
    "Panel": {
      "fields": {
        "next": "<p> the part from uiBlock that needs saved in file </p>", 
        "layout": "<p> runtime for drawing </p>", 
        "tabname": "<p> defined as UI_MAX_NAME_STR </p>", 
        "paneltab": "<p> this panel is tabbed in *paneltab </p>", 
        "sortorder": "<p> panels are aligned according to increasing sortorder </p>", 
        "activedata": "<p> runtime for panel manipulation </p>", 
        "type": "<p> runtime </p>", 
        "drawname": "<p> panelname is identifier for restoring location </p>"
      }
    }, 
    "bClampToConstraint": {
      "doc": "<p> Clamp-To Constraint </p>", 
      "fields": {
        "flag": "<p> which axis/plane to compare owner's location on </p>", 
        "tar": "<p> 'target' must be a curve </p>", 
        "flag2": "<p> for legacy reasons, this is flag2. used for any extra settings </p>"
      }
    }, 
    "bRotateLikeConstraint": {
      "doc": "<p> Copy Rotation Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "wmKeyMap": {
      "doc": "<p> stored in WM, the actively used keymaps </p>", 
      "fields": {
        "spaceid": "<p> same IDs as in {@link DNA_space_types.h}  </p>", 
        "flag": "<p> general flags </p>", 
        "kmi_id": "<p> last kmi id </p>", 
        "regionid": "<p> see above </p>", 
        "idname": "<p> global editor keymaps, or for more per space/region </p>", 
        "poll": "<p> runtime verify if enabled in the current context </p>", 
        "modal_items": "<p> for modal, EnumPropertyItem for now </p>"
      }
    }, 
    "bLockTrackConstraint": {
      "doc": "<p> Locked Axis Tracking constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "VoxelData": {
      "fields": {
        "source_path": "<p> 1024 = FILE_MAX </p>", 
        "dataset": "<p> temporary data </p>", 
        "object": "<p> for rendering smoke sims </p>"
      }
    }, 
    "bArmature": {
      "fields": {
        "edbo": "<p> editbone listbase, we use pointer so we can check state </p>", 
        "act_bone": "<p> active bones should work like active object where possible<ul><li><p> active and selection are unrelated</p></li><li><p> active & hidden is not allowed</p></li><li><p> from the user perspective active == last selected</p></li><li><p> active should be ignored when not visible (hidden layer) active bone </p></li></ul> \nactive and selection are unrelatedactive & hidden is not allowedfrom the user perspective active == last selectedactive should be ignored when not visible (hidden layer) active bone \n</p>", 
        "pathsize": "<p> ghost drawing options and number of frames between points of path </p>", 
        "gevertdeformer": "<p> how vertex deformation is handled in the ge </p>", 
        "layer_used": "<p> for UI, to show which layers are there </p>", 
        "pathac": "<p> number of frames before/after current frame of path-calculation for all bones </p>", 
        "pathef": "<p> start and end frames of path-calculation range for all bones </p>", 
        "layer_protected": "<p> for buttons to work, both variables in this order together </p>", 
        "ghostep": "<p> XXX deprecated... old animaton system (armature only viz) <mdash/> . </p>", 
        "act_edbone": "<p> active editbone (in editmode) </p>", 
        "sketch": "<p> sketch struct for etch-a-ton </p>", 
        "ghostsize": "<p> number of frames to ghosts to show, and step between them </p>", 
        "ghostef": "<p> start and end frames of ghost-drawing range </p>"
      }
    }, 
    "bAction": {
      "doc": "<p> Actions --------------------------------<mdash/><mdash/>  Action - reusable F-Curve 'bag' (act)</p><p> This contains F-Curves that may affect settings from more than one {@link ID}  blocktype and/or datablock (i.e. sub-data linked/used directly to the {@link ID}  block that the animation data is linked to), but with the restriction that the other unrelated data (i.e. data that is not directly used or linked to by the source {@link ID}  block).</p><p> It serves as a 'unit' of reusable animation information (i.e. keyframes/motion data), that affects a group of related settings (as defined by the user). </p>", 
      "fields": {
        "curves": "<p> function-curves ({@link FCurve} ) </p>", 
        "flag": "<p> settings for this action </p>", 
        "active_marker": "<p> index of the active marker </p>", 
        "groups": "<p> groups of function-curves ({@link bActionGroup} ) </p>", 
        "id": "<p> -serialisation for relinking </p>", 
        "markers": "<p> markers local to the Action (used to provide Pose-Libraries) </p>", 
        "chanbase": "<p><p> legacy data - Action Channels ({@link bActionChannel} ) in pre-2.5 animation system </p>\n@deprecated\n Deprecatedlegacy data - Action Channels (bActionChannel) in pre-2.5 animation system </p>", 
        "idroot": "<p> type of ID-blocks that action can be assigned to (if 0, will be set to whatever {@link ID}  first evaluates it) </p>"
      }
    }, 
    "MDisps": {
      "fields": {
        "hidden": "<p> Used for hiding parts of a multires mesh. Essentially the multires equivalent of MVert.flag's ME_HIDE bit. NOTE: This is a bitmap, keep in sync with type used in BLI_bitmap.h </p>", 
        "totdisp": "<p> Strange bug in {@link SDNA} : if disps pointer comes first, it fails to see totdisp </p>"
      }
    }, 
    "CacheFile": {
      "fields": {
        "flag": "<p> Animation flag. </p>", 
        "filepath": "<p> 1024 = FILE_MAX </p>", 
        "object_paths": "<p> Paths of the objects inside of the Alembic archive referenced by this {@link CacheFile} . </p>", 
        "frame": "<p> The frame/time to lookup in the cache file. </p>"
      }
    }, 
    "KeyBlock": {
      "fields": {
        "uid": "<p> for meshes only, match the unique number with the customdata layer </p>", 
        "data": "<p> array of shape key values, size is (Key->elemsize * KeyBlock->totelem) </p>", 
        "pos": "<p> point in time (Key->type == KEY_NORMAL) only, for historic reasons this is relative to (Key->ctime / 100), so this value increments by 0.1f per frame. </p>", 
        "vgroup": "<p> MAX_VGROUP_NAME (optional vertex group), array gets allocated into 'weights' when set </p>", 
        "slidermin": "<p> ranges, for RNA and UI only to clamp 'curval' </p>", 
        "totelem": "<p> total number if items in the keyblock (compare with mesh/curve verts to check we match) </p>", 
        "curval": "<p> influence (typically [0 - 1] but can be more), (Key->type == KEY_RELATIVE) only. </p>", 
        "name": "<p> MAX_NAME (unique name, user assigned) </p>", 
        "type": "<p> interpolation type (Key->type == KEY_NORMAL) only. </p>", 
        "relative": "<p> relative == 0 means first key is reference, otherwise the index of Key->blocks </p>"
      }
    }, 
    "bArmatureSensor": {
      "fields": {
        "posechannel": "<p> MAX_NAME </p>", 
        "constraint": "<p> MAX_NAME </p>"
      }
    }, 
    "bNodeSocketValueVector": {
      "fields": {
        "subtype": "<p> RNA subtype </p>"
      }
    }, 
    "MLoopTri": {
      "doc": "<p>{@link MLoopTri} 's are lightweight triangulation data, for functionality that doesn't support ngons ({@link MPoly} ). This is cache data created from ({@link MPoly} , {@link MLoop}  & {@link MVert}  arrays). There is no attempt to maintain this data's validity over time, any changes to the underlying mesh invalidate the {@link MLoopTri}  array, which will need to be re-calculated.</p><p> Users normally access this via #DerivedMesh.getLoopTriArray. In rare cases its calculated directly, with #BKE_mesh_recalc_looptri.</p><p> Typical usage includes:<ul><li><p> OpenGL drawing.</p></li><li><p> #BVHTree creation.</p></li><li><p> Physics/collision detection.</p></li></ul> \nOpenGL drawing.#BVHTree creation.Physics/collision detection.\n</p><p> Storing loop indices (instead of vertex indices) allows us to directly access UV's, vertex-colors as well as vertices. The index of the source polygon is stored as well, giving access to materials and polygon normals.</p><p><h2>Note</h2><p> This data is runtime only, never written to disk.</p> This data is runtime only, never written to disk.\nUsage examples: <code>       material. ///accessoriginalmaterial.\n short short       mpoly[lt->poly].mat_nr; mat_nr=mpoly[lt->poly].mat_nr;\n\n       locations. ///accessvertexlocations.\n float float       { *vtri_co[3]={\n         mvert[mloop[lt->tri[0]].v].co, mvert[mloop[lt->tri[0]].v].co,\n         mvert[mloop[lt->tri[1]].v].co, mvert[mloop[lt->tri[1]].v].co,\n         mvert[mloop[lt->tri[2]].v].co, mvert[mloop[lt->tri[2]].v].co,\n }; };\n\n                       etc). ///accessUVcoordinates(worksforallloopdata,vertexcolors...etc).\n float float       { *uvtri_co[3]={\n         mloopuv[lt->tri[0]].uv, mloopuv[lt->tri[0]].uv,\n         mloopuv[lt->tri[1]].uv, mloopuv[lt->tri[1]].uv,\n         mloopuv[lt->tri[2]].uv, mloopuv[lt->tri[2]].uv,\n }; };\n</code> ///accessoriginalmaterial.\nshortmat_nr=mpoly[lt->poly].mat_nr;\n\n///accessvertexlocations.\nfloat*vtri_co[3]={\nmvert[mloop[lt->tri[0]].v].co,\nmvert[mloop[lt->tri[1]].v].co,\nmvert[mloop[lt->tri[2]].v].co,\n};\n\n///accessUVcoordinates(worksforallloopdata,vertexcolors...etc).\nfloat*uvtri_co[3]={\nmloopuv[lt->tri[0]].uv,\nmloopuv[lt->tri[1]].uv,\nmloopuv[lt->tri[2]].uv,\n};\n</p><p>{@link MLoopTri} 's are allocated in an array, where each polygon's {@link MLoopTri} 's are stored contiguously, the number of triangles for each polygon is guaranteed to be ({@link MPoly.totloop}  - 2), even for degenerate geometry. See {@link ME_POLY_TRI_TOT}  macro.</p><p> It's also possible to perform a reverse lookup (find all {@link MLoopTri} 's for any given {@link MPoly} ).</p><p><code>                   i ///loopoveralllooptri'sforagivenpolygon:i\n{@link MPoly}       &mpoly[i]; *mp=&mpoly[i];\n{@link MLoopTri}         mp->{@link loopstart} )]; MLoopTri*lt=&looptri[poly_to_tri_count(i,mp->loopstart)];\n int int        {@link ME_POLY_TRI_TOT} (mp); j,lt_tot=ME_POLY_TRI_TOT(mp);\n\n for for                   { (j=0;j<lt_tot;j++,lt++){\n         unsigned unsigned   int int       { vtri[3]={\n                 mloop[lt->tri[0]].v, mloop[lt->tri[0]].v,\n                 mloop[lt->tri[1]].v, mloop[lt->tri[1]].v,\n                 mloop[lt->tri[2]].v, mloop[lt->tri[2]].v,\n         }; };\n         printf( printf(       %u\\n\" \"tri%u%u%u\\n\"       vtri[2]); ,vtri[0],vtri[1],vtri[2]);\n }; };\n</code> ///loopoveralllooptri'sforagivenpolygon:i\nMPoly*mp=&mpoly[i];\nMLoopTri*lt=&looptri[poly_to_tri_count(i,mp->loopstart)];\nintj,lt_tot=ME_POLY_TRI_TOT(mp);\n\nfor(j=0;j<lt_tot;j++,lt++){\nunsignedintvtri[3]={\nmloop[lt->tri[0]].v,\nmloop[lt->tri[1]].v,\nmloop[lt->tri[2]].v,\n};\nprintf(\"tri%u%u%u\\n\",vtri[0],vtri[1],vtri[2]);\n};\n</p><p> It may also be useful to check whether or not two vertices of a triangle form an edge in the underlying mesh.</p><p> This can be done by checking the edge of the referenced loop ({@link MLoop.e} ), the winding of the {@link MLoopTri}  and the {@link MLoop} 's will always match, however the order of vertices in the edge is undefined.</p><p><code>               lt ///printrealedgesfromanMLoopTri:lt\n int int     j_next; j,j_next;\n for for                           { (j=2,j_next=0;j_next<3;j=j_next++){\n        {@link MEdge}       &medge[mloop[lt->tri[j]].e]; *ed=&medge[mloop[lt->tri[j]].e];\n         unsigned unsigned   int int           mloop[lt->tri[j_next]].v}; tri_edge[2]={mloop[lt->tri[j]].v,mloop[lt->tri[j_next]].v};\n\n         if if         && (ELEM(ed->v1,tri_edge[0],tri_edge[1])&&\n                     tri_edge[1])) ELEM(ed->v2,tri_edge[0],tri_edge[1]))\n         { {\n                 printf( printf(         %u\\n\" \"realedgefound%u%u\\n\"     tri_edge[1]); ,tri_edge[0],tri_edge[1]);\n         } }\n } }\n</code> ///printrealedgesfromanMLoopTri:lt\nintj,j_next;\nfor(j=2,j_next=0;j_next<3;j=j_next++){\nMEdge*ed=&medge[mloop[lt->tri[j]].e];\nunsignedinttri_edge[2]={mloop[lt->tri[j]].v,mloop[lt->tri[j_next]].v};\n\nif(ELEM(ed->v1,tri_edge[0],tri_edge[1])&&\nELEM(ed->v2,tri_edge[0],tri_edge[1]))\n{\nprintf(\"realedgefound%u%u\\n\",tri_edge[0],tri_edge[1]);\n}\n}\n</p><p><h2>Note</h2><p> A {@link MLoopTri}<b></b>  edges. </p> A MLoopTri may be in the middle of an ngon and not reference any edges. \n</p>"
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "rot_track": "<p><p> use TRACK_USE_2D_STAB_ROT on individual tracks instead </p>\n@deprecated\n Deprecateduse TRACK_USE_2D_STAB_ROT on individual tracks instead </p>", 
        "target_pos": "<p> expected target position of frame after raw stabilization, will be subtracted </p>", 
        "rotinf": "<p> influence on location, scale and rotation </p>", 
        "filter": "<p> filter used for pixel interpolation </p>", 
        "maxscale": "<p> 2d stabilization max auto-scale factor </p>", 
        "anchor_frame": "<p> reference point to anchor stabilization offset </p>", 
        "act_track": "<p> total number of translation tracks and index of active track in list </p>", 
        "scale": "<p> zoom factor known to be present on original footage. Also used for autoscale </p>", 
        "act_rot_track": "<p> total number of rotation tracks and index of active track in list </p>", 
        "ok": "<p> initialization and run-time data <p> Without effect now, we initialize on every frame. Formerly used for caching of init values </p>\n@deprecated\n DeprecatedWithout effect now, we initialize on every frame. Formerly used for caching of init values </p>", 
        "target_rot": "<p> expected target rotation of frame after raw stabilization, will be compensated </p>"
      }
    }, 
    "bPose": {
      "doc": "<p> Pose ------------------------------<mdash/><mdash/>  Pose-Object.</p><p> It is only found under ob->pose. It is not library data, even though there is a define for it (hack for the outliner). </p>", 
      "fields": {
        "chanhash": "<p> ghash for quicker string lookups </p>", 
        "cyclic_offset": "<p> result of match and cycles, applied in BKE_pose_where_is() </p>", 
        "proxy_layer": "<p> proxy layer: copy from armature, gets synced </p>", 
        "agroups": "<p> list of bActionGroups </p>", 
        "proxy_act_bone": "<p> proxy active bone name, MAXBONENAME </p>", 
        "active_group": "<p> index of active group (starts from 1) </p>", 
        "stride_offset": "<p> applied to object </p>", 
        "ikdata": "<p> temporary IK data, depends on the IK solver. Not saved in file </p>", 
        "iksolver": "<p> ik solver to use, see ePose_IKSolverType </p>", 
        "ikparam": "<p> IK solver parameters, structure depends on iksolver </p>", 
        "ctime": "<p> local action time of this pose </p>", 
        "chanbase": "<p> list of pose channels, PoseBones in RNA </p>", 
        "avs": "<p> settings for visualization of bone animation </p>"
      }
    }, 
    "WeightVGEditModifierData": {
      "fields": {
        "falloff_type": "<p> Using MOD_WVG_MAPPING_* defines. </p>", 
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME </p>", 
        "defgrp_name": "<p> Name of vertex group to edit. MAX_VGROUP_NAME. </p>", 
        "default_weight": "<p> Weight for vertices not in vgroup. </p>", 
        "add_threshold": "<p> The add/remove vertices weight thresholds. </p>", 
        "pad_i1": "<p> Padding... </p>", 
        "cmap_curve": "<p> Mapping stuff. The custom mapping curve! </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV map. MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "mask_tex_mapping": "<p> How to map the texture (using MOD_DISP_MAP_* enums). </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>", 
        "edit_flags": "<p> Using MOD_WVG_EDIT_* flags. </p>"
      }
    }, 
    "bMotionPath": {
      "doc": "<p> ........ Motion {@link Path}  data cache (mpath)<ul><li><p> for elements providing transforms (i.e. Objects or PoseChannels) </p></li></ul> \nfor elements providing transforms (i.e. Objects or PoseChannels) \n</p>", 
      "fields": {
        "flag": "<p> baking settings - eMotionPath_Flag </p>", 
        "end_frame": "<p> for drawing paths, the end frame number </p>", 
        "length": "<p> the number of cached verts </p>", 
        "start_frame": "<p> for drawing paths, the start frame number </p>", 
        "points": "<p> path samples </p>"
      }
    }, 
    "ImageView": {
      "fields": {
        "filepath": "<p> 1024 = FILE_MAX </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "MultiresColFace": {
      "fields": {
        "col": "<p> vertex colors </p>"
      }
    }, 
    "MovieTrackingDopesheetChannel": {
      "fields": {
        "tot_segment": "<p> total number of segments </p>", 
        "name": "<p> name of channel </p>", 
        "track": "<p> motion track for which channel is created </p>", 
        "total_frames": "<p> longest segment length and total number of tracked frames </p>", 
        "segments": "<p> tracked segments </p>"
      }
    }, 
    "bGPDpalettecolor": {
      "doc": "<p> color of palettes </p>", 
      "fields": {
        "pad": "<p> padding for compiler alignment error </p>", 
        "flag": "<p> settings for palette color </p>", 
        "fill": "<p> color that should be used for drawing \"fills\" for strokes </p>", 
        "info": "<p> Color name. Must be unique. </p>"
      }
    }, 
    "SpaceText": {
      "doc": "<p>{@link Text}  Editor ============================================ {@link Text}  Editor </p>", 
      "fields": {
        "live_edit": "<p> run python while editing, evil </p>", 
        "drawcache": "<p> cache for faster drawing </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "lheight_dpi": "<p> actual lineheight, dpi controlled </p>", 
        "linenrs_tot": "<p> runtime computed, character width and the number of chars to use when showing line numbers </p>", 
        "scroll_accum": "<p> runtime, for scroll increments smaller than a line </p>", 
        "margin_column": "<p> column number to show right margin at </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "lheight": "<p> user preference, is font_size! </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "replacestr": "<p> ST_MAX_FIND_STR </p>", 
        "findstr": "<p> ST_MAX_FIND_STR </p>"
      }
    }, 
    "bMessageActuator": {
      "fields": {
        "subject": "<p> Message Subject to send. MAX_NAME. </p>", 
        "toPropName": "<p> Send to all objects with this propertyname. Empty to broadcast. MAX_NAME. </p>", 
        "pad1": "<p> bodyType is either 'User defined text' or PropName </p>", 
        "toObject": "<p> (Possible future use) pointer to a single destination object. </p>", 
        "body": "<p> Either User Defined {@link Text}  or our PropName to send value of, MAX_NAME </p>"
      }
    }, 
    "AnimMapper": {
      "doc": "<p> FIXME: will this be too clumsy or slow? If we're using RNA paths anyway, we'll have to accept such consequences... </p><p> Retargetting Information for Actions</p><p> This should only be used if it is strictly necessary (i.e. user will need to explicitly add this when they find that some channels do not match, or motion is not going to right places). When executing an action, this will be checked to see if it provides any useful remaps for the given paths.</p><p> NOTE: we currently don't store this in the Action itself, as that causes too many problems. </p>", 
      "fields": {
        "mappings": "<p> remapping table (bAnimMapPair) </p>", 
        "target": "<p> target action </p>"
      }
    }, 
    "LineStyleColorModifier_CreaseAngle": {
      "doc": "<p> Crease Angle modifiers </p>"
    }, 
    "LineStyleModifier": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "Library": {
      "doc": "<p> For each library file used, a {@link Library}  struct is added to Main WARNING: readfile.c, expand_doit() reads this struct without DNA check! </p>", 
      "fields": {
        "parent": "<p> set for indirectly linked libs, used in the outliner and while reading </p>", 
        "filepath": "<p> absolute filepath, this is only for convenience, 'name' is the real path used on file read but in some cases its useful to access the absolute one. This is set on file read. Use BKE_library_filepath_set() rather than setting 'name' directly and it will be kept in sync - campbell </p>", 
        "name": "<p> path name used for reading, can be relative and edited in the outliner </p>"
      }
    }, 
    "bMessageSensor": {
      "fields": {
        "fromObject": "<p> (Possible future use) pointer to a single sender object </p>", 
        "subject": "<p> Can be used to filter on subjects like this </p>", 
        "body": "<p> (Possible future use) body to filter on </p>"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "cur": "<p> cur; for buttons, to show active curve </p>", 
        "bwmul": "<p> black/white point multiply value, for speed </p>", 
        "white": "<p> black/white point (black[0] abused for current frame) </p>", 
        "clipr": "<p> current rect, clip rect (is default rect too) </p>", 
        "cm": "<p> max 4 builtin curves per mapping struct now </p>", 
        "sample": "<p> sample values, if flag set it draws line and intersection </p>"
      }
    }, 
    "Palette": {
      "fields": {
        "colors": "<p> pointer to individual colours </p>"
      }
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "doc": "<p> Along Stroke modifiers </p>"
    }, 
    "bRandomActuator": {
      "doc": "<p> I added a few extra fields here, to facilitate conversions </p>", 
      "fields": {
        "propname": "<p> MAX_NAME </p>"
      }
    }, 
    "bObjectActuator": {
      "fields": {
        "drot": "<p> angle in radians </p>"
      }
    }, 
    "GlowVars": {
      "fields": {
        "fBoost": "<p> Amount to multiply glow intensity </p>", 
        "dDist": "<p> Radius of glow blurring </p>", 
        "bNoComp": "<p> SHOW/HIDE glow buffer </p>", 
        "fMini": "<p> Minimum intensity to trigger a glow </p>"
      }
    }, 
    "PreviewImage": {
      "fields": {
        "w": "<p> All values of 2 are really NUM_ICON_SIZES </p>", 
        "gputexture": "<p> Runtime-only data. </p>", 
        "icon_id": "<p> Used by previews outside of {@link ID}  context. </p>", 
        "use_deferred": "<p> for now a mere bool, if we add more deferred loading methods we can switch to bitflag. </p>"
      }
    }, 
    "bSound": {
      "fields": {
        "cache": "<p> unused currently int type; struct {@link bSound}  *child_sound; The audaspace handle for cache. </p>", 
        "spinlock": "<p> spinlock for asynchronous loading of sounds </p>", 
        "name": "<p> The path to the sound file.1024 = FILE_MAX </p>", 
        "handle": "<p> The handle for audaspace. </p>", 
        "packedfile": "<p> The packed file. </p>", 
        "waveform": "<p> Waveform display data. </p>", 
        "newpackedfile": "<p> Deprecated; used for loading pre 2.5 files. </p>", 
        "playback_handle": "<p> The audaspace handle that should actually be played back. Should be cache if cache != NULL; otherwise it's handle </p>"
      }
    }, 
    "bNodeStack": {
      "fields": {
        "external": "<p> data is used by external nodes (no freeing) </p>", 
        "datatype": "<p> type of data pointer </p>", 
        "sockettype": "<p> type of socket stack comes from, to remap linking different sockets </p>", 
        "hasoutput": "<p> when output is linked, tagged before executing </p>", 
        "hasinput": "<p> when input has link, tagged before executing </p>", 
        "is_copy": "<p> data is a copy of external data (no freeing) </p>"
      }
    }, 
    "bRandomSensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "QuicktimeCodecData": {
      "fields": {
        "pad": "<p> padding </p>", 
        "cdParms": "<p> Old quicktime implementation compatibility fields, read only in 2.5 - deprecated codec/compressor options </p>", 
        "cdSize": "<p> size of cdParms buffer </p>", 
        "pad2": "<p> padding </p>"
      }
    }, 
    "SceneRenderView": {
      "doc": "<p> note, srl->passflag is treestore element 'nr' in outliner, short still... View - MultiView </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>", 
        "suffix": "<p> MAX_NAME </p>"
      }
    }, 
    "SpaceLogic": {
      "doc": "<p> Game Logic Editor ===================================== Logic Editor </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "bNodeInstanceHashEntry": {
      "doc": "<p>{@link Base}  struct for entries in node instance hash. WARNING: pointers are cast to this struct internally, it must be first member in hash entry structs! </p>", 
      "fields": {
        "tag": "<p> tags for cleaning the cache </p>"
      }
    }, 
    "MCol": {
      "doc": "<p> tessellation vertex color data. at the moment alpha is abused for vertex painting and not used for transparency, note that red and blue are swapped </p>"
    }, 
    "CollisionModifierData": {
      "fields": {
        "xnew": "<p> position at the end of the frame </p>", 
        "current_x": "<p> position at the actual inter-frame step </p>", 
        "current_xnew": "<p> new position at the actual inter-frame step </p>", 
        "current_v": "<p> (xnew - x) at the actual inter-frame step </p>", 
        "xold": "<p> unused atm, but was discussed during sprint </p>", 
        "x": "<p> position at the beginning of the frame </p>", 
        "time_xnew": "<p> cfra time of modifier </p>", 
        "bvhtree": "<p> bounding volume hierarchy for this cloth object </p>"
      }
    }, 
    "MPoly": {
      "doc": "<p> new face structure, replaces {@link MFace} , which is now only used for storing tessellations. </p>", 
      "fields": {
        "loopstart": "<p> offset into loop array and number of loops in the face </p>", 
        "totloop": "<p> keep signed since we need to subtract when getting the previous loop </p>"
      }
    }, 
    "Lamp": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "preview": "<p> preview </p>", 
        "texact": "<p> texact is for buttons </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "att2": "<p> Quad1 and Quad2 attenuation </p>", 
        "shadow_frustum_size": "<p> BGE Only </p>", 
        "sun_effect_type": "<p> sun/sky </p>", 
        "nodetree": "<p> nodes </p>"
      }
    }, 
    "ObHook": {
      "doc": "<p> Warning, this is not used anymore because hooks are now modifiers </p>", 
      "fields": {
        "parentinv": "<p> matrix making current transform unmodified </p>", 
        "mat": "<p> temp matrix while hooking </p>", 
        "falloff": "<p> if not zero, falloff is distance where influence zero </p>", 
        "curindex": "<p> curindex is cache for fast lookup </p>", 
        "cent": "<p> visualization of hook </p>", 
        "name": "<p> MAX_NAME </p>", 
        "active": "<p> active is only first hook, for button menu </p>"
      }
    }, 
    "MLoopCol": {
      "doc": "<p><em></em>  be initialized to 255 Mostly its not used for transparency... (except for blender-internal rendering, see [#34096]).</p><p><h2>Note</h2><p><em></em>  swapped, as they are with {@link MCol}  </p> red and blue are not swapped, as they are with MCol \n</p>"
    }, 
    "LinkData": {
      "doc": "<p> simple subclass of {@link Link} <ndash/> use this when it is not worth defining a custom one... </p>"
    }, 
    "MaskModifierData": {
      "doc": "<p>{@link Mask}  Modifier </p>", 
      "fields": {
        "mode": "<p> using armature or hardcoded vgroup </p>", 
        "flag": "<p> flags for various things </p>", 
        "vgroup": "<p> name of vertex group to use to mask, MAX_VGROUP_NAME </p>", 
        "ob_arm": "<p> armature to use to in place of hardcoded vgroup </p>"
      }
    }, 
    "WarpModifierData": {
      "fields": {
        "object_from": "<p> end {@link MappingInfoModifierData}  </p>", 
        "flag": "<p> not used yet </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "defgrp_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "BevList": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "bevpoints": "<p> over-alloc </p>"
      }
    }, 
    "FMod_Cycles": {
      "doc": "<p> TODO: we can only do complete cycles... </p><p> cycling/repetition modifier data </p>", 
      "fields": {
        "before_cycles": "<p> number of 'cycles' before first keyframe to do </p>", 
        "after_cycles": "<p> number of 'cycles' after last keyframe to do </p>", 
        "before_mode": "<p> extrapolation mode to use before first keyframe </p>", 
        "after_mode": "<p> extrapolation mode to use after last keyframe </p>"
      }
    }, 
    "bLocLimitConstraint": {
      "doc": "<p> transform limiting constraints - zero target ----------------------<mdash/><mdash/>  Limit Location Constraint </p>"
    }, 
    "bActionChannel": {
      "doc": "<p><hr/> \n Legacy Data WARNING: Action Channels are now deprecated... they were part of the old animation system! (ONLY USED FOR DO_VERSIONS...)</p><p> Action Channels belong to Actions. They are linked with an IPO block, and can also own Constraint Channels in certain situations.</p><p> Action-Channels can only belong to one group at a time, but they still live the Action's list of achans (to preserve backwards compatibility, and also minimize the code that would need to be recoded). Grouped achans are stored at the start of the list, according to the position of the group in the list, and their position within the group. </p>", 
      "fields": {
        "temp": "<p> temporary setting - may be used to indicate group that channel belongs to during syncing </p>", 
        "flag": "<p> settings accessed via bitmapping </p>", 
        "grp": "<p> Action {@link Group}  this Action Channel belongs to </p>", 
        "name": "<p> channel name, MAX_NAME </p>", 
        "ipo": "<p> IPO block this action channel references </p>", 
        "constraintChannels": "<p> Constraint Channels (when Action Channel represents an {@link Object}  or {@link Bone} ) </p>"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "principal": "<p> principal point </p>", 
        "pixel_aspect": "<p> pixel aspect ratio </p>", 
        "focal": "<p> focal length </p>", 
        "sensor_width": "<p> width of CCD sensor </p>", 
        "k1": "<p> Polynomial distortion </p>", 
        "intrinsics": "<p> intrinsics handle </p>", 
        "k3": "<p> polynomial radial distortion </p>", 
        "units": "<p> units of focal length user is working with </p>", 
        "division_k1": "<p> Division distortion model coefficients </p>"
      }
    }, 
    "bDopeSheet": {
      "doc": "<p><hr/> \n Action/Dopesheet Editor Storage for Dopesheet/Grease-Pencil Editor data </p>", 
      "fields": {
        "filterflag": "<p> flags to use for filtering data </p>", 
        "flag": "<p> standard flags </p>", 
        "searchstr": "<p> string to search for in displayed names of F-Curves for ADS_FILTER_BY_FCU_NAME filtering option </p>", 
        "renameIndex": "<p> index+1 of channel to rename - only gets set by renaming operator </p>", 
        "source": "<p> currently ID_SCE (for Dopesheet), and ID_SC (for Grease Pencil) </p>", 
        "chanbase": "<p> cache for channels (only initialized when pinned) </p>", 
        "filter_grp": "<p> XXX not used! </p><p> object group for ADS_FILTER_ONLYOBGROUP filtering option </p>"
      }
    }, 
    "ReportList": {
      "doc": "<p> saved in the wm, don't remove </p>", 
      "fields": {
        "printlevel": "<p> ReportType </p>", 
        "storelevel": "<p> ReportType </p>"
      }
    }, 
    "FMod_Noise": {
      "doc": "<p> noise modifier data </p>"
    }, 
    "ModifierData": {
      "fields": {
        "name": "<p> MAX_NAME </p>", 
        "scene": "<p> XXX for timing info set by caller... solve later? (ton) </p>"
      }
    }, 
    "Sculpt": {
      "doc": "<p><hr/> \n {@link Sculpt}  {@link Sculpt}  </p>", 
      "fields": {
        "detail_size": "<p> Maximum edge length for dynamic topology sculpting (in pixels) </p>", 
        "constant_detail": "<p> scale for constant detail size </p>", 
        "gravity_factor": "<p> gravity factor for sculpting </p>", 
        "flags": "<p> float pivot[3]; XXX not used? </p><p> For rotating around a pivot point </p>", 
        "radial_symm": "<p> char tablet_size, tablet_strength; XXX not used? </p><p> Control tablet input </p>", 
        "symmetrize_direction": "<p> Direction used for SCULPT_OT_symmetrize operator </p>"
      }
    }, 
    "DriverTarget": {
      "doc": "<p> Drivers --------------------------------<mdash/><mdash/>  Driver Target (dtar)</p><p> Defines how to access a dependency needed for a driver variable. </p>", 
      "fields": {
        "idtype": "<p> type of ID-block that this target can use </p>", 
        "flag": "<p> flags for the validity of the target (NOTE: these get reset every time the types change) </p>", 
        "transChan": "<p> transform channel index (for DVAR_TYPE_TRANSFORM_CHAN) </p>", 
        "rna_path": "<p> RNA path defining the setting to use (for DVAR_TYPE_SINGLE_PROP) </p>", 
        "pchan_name": "<p> name of the posebone to use (for vars where DTAR_FLAG_STRUCT_REF is used) - MAX_ID_NAME-2 </p>", 
        "id": "<p> ID-block which owns the target, no user count </p>"
      }
    }, 
    "IpoDriver": {
      "doc": "<p> -----------------<mdash/><mdash/><mdash/>  Type Defines ------------------<mdash/><mdash/><mdash/>  <mdash/>  IPO {@link Curve}  Driver <mdash/>  IPO {@link Curve}  Driver </p>", 
      "fields": {
        "ob": "<p> target/driver ob </p>", 
        "flag": "<p> driver settings </p>", 
        "name": "<p> bone, or python expression here </p>", 
        "adrcode": "<p> sub-channel to use </p>"
      }
    }, 
    "FreestyleConfig": {
      "fields": {
        "mode": "<p> scripting, editor </p>", 
        "crease_angle": "<p> in radians! </p>", 
        "flags": "<p> suggestive contours, ridges/valleys, material boundaries </p>", 
        "raycasting_algorithm": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "BevelModifierData": {
      "fields": {
        "res": "<p> the resolution (as originally coded, it is the number of recursive bevels) </p>", 
        "mat": "<p> material index if >= 0, else material inherited from surrounding faces </p>", 
        "bevel_angle": "<p> if the MOD_BEVEL_ANGLE is set, this will be how \"sharp\" an edge must be before it gets beveled </p>", 
        "val_flags": "<p> used to interpret the bevel value </p>", 
        "lim_flags": "<p> flags to tell the tool how to limit the bevel </p>", 
        "profile": "<p> controls profile shape (0->1, .5 is round) </p>", 
        "flags": "<p> general option flags </p>", 
        "defgrp_name": "<p> if the MOD_BEVEL_VWEIGHT option is set, this will be the name of the vert group, MAX_VGROUP_NAME </p>", 
        "e_flags": "<p> flags to direct how edge weights are applied to verts </p>", 
        "value": "<p> the \"raw\" bevel value (distance/amount to bevel) </p>"
      }
    }, 
    "bActionActuator": {
      "fields": {
        "sta": "<p> not in use </p>", 
        "flag": "<p> Playback type </p>", 
        "blend_mode": "<p> Layer blending mode </p>", 
        "blendin": "<p> Number of frames of blending </p>", 
        "end_reset": "<p> Ending the actuator (negative pulse) wont reset the action to its starting frame </p>", 
        "frameProp": "<p> Set this property to the actions current frame, MAX_NAME </p>", 
        "priority": "<p> Execution priority </p>", 
        "strideaxis": "<p> Displacement axis </p>", 
        "layer": "<p> Animation layer </p>", 
        "layer_weight": "<p> not in use </p><p> How much of the previous layer to use for blending. (<0 = disable, 0 = add mode) </p>", 
        "stridelength": "<p> Displacement incurred by cycle </p>", 
        "act": "<p> Pointer to action </p>", 
        "name": "<p> For property-driven playback, MAX_NAME </p>", 
        "end": "<p> Start & End frames </p>"
      }
    }, 
    "bShrinkwrapConstraint": {
      "doc": "<p> ShrinkWrap Constraint </p>", 
      "fields": {
        "projLimit": "<p> distance to search </p>", 
        "shrinkType": "<p> shrink type (look on MOD shrinkwrap for values) </p>", 
        "projAxis": "<p> axis to project/constrain </p>", 
        "projAxisSpace": "<p> space to project axis in </p>", 
        "dist": "<p> distance to kept from target </p>"
      }
    }, 
    "RigidBodyOb": {
      "doc": "<p><hr/> \n RigidBody {@link Object}  RigidBodyObject (rbo)</p><p> Represents an object participating in a RigidBody sim. This is attached to each object that is currently participating in a sim. </p>", 
      "fields": {
        "physics_shape": "<p> Collision shape used by physics sim (i.e. btCollisionShape) </p>", 
        "margin": "<p> tolerance for detecting collisions </p>", 
        "flag": "<p> (eRigidBodyOb_Flag) </p>", 
        "shape": "<p> (eRigidBody_Shape) collision shape to use </p>", 
        "ang_damping": "<p> damping for angular velocities </p>", 
        "mass": "<p> Physics Parameters how much object 'weighs' (i.e. absolute 'amount of stuff' it holds) </p>", 
        "orn": "<p> rigid body orientation </p>", 
        "type": "<p> General Settings for this {@link RigidBodyOb}  (eRigidBodyOb_Type) role of RigidBody in sim </p>", 
        "col_groups": "<p> Collision groups that determines wich rigid bodies can collide with each other </p>", 
        "friction": "<p> resistance of object to movement </p>", 
        "lin_damping": "<p> damping for linear velocities </p>", 
        "physics_object": "<p> References to Physics Sim objects. Exist at runtime only Physics object representation (i.e. btRigidBody) </p>", 
        "restitution": "<p> how 'bouncy' object is when it collides </p>", 
        "pos": "<p> rigid body position </p>", 
        "ang_sleep_thresh": "<p> deactivation threshold for angular velocities </p>", 
        "lin_sleep_thresh": "<p> deactivation threshold for linear velocities </p>", 
        "mesh_source": "<p> (eRigidBody_MeshSource) mesh source for mesh based collision shapes </p>"
      }
    }, 
    "AudioData": {
      "doc": "<p><hr/> \n Audio </p>"
    }, 
    "NodeImageFile": {
      "fields": {
        "name": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "UVProjectModifierData": {
      "fields": {
        "image": "<p> the image to project </p>", 
        "projectors": "<p> the objects which do the projecting MOD_UVPROJECT_MAXPROJECTORS </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>"
      }
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "flag": "<p> Marker's flag (alive, ...) </p>", 
        "pos": "<p> 2d position of marker on frame (in unified 0..1 space) </p>", 
        "pattern_corners": "<p> corners of pattern in the following order: <pre> Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</pre>  Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</p><p> the coordinates are stored relative to pos. </p>", 
        "search_min": "<p> positions of left-bottom and right-top corners of search area (in unified 0..1 units, relative to marker->pos </p>", 
        "framenr": "<p> number of frame marker is associated with </p>"
      }
    }, 
    "Mesh": {
      "fields": {
        "mcol": "<p> array of colors for the tessellated faces, must be number of tessellated faces * 4 in length </p>", 
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "tface": "<p><p> deprecated, use mtface </p>\n@deprecated\n Deprecateddeprecated, use mtface </p>", 
        "mface": "<p> END BMESH ONLY mface stores the tessellation (triangulation) of the mesh, real faces are now stored in nface. array of mesh object mode faces for tessellation </p>", 
        "medge": "<p> array of edges </p>", 
        "mr": "<p><p> deprecated multiresolution modeling data, only keep for loading old files </p>\n@deprecated\n Deprecateddeprecated multiresolution modeling data, only keep for loading old files </p>", 
        "subdivr": "<p>\n@deprecated\n Deprecated</p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "mvert": "<p> array of verts </p>", 
        "subsurftype": "<p><p> only kept for backwards compat, not used anymore </p>\n@deprecated\n Deprecatedonly kept for backwards compat, not used anymore </p>", 
        "mpoly": "<p> BMESH ONLY new face structures </p>", 
        "dvert": "<p> deformgroup vertices </p>", 
        "subdiv": "<p>\n@deprecated\n Deprecated</p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "edit_btmesh": "<p> When the object is available, the preferred access method is: BKE_editmesh_from_object(ob) not saved in file! </p>", 
        "totpoly": "<p> BMESH ONLY </p>", 
        "cd_flag": "<p> customdata flag, for bevel-weight and crease, which are now optional </p>", 
        "mtface": "<p> store tessellation face UV's and texture here </p>", 
        "ldata": "<p> BMESH ONLY </p>", 
        "totvert": "<p> END BMESH ONLY </p>", 
        "act_face": "<p> END BMESH ONLY the last selected vertex/edge/face are used for the active face however this means the active face must always be selected, this is to keep track of the last selected face and is similar to the old active face flag where the face does not need to be selected, -1 is inactive </p>"
      }
    }, 
    "FCM_EnvelopeData": {
      "doc": "<p> envelope modifier - envelope data </p>", 
      "fields": {
        "max": "<p> min/max values for envelope at this point (absolute values) </p>", 
        "time": "<p> time for that this sample-point occurs </p>", 
        "f1": "<p> settings for 'min' control point </p>", 
        "f2": "<p> settings for 'max' control point </p>"
      }
    }, 
    "bGPDspoint": {
      "doc": "<p> Grease-Pencil Annotations - 'Stroke Point' -> Coordinates may either be 2d or 3d depending on settings at the time -> Coordinates of point on stroke, in proportions of window size This assumes that the bottom-left corner is (0,0) </p>", 
      "fields": {
        "flag": "<p> additional options (NOTE: can shrink this field down later if needed) </p>", 
        "strength": "<p> color strength (used for alpha factor) </p>", 
        "z": "<p> co-ordinates of point (usually 2d, but can be 3d as well) </p>", 
        "pressure": "<p> pressure of input device (from 0 to 1) at this point </p>", 
        "time": "<p> seconds since start of stroke </p>"
      }
    }, 
    "bPythonCont": {
      "fields": {
        "flag": "<p> only used for debug now </p>"
      }
    }, 
    "Strip": {
      "fields": {
        "stripdata": "<p> only used as an array in IMAGE sequences(!), and as a 1-element array in MOVIE sequences, NULL for all other strip-types </p>", 
        "colorspace_settings": "<p> color management </p>", 
        "color_balance": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "bGPDtriangle": {
      "doc": "<p> Grease-Pencil Annotations - 'Triangle' -> A triangle contains the index of three vertices for filling the stroke This is only used if high quality fill is enabled </p>", 
      "fields": {
        "v3": "<p> indices for tesselated triangle used for GP Fill </p>"
      }
    }, 
    "Multires": {
      "fields": {
        "vdata": "<p> Special level 1 data that cannot be modified from other levels </p>"
      }
    }, 
    "Key": {
      "fields": {
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "elemstr": "<p> this is not a regular string, although it is \\0 terminated this is an array of (element_array_size, element_type) pairs (each one char) used for calculating shape key-blocks </p>", 
        "totkey": "<p> (totkey == BLI_listbase_count(&key->block)) </p>", 
        "elemsize": "<p> size of each element in {@link KeyBlock.data} , use for allocation and stride </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "ctime": "<p> only used when (Key->type == KEY_NORMAL), this value is used as a time slider, rather then using the scenes time, this value can be animated to give greater control </p>", 
        "block": "<p> list of {@link KeyBlock} 's </p>", 
        "refkey": "<p><em></em>  'key->block.first', perhaps later on it could be defined as some other {@link KeyBlock}  - campbell </p>", 
        "type": "<p> absolute or relative shape key </p>", 
        "uidgen": "<p> can never be 0, this is used for detecting old data current free uid for keyblocks </p>"
      }
    }, 
    "ThemeSpace": {
      "doc": "<p> try to put them all in one, if needed a special struct can be created as well for example later on, when we introduce wire colors for ob types or so... </p>", 
      "fields": {
        "list_title": "<p> panel title </p>", 
        "syntaxl": "<p> syntax for textwindow and nodes </p>", 
        "face_dot": "<p> selected color </p>", 
        "nla_meta_sel": "<p> NLA \"Meta\" strips </p>", 
        "back": "<p> main window colors </p>", 
        "skin_root": "<p> Skin modifier root color </p>", 
        "title": "<p> panel title </p>", 
        "selected_highlight": "<p> outliner - selected item </p>", 
        "button": "<p> button/tool regions region background </p>", 
        "nla_tweakdupli": "<p> NLA - warning color for duplicate instances of tweaking strip </p>", 
        "keytype_jitter_select": "<p> keytypes </p>", 
        "keytype_jitter": "<p> keytypes </p>", 
        "button_title": "<p> panel title </p>", 
        "audio": "<p> for sequence editor </p>", 
        "uv_shadow": "<p> two uses, for uvs with modifier applied on mesh and uvs during painting </p>", 
        "header_title": "<p> unused </p>", 
        "match": "<p> outliner - filter match </p>", 
        "nla_tweaking": "<p> NLA 'Tweaking' action/strip </p>", 
        "list": "<p> listview regions region background </p>", 
        "anim_non_active": "<p> Active Action = NULL </p>", 
        "nla_transition_sel": "<p> NLA \"Transition\" strips </p>", 
        "nla_sound_sel": "<p> NLA \"Sound\" strips </p>", 
        "ds_subchannel": "<p> dopesheet </p>", 
        "face_select": "<p> solid faces </p>", 
        "anim_active": "<p> NLA Active Action + Summary Channel </p>", 
        "panelcolors": "<p> float panel char panel[4]; unused char panel_title[4]; unused char panel_text[4]; unused char panel_text_hi[4]; unused note, cannot use name 'panel' because of DNA mapping old files </p>", 
        "tab_active": "<p> region tabs </p>", 
        "keyframe_scale_fac": "<p> for dopesheet - scale factor for size of keyframes (i.e. height of channels) </p>", 
        "header": "<p> header colors region background </p>", 
        "info_selected": "<p> info </p>", 
        "uv_others": "<p> uvs of other objects </p>"
      }
    }, 
    "KeyingSet": {
      "doc": "<p><hr/> \n {@link KeyingSet}  definition (ks)</p><p> A {@link KeyingSet}  defines a group of properties that should be keyframed together, providing a convenient way for animators to insert keyframes without resorting to Auto-Keyframing.</p><p> A few 'generic' (non-absolute and dependent on templates) KeyingSets are defined 'built-in' to facilitate easy animating for the casual animator without the need to add extra steps to the rigging process. </p>", 
      "fields": {
        "keyingflag": "<p> (eInsertKeyFlags) settings to supply insertkey() with </p>", 
        "typeinfo": "<p> name of the typeinfo data used for the relative paths - MAX_ID_NAME-2 </p>", 
        "flag": "<p> settings for {@link KeyingSet}  </p>", 
        "paths": "<p> ({@link KS_Path} ) paths to keyframe to </p>", 
        "idname": "<p> unique name (for search, etc.) - MAX_ID_NAME-2 </p>", 
        "name": "<p> user-viewable name for {@link KeyingSet}  (for menus, etc.) - MAX_ID_NAME-2 </p>", 
        "keyingoverride": "<p> (eInsertKeyFlags) for each flag set, the relevant keyingflag bit overrides the default </p>", 
        "description": "<p> (RNA_DYN_DESCR_MAX) short help text. </p>", 
        "active_path": "<p> index of the active path </p>"
      }
    }, 
    "Group": {
      "fields": {
        "gobject": "<p>{@link GroupObject}  </p>", 
        "layer": "<p> Bad design, since layers stored in the scenes '{@link Base} ' the objects that show in the group can change depending on the last used scene </p>"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "fields": {
        "angle": "<p> in radians! </p>"
      }
    }, 
    "bTrackToConstraint": {
      "doc": "<p> Single-target subobject constraints ---------------<mdash/><mdash/>  Track To Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "reserved1": "<p> I'll be using reserved1 and reserved2 as Track and Up flags, not sure if that's what they were intended for anyway. Not sure either if it would create backward incompatibility if I were to rename them.<ul><li><p> theeth </p></li></ul> \ntheeth \n</p>"
      }
    }, 
    "SpaceTime": {
      "doc": "<p> Timeline View </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "BoundBox": {
      "doc": "<p> The following illustrates the orientation of the bounding box in local space</p><p><pre></pre></p><p><pre> Z  Y\n| /\n|/\n.--<mdash/></pre></p><p><pre><pre>2----------6\n</pre> 2----------6\n\n   /|         /|\n  / |        / |\n 1-------<mdash/> 5  |\n |  |       |  |\n |  3----<mdash/> |<ndash/> 7\n | /        | /\n |/         |/\n 0-------<mdash/></pre>  </p>"
    }, 
    "bStretchToConstraint": {
      "doc": "<p> Stretch to constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "PanelCategoryStack": {
      "doc": "<p> region stack of active tabs </p>"
    }, 
    "ParticleBrushData": {
      "doc": "<p><hr/> \n {@link Particle}  Edit Settings for a {@link Particle}  {@link Editing}  {@link Brush}  </p>", 
      "fields": {
        "size": "<p> common setting </p>", 
        "count": "<p> for specific brushes only </p>"
      }
    }, 
    "bPropertyActuator": {
      "fields": {
        "value": "<p> MAX_NAME </p>"
      }
    }, 
    "LineStyleColorModifier_Noise": {
      "doc": "<p> Noise modifiers (for color, alpha and thickness) </p>"
    }, 
    "PaintCurve": {
      "fields": {
        "add_index": "<p> index where next point will be added </p>", 
        "points": "<p> points of curve </p>"
      }
    }, 
    "uiStyle": {
      "doc": "<p> this is fed to the layout engine and widget code </p>", 
      "fields": {
        "minlabelchars": "<p> in characters </p>", 
        "name": "<p> MAX_STYLE_NAME </p>", 
        "minwidgetchars": "<p> in characters </p>"
      }
    }, 
    "ScrArea": {
      "fields": {
        "region_active_win": "<p> index of last used region of 'RGN_TYPE_WINDOW' runtime variable, updated by executing operators </p>", 
        "regionbase": "<p> NOTE: This region list is the one from the active/visible editor (first item in spacedata list). Use {@link SpaceLink.regionbase}  if it's inactive (but only then)!ARegion </p>", 
        "winy": "<p> size </p>", 
        "headertype": "<p> OLD! 0=no header, 1= down, 2= up </p>", 
        "type": "<p> callbacks for this space type </p>", 
        "totrct": "<p> rect bound by v1 v2 v3 v4 </p>", 
        "actionzones": "<p> AZone </p>", 
        "handlers": "<p> wmEventHandler </p>", 
        "do_refresh": "<p> private, for spacetype refresh callback </p>", 
        "spacedata": "<p> A list of space links (editors) that were open in this area before. When changing the editor type, we try to reuse old editor data from this list. The first item is the active/visible one.SpaceLink </p>", 
        "v4": "<p> ordered (bl, tl, tr, br) </p>", 
        "butspacetype": "<p> SPACE_..., butspacetype is button arg </p>", 
        "full": "<p> if area==full, this is the parent </p>"
      }
    }, 
    "ScrVert": {
      "fields": {
        "flag": "<p> first one used internally, second one for tools </p>"
      }
    }, 
    "CustomData": {
      "doc": "<p> structure which stores custom element data associated with mesh elements (vertices, edges or faces). The custom data is organized into a series of layers, each with a data type (e.g. {@link MTFace} , {@link MDeformVert} , etc.). </p>", 
      "fields": {
        "external": "<p> external file storing customdata layers </p>", 
        "typemap": "<p> runtime only! - maps types to indices of first layer of that type, MUST be >= CD_NUMTYPES, but we cant use a define here. Correct size is ensured in CustomData_update_typemap assert() </p>", 
        "layers": "<p> CustomDataLayers, ordered by type </p>", 
        "pool": "<p> (BMesh Only): Memory pool for allocation of blocks </p>", 
        "maxlayer": "<p> number of layers, size of layers array </p>", 
        "totsize": "<p> in editmode, total size of all data layers </p>"
      }
    }, 
    "bPoseChannel": {
      "doc": "<p><hr/> \n Poses PoseChannel ------------------------------<mdash/><mdash/>  PoseChannel</p><p> A PoseChannel stores the results of Actions and transform information with respect to the restposition of Armature bones </p>", 
      "fields": {
        "siktree": "<p> Spline-IK \"trees\" - only while evaluating pose </p>", 
        "parent": "<p> set on read file or rebuild pose </p>", 
        "loc": "<p> transforms - written in by actions or transform </p>", 
        "flag": "<p> dynamic, for detecting transform changes </p>", 
        "agrp_index": "<p> index of action-group this bone belongs to (0 = default/no group) </p>", 
        "bbone_prev": "<p> next/prev bones to use as handle references when calculating bbones (optional) </p>", 
        "constinv": "<p> inverse result of constraints. doesn't include effect of restposition, parent, and local transform </p>", 
        "iktree": "<p> \"IK trees\" - only while evaluating pose </p>", 
        "pose_head": "<p> actually pose_mat[3] </p>", 
        "constraints": "<p> Constraints that act on this PoseChannel </p>", 
        "ikflag": "<p> settings for IK bones </p>", 
        "ikrotweight": "<p> weight of joint rotation constraint </p>", 
        "prop": "<p> User-Defined Properties on this PoseChannel </p>", 
        "constflag": "<p> for quick detecting which constraints affect this channel </p>", 
        "custom_tx": "<p> odd feature, display with another bones transform. needed in rare cases for advanced rigs, since the alternative is highly complicated - campbell </p>", 
        "iklinweight": "<p> weight of joint stretch constraint </p>", 
        "quat": "<p> quaternion rotation </p>", 
        "pose_mat": "<p> constraints accumulate here. in the end, pose_mat = bone->arm_mat * chan_mat this matrix is object space </p>", 
        "limitmax": "<p> DOF constraint, note! - these are stored in degrees, not radians </p>", 
        "temp": "<p> use for outliner </p>", 
        "mpath": "<p> motion path cache for this bone </p>", 
        "custom": "<p> draws custom object instead of default bone shape </p>", 
        "bone": "<p> set on read file or rebuild pose </p>", 
        "stiffness": "<p> DOF stiffness </p>", 
        "chan_mat": "<p> matrix result of loc/quat/size, and where we put deform in, see next line </p>", 
        "roll1": "<p> curved bones settings - these are for animating, and are applied on top of the copies in pchan->bone </p>", 
        "rotAngle": "<p> axis-angle rotation </p>", 
        "pose_tail": "<p> also used for drawing help lines... </p>", 
        "protectflag": "<p> protect channels from being transformed </p>", 
        "name": "<p> need to match bone name length: MAXBONENAME </p>", 
        "selectflag": "<p> copy of bone flag, so you can work with library armatures, not for runtime use </p>", 
        "rotmode": "<p> eRotationModes - rotation representation to use </p>", 
        "eul": "<p> rotations - written in by actions or transform (but only one representation gets used at any time) euler rotation </p>", 
        "child": "<p> set on read file or rebuild pose, the 'ik' child, for b-bones </p>"
      }
    }, 
    "bActionGroup": {
      "doc": "<p><hr/> \n Action Groups --------------------------------<mdash/><mdash/>  Action-Channel {@link Group}  (agrp)</p><p> These are stored as a list per-Action, and are only used to group that Action's channels in an Animation Editor.</p><p> Even though all FCurves live in a big list per Action, each group they are in also holds references to the achans within that list which belong to it. Care must be taken to ensure that action-groups never end up being the sole 'owner' of a channel.</p><p> This is also exploited for bone-groups. Bone-Groups are stored per {@link bPose} , and are used primarily to color bones in the 3d-view. There are other benefits too, but those are mostly related to Action-Groups.</p><p> Note that these two uses each have their own RNA 'ActionGroup' and 'BoneGroup'. </p>", 
      "fields": {
        "cs": "<p> color set to use when customCol == -1 </p>", 
        "customCol": "<p> index of custom color set to use when used for bones (0=default - used for all old files, -1=custom set) </p>", 
        "flag": "<p> settings for this action-group </p>", 
        "channels": "<p> Note: this must not be touched by standard listbase functions which would clear links to other channels </p>", 
        "name": "<p> name of the group </p>"
      }
    }, 
    "MirrorModifierData": {
      "fields": {
        "axis": "<p><p> deprecated, use flag instead </p>\n@deprecated\n Deprecateddeprecated, use flag instead </p>"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "fields": {
        "angle": "<p> in radians! </p>"
      }
    }, 
    "bConstraintActuator": {
      "fields": {
        "matprop": "<p> MAX_NAME </p>"
      }
    }, 
    "GPUFXSettings": {
      "fields": {
        "fx_flag": "<p> eGPUFXFlags </p>"
      }
    }, 
    "TexPaintSlot": {
      "fields": {
        "uvname": "<p> customdata index for uv layer, MAX_NAME </p>", 
        "index": "<p> index for mtex slot in material for blender internal </p>", 
        "ima": "<p> image to be painted on </p>"
      }
    }, 
    "UserDef": {
      "fields": {
        "virtual_pixel": "<p> virtual pixelsize mode </p>", 
        "wmdrawmethod": "<p> removed wmpad </p>", 
        "coba_weight": "<p> from texture.h </p>", 
        "pie_menu_radius": "<p> pie menu radius </p>", 
        "view_frame_keyframes": "<p> number of keyframes to zoom around current frame </p>", 
        "keymaps": "<p><p> deprecated in favor of user_keymaps </p>\n@deprecated\n Deprecateddeprecated in favor of user_keymaps </p>", 
        "image_draw_method": "<p> Method to be used to draw the images (AUTO, GLSL, Textures or DrawPixels) </p>", 
        "v2d_min_gridsize": "<p> minimum spacing between gridlines in {@link View2D}  grids </p>", 
        "pie_menu_threshold": "<p> pie menu distance from center before a direction is set </p>", 
        "timecode_style": "<p> style of timecode display </p>", 
        "ndof_deadzone": "<p> deadzone of 3D mouse </p>", 
        "scrollback": "<p> console scrollback limit </p>", 
        "versionfile": "<p>{@link UserDef}  has separate do-version handling, and can be read from other files </p>", 
        "gpencil_new_layer_col": "<p> default color for newly created Grease Pencil layers </p>", 
        "pie_interaction_type": "<p> if keeping a pie menu spawn button pressed after this time, it turns into a drag/release pie menu </p>", 
        "renderdir": "<p> FILE_MAX length </p>", 
        "scrcastwait": "<p> milliseconds between screencast snapshots </p>", 
        "autokey_mode": "<p> autokeying mode </p>", 
        "tempdir": "<p> FILE_MAXDIR length </p>", 
        "anim_player": "<p> 1024 = FILE_MAX </p>", 
        "smooth_viewtx": "<p> miliseconds to spend spinning the view </p>", 
        "ogl_multisamples": "<p> amount of samples for OpenGL FSA, if zero no FSA </p>", 
        "fcu_inactive_alpha": "<p> opacity of inactive F-Curves in F-Curve Editor </p>", 
        "autokey_flag": "<p> flags for autokeying </p>", 
        "dpi": "<p> range 48-128? </p>", 
        "keyhandles_new": "<p> handle types for newly added keyframes </p>", 
        "ipo_new": "<p> interpolation mode for newly added F-Curves </p>", 
        "node_margin": "<p> node insert offset (aka auto-offset) margin, but might be useful for later stuff as well </p>", 
        "widget_unit": "<p> private, defaults to 20 for 72 DPI setting </p>", 
        "author": "<p> author name for file formats supporting it </p>", 
        "recent_files": "<p> maximum number of recently used files to remember </p>", 
        "view_frame_seconds": "<p> seconds to zoom around current frame </p>", 
        "render_cachedir": "<p> EXR cache path 768 = FILE_MAXDIR </p>", 
        "pad_rot_angle": "<p> control the rotation step of the view when PAD2, PAD4, PAD6&PAD8 is use </p>", 
        "pad9": "<p> options for text rendering </p>", 
        "ndof_flag": "<p> flags for 3D mouse </p>", 
        "rvisize": "<p> rotating view icon size </p>", 
        "rvibright": "<p> rotating view icon brightness </p>", 
        "scrcastfps": "<p> frame rate for screencast to be played back </p>", 
        "image_editor": "<p> 1024 = FILE_MAX </p>", 
        "pie_initial_timeout": "<p> direction in the pie menu will always be calculated from the initial position within this time limit </p>", 
        "ndof_sensitivity": "<p> overall sensitivity of 3D mouse </p>", 
        "pixelsize": "<p> private, set by GHOST, to multiply DPI with </p>"
      }
    }, 
    "SpaceTimeCache": {
      "doc": "<p> Timeline =============================================== Pointcache drawing data Only store the data array in the cache to avoid constant reallocation. No need to store when saved. </p>"
    }, 
    "DecimateModifierData": {
      "fields": {
        "delimit": "<p> (mode == MOD_DECIM_MODE_DISSOLVE) </p>", 
        "face_count": "<p> runtime only </p>", 
        "iter": "<p> (mode == MOD_DECIM_MODE_UNSUBDIV) </p>", 
        "angle": "<p> (mode == MOD_DECIM_MODE_DISSOLVE) </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "percent": "<p> (mode == MOD_DECIM_MODE_COLLAPSE) </p>", 
        "symmetry_axis": "<p> (mode == MOD_DECIM_MODE_COLLAPSE) </p>"
      }
    }, 
    "Nurb": {
      "doc": "<p><h2>Note</h2><p>{@link Nurb}  name is misleading, since it can be used for polygons too, also, it should be NURBS ({@link Nurb}  isn't the singular of Nurbs). </p>  name is misleading, since it can be used for polygons too, also, it should be NURBS (Nurb isn't the singular of Nurbs). \n</p>", 
      "fields": {
        "resolv": "<p> tessellation resolution in the U or V directions </p>", 
        "prev": "<p> multiple nurbs per curve object are allowed </p>", 
        "pntsv": "<p> number of points in the U or V directions </p>", 
        "charidx": "<p> only used for dynamically generated Nurbs created from OB_FONT's </p>", 
        "mat_nr": "<p> index into material list </p>", 
        "tilt_interp": "<p> KEY_LINEAR, KEY_CARDINAL, KEY_BSPLINE </p>"
      }
    }, 
    "LatticeModifierData": {
      "fields": {
        "name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "BrushClone": {
      "fields": {
        "image": "<p> image for clone tool </p>", 
        "pad": "<p> transparency for drawing of clone image </p>", 
        "offset": "<p> offset of clone image from canvas </p>"
      }
    }, 
    "NodeScriptDict": {
      "fields": {
        "node": "<p> for BPy_Node *node </p>", 
        "dict": "<p> for PyObject *dict </p>"
      }
    }, 
    "PTCacheMem": {
      "fields": {
        "cur": "<p> BPHYS_TOT_DATA </p>", 
        "data": "<p> BPHYS_TOT_DATA </p>"
      }
    }, 
    "ToolSettings": {
      "doc": "<p><hr/> \n Tool Settings </p>", 
      "fields": {
        "imapaint": "<p>{@link Image}  {@link Paint}  (8 byttse aligned please!) </p>", 
        "use_uv_sculpt": "<p> UV painting </p>", 
        "gpencil_v3d_align": "<p> stroke placement settings: 3D View </p>", 
        "gpencil_v2d_align": "<p> : General 2D Editor </p>", 
        "sculpt_paint_unified_size": "<p>\n@deprecated\n Deprecated</p>", 
        "sculpt_paint_unified_alpha": "<p>\n@deprecated\n Deprecated</p>", 
        "selectmode": "<p> Selection Mode for {@link Mesh}  </p>", 
        "proportional_objects": "<p> proportional edit, object mode </p>", 
        "autoik_chainlen": "<p> Auto-IK runtime only </p>", 
        "gp_brushes": "<p> Grease Pencil Drawing Brushes ({@link bGPDbrush} ) </p>", 
        "proportional_action": "<p> proportional edit, action editor </p>", 
        "auto_normalize": "<p> auto normalizing mode in wpaint </p>", 
        "doublimit": "<p> remove doubles limit </p>", 
        "autokey_mode": "<p> Auto-Keying Mode </p>", 
        "lock_markers": "<p> lock marker editing </p>", 
        "particle": "<p>{@link Particle}  {@link Editing}  </p>", 
        "vpaint": "<p> vertex paint </p>", 
        "autokey_flag": "<p> defines in {@link DNA_userdef_types.h}  </p>", 
        "normalsize": "<p> size of normals </p>", 
        "gpencil_src": "<p> for main 3D view Grease Pencil, where data comes from </p>", 
        "gp_sculpt": "<p> Grease Pencil {@link Sculpt}  </p>", 
        "gpencil_flags": "<p> Grease Pencil flags/options for how the tool works </p>", 
        "skgen_template": "<p> Skeleton Sketching </p>", 
        "proportional_mask": "<p> proportional edit, mask editing </p>", 
        "gpencil_ima_align": "<p> : {@link Image}  Editor </p>", 
        "multipaint": "<p> paint multiple bones in wpaint </p>", 
        "select_thresh": "<p> Select {@link Group}  Threshold </p>", 
        "proportional_fcurve": "<p> proportional edit, graph editor </p>", 
        "unified_paint_settings": "<p> Unified {@link Paint}  Settings </p>", 
        "skgen_resolution": "<p> Skeleton generation </p>", 
        "vgroupsubset": "<p> subset selection filter in wpaint </p>", 
        "wpaint": "<p> weight paint </p>", 
        "snap_mode": "<p> Transform </p>", 
        "sculpt_paint_settings": "<p> XXX: these sculpt_paint_* fields are deprecated, use the unified_paint_settings field instead! \n@deprecated\n Deprecated</p>", 
        "vgroup_weight": "<p> Vertex group weight - used only for editmode, not weight paint </p>", 
        "proportional_size": "<p> Transform Proportional Area of {@link Effect}  </p>", 
        "keyframe_type": "<p> keyframe type (see {@link DNA_curve_types.h} ) </p>", 
        "unwrapper": "<p> UV Calculation </p>", 
        "edge_mode": "<p> Alt+RMB option </p>", 
        "uvsculpt": "<p> uv smooth </p>", 
        "gpencil_seq_align": "<p> : Sequencer Preview </p>", 
        "sculpt_paint_unified_unprojected_radius": "<p>\n@deprecated\n Deprecated</p>", 
        "multires_subdiv_type": "<p>{@link Multires}  </p>"
      }
    }, 
    "wmOperatorTypeMacro": {
      "doc": "<p> These two Lines with # tell makesdna this struct can be excluded. should be something like DNA_EXCLUDE but the preprocessor first removes all comments, spaces etc </p>", 
      "fields": {
        "idname": "<p> operator id </p>", 
        "properties": "<p> rna pointer to access properties, like keymap operator properties, assigned to ptr->data and can be written to a file </p>"
      }
    }, 
    "SpaceNla": {
      "doc": "<p> NLA Editor ============================================= NLA Editor </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "autosnap": "<p> this uses the same settings as autosnap for Action Editor </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "DynamicPaintModifierData": {
      "fields": {
        "type": "<p> ui display: canvas / brush </p>"
      }
    }, 
    "ColorManagedColorspaceSettings": {
      "fields": {
        "name": "<p> MAX_COLORSPACE_NAME </p>"
      }
    }, 
    "PartDeflect": {
      "fields": {
        "flag": "<p> general settings flag </p>", 
        "f_size": "<p> force used as the velocity of surrounding medium. Noise size for noise effector, restlength for harmonic effector </p>", 
        "seed": "<p> noise random seed </p>", 
        "pdef_rfrict": "<p> Random element of friction for deflection </p>", 
        "forcefield": "<p> Force field type, do the vertices attract / repel particles? </p>", 
        "mindist": "<p> if indicated, use this minimum </p>", 
        "pdef_sbift": "<p> inner face thickness for softbody deflection </p>", 
        "pdef_stickness": "<p> surface particle stickiness </p>", 
        "f_strength": "<p> Main effector values The strength of the force (+ or - ) </p>", 
        "f_power": "<p> fall-off The power law - real gravitation is 2 (square) </p>", 
        "f_noise": "<p> noise of force </p>", 
        "maxdist": "<p> if indicated, use this maximum </p>", 
        "f_flow": "<p> How much force is converted into \"air flow\", i.e. </p>", 
        "clump_fac": "<p> guide curve, same as for particle child effects </p>", 
        "pdef_perm": "<p> Chance of particle passing through mesh </p>", 
        "shape": "<p> point, plane or surface </p>", 
        "absorption": "<p> used for forces </p>", 
        "tex": "<p> Texture of the texture effector </p>", 
        "kink_axis": "<p> for curve guide </p>", 
        "pdef_rdamp": "<p> Random element of damping for deflection </p>", 
        "tex_mode": "<p> texture effector </p>", 
        "pdef_sboft": "<p> outer face thickness for softbody deflection </p>", 
        "rng": "<p> effector noise random noise generator for e.g. wind </p>", 
        "f_power_r": "<p> radial fall-off power </p>", 
        "f_source": "<p> force source object </p>", 
        "f_damp": "<p> Damping ratio of the harmonic effector. </p>", 
        "pdef_sbdamp": "<p> softbody collisions Damping factor for softbody deflection </p>", 
        "tex_nabla": "<p> texture effector Used for calculating partial derivatives </p>", 
        "falloff": "<p> fall-off type </p>", 
        "deflect": "<p> Deflection flag - does mesh deflect particles </p>", 
        "pdef_damp": "<p> particle collisions Damping factor for particle deflection </p>", 
        "pdef_frict": "<p> Friction factor for particle deflection </p>", 
        "maxrad": "<p> radial versions of above </p>"
      }
    }, 
    "bFollowPathConstraint": {
      "doc": "<p> Follow {@link Path}  constraints </p>", 
      "fields": {
        "tar": "<p> Must be path object </p>", 
        "offset": "<p> Offset in time on the path (in frames), when NOT using 'fixed position' </p>", 
        "offset_fac": "<p> Parametric offset factor defining position along path, when using 'fixed position' </p>"
      }
    }, 
    "FileDirEntry": {
      "doc": "<p> Container for mere direntry, with additional asset-related data. </p>", 
      "fields": {
        "poin": "<p> TODO: make this a real {@link ID}  pointer? </p>", 
        "entry": "<p> Either point to active variant/revision if available, or own entry (in mere filebrowser case). </p>", 
        "typeflag": "<p> eFileSel_File_Types </p>", 
        "blentype": "<p>{@link ID}  type, in case typeflag has FILE_TYPE_BLENDERLIB set. </p>", 
        "tags": "<p> Tags are for info only, most of filtering is done in asset engine. </p>"
      }
    }, 
    "bObjectSolverConstraint": {
      "doc": "<p>{@link Camera}  Solver constraints </p>", 
      "fields": {
        "invmat": "<p> parent-inverse matrix to use </p>", 
        "object": "<p> MAX_NAME </p>"
      }
    }, 
    "NodeImageMultiFile": {
      "doc": "<p> XXX first struct fields should match {@link NodeImageFile}  to ensure forward compatibility </p>", 
      "fields": {
        "active_input": "<p> selected input in details view list </p>", 
        "sfra": "<p>\n@deprecated\n Deprecated</p>", 
        "base_path": "<p> 1024 = FILE_MAX </p>", 
        "efra": "<p><p> XXX old frame rand values from {@link NodeImageFile}  for forward compatibility </p>\n@deprecated\n DeprecatedXXX old frame rand values from NodeImageFile for forward compatibility </p>"
      }
    }, 
    "bSplineIKConstraint": {
      "doc": "<p> Spline IK Constraint Aligns 'n' bones to the curvature defined by the curve, with the chain ending on the bone that owns this constraint, and starting on the nth parent. </p>", 
      "fields": {
        "flag": "<p> settings general settings for constraint </p>", 
        "tar": "<p> target(s) curve object (with follow path enabled) which drives the bone chain </p>", 
        "xzScaleMode": "<p> method used for determining the x & z scaling of the bones </p>", 
        "chainlen": "<p> number of bones ('n') that are in the chain </p>", 
        "bulge": "<p> volume preservation settings </p>", 
        "numpoints": "<p> number of points to bound in points array </p>", 
        "points": "<p> binding details array of numpoints items, denoting parametric positions along curve that joints should follow </p>"
      }
    }, 
    "bTheme": {
      "doc": "<p> A theme </p>", 
      "fields": {
        "tbuts": "<p> Individual Spacetypes note: ensure UI_THEMESPACE_END is updated when adding </p>", 
        "active_theme_area": "<p>{@link ThemeWireColor}  tobj[20]; </p>", 
        "tarm": "<p> 20 sets of bone colors for this theme </p>"
      }
    }, 
    "bProperty": {
      "doc": "<p> ********************* PROPERTY ************************ </p>", 
      "fields": {
        "poin": "<p> references data unless its a string which is malloc'd </p>", 
        "data": "<p> data should be 4 bytes to store int,float stuff </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "CurveModifierData": {
      "fields": {
        "defaxis": "<p> axis along which curve deforms </p>", 
        "name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>"
      }
    }, 
    "MaskSpaceInfo": {
      "fields": {
        "draw_flag": "<p> draw options </p>", 
        "mask": "<p> **** mask editing **** </p>"
      }
    }, 
    "IDPropertyData": {
      "fields": {
        "val2": "<p> note, we actually fit a double into these two ints </p>"
      }
    }, 
    "bSizeLimitConstraint": {
      "doc": "<p> Limit Scale Constraint </p>"
    }, 
    "SpaceButs": {
      "doc": "<p> Properties Editor ==================================== Properties Editor </p>", 
      "fields": {
        "mainbuser": "<p> context tabs </p>", 
        "preview": "<p> preview is signal to refresh </p>", 
        "path": "<p> runtime </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "align": "<p> align for panels </p>", 
        "texture_context": "<p> texture context selector (material, lamp, particles, world, other) </p>", 
        "dataicon": "<p> runtime </p>"
      }
    }, 
    "MovieTrackingObject": {
      "fields": {
        "keyframe2": "<p> two keyframes for reconstruction initialization </p>", 
        "keyframe1": "<p> reconstruction options </p>", 
        "plane_tracks": "<p> list of plane tracks used by this object </p>", 
        "name": "<p> Name of tracking object, MAX_NAME </p>", 
        "scale": "<p> scale of object solution in amera space </p>", 
        "reconstruction": "<p> reconstruction data for this object </p>", 
        "tracks": "<p> list of tracks use to tracking this object </p>"
      }
    }, 
    "FMod_Stepped": {
      "doc": "<p> stepped modifier data </p>", 
      "fields": {
        "flag": "<p> various settings </p>", 
        "offset": "<p> Reference frame number that stepping starts from </p>", 
        "end_frame": "<p> end frame of the frame range that modifier works in </p>", 
        "start_frame": "<p> start frame of the frame range that modifier works in </p>", 
        "step_size": "<p> Number of frames each interpolated value should be held </p>"
      }
    }, 
    "bGroupActuator": {
      "fields": {
        "name": "<p> property or groupkey, MAX_NAME </p>", 
        "butend": "<p> not referenced, can remove? </p>"
      }
    }, 
    "SpaceNode": {
      "fields": {
        "cursor": "<p> mouse pos for drawing socketless link and adding nodes </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "texfrom": "<p> texfrom object, world or brush </p>", 
        "treepath": "<p> XXX nodetree pointer info is all in the path stack now, remove later on and use {@link bNodeTreePath}  instead. For now these variables are set when pushing/popping from path stack, to avoid having to update all the functions and operators. Can be done when design is accepted and everything is properly tested. </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "pad1": "<p> menunr: browse id block in header </p>", 
        "zoom": "<p> zoom for backdrop </p>", 
        "iofsd": "<p> XXX hack for translate_attach op-macros to pass data from transform op to insert_offset op temporary data for node insert offset (in UI called Auto-offset) </p>", 
        "pad2": "<p> internal state variables </p>", 
        "recalc": "<p> currently on 0/1, for auto compo </p>", 
        "yof": "<p> offset for drawing the backdrop </p>", 
        "insert_ofs_dir": "<p> direction for offsetting nodes on insertion </p>", 
        "shaderfrom": "<p> shader from object or world </p>", 
        "treetype": "<p><p> treetype: as same nodetree->type </p>\n@deprecated\n Deprecatedtreetype: as same nodetree->type </p>", 
        "from": "<p> context, no need to save in file? well... pinning... </p>", 
        "tree_idname": "<p> tree type for the current node tree </p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "linkdrag": "<p> temporary data for modal linking operator </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "bActionModifier": {
      "doc": "<p> simple uniform modifier structure, assumed it can hold all type info </p>", 
      "fields": {
        "noisesize": "<p> noise modifier </p>", 
        "no_rot_axis": "<p> path deform modifier </p>"
      }
    }, 
    "TexNodeOutput": {
      "doc": "<p> TEX_output </p>"
    }, 
    "MaskParent": {
      "fields": {
        "parent": "<p> entity of parent to which parenting happened in case of parenting to movie tracking data contains name of layer </p>", 
        "parent_orig": "<p> track location at the moment of parenting, stored in mask space </p>", 
        "id_type": "<p> int flag; // parenting flags  // not used  </p><p> type of parenting </p>", 
        "id": "<p>{@link ID}  block of entity to which mask/spline is parented to in case of parenting to movie tracking data set to {@link MovieClip}  datablock </p>", 
        "sub_parent": "<p> sub-entity of parent to which parenting happened in case of parenting to movie tracking data contains name of track </p>", 
        "type": "<p> type of parenting </p>", 
        "parent_corners_orig": "<p> Original corners of plane track at the moment of parenting </p>"
      }
    }, 
    "bCameraSolverConstraint": {
      "doc": "<p>{@link Camera}  Solver constraints </p>"
    }, 
    "wmKeyConfig": {
      "fields": {
        "basename": "<p> idname of configuration this is derives from, \"\" if none </p>", 
        "idname": "<p> unique name </p>"
      }
    }, 
    "FluidsimModifierData": {
      "fields": {
        "fss": "<p> definition is in {@link DNA_object_fluidsim.h}  </p>", 
        "point_cache": "<p> definition is in {@link DNA_object_force.h}  </p>"
      }
    }, 
    "GroupObject": {
      "fields": {
        "lampren": "<p> used while render </p>", 
        "recalc": "<p> copy of ob->recalc, used to set animated groups OK </p>"
      }
    }, 
    "FMod_Python": {
      "doc": "<p> Python-script modifier data </p>", 
      "fields": {
        "prop": "<p> ID-properties to provide 'custom' settings </p>", 
        "script": "<p> text buffer containing script to execute </p>"
      }
    }, 
    "ParticleEditSettings": {
      "doc": "<p>{@link Particle}  Edit Mode Settings </p>", 
      "fields": {
        "brush": "<p> 7 = PE_TOT_BRUSH </p>", 
        "paintcursor": "<p> runtime </p>"
      }
    }, 
    "bRotLimitConstraint": {
      "doc": "<p> Limit Rotation Constraint </p>"
    }, 
    "PanelCategoryDyn": {
      "doc": "<p> Notes on {@link Panel}  Catogories:</p><p> ar->panels_category ({@link PanelCategoryDyn} ) is a runtime only list of categories collected during draw.</p><p> ar->panels_category_active ({@link PanelCategoryStack} ) is basically a list of strings (category id's).</p><p> Clicking on a tab moves it to the front of ar->panels_category_active, If the context changes so this tab is no longer displayed, then the first-most tab in ar->panels_category_active is used.</p><p> This way you can change modes and always have the tab you last clicked on.region level tabs </p>"
    }, 
    "bIpoActuator": {
      "doc": "<p> deprecated, handled by {@link bActionActuator}  now </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>", 
        "frameProp": "<p> Set this property to the actions current frame, MAX_NAME </p>"
      }
    }, 
    "ARegion": {
      "fields": {
        "panels_category": "<p>{@link Panel}  categories runtime </p>", 
        "flag": "<p> hide, ... </p>", 
        "regiontimer": "<p> blend in/out </p>", 
        "regiontype": "<p> window, header, etc. identifier for drawing </p>", 
        "panels": "<p>{@link Panel}  </p>", 
        "winrct": "<p> coordinates of region </p>", 
        "type": "<p> callbacks for this region type </p>", 
        "headerstr": "<p> use this string to draw info </p>", 
        "drawrct": "<p> runtime for partial redraw, same or smaller than winrct </p>", 
        "sizey": "<p> current split size in pixels (if zero it uses regiontype) </p>", 
        "uiblocks": "<p> uiBlock </p>", 
        "swap": "<p> private, indicator to survive swap-exchange </p>", 
        "panels_category_active": "<p> Stack of panel categories </p>", 
        "v2d": "<p> 2D-View scrolling/zoom info (most regions are 2d anyways) </p>", 
        "winy": "<p> size </p>", 
        "do_draw_overlay": "<p> private, cached notifier events </p>", 
        "ui_previews": "<p>{@link uiPreview}  </p>", 
        "flagfullscreen": "<p> temporary copy of flag settings for clean fullscreen </p>", 
        "overlap": "<p> private, set for indicate drawing overlapped </p>", 
        "fsize": "<p> current split size in float (unused) </p>", 
        "handlers": "<p> wmEventHandler </p>", 
        "do_draw": "<p> private, cached notifier events </p>", 
        "alignment": "<p> how it should split </p>", 
        "regiondata": "<p> XXX 2.50, need spacedata equivalent? </p>", 
        "ui_lists": "<p>{@link uiList}  </p>"
      }
    }, 
    "BezTriple": {
      "doc": "<p> Keyframes on F-Curves (allows code reuse of Bezier eval code) and Points on Bezier Curves/Paths are generally BezTriples</p><p><h2>Note</h2><p> alfa location in struct is abused by {@link Key}  system</p> alfa location in struct is abused by Key system\n<h2>Note</h2><p> vec in {@link BezTriple}  looks like this:<ul><li><p> vec[0][0] = x location of handle 1</p></li><li><p> vec[0][1] = y location of handle 1</p></li><li><p> vec[0][2] = z location of handle 1 (not used for {@link FCurve}  Points(2d))</p></li><li><p> vec[1][0] = x location of control point</p></li><li><p> vec[1][1] = y location of control point</p></li><li><p> vec[1][2] = z location of control point</p></li><li><p> vec[2][0] = x location of handle 2</p></li><li><p> vec[2][1] = y location of handle 2</p></li><li><p> vec[2][2] = z location of handle 2 (not used for {@link FCurve}  Points(2d)) </p></li></ul> \nvec[0][0] = x location of handle 1vec[0][1] = y location of handle 1vec[0][2] = z location of handle 1 (not used for FCurve Points(2d))vec[1][0] = x location of control pointvec[1][1] = y location of control pointvec[1][2] = z location of control pointvec[2][0] = x location of handle 2vec[2][1] = y location of handle 2vec[2][2] = z location of handle 2 (not used for FCurve Points(2d)) \n</p> vec in BezTriple looks like this:\nvec[0][0] = x location of handle 1vec[0][1] = y location of handle 1vec[0][2] = z location of handle 1 (not used for FCurve Points(2d))vec[1][0] = x location of control pointvec[1][1] = y location of control pointvec[1][2] = z location of control pointvec[2][0] = x location of handle 2vec[2][1] = y location of handle 2vec[2][2] = z location of handle 2 (not used for FCurve Points(2d)) \n\n</p>", 
      "fields": {
        "hide": "<p> hide: used to indicate whether {@link BezTriple}  is hidden (3D), type of keyframe (eBezTriple_KeyframeTypes) </p>", 
        "period": "<p> BEZT_IPO_ELASTIC </p>", 
        "ipo": "<p> ipo: interpolation mode for segment from this {@link BezTriple}  to the next </p>", 
        "back": "<p> BEZT_IPO_BACK </p>", 
        "h2": "<p> h1, h2: the handle type of the two handles </p>", 
        "radius": "<p> alfa: tilt in 3D View, weight: used for softbody goal weight, radius: for bevel tapering </p>", 
        "f3": "<p> f1, f2, f3: used for selection status </p>", 
        "easing": "<p> easing: easing type for interpolation mode (eBezTriple_Easing) </p>"
      }
    }, 
    "WalkNavigation": {
      "fields": {
        "teleport_time": "<p> duration to use for teleporting </p>", 
        "mouse_speed": "<p> speed factor for look around </p>"
      }
    }, 
    "bSteeringActuator": {
      "fields": {
        "type": "<p> 0=seek, 1=flee, 2=path following </p>"
      }
    }, 
    "bEditObjectActuator": {
      "fields": {
        "localflag": "<p> flag for the lin & ang. vel: apply locally </p>", 
        "name": "<p> MAX_NAME </p>", 
        "angVelocity": "<p> initial ang. velocity on creation </p>", 
        "linVelocity": "<p> initial lin. velocity on creation </p>", 
        "trackflag": "<p> flag for up axis and track axis </p>"
      }
    }, 
    "HairKey": {
      "fields": {
        "editflag": "<p> saved particled edit mode flags </p>", 
        "weight": "<p> softbody weight </p>", 
        "time": "<p> time along hair, default 0-100 </p>", 
        "co": "<p> location of hair vertex </p>"
      }
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "fields": {
        "angle": "<p> in radians! </p>"
      }
    }, 
    "NodeBlurData": {
      "fields": {
        "image_in_height": "<p> needed for absolute/relative conversions </p>"
      }
    }, 
    "KS_Path": {
      "doc": "<p><hr/> \n {@link KeyingSet}  Datatypes {@link Path}  for use in {@link KeyingSet}  definitions (ksp)</p><p> Paths may be either specific (specifying the exact sub-ID dynamic data-block - such as PoseChannels - to act upon, ala Maya's 'Character Sets' and XSI's 'Marking Sets'), or they may be generic (using various placeholder template tags that will be replaced with appropriate information from the context). </p>", 
      "fields": {
        "keyingflag": "<p> (eInsertKeyFlags) settings to supply insertkey() with </p>", 
        "idtype": "<p> -type that path can be used on </p>", 
        "flag": "<p> various settings, etc. </p>", 
        "groupmode": "<p> group naming (eKSP_Grouping) </p>", 
        "rna_path": "<p> dynamically (or statically in the case of predefined sets) path </p>", 
        "keyingoverride": "<p> (eInsertKeyFlags) for each flag set, the relevant keyingflag bit overrides the default </p>", 
        "id": "<p>{@link ID}  block that keyframes are for </p>", 
        "array_index": "<p> index that path affects </p>", 
        "group": "<p> name of the group to add to - MAX_ID_NAME-2 </p>"
      }
    }, 
    "NodeImageMultiFileSocket": {
      "fields": {
        "path": "<p> 1024 = FILE_MAX </p>", 
        "use_render_format": "<p> single layer file output \n@deprecated\n Deprecated</p>", 
        "use_node_format": "<p> use overall node image format </p>", 
        "layer": "<p> multilayer output EXR_TOT_MAXNAME-2 ('.' and channel char are appended) </p>"
      }
    }, 
    "CorrectiveSmoothModifierData": {
      "fields": {
        "bind_coords_num": "<p> note: -1 is used to bind </p>", 
        "bind_coords": "<p> positions set during 'bind' operator use for MOD_CORRECTIVESMOOTH_RESTSOURCE_BIND </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "delta_cache": "<p> runtime-only cache (delta's between), delta's between the original positions and the smoothed positions </p>"
      }
    }, 
    "TransformVars": {
      "fields": {
        "uniform_scale": "<p> preserve aspect/ratio when scaling </p>"
      }
    }, 
    "BakeData": {
      "fields": {
        "cage": "<p> MAX_NAME </p>", 
        "filepath": "<p> FILE_MAX </p>"
      }
    }, 
    "NodeLensDist": {
      "doc": "<p> qdn: lens distortion node </p>"
    }, 
    "WireframeModifierData": {
      "doc": "<p> many of these options match 'solidify' </p>", 
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "bKinematicConstraint": {
      "doc": "<p> Inverse-Kinematics (IK) constraint This constraint supports a variety of mode determine by the type field according to B_CONSTRAINT_IK_TYPE. Some fields are used by all types, some are specific to some types This is indicated in the comments for each field </p>", 
      "fields": {
        "flag": "<p> All & CopyPose: some options Like CONSTRAINT_IK_TIP </p>", 
        "tar": "<p> All: target object in case constraint needs a target </p>", 
        "grabtarget": "<p> CopyPose: for target-less IK </p>", 
        "poletar": "<p> All: Pole vector target </p>", 
        "weight": "<p> All: Weight of constraint in IK tree </p>", 
        "dist": "<p> Distance: distance (radius of clamping sphere) from target </p>", 
        "poleangle": "<p> All: Pole vector rest angle </p>", 
        "type": "<p> subtype of IK constraint: B_CONSTRAINT_IK_TYPE </p>", 
        "iterations": "<p> All: Maximum number of iterations to try </p>", 
        "polesubtarget": "<p> All: Pole vector sub-object target, MAX_ID_NAME-2 </p>", 
        "max_rootbone": "<p> CopyPose: for auto-ik, maximum length of chain </p>", 
        "mode": "<p> Distance: how to limit in relation to clamping sphere: LIMITDIST_.. </p>", 
        "rootbone": "<p> All: index to rootbone, if zero go all the way to mother bone </p>", 
        "subtarget": "<p> All: String to specify sub-object target, MAX_ID_NAME-2 </p>", 
        "orientweight": "<p> CopyPose: Amount of rotation a target applies on chain </p>"
      }
    }, 
    "GameSettings": {
      "doc": "<p> Game Engine Options (old Texface mode, transp and flag) </p>"
    }, 
    "ArmatureModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>", 
        "prevCos": "<p> stored input of previous modifier, for vertexgroup blending </p>", 
        "multi": "<p> deformflag replaces armature->deformflag </p>"
      }
    }, 
    "CustomDataExternal": {
      "fields": {
        "filename": "<p> FILE_MAX </p>"
      }
    }, 
    "NlaTrack": {
      "doc": "<p> NLA Tracks -------------------------------<mdash/><mdash/>  NLA Track (nlt)</p><p> A track groups a bunch of 'strips', which should form a continuous set of motion, on top of which other such groups can be layered. This should allow for animators to work in a non-destructive manner, layering tweaks, etc. over 'rough' blocks of their work. </p>", 
      "fields": {
        "flag": "<p> settings for this track </p>", 
        "name": "<p> short user-description of this track - MAX_ID_NAME-2 </p>", 
        "index": "<p> index of the track in the stack (NOTE: not really useful, but we need a pad var anyways!) </p>", 
        "strips": "<p> bActionStrips in this track </p>"
      }
    }, 
    "PhysicsSettings": {
      "doc": "<p><hr/> \n Global/Common Physics Settings </p>"
    }, 
    "MaskLayer": {
      "fields": {
        "act_spline": "<p> active spline </p>", 
        "flag": "<p> for animation </p>", 
        "restrictflag": "<p> matching '{@link Object} ' flag of the same name - eventually use in the outliner </p>", 
        "alpha": "<p> blending options </p>", 
        "name": "<p> name of the mask layer (64 = MAD_ID_NAME - 2) </p>", 
        "splines": "<p> list of splines which defines this mask layer </p>", 
        "act_point": "<p> active point </p>"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "cameras": "<p> reconstructed cameras </p>", 
        "last_camera": "<p> most recently used camera </p>", 
        "camnr": "<p> number of reconstructed cameras </p>", 
        "error": "<p> average error of reconstruction </p>"
      }
    }, 
    "bConstraintTarget": {
      "doc": "<p> Multiple-target constraints ---------------<mdash/><mdash/>  This struct defines a constraint target. It is used during constraint solving regardless of how many targets the constraint has. </p>", 
      "fields": {
        "flag": "<p> runtime settings (for editor, etc.) </p>", 
        "tar": "<p> object to use as target </p>", 
        "subtarget": "<p> subtarget - pchan or vgroup name, MAX_ID_NAME-2 </p>", 
        "matrix": "<p> matrix used during constraint solving - should be cleared before each use </p>", 
        "type": "<p> type of target (B_CONSTRAINT_OB_TYPE) </p>", 
        "rotOrder": "<p> rotation order for target (as defined in BLI_math.h) </p>", 
        "space": "<p> space that target should be evaluated in (overrides bConstraint->tarspace) </p>"
      }
    }, 
    "MovieClipUser": {
      "fields": {
        "render_flag": "<p> proxy render size </p>", 
        "framenr": "<p> current frame number </p>"
      }
    }, 
    "OceanModifierData": {
      "fields": {
        "foamlayername": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "cachepath": "<p> FILE_MAX </p>"
      }
    }, 
    "TextLine": {
      "fields": {
        "format": "<p> may be NULL if syntax is off or not yet formatted </p>", 
        "blen": "<p> blen unused </p>"
      }
    }, 
    "WeightVGMixModifierData": {
      "fields": {
        "mask_constant": "<p> Masking options. The global \"influence\", if no vgroup nor tex is used as mask. </p>", 
        "mix_set": "<p> What vertices to affect. </p>", 
        "mask_tex_use_channel": "<p> Texture masking. Which channel to use as weightf. </p>", 
        "mix_mode": "<p> How second vgroups weights affect first ones </p>", 
        "mask_defgrp_name": "<p> Name of mask vertex group from which to get weight factors. MAX_VGROUP_NAME </p>", 
        "default_weight_a": "<p> Default weight value for first vgroup. </p>", 
        "default_weight_b": "<p> Default weight value to mix in. </p>", 
        "defgrp_name_a": "<p> Name of vertex group to modify/weight. MAX_VGROUP_NAME. </p>", 
        "pad_i1": "<p> Padding... </p>", 
        "defgrp_name_b": "<p> Name of other vertex group to mix in. MAX_VGROUP_NAME. </p>", 
        "mask_texture": "<p> The texture. </p>", 
        "mask_tex_uvlayer_name": "<p> Name of the UV map. MAX_CUSTOMDATA_LAYER_NAME. </p>", 
        "mask_tex_mapping": "<p> How to map the texture! </p>", 
        "mask_tex_map_obj": "<p> Name of the map object. </p>"
      }
    }, 
    "Base": {
      "doc": "<p><hr/> \n {@link Scene}  Data {@link Base}  - Wrapper for referencing Objects in a {@link Scene}  </p>"
    }, 
    "BulletSoftBody": {
      "fields": {
        "kSKHR_CL": "<p> Soft vs kinetic hardness [0,1] (cluster only) </p>", 
        "piterations": "<p> Positions solver iterations </p>", 
        "flag": "<p> various boolean options </p>", 
        "kSK_SPLT_CL": "<p> Soft vs rigid impulse split [0,1] (cluster only) </p>", 
        "collisionflags": "<p> Vertex/Face or Signed Distance Field(SDF) or Clusters, Soft versus Soft or Rigid </p>", 
        "kSSHR_CL": "<p> Soft vs soft hardness [0,1] (cluster only) </p>", 
        "citerations": "<p> Cluster solver iterations </p>", 
        "kMT": "<p> Pose matching coefficient [0,1] </p>", 
        "kVC": "<p> Volume conversation coefficient [0,+inf] </p>", 
        "kVCF": "<p> Velocities correction factor (Baumgarte) </p>", 
        "margin": "<p> margin specific to softbody </p>", 
        "kSHR": "<p> Soft contacts hardness [0,1] </p>", 
        "welding": "<p> welding limit to remove duplicate/nearby vertices, 0.0..0.01 </p>", 
        "angStiff": "<p> angular stiffness 0..1 </p>", 
        "kLF": "<p> Lift coefficient [0,+inf] </p>", 
        "numclusteriterations": "<p> number of iterations to refine collision clusters </p>", 
        "kSS_SPLT_CL": "<p> Soft vs rigid impulse split [0,1] (cluster only) </p>", 
        "kPR": "<p> Pressure coefficient [-inf,+inf] </p>", 
        "kDF": "<p> Dynamic friction coefficient [0,1] </p>", 
        "viterations": "<p> Velocities solver iterations </p>", 
        "kSR_SPLT_CL": "<p> Soft vs rigid impulse split [0,1] (cluster only) </p>", 
        "kDG": "<p> Drag coefficient [0,+inf] </p>", 
        "volume": "<p> volume preservation 0..1 </p>", 
        "kAHR": "<p> Anchors hardness [0,1] </p>", 
        "kCHR": "<p> Rigid contacts hardness [0,1] </p>", 
        "diterations": "<p> Drift solver iterations </p>", 
        "kDP": "<p> Damping coefficient [0,1] </p>", 
        "kSRHR_CL": "<p> Soft vs rigid hardness [0,1] (cluster only) </p>", 
        "kKHR": "<p> Kinetic contacts hardness [0,1] </p>", 
        "linStiff": "<p> linear stiffness 0..1 </p>"
      }
    }, 
    "SmoothModifierData": {
      "fields": {
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "bSizeLikeConstraint": {
      "doc": "<p> Copy Scale Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "Bone": {
      "doc": "<p> this system works on different transformation space levels;</p><p> 1) {@link Bone}  Space; with each {@link Bone}  having own (0,0,0) origin 2) Armature Space; the rest position, in {@link Object}  space, Bones Spaces are applied hierarchical 3) Pose Space; the animation position, in {@link Object}  space 4) {@link World}  Space; {@link Object}  matrix applied to Pose or Armature space </p>", 
      "fields": {
        "parent": "<p> Parent (ik parent if appropriate flag is set </p>", 
        "zwidth": "<p> width: for block bones. keep in this order, transform! </p>", 
        "tail": "<p> head/tail and roll in {@link Bone}  Space </p>", 
        "prev": "<p> Next/prev elements within this list </p>", 
        "roll": "<p> roll is input for editmode, length calculated </p>", 
        "arm_roll": "<p> roll in Armature Space (rest pos) </p>", 
        "weight": "<p> dist, weight: for non-deformgroup deforms </p>", 
        "arm_mat": "<p> matrix: (bonemat(b)+head(b))*arm_mat(b-1), rest pos </p>", 
        "rad_tail": "<p> radius for head/tail sphere, defining deform as well, parent->rad_tip overrides rad_head </p>", 
        "layer": "<p> layers that bone appears on </p>", 
        "roll2": "<p> curved bones settings - these define the \"restpose\" for a curved bone </p>", 
        "segments": "<p> for B-bones </p>", 
        "size": "<p> patch for upward compat, UNUSED! </p>", 
        "prop": "<p> User-Defined Properties on this {@link Bone}  </p>", 
        "childbase": "<p> Children </p>", 
        "name": "<p> Name of the bone - must be unique within the armature, MAXBONENAME </p>", 
        "ease2": "<p> length of bezier handles </p>", 
        "arm_tail": "<p> head/tail in Armature Space (rest pos) </p>", 
        "bone_mat": "<p> rotation derived from head/tail/roll </p>"
      }
    }, 
    "bGPDpalette": {
      "doc": "<p> palette of colors </p>", 
      "fields": {
        "pad": "<p> padding for compiler alignment error </p>", 
        "colors": "<p> pointer to individual colours </p>", 
        "info": "<p>{@link Palette}  name. Must be unique. </p>"
      }
    }, 
    "SPHFluidSettings": {
      "fields": {
        "radius": "<p>{@link Particle}  Fluid </p>"
      }
    }, 
    "VPaint": {
      "doc": "<p><hr/> \n Vertex {@link Paint}  Vertex {@link Paint}  </p>", 
      "fields": {
        "wpaint_prev": "<p> previous vertex weights </p>", 
        "tot": "<p> allocation size of prev buffers </p>", 
        "paintcursor": "<p> wm handle </p>", 
        "vpaint_prev": "<p> previous mesh colors </p>"
      }
    }, 
    "bAnimVizSettings": {
      "doc": "<p> Visualization General ------------------<mdash/><mdash/><mdash/>  for Objects or Poses (but NOT PoseChannels) Animation Visualization Settings (avs) </p>", 
      "fields": {
        "ghost_ef": "<p> start and end frames of ghost-drawing range (only used for GHOST_TYPE_RANGE) </p>", 
        "path_viewflag": "<p> eMotionPaths_ViewFlag </p>", 
        "ghost_type": "<p> eOnionSkin_Types </p>", 
        "ghost_ac": "<p> number of frames before/after current frame to show </p>", 
        "path_ef": "<p> start and end frames of path-calculation range </p>", 
        "path_type": "<p> Motion {@link Path}  Settings -------------<mdash/><mdash/>  eMotionPath_Types </p>", 
        "recalc": "<p> General Settings ------------------<mdash/><mdash/>  eAnimViz_RecalcFlags </p>", 
        "path_ac": "<p> number of frames before/after current frame to show </p>", 
        "ghost_sf": "<p> Onion-Skinning Settings --------------<mdash/>  </p>", 
        "ghost_step": "<p> number of frames between each ghost shown (not for GHOST_TYPE_KEYS) </p>", 
        "path_step": "<p> number of frames between points indicated on the paths </p>", 
        "ghost_flag": "<p> eOnionSkin_Flag </p>", 
        "path_bakeflag": "<p> eMotionPaths_BakeFlag </p>"
      }
    }, 
    "Histogram": {
      "fields": {
        "co": "<p> sample line only image coords src -> dst </p>"
      }
    }, 
    "RenderProfile": {
      "doc": "<p><hr/> \n Render Conversion/Simplfication Settings control render convert and shading engine </p>"
    }, 
    "UVWarpModifierData": {
      "fields": {
        "bone_src": "<p> optional name of bone target, MAX_ID_NAME-2 </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "center": "<p> used for rotate/scale </p>", 
        "vgroup_name": "<p> optional vertexgroup name, MAX_VGROUP_NAME </p>", 
        "bone_dst": "<p> optional name of bone target, MAX_ID_NAME-2 </p>", 
        "object_dst": "<p> target </p>", 
        "object_src": "<p> source </p>"
      }
    }, 
    "DynamicPaintCanvasSettings": {
      "doc": "<p> Canvas settings </p>", 
      "fields": {
        "pmd": "<p> for fast RNA access </p>", 
        "error": "<p> Bake error description </p>"
      }
    }, 
    "bDampTrackConstraint": {
      "doc": "<p> Damped Tracking constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>"
      }
    }, 
    "MSelect": {
      "fields": {
        "type": "<p> ME_VSEL/ME_ESEL/ME_FSEL </p>"
      }
    }, 
    "TexMapping": {
      "doc": "<p> used for mapping and texture nodes. note: rot is now in radians </p>"
    }, 
    "FCurve": {
      "doc": "<p> 'Function-Curve' - defines values over time for a given setting (fcu) </p>", 
      "fields": {
        "flag": "<p> user-editable settings for this curve </p>", 
        "grp": "<p> group group that F-Curve belongs to </p>", 
        "color_mode": "<p> curve coloring (for editor) coloring method to use (eFCurve_Coloring) </p>", 
        "color": "<p> the last-color this curve took </p>", 
        "fpt": "<p> 'baked/imported' motion samples (array) </p>", 
        "modifiers": "<p> evaluation settings {@link FCurve}  Modifiers </p>", 
        "extend": "<p> value-extending mode for this curve (does not cover </p>", 
        "bezt": "<p> motion data user-editable keyframes (array) </p>", 
        "driver": "<p> driver settings only valid for drivers (i.e. stored in {@link AnimData}  not Actions) </p>", 
        "curval": "<p> value cache + settings value stored from last time curve was evaluated (not threadsafe, debug display only!) </p>", 
        "rna_path": "<p> RNA-path to resolve data-access </p>", 
        "totvert": "<p> total number of points which define the curve (i.e. size of arrays in FPoints) </p>", 
        "array_index": "<p> RNA - data link if applicable, the index of the RNA-array item to get </p>"
      }
    }, 
    "bGPdata": {
      "doc": "<p> Grease-Pencil Annotations - 'DataBlock' </p>", 
      "fields": {
        "adt": "<p> animation data - for animating draw settings </p>", 
        "pad": "<p> padding for compiler alignment error </p>", 
        "flag": "<p> settings for this datablock </p>", 
        "scolor": "<p> buffer color using palettes </p>", 
        "layers": "<p> saved Grease-Pencil data bGPDlayers </p>", 
        "sbuffer_size": "<p> not-saved stroke buffer data (only used during paint-session)<ul><li><p> buffer must be initialized before use, but freed after whole paint operation is overnumber of elements currently in cache </p></li></ul> \nbuffer must be initialized before use, but freed after whole paint operation is overnumber of elements currently in cache \n</p>", 
        "palettes": "<p> saved palettes </p>", 
        "id": "<p> Grease Pencil data is a datablock </p>", 
        "sbuffer_sflag": "<p> flags for stroke that cache represents </p>", 
        "sbuffer": "<p> stroke buffer (can hold GP_STROKE_BUFFER_MAX) </p>", 
        "sflag": "<p> settings for palette color </p>"
      }
    }, 
    "DisplaySafeAreas": {
      "doc": "<p><hr/> \n Safe Area options used in {@link Camera}  View & VSE </p>", 
      "fields": {
        "title_center": "<p> use for alternate aspect ratio </p>", 
        "action": "<p> Image/Graphics Safe </p>", 
        "title": "<p> each value represents the (x,y) margins as a multiplier. 'center' in this context is just the name for a different kind of safe-area Title Safe </p>"
      }
    }, 
    "VolumeSettings": {
      "doc": "<p> WATCH IT: change type? also make changes in ipo.h </p>"
    }, 
    "bVisibilityActuator": {
      "fields": {
        "flag": "<p> bit 0: Is this object visible? bit 1: Apply recursively bit 2: Is this object an occluder? </p>"
      }
    }, 
    "MaskSplinePoint": {
      "fields": {
        "parent": "<p> parenting information of particular spline point </p>", 
        "uw": "<p> feather UV values </p>", 
        "bezt": "<p> actual point coordinates and it's handles </p>", 
        "tot_uw": "<p> number of uv feather values </p>"
      }
    }, 
    "NodeDefocus": {
      "doc": "<p> qdn: Defocus blur node </p>"
    }, 
    "MovieClipScopes": {
      "fields": {
        "track_pos": "<p> sub-pizel position of marker in track ImBuf </p>", 
        "track_disabled": "<p> active track is disabled, special notifier should be drawn </p>", 
        "track_preview": "<p> ImBuf displayed in track preview </p>", 
        "frame_height": "<p> width and height of frame for which scopes are calculated </p>", 
        "slide_scale": "<p> scale used for sliding from previewe area </p>", 
        "use_track_mask": "<p> whether track's mask should be applied on preview </p>", 
        "undist_marker": "<p> undistorted position of marker used for pattern sampling </p>", 
        "track_search": "<p> search area of a track </p>", 
        "marker": "<p> marker scopes are created for </p>", 
        "track_preview_height": "<p> height of track preview widget </p>", 
        "track_locked": "<p> active track is locked, no transformation should be allowed </p>", 
        "ok": "<p> 1 means scopes are ok and recalculation is unneeded </p>", 
        "track": "<p> track scopes are created for </p>", 
        "framenr": "<p> frame number scopes are created for </p>"
      }
    }, 
    "MeshSeqCacheModifierData": {
      "fields": {
        "object_path": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "Curve": {
      "fields": {
        "loc": "<p> texture space, copied as one block in editobject.c </p>", 
        "nurb": "<p> actual data, called splines in rna </p>", 
        "texflag": "<p> keep a short because of BKE_object_obdata_texspace_get() </p>", 
        "actvert": "<p> edit, index in active nurb ({@link BPoint}  or {@link BezTriple} ) </p>", 
        "editnurb": "<p> edited data, not in file, use pointer so we can check for it </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "type": "<p> creation-time type of curve datablock </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "len": "<p> number of bytes (str - utf8) </p>", 
        "resolu": "<p> default </p>", 
        "pos": "<p> copy of EditFont vars (wchar_t aligned), warning! don't use in editmode (storage only) </p>", 
        "len_wchar": "<p> text data number of characters (strinfo) </p>", 
        "ctime": "<p> font part end current evaltime - for use by Objects parented to curves </p>", 
        "actnu": "<p> edit, index in nurb list </p>", 
        "lines": "<p> font part </p>"
      }
    }, 
    "Mask": {
      "fields": {
        "masklayers": "<p> mask layers </p>", 
        "flag": "<p> for anim info </p>", 
        "masklay_act": "<p> index of active mask layer (-1 == None) </p>", 
        "masklay_tot": "<p> total number of mask layers </p>", 
        "efra": "<p> frames, used by the sequencer </p>"
      }
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "image_output_path": "<p> 1024 = FILE_MAX </p>", 
        "influence_scale": "<p> per surface brush settings </p>", 
        "canvas": "<p> for fast RNA access </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "init_color": "<p> initial color </p>", 
        "output_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "output_name2": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "wave_damping": "<p> wave settings </p>", 
        "effect_ui": "<p> ui selection box </p>", 
        "init_layername": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "preview_id": "<p> surface output id to preview </p>", 
        "name": "<p> surface </p>", 
        "pointcache": "<p> cache </p>"
      }
    }, 
    "bAddObjectActuator": {
      "doc": "<p> ****************** ACTUATORS ********************* unused now, moved to editobjectactuator in 2.02. Still needed for dna </p>"
    }, 
    "bNearSensor": {
      "doc": "<p> ****************** SENSORS ********************* </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "ParticleData": {
      "fields": {
        "totkey": "<p> amount of hair or keyed keys </p>", 
        "alive": "<p> the life state of a particle </p>", 
        "keys": "<p> keyed keys </p>", 
        "boid": "<p> boids data </p>", 
        "num": "<p> WARNING! Those two indices, when not affected to vertices, are for !!! TESSELLATED FACES !!!, not POLYGONS! index to vert/edge/face </p>", 
        "lifetime": "<p> dietime is not nescessarily time+lifetime as </p>", 
        "sphdensity": "<p> density of sph particle </p>", 
        "foffset": "<p> coordinates on face/edge number \"num\" and depth along </p>", 
        "dietime": "<p> particles can die unnaturally (collision) </p>", 
        "hair": "<p> hair vertices </p>", 
        "size": "<p> face normal for volume emission size and multiplier so that we can update size when ever </p>", 
        "num_dmcache": "<p> index to derived mesh data (face) to avoid slow lookups </p>", 
        "state": "<p> current global coordinates </p>", 
        "prev_state": "<p> previous state </p>"
      }
    }, 
    "RigidBodyCon": {
      "doc": "<p><hr/> \n RigidBody Constraint RigidBodyConstraint (rbc)</p><p> Represents an constraint connecting two rigid bodies. </p>", 
      "fields": {
        "motor_ang_target_velocity": "<p> angular velocity the motor tries to hold </p>", 
        "flag": "<p> (eRigidBodyCon_Flag) </p>", 
        "limit_lin_x_lower": "<p> limits translation limits </p>", 
        "spring_stiffness_x": "<p> spring settings resistance to deformation </p>", 
        "spring_damping_x": "<p> amount of velocity lost over time </p>", 
        "motor_ang_max_impulse": "<p> maximum force used to reach angular target velocity </p>", 
        "motor_lin_target_velocity": "<p> motor settings linear velocity the motor tries to hold </p>", 
        "type": "<p> General Settings for this {@link RigidBodyCon}  (eRigidBodyCon_Type) role of RigidBody in sim </p>", 
        "motor_lin_max_impulse": "<p> maximum force used to reach linear target velocity </p>", 
        "num_solver_iterations": "<p> number of constraint solver iterations made per simulation step </p>", 
        "breaking_threshold": "<p> breaking impulse threshold </p>", 
        "limit_ang_x_lower": "<p> rotation limits </p>", 
        "physics_constraint": "<p> References to Physics Sim object. Exist at runtime only Physics object representation (i.e. btTypedConstraint) </p>", 
        "ob2": "<p> Second object influenced by the constraint </p>", 
        "ob1": "<p> First object influenced by the constraint </p>"
      }
    }, 
    "FreestyleLineStyle": {
      "fields": {
        "mtex": "<p> MAX_MTEX </p>", 
        "panel": "<p> for UI </p>", 
        "max_angle": "<p> in radians, for splitting </p>", 
        "nodetree": "<p> nodes </p>"
      }
    }, 
    "SpaceScript": {
      "doc": "<p>{@link Script}  View - Obsolete (pre 2.5) </p>", 
      "fields": {
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>"
      }
    }, 
    "ThemeUI": {
      "fields": {
        "menu_shadow_fac": "<p> fac: 0 - 1 for blend factor, width in pixels </p>", 
        "xaxis": "<p> Axis Colors </p>", 
        "wcol_regular": "<p> Interface Elements (buttons, menus, icons) </p>", 
        "panel": "<p> depricated, but we keep it for do_versions (2.66.1) </p>"
      }
    }, 
    "WaveModifierData": {
      "fields": {
        "objectcenter": "<p> end {@link MappingInfoModifierData}  </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "texture": "<p> keep in sync with {@link MappingInfoModifierData}  </p>", 
        "defgrp_name": "<p> MAX_VGROUP_NAME </p>"
      }
    }, 
    "Object": {
      "fields": {
        "actcol": "<p> currently selected material in the UI </p>", 
        "col": "<p> object color </p>", 
        "data": "<p> pointer to objects data - an '{@link ID} ' or NULL </p>", 
        "par3": "<p> can be vertexnrs </p>", 
        "constinv": "<p> inverse result of constraints. doesn't include effect of parent or object local transform </p>", 
        "ima_ofs": "<p> offset for image empties </p>", 
        "dquat": "<p> quaternion rotation </p>", 
        "softflag": "<p> softbody settings </p>", 
        "constraints": "<p> object constraints </p>", 
        "smoothresh": "<p> smoothresh is phong interpolation ray_shadow correction in render </p>", 
        "mode": "<p> Local object mode </p>", 
        "dt": "<p> viewport draw type </p>", 
        "actuators": "<p> game logic actuators </p>", 
        "colbits": "<p><p> deprecated, use 'matbits' </p>\n@deprecated\n Deprecateddeprecated, use 'matbits' </p>", 
        "bsoft": "<p> settings for game engine bullet soft body </p>", 
        "max_vel": "<p> clamp the maximum velocity 0.0 is disabled </p>", 
        "body_type": "<p> for now used to temporarily holds the type of collision object </p>", 
        "controllers": "<p> game logic controllers </p>", 
        "gpd": "<p> Grease Pencil data </p>", 
        "fluidsimSettings": "<p> if fluidsim enabled, store additional settings </p>", 
        "state": "<p> bit masks of game controllers that are active </p>", 
        "actdef": "<p> current deformation group, note: index starts at 1 </p>", 
        "scaflag": "<p> ui state for game logic </p>", 
        "soft": "<p> if exists, saved in file </p>", 
        "rigidbody_object": "<p> settings for Bullet rigid body </p>", 
        "restrictflag": "<p> for restricting view, select, render etc. accessible in outliner </p>", 
        "pose": "<p> pose data, armature objects only </p>", 
        "lay": "<p> copy of {@link Base} 's layer in the scene </p>", 
        "mpath": "<p> motion path cache for this object </p>", 
        "dupon": "<p> dupli-frame settings </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "index": "<p> custom index, for renderpasses </p>", 
        "drotAngle": "<p> axis angle rotation - angle part </p>", 
        "rigidbody_constraint": "<p> settings for Bullet constraint </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "proxy": "<p> if ob->proxy (or proxy_group), this object is proxy for object ob->proxy proxy_from is set in target back to the proxy. </p>", 
        "size": "<p> scale in fact </p>", 
        "col_group": "<p> Collision mask settings </p>", 
        "bb": "<p> struct {@link Path}  *path; axis aligned boundbox (in localspace) </p>", 
        "loc": "<p> rot en drot have to be together! (transform('r' en 's')) </p>", 
        "dscale": "<p> ack!, changing </p>", 
        "defbase": "<p> list of {@link bDeformGroup}  (vertex groups) names and flag only </p>", 
        "boundtype": "<p> bounding box use for drawing </p>", 
        "totcol": "<p> copy of mesh, curve & meta struct member of same name (keep in sync) </p>", 
        "flag": "<p> copy of {@link Base}  </p>", 
        "formfactor": "<p> The form factor k is introduced to give the user more control and to fix incompatibility problems. For rotational symmetric objects, the inertia value can be expressed as: Theta = k * m * r^2 where m = Mass, r = Radius For a Sphere, the form factor is by default = 0.4 </p>", 
        "particlesystem": "<p> particle systems </p>", 
        "customdata_mask": "<p> (extra) custom data layer mask to use for creating derivedmesh, set by depsgraph </p>", 
        "mass": "<p> during realtime note that inertia is only called inertia for historical reasons and is not changed to avoid DNA surgery. It actually reflects the Size value in the GameButtons (= radius) </p>", 
        "shapenr": "<p> current shape key for menu or pinned </p>", 
        "iuser": "<p> must be non-null when oject is an empty image </p>", 
        "imat_ren": "<p> note: this isn't assured to be valid as with 'obmat', before using this value you should do... invert_m4_m4(ob->imat, ob->obmat); Previously 'imat' was used at render time, but as other places use it too the interactive ui of 2.5 creates problems. So now only 'imat_ren' should be used when ever the inverse of ob->obmat * re->viewmat is needed! - jahka </p>", 
        "max_angvel": "<p> clamp the maximum angular velocity, 0.0 is disabled </p>", 
        "modifiers": "<p> list of {@link ModifierData}  structures </p>", 
        "scavisflag": "<p> more display settings for game logic </p>", 
        "recalc": "<p> dependency flag </p>", 
        "dsize": "<p><p> DEPRECATED, 2.60 and older only </p>\n@deprecated\n DeprecatedDEPRECATED, 2.60 and older only </p>", 
        "drotAxis": "<p> axis angle rotation - axis part </p>", 
        "sf": "<p> sf is time-offset </p>", 
        "lastNeedMapping": "<p> did last modifier stack generation need mapping support? bool </p>", 
        "step_height": "<p> \"Character\" physics properties </p>", 
        "collision_boundtype": "<p> bounding box type used for collision </p>", 
        "prop": "<p> game logic property list (not to be confused with IDProperties) </p>", 
        "drot": "<p> euler rotation </p>", 
        "min_angvel": "<p> clamp the minimum angular velocity, 0.0 is disabled </p>", 
        "avs": "<p> settings for visualization of object-transform animation </p>", 
        "min_vel": "<p> clamp the minimum velocity 0.0 is disabled </p>", 
        "shapeflag": "<p> flag for pinning </p>", 
        "mat": "<p> materials material slots </p>", 
        "parentinv": "<p> inverse result of parent, so that object doesn't 'stick' to parent </p>", 
        "dup_group": "<p> object duplicator for group </p>", 
        "imat": "<p> inverse matrix of 'obmat' for any other use than rendering! </p>", 
        "obmat": "<p> final worldspace matrix with constraints & animsys applied </p>", 
        "gpulamp": "<p> runtime, for glsl lamp display only </p>", 
        "dtx": "<p> viewport draw extra settings </p>", 
        "curve_cache": "<p> Runtime valuated curve-specific data, not stored in the file </p>", 
        "dupfacesca": "<p> dupliface scale </p>", 
        "nlaflag": "<p> used for DopeSheet filtering settings (expanded/collapsed) </p>", 
        "restore_mode": "<p> Keep track of what mode to return to after toggling a mode </p>", 
        "lodlevels": "<p> contains data for levels of detail </p>", 
        "sensors": "<p> game logic sensors </p>", 
        "pd": "<p> particle deflector/attractor/collision data </p>", 
        "protectflag": "<p> transformation settings and transform locks </p>", 
        "parsubstr": "<p> String describing subobject info, MAX_ID_NAME-2 </p>", 
        "matbits": "<p> a boolean field, with each byte 1 if corresponding material is linked to object </p>", 
        "rotmode": "<p> rotation mode - uses defines set out in {@link DNA_action_types.h}  for PoseChannel rotations... </p>", 
        "init_state": "<p> bit masks of initial state as recorded by the users </p>", 
        "duplilist": "<p> for temporary dupli list storage, only for use by RNA API </p>", 
        "lastDataMask": "<p> the custom data layer mask that was last used to calculate derivedDeform and derivedFinal </p>"
      }
    }, 
    "bSameVolumeConstraint": {
      "doc": "<p> Maintain Volume Constraint </p>"
    }, 
    "bTouchSensor": {
      "doc": "<p> DEPRECATED </p>", 
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "point_tracks": "<p> Array of point tracks used to define this plane. Each element is a pointer to {@link MovieTrackingTrack} . </p>", 
        "image": "<p>{@link Image}  displaying during editing </p>", 
        "last_marker": "<p> Runtime data Most recently used marker </p>", 
        "pad": "<p> Number of tracks in point_tracks array. </p>", 
        "flag": "<p> flags (selection, ...) </p>", 
        "name": "<p> MAX_NAME </p>", 
        "markersnr": "<p> Count of markers in track (size of markers array) </p>", 
        "image_opacity": "<p> Opacity of the image </p>", 
        "markers": "<p> Markers in the plane track </p>"
      }
    }, 
    "bGPDframe": {
      "doc": "<p> Grease-Pencil Annotations - 'Frame' -> Acts as storage for the 'image' formed by strokes </p>", 
      "fields": {
        "strokes": "<p> list of the simplified 'strokes' that make up the frame's data </p>", 
        "flag": "<p> temp settings </p>", 
        "key_type": "<p> keyframe type (eBezTriple_KeyframeType) </p>", 
        "framenum": "<p> frame number of this frame </p>"
      }
    }, 
    "AnimMapPair": {
      "doc": "<p><hr/> \n 'Action' Datatypes NOTE: Although these are part of the Animation System, they are not stored here... see {@link DNA_action_types.h}  instead************************************************ Animation Reuse - i.e. users of Actions Retargetting -----------------------------<mdash/><mdash/>  Retargetting Pair</p><p> Defines what parts of the paths should be remapped from 'abc' to 'xyz'. TODO:<ul><li><p> Regrex (possibly provided through PY, though having our own module might be faster) would be important to have at some point. Current replacements are just simple string matches... </p></li></ul> \nRegrex (possibly provided through PY, though having our own module might be faster) would be important to have at some point. Current replacements are just simple string matches... \n</p>", 
      "fields": {
        "from": "<p> part of path to bed replaced </p>", 
        "to": "<p> part of path to replace with </p>"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "search_max": "<p>\n@deprecated\n Deprecated</p>", 
        "margin": "<p> margin from frame boundaries </p>", 
        "flag": "<p> ** UI editing ** </p>", 
        "offset": "<p> offset to \"parenting\" point </p>", 
        "color": "<p> custom color for track </p>", 
        "motion_model": "<p> tracking parameters model of the motion for this track </p>", 
        "pat_max": "<p>\n@deprecated\n Deprecated</p>", 
        "algorithm_flag": "<p> flags for the tracking algorithm (use brute, use esm, use pyramid, etc </p>", 
        "weight": "<p> Weight of this track.</p><p> Weight defines how much the track affects on the final reconstruction, usually gets animated in a way so when track has just appeared it's weight is zero and then it gets faded up.</p><p> Used to prevent jumps of the camera when tracks are appearing or disappearing. </p>", 
        "markersnr": "<p> ** track ** count of markers in track </p>", 
        "bundle_pos": "<p> ** reconstruction data ** reconstructed position </p>", 
        "error": "<p> average track reprojection error </p>", 
        "last_marker": "<p> most recently used marker </p>", 
        "search_flag": "<p> flags (selection, ...) </p>", 
        "search_min": "<p> positions of left-bottom and right-top corners of search area (in unified 0..1 units, relative to marker->pos moved to marker since affine tracking implementation\n@deprecated\n Deprecated</p>", 
        "weight_stab": "<p> track weight especially for 2D stabilization </p>", 
        "name": "<p> MAX_NAME </p>", 
        "pat_min": "<p> ** setings ** positions of left-bottom and right-top corners of pattern (in unified 0..1 units, relative to marker->pos) moved to marker's corners since planar tracking implementation\n@deprecated\n Deprecated</p>", 
        "minimum_correlation": "<p> minimal correlation which is still treated as successful tracking </p>", 
        "gpd": "<p> grease-pencil data </p>", 
        "frames_limit": "<p> ** control how tracking happens number of frames to be tarcked during single tracking session (if TRACKING_FRAMES_LIMIT is set) </p>", 
        "markers": "<p> markers in track </p>", 
        "pattern_match": "<p> re-adjust every N frames </p>"
      }
    }, 
    "SolidifyModifierData": {
      "fields": {
        "offset": "<p> new surface offset level </p>", 
        "offset_fac_vg": "<p> factor for the minimum weight to use when vgroups are used, avoids 0.0 weights giving duplicate geometry </p>", 
        "offset_fac": "<p> midpoint of the offset </p>", 
        "defgrp_name": "<p> name of vertex group to use, MAX_VGROUP_NAME </p>", 
        "offset_clamp": "<p> clamp offset based on surrounding geometry </p>"
      }
    }, 
    "ReportTimerInfo": {
      "doc": "<p> timer customdata to control reports display These two Lines with # tell makesdna this struct can be excluded. </p>"
    }, 
    "PointCache": {
      "fields": {
        "flag": "<p> generic flag </p>", 
        "mem_cache": "<p> can be later used for other per frame flags too if needed </p>", 
        "endframe": "<p> simulation end frame </p>", 
        "index": "<p> modifier stack index </p>", 
        "cached_frames": "<p> array of length endframe-startframe+1 with flags to indicate cached frames </p>", 
        "editframe": "<p> frame being edited (runtime only) </p>", 
        "last_exact": "<p> last exact frame that's cached </p>", 
        "path": "<p> file path, 1024 = FILE_MAX </p>", 
        "startframe": "<p> simulation start frame </p>", 
        "step": "<p> The number of frames between cached frames. This should probably be an upper bound for a per point adaptive step in the future, buf for now it's the same for all points. Without adaptivity this can effect the perceived simulation quite a bit though. If for example particles are colliding with a horizontal plane (with high damping) they quickly come to a stop on the plane, however there are still forces acting on the particle (gravity and collisions), so the particle velocity isn't necessarily zero for the whole duration of the frame even if the particle seems stationary. If all simulation frames aren't cached (step > 1) these velocities are interpolated into movement for the non-cached frames. The result will look like the point is oscillating around the collision location. So for now cache step should be set to 1 for accurate reproduction of collisions. </p>", 
        "totpoint": "<p> for external cache files number of cached points </p>", 
        "simframe": "<p> current frame of simulation (only if SIMULATION_VALID) </p>", 
        "free_edit": "<p> free callback </p>", 
        "last_valid": "<p> used for editing cache - what is the last baked frame </p>"
      }
    }, 
    "View3D": {
      "doc": "<p> 3D ViewPort Struct </p>", 
      "fields": {
        "zbuf": "<p> drawflags, denoting state </p>", 
        "fx_settings": "<p><em></em>  allocated, instead set (temporarily) from camera </p>", 
        "twtype": "<p> transform widget info </p>", 
        "dist": "<p>\n@deprecated\n Deprecated</p>", 
        "multiview_eye": "<p> multiview current eye - for internal use </p>", 
        "lay_prev": "<p> for active layer toggle </p>", 
        "defmaterial": "<p> used by matcap now </p>", 
        "view": "<p>\n@deprecated\n Deprecated</p>", 
        "gpd": "<p> XXX deprecated? <p> Grease-Pencil Data (annotation layers) </p>\n@deprecated\n DeprecatedGrease-Pencil Data (annotation layers) </p>", 
        "ob_centre_bone": "<p> optional string for armature bone to define center, MAXBONENAME </p>", 
        "lay_used": "<p> used while drawing </p>", 
        "ob_centre_cursor": "<p> optional bool for 3d cursor to define center </p>", 
        "persp": "<p>\n@deprecated\n Deprecated</p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "prev_drawtype": "<p> Previous viewport draw type. Runtime-only, set in the rendered viewport toggle operator. </p>", 
        "viewquat": "<p>\n@deprecated\n Deprecated</p>", 
        "bgpic": "<p><p> deprecated, use bgpicbase, only kept for do_versions(...) </p>\n@deprecated\n Deprecateddeprecated, use bgpicbase, only kept for do_versions(...) </p>", 
        "localvd": "<p> allocated backup of its self while in localview </p>", 
        "pad3": "<p> built-in shader effects (eGPUFXFlags) </p>", 
        "bundle_drawtype": "<p> display style for bundle </p>", 
        "matcap_icon": "<p> icon id </p>", 
        "bundle_size": "<p> size of bundles in reconstructed data </p>", 
        "drawtype": "<p> The drawing mode for the 3d display. Set to OB_BOUNDBOX, OB_WIRE, OB_SOLID, OB_TEXTURE, OB_MATERIAL or OB_RENDER </p>", 
        "gridsubdiv": "<p> Number of subdivisions in the grid between each highlighted grid line </p>", 
        "stereo3d_flag": "<p> multiview - stereo 3d </p>", 
        "ofs": "<p><p> XXX deprecated </p>\n@deprecated\n DeprecatedXXX deprecated </p>", 
        "properties_storage": "<p> Nkey panel stores stuff here (runtime only!) </p>", 
        "afterdraw_transp": "<p> afterdraw, for xray & transparent </p>"
      }
    }, 
    "BPoint": {
      "doc": "<p> note; alfa location in struct is abused by {@link Key}  system </p>", 
      "fields": {
        "hide": "<p> f1: selection status, hide: is point hidden or not </p>", 
        "pad": "<p> user-set radius per point for beveling etc </p>", 
        "weight": "<p> alfa: tilt in 3D View, weight: used for softbody goal weight </p>"
      }
    }, 
    "TimeMarker": {
      "doc": "<p><hr/> \n Markers </p>"
    }, 
    "UnitSettings": {
      "doc": "<p><hr/> \n Unit Settings </p>", 
      "fields": {
        "system": "<p> imperial, metric etc </p>", 
        "system_rotation": "<p> not implemented as a proper unit system yet </p>", 
        "scale_length": "<p> Display/Editing unit options for each scene maybe have other unit conversions? </p>"
      }
    }, 
    "AssetUUID": {
      "doc": "<p> Used to communicate with asset engines outside of 'import' context. </p>"
    }, 
    "bNodeSocketValueInt": {
      "doc": "<p> socket value structs for input buttons DEPRECATED now using {@link ID}  properties </p>", 
      "fields": {
        "subtype": "<p> RNA subtype </p>"
      }
    }, 
    "CurveMapPoint": {
      "fields": {
        "shorty": "<p> shorty for result lookup </p>"
      }
    }, 
    "EdgeSplitModifierData": {
      "fields": {
        "split_angle": "<p> angle above which edges should be split </p>"
      }
    }, 
    "SoftBody": {
      "fields": {
        "namedVG_Spring_K": "<p> MAX_VGROUP_NAME </p>", 
        "physics_speed": "<p> user control over simulation speed </p>", 
        "balldamp": "<p> cooling down collision response </p>", 
        "keys": "<p><ndash/>  these must be kept for backwards compatibility <ndash/>  array of size totpointkey </p>", 
        "nodemass": "<p><em></em>  </p>", 
        "defgoal": "<p> default goal for vertices without vgroup </p>", 
        "bspring": "<p> not saved in file </p>", 
        "grav": "<p> along with it introduce mass painting starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613 softbody amount of gravitaion to apply </p>", 
        "fuzzyness": "<p> starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613 </p>", 
        "vertgroup": "<p> index starting at 1 </p>", 
        "mingoal": "<p> quick limits for goal </p>", 
        "inspring": "<p> springs softbody inner springs </p>", 
        "goalfrict": "<p> softbody goal springs friction </p>", 
        "namedVG_Mass": "<p> MAX_VGROUP_NAME </p>", 
        "rklimit": "<p> error limit for ODE solver </p>", 
        "totkey": "<p> if totpointkey != totpoint or totkey!- (efra-sfra)/interval -> free keys </p>", 
        "lcom": "<p> reverse esimated obmatrix .. no need to store in blend file .. how ever who cares </p>", 
        "goalspring": "<p> goal softbody goal springs </p>", 
        "secondspring": "<p><hr/> \n </p>", 
        "scratch": "<p> scratch pad/cache on live time not saved in file </p>", 
        "mediafrict": "<p> friction to env </p>", 
        "colball": "<p> self collision fixed collision ball size if > 0 </p>", 
        "namedVG_Softgoal": "<p> MAX_VGROUP_NAME </p>", 
        "ballstiff": "<p> pressure the ball is loaded with </p>", 
        "bpoint": "<p> not saved in file </p>", 
        "sfra": "<p> along with it introduce Spring_K painting starting to fix old bug .. nastiness that VG are indexes rather find them by name tag to find it -> jow20090613 baking </p>", 
        "totpoint": "<p> dynamic data </p>", 
        "infrict": "<p> softbody inner springs friction </p>", 
        "solverflags": "<p> local==1: use local coords for baking </p>"
      }
    }, 
    "Stereo3dFormat": {
      "fields": {
        "interlace_type": "<p> interlace type for the user display </p>", 
        "display_mode": "<p> encoding mode </p>", 
        "anaglyph_type": "<p> anaglyph scheme for the user display </p>"
      }
    }, 
    "View2D": {
      "doc": "<p><hr/> \n View 2D data - stored per region </p>", 
      "fields": {
        "scroll_ui": "<p> scroll_ui - temp settings used for UI drawing of scrollers </p>", 
        "cur": "<p> tot - area that data can be drawn in; cur - region of tot that is visible in viewport </p>", 
        "flag": "<p> settings </p>", 
        "max": "<p> min/max sizes of 'cur' rect (only when keepzoom not set) </p>", 
        "scroll": "<p> scroll - scrollbars to display (bitflag) </p>", 
        "keepzoom": "<p> keepzoom - axes that zooming cannot occur on, and also clamp within zoom-limits </p>", 
        "hor": "<p> vert - vertical scrollbar region; hor - horizontal scrollbar region </p>", 
        "winy": "<p> storage of current winx/winy values, set in UI_view2d_size_update </p>", 
        "keeptot": "<p> keeptot - 'cur' rect cannot move outside the 'tot' rect? </p>", 
        "align": "<p> alignment of content in totrect </p>", 
        "around": "<p> pivot point for transforms (rotate and scale) </p>", 
        "keepofs": "<p> keepofs - axes that translation is not allowed to occur on </p>", 
        "tab_offset": "<p> different offset per tab, for buttons </p>", 
        "oldwiny": "<p> storage of previous winx/winy values encountered by UI_view2d_curRect_validate(), for keepaspect </p>", 
        "maxzoom": "<p> allowable zoom factor range (only when (keepzoom & V2D_LIMITZOOM)) is set </p>", 
        "tab_num": "<p> number of tabs stored </p>", 
        "sms": "<p> animated smooth view </p>", 
        "tab_cur": "<p> current tab </p>", 
        "mask": "<p> mask - region (in screenspace) within which 'cur' can be viewed </p>"
      }
    }, 
    "TreeStore": {
      "doc": "<p> used only to store data in in blend files </p>", 
      "fields": {
        "data": "<p> elements to be packed from mempool in writefile.c or extracted to mempool in readfile.c </p>", 
        "totelem": "<p><p> was previously used for memory preallocation </p>\n@deprecated\n Deprecatedwas previously used for memory preallocation </p>", 
        "usedelem": "<p> number of elements in data array </p>"
      }
    }, 
    "uiListDyn": {
      "doc": "<p>{@link uiList}  dynamic data... These two Lines with # tell makesdna this struct can be excluded. </p>", 
      "fields": {
        "items_shown": "<p> Number of items actually visible after filtering. </p>", 
        "visual_height": "<p> Actual visual height of the list (in rows). </p>", 
        "items_len": "<p> Number of items in collection. </p>", 
        "visual_height_min": "<p> Minimal visual height of the list (in rows). </p>", 
        "items_filter_neworder": "<p> org_idx -> new_idx, items_len length. </p>", 
        "resize": "<p> Those are temp data used during drag-resize with GRIP button (they are in pixels, the meaningful data is the difference between resize_prev and resize)... </p>", 
        "items_filter_flags": "<p> Filtering data. items_len length. </p>", 
        "height": "<p> Number of rows needed to draw all elements. </p>"
      }
    }, 
    "RenderData": {
      "doc": "<p><hr/> \n Render Data </p>", 
      "fields": {
        "frame_step": "<p> frames to jump during render/playback </p>", 
        "line_thickness_mode": "<p> Freestyle line thickness options </p>", 
        "ocres": "<p> octree resolution </p>", 
        "edgeR": "<p> For UR edge rendering: give the edges this color </p>", 
        "pic": "<p> path to render output 1024 = FILE_MAX </p>", 
        "jp2_preset": "<p> jpeg2000 \n@deprecated\n Deprecated</p>", 
        "debug_pass_type": "<p> Type of the debug pass to use. Only used when built with debug passes support. </p>", 
        "mode": "<p> Flags for render settings. Use bit-masking to access the settings. </p>", 
        "safety": "<p> safety, border and display rect </p>", 
        "xsch": "<p> from buttons: The desired number of pixels in the x direction </p>", 
        "layers": "<p> information on different layers to be rendered </p>", 
        "domeangle": "<p>\n@deprecated\n Deprecated</p>", 
        "mblur_samples": "<p> number of mblur samples </p>", 
        "seq_prev_type": "<p> sequencer options </p>", 
        "stereomode": "<p><p> standalone player stereo settings </p>\n@deprecated\n Deprecatedstandalone player stereo settings </p>", 
        "tilex": "<p> render tile dimensions </p>", 
        "gauss": "<p> Value used to define filter size for all filter options </p>", 
        "scemode": "<p> Flags for render settings. Use bit-masking to access the settings. </p>", 
        "freqplay": "<p>\n@deprecated\n Deprecated</p>", 
        "alphamode": "<p> What to do with the sky/background. Picks sky/premul/key blending for the background </p>", 
        "planes": "<p>\n@deprecated\n Deprecated</p>", 
        "quality": "<p> ! </p>", 
        "raytrace_options": "<p> Flags for raytrace settings. Use bit-masking to access the settings. </p>", 
        "subimtype": "<p>\n@deprecated\n Deprecated</p>", 
        "fullscreen": "<p> XXX deprecated since 2.5. </p><p> standalone player\n@deprecated\n Deprecated</p>", 
        "size": "<p> size in % </p>", 
        "pad3": "<p> select one of blenders bitmap fonts </p>", 
        "imtype": "<p>\n@deprecated\n Deprecated</p>", 
        "xasp": "<p> Adjustment factors for the aspect ratio in the x direction, was a short in 2.45 </p>", 
        "efra": "<p> frames as in 'images' </p>", 
        "subframe": "<p> subframe offset from cfra, in 0.0-1.0 </p>", 
        "fg_stamp": "<p> foreground/background color. </p>", 
        "ysch": "<p> The desired number of pixels in the y direction </p>", 
        "mblur_shutter_curve": "<p> Motion blur shutter </p>", 
        "stamp": "<p> stamps flags. </p>", 
        "maximsize": "<p><p> max in Kb </p>\n@deprecated\n Deprecatedmax in Kb </p>", 
        "postgamma": "<p> post-production settings. deprecated, but here for upwards compat (initialized to 1) </p>", 
        "filtertype": "<p> filter is box, tent, gauss, mitch, etc </p>", 
        "unit_line_thickness": "<p> in pixels </p>", 
        "attrib": "<p>\n@deprecated\n Deprecated</p>", 
        "dimensionspreset": "<p> XXX deprecated since 2.5. </p><p> for the dimensions presets menu </p>", 
        "yparts": "<p> The number of part to use in the y direction\n@deprecated\n Deprecated</p>", 
        "bake_osa": "<p> Bake Render options </p>", 
        "domeres": "<p> XXX deprecated since 2.5. </p><p> Dome variables\n@deprecated\n Deprecated</p>", 
        "engine": "<p> render engine </p>", 
        "pefra": "<p> start+end frames of preview range </p>", 
        "views": "<p> MultiView {@link SceneRenderView}  </p>", 
        "displaymode": "<p> Render to image editor, fullscreen or to new window. </p>", 
        "xplay": "<p>\n@deprecated\n Deprecated</p>", 
        "stamp_udata": "<p> stamp info user data. </p>", 
        "color_mgt_flag": "<p> color management settings - color profiles, gamma correction, etc </p>", 
        "raytrace_structure": "<p> Raytrace acceleration structure </p>", 
        "yplay": "<p>\n@deprecated\n Deprecated</p>", 
        "depth": "<p> XXX deprecated since 2.5. </p><p> standalone player\n@deprecated\n Deprecated</p>", 
        "xparts": "<p> The number of part to use in the x direction\n@deprecated\n Deprecated</p>", 
        "seq_flag": "<p> flag use for sequence render/draw </p>", 
        "simplify_flag": "<p> render simplify </p>", 
        "bake": "<p> Cycles baking </p>", 
        "cineonwhite": "<p> cineon \n@deprecated\n Deprecated</p>", 
        "osa": "<p> The number of samples to use per pixel. </p>", 
        "dither_intensity": "<p> Dither noise intensity </p>"
      }
    }, 
    "PaletteColor": {
      "fields": {
        "rgb": "<p> two values, one to store rgb, other to store values for sculpt/weight </p>"
      }
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "corners": "<p> Corners of the plane in the following order: <pre> Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</pre>  Y\n ^\n | (3) --- (2)\n |  |       |\n |  |       |\n |  |       |\n | (0) --- (1)\n +-------------> X\n</p><p> The coordinates are stored in frame normalized coordinates. </p>", 
        "flag": "<p> Marker's flag (alive, ...) </p>", 
        "framenr": "<p> Number of frame plane marker is associated with </p>"
      }
    }, 
    "SpaceOops": {
      "doc": "<p> Outliner =============================================== Outliner </p>", 
      "fields": {
        "treestore": "<p> treestore is an ordered list of {@link TreeStoreElem} 's from outliner tree; Note that treestore may contain duplicate elements if element is used multiple times in outliner tree (e. g. linked objects) Also note that BLI_mempool can not be read/written in DNA directly, therefore readfile.c/writefile.c linearize treestore into {@link TreeStore}  structure </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "treehash": "<p> pointers to treestore elements, grouped by (id, type, nr) in hashtable for faster searching </p>", 
        "blockhandler": "<p>\n@deprecated\n Deprecated</p>", 
        "v2d": "<p><p> deprecated, copied to region </p>\n@deprecated\n Deprecateddeprecated, copied to region </p>", 
        "blockscale": "<p>\n@deprecated\n Deprecated</p>", 
        "search_string": "<p> search stuff </p>"
      }
    }, 
    "FluidsimSettings": {
      "fields": {
        "animRate": "<p> Simulation/flow rate control (i.e. old \"Fac-Time\") </p>", 
        "flag": "<p> GUI flags </p>", 
        "meshVelocities": "<p> vertex velocities of simulated fluid mesh </p>", 
        "type": "<p> domain, fluid or obstacle </p>", 
        "viscosityMode": "<p>\n@deprecated\n Deprecated</p>", 
        "grav": "<p> gravity strength </p>", 
        "viscosityValue": "<p> fluid properties </p>", 
        "surfaceSubdivs": "<p> number of surface subdivisions </p>", 
        "realsize": "<p> size of the domain in real units (meters along largest resolution x, y, z extent) </p>", 
        "gstar": "<p> g star param (LBM compressibility) </p>", 
        "generateTracers": "<p> number of tracers to generate </p>", 
        "guiDisplayMode": "<p> show original meshes, preview or final sim </p>", 
        "totvert": "<p> number of vertices in simulated fluid mesh </p>", 
        "show_advancedoptions": "<p> display advanced options in fluid sim tab (on=1, off=0) </p>", 
        "surfaceSmoothing": "<p> smooth fluid surface? </p>", 
        "bbStart": "<p> store start coords of axis aligned bounding box together with size values are inited during derived mesh display </p>", 
        "threads": "<p> threadcont the calculation is done with </p>", 
        "bakeStart": "<p> bake start end time (in blender frames) </p>", 
        "surfdataPath": "<p> store output path, and file prefix for baked fluid surface strlens; 256= FILE_MAXFILE, 768= FILE_MAXDIR </p>", 
        "ipo": "<p> animated params </p>", 
        "generateParticles": "<p> particle generation - on if >0, then determines amount (experimental...) </p>", 
        "iniVelx": "<p> fluid object type settings gravity strength </p>", 
        "domainNovecgen": "<p> switch off velocity genration, volume init type for fluid/obstacles (volume=1, shell=2, both=3) </p>", 
        "frameOffset": "<p> offset for baked frames </p>", 
        "animStart": "<p> anim start end time (in seconds) </p>", 
        "particleInfSize": "<p> particle display - size scaling, and alpha influence </p>", 
        "resolutionxyz": "<p> domain object settings resolutions </p>", 
        "partSlipValue": "<p> boundary \"stickiness\" for part slip values </p>", 
        "cpsTimeStart": "<p> Fluid control settings </p>", 
        "farFieldSize": "<p> testing vars </p>", 
        "fmd": "<p> for fast RNA access </p>", 
        "maxRefine": "<p> activate refinement? </p>", 
        "typeFlags": "<p> additional flags depending on the type, lower short contains flags to check validity, higher short additional flags </p>"
      }
    }, 
    "bActuator": {
      "fields": {
        "flag": "<p> Tells what type of actuator data {@link data}  holds. </p>", 
        "ob": "<p> For ipo's and props: to find out which object the actuator belongs to </p>", 
        "data": "<p>  must point to an object actuator type struct. </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "bIKParam": {
      "doc": "<p> header for all bPose->ikparam structures </p>"
    }, 
    "RemeshModifierData": {
      "fields": {
        "depth": "<p> octree depth </p>", 
        "scale": "<p> ratio between size of model and grid </p>", 
        "threshold": "<p> floodfill option, controls how small components can be before they are removed </p>"
      }
    }, 
    "vec3f": {
      "doc": "<p> not used at the moment typedef struct vec2i { int x, y; } vec2i;</p><p> typedef struct vec2d { double x, y; } vec2d;</p><p> typedef struct vec3i { int x, y, z; } vec3i; </p>"
    }, 
    "IdAdtTemplate": {
      "doc": "<p>{@link Base}  Struct for Anim -------------------------------<mdash/><mdash/>  Used for BKE_animdata_from_id() All ID-datablocks which have their own 'local' {@link AnimData}  should have the same arrangement in their structs. </p>"
    }, 
    "SmokeCollSettings": {
      "doc": "<p> struct BVHTreeFromMesh *bvh; float mat[4][4]; float mat_old[4][4]; </p><p> collision objects (filled with smoke) </p>", 
      "fields": {
        "smd": "<p> for fast RNA access </p>"
      }
    }, 
    "World": {
      "doc": "<p>{@link World}  defines general modeling data such as a background fill, gravity, color model etc. It mixes game-data, rendering data and modeling data. </p>", 
      "fields": {
        "preview": "<p> previews </p>", 
        "flag": "<p> assorted settings (in the middle of ambient occlusion settings for padding reasons) </p>", 
        "aodist": "<p> ambient occlusion </p>", 
        "aosphere": "<p> ambient occlusion (contd...) </p>", 
        "ticrate": "<p> XXX moved to scene->gamedata in 2.5. </p>", 
        "activityBoxRadius": "<p> Radius of the activity bubble, in Manhattan length. Objects outside the box are activity-culled. </p>", 
        "physicsEngine": "<p> XXX moved to scene->gamedata in 2.5. </p><p> here it's aligned </p>", 
        "stardist": "<p>\n@deprecated\n Deprecated</p>", 
        "starmindist": "<p>\n@deprecated\n Deprecated</p>", 
        "mode": "<p> Some world modes bit 0: Do mist bit 1: Do stars bit 2: (reserved) depth of field bit 3: (gameengine): Activity culling is enabled. bit 4: ambient occlusion bit 5: (gameengine) : enable Bullet DBVT tree for view frustum culling </p>", 
        "stark": "<p><p> Deprecated </p>\n@deprecated\n DeprecatedDeprecated </p>", 
        "starb": "<p>\n@deprecated\n Deprecated</p>", 
        "occlusionRes": "<p> resolution of occlusion Z buffer in pixel </p>", 
        "starcolnoise": "<p>\n@deprecated\n Deprecated</p>", 
        "starg": "<p>\n@deprecated\n Deprecated</p>", 
        "nodetree": "<p> nodes </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "mtex": "<p> MAX_MTEX </p>", 
        "starr": "<p>\n@deprecated\n Deprecated</p>", 
        "gpumaterial": "<p> runtime </p>", 
        "starsize": "<p>\n@deprecated\n Deprecated</p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "exposure": "<p> Exposure= mult factor. unused now, but maybe back later. Kept in to be upward compat. New is exp/range control. linfac & logfac are constants... don't belong in file, but allocating 8 bytes for temp mem isn't useful either. </p>", 
        "dofsta": "<p> unused now: DOF </p>", 
        "gravity": "<p> Gravitation constant for the game world </p>"
      }
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_tc_flag": "<p> time code flags (see below) of all tc indices to build </p>", 
        "dir": "<p> 768=FILE_MAXDIR custom directory for index and proxy files (defaults to BL_proxy) </p>", 
        "build_size_flag": "<p> size flags (see below) of all proxies to build </p>", 
        "tc": "<p> time code in use </p>", 
        "quality": "<p> proxy build quality </p>"
      }
    }, 
    "NodeGlare": {
      "doc": "<p> qdn: glare node </p>"
    }, 
    "PaintCurvePoint": {
      "fields": {
        "bez": "<p> bezier handle </p>", 
        "pressure": "<p> pressure on that point </p>"
      }
    }, 
    "MVertSkin": {
      "fields": {
        "flag": "<p> MVertSkinFlag </p>", 
        "radius": "<p> Radii of the skin, define how big the generated frames are. Currently only the first two elements are used. </p>"
      }
    }, 
    "MaskSpline": {
      "fields": {
        "parent": "<p> parenting information of the whole spline </p>", 
        "offset_mode": "<p> feather offset method </p>", 
        "flag": "<p> defferent spline flag (closed, ...) </p>", 
        "points_deform": "<p> deformed copy of 'points' {@link BezTriple}  data - not saved </p>", 
        "weight_interp": "<p> weight interpolation </p>", 
        "tot_point": "<p> total number of points </p>", 
        "points": "<p> points which defines spline itself </p>"
      }
    }, 
    "bPropertySensor": {
      "fields": {
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "Script": {
      "doc": "<p>{@link Script}  View (Obsolete) ================================== {@link Script}  Runtime Data - Obsolete (pre 2.5) </p>", 
      "fields": {
        "scriptname": "<p> store the script file here so we can re-run it on loading blender, if \"Enable Scripts\" is on 1024 = FILE_MAX </p>", 
        "scriptarg": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "BoidSettings": {
      "doc": "<p> planned for near future typedef struct BoidSignal { struct BoidSignal *next, *prev; float loc[3]; float volume, falloff; int id; } BoidSignal; typedef struct BoidSignalDefine { struct BoidSignalDefine *next, *prev; int id, rt; char name[32]; } BoidSignalDefine; </p><p> typedef struct BoidSimulationData { {@link ListBase}  signal_defines;// list of defined signals  {@link ListBase}  signals[20]; // gathers signals from all channels  struct KDTree *signaltrees[20]; char channel_names[20][32]; int last_signal_id; // used for incrementing signal ids  int flag; // switches for drawing stuff  } BoidSimulationData; </p>", 
      "fields": {
        "land_jump_speed": "<p> walk/run related </p>", 
        "air_min_speed": "<p> flying related </p>"
      }
    }, 
    "vec2f": {
      "doc": "<p> vector of two floats. </p>"
    }, 
    "FMod_Limits": {
      "doc": "<p> limits modifier data </p>", 
      "fields": {
        "rect": "<p> rect defining the min/max values </p>", 
        "flag": "<p> settings for limiting </p>"
      }
    }, 
    "SmokeFlowSettings": {
      "fields": {
        "volume_density": "<p> density emitted within mesh volume </p>", 
        "surface_distance": "<p> maximum emission distance from mesh surface </p>", 
        "verts_old": "<p> initial velocity previous vertex positions in domain space </p>", 
        "temp": "<p> delta temperature (temp - ambient temp) </p>", 
        "density": "<p> emission </p>", 
        "uvlayer_name": "<p> MAX_CUSTOMDATA_LAYER_NAME </p>", 
        "texture_size": "<p> texture control </p>", 
        "flags": "<p> absolute emission etc </p>", 
        "smd": "<p> for fast RNA access </p>", 
        "type": "<p> smoke, flames, both, outflow </p>"
      }
    }, 
    "Sequence": {
      "doc": "<p> The sequence structure is the basic struct used by any strip. each of the strips uses a different sequence structure.</p><p><h2>Warning</h2><p> The first part identical to {@link ID}  (for use in ipo's) the commend above is historic, probably we can drop the {@link ID}  compatibility, but take care making this change.</p> The first part identical to ID (for use in ipo's) the commend above is historic, probably we can drop the ID compatibility, but take care making this change.\n<h2>Warning</h2><p> This is really a '{@link Strip} ' in the UI!, name is highly confusing. </p> This is really a 'Strip' in the UI!, name is highly confusing. \n</p>", 
      "fields": {
        "anim_endofs": "<p> is subtle different to startofs / endofs </p>", 
        "lib": "<p> needed (to be like ipo), else it will raise libdata warnings, this should never be used </p>", 
        "enddisp": "<p> starting and ending points of the strip in the sequence </p>", 
        "seq1": "<p> pointers for effects: </p>", 
        "sound": "<p> the linked \"bSound\" object </p>", 
        "views_format": "<p> Multiview </p>", 
        "anims": "<p> for MOVIE strips </p>", 
        "type": "<p> flags bitmap (see below) and the type of sequence </p>", 
        "modifiers": "<p> modifiers </p>", 
        "scene": "<p> these {@link ID}  vars should never be NULL but can be when linked libs fail to load, so check on access </p>", 
        "len": "<p> the length of the contents of this strip - before handles are applied </p>", 
        "multicam_source": "<p> for multicam source selection </p>", 
        "tmp": "<p> tmp var for copying, and tagging for linked selection </p>", 
        "clip_flag": "<p> MOVIECLIP render flags </p>", 
        "endofs": "<p> frames after the first frame where display starts, frames before the last frame where display ends </p>", 
        "scene_camera": "<p> override scene camera </p>", 
        "streamindex": "<p> streamindex for movie or sound files with several streams </p>", 
        "seqbase": "<p> list of strips for metastrips </p>", 
        "pan": "<p> pitch (-0.1..10), pan -2..2 </p>", 
        "endstill": "<p> frames that use the first frame before data begins, frames that use the last frame after data ends </p>", 
        "mask": "<p> for MASK strips </p>", 
        "anim_startofs": "<p> only use part of animation file </p>", 
        "start": "<p> start frame of contents of strip in absolute frame coordinates. For metastrips start of first strip startdisp </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>", 
        "depth": "<p> machine - the strip channel, depth - the depth in the sequence when dealing with metastrips </p>", 
        "effectdata": "<p> Struct pointer for effect settings </p>", 
        "sfra": "<p> is sfra needed anymore? - it looks like its only used in one place starting frame according to the timeline of the scene. </p>", 
        "name": "<p> SEQ_NAME_MAXSTR - name, set by default and needs to be unique, for RNA paths </p>", 
        "clip": "<p> for MOVIECLIP strips </p>"
      }
    }, 
    "GP_EditBrush_Data": {
      "doc": "<p> Settings for a GPencil Stroke Sculpting {@link Brush}  </p>", 
      "fields": {
        "flag": "<p> eGP_EditBrush_Flag </p>", 
        "size": "<p> radius of brush </p>", 
        "strength": "<p> strength of effect </p>"
      }
    }, 
    "SpaceUserPref": {
      "doc": "<p> User Preferences ======================================= User Preferences View </p>", 
      "fields": {
        "filter": "<p> search term for filtering in the UI </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>"
      }
    }, 
    "MetaElem": {
      "fields": {
        "bb": "<p> Bound Box of {@link MetaElem}  </p>", 
        "quat": "<p> Rotation of {@link MetaElem}  (MUST be kept normalized) </p>", 
        "s": "<p> stiffness, how much of the element to fill </p>", 
        "expx": "<p> dimension parameters, used for some types like cubes </p>", 
        "rad": "<p> radius of the meta element </p>", 
        "len": "<p> old, only used for backwards compat. use dimensions now </p>", 
        "imat": "<p> matrix and inverted matrix </p>", 
        "rad2": "<p> temp field, used only while processing </p>", 
        "z": "<p> Position of center of {@link MetaElem}  </p>"
      }
    }, 
    "bCollisionSensor": {
      "fields": {
        "mode": "<p> flag to choose material or property </p>", 
        "materialName": "<p> material </p>", 
        "damptimer": "<p> struct {@link Material}  *ma; ////< XXX remove materialName </p>", 
        "name": "<p> property name. MAX_NAME </p>"
      }
    }, 
    "bChildOfConstraint": {
      "doc": "<p> Child Of Constraint </p>", 
      "fields": {
        "flag": "<p> settings </p>", 
        "tar": "<p> object which will act as parent (or target comes from) </p>", 
        "subtarget": "<p> string to specify a subobject target, MAX_ID_NAME-2 </p>", 
        "invmat": "<p> parent-inverse matrix to use </p>"
      }
    }, 
    "NodeImageLayer": {
      "doc": "<p> layer info for image node outputs </p>", 
      "fields": {
        "pass_flag": "<p> render pass flag, in case this is an original render pass </p>", 
        "pass_index": "<p> index in the Image->layers->passes lists </p>"
      }
    }, 
    "SpaceImage": {
      "doc": "<p> Image/UV Editor ======================================== Image/UV Editor </p>", 
      "fields": {
        "cursor": "<p> UV editor 2d cursor </p>", 
        "mode": "<p> view/paint/mask </p>", 
        "yof": "<p> user defined offset, image is centered </p>", 
        "curtile": "<p> the currently active tile of the image when tile is enabled, is kept in sync with the active faces tile </p>", 
        "centy": "<p> storage for offset while render drawing </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "dt_uv": "<p> UV draw type </p>", 
        "sticky": "<p> sticky selection type </p>", 
        "gpd": "<p> grease pencil data </p>", 
        "zoom": "<p> user defined zoom level </p>", 
        "scopes": "<p> histogram waveform and vectorscope </p>", 
        "sample_line_hist": "<p> sample line histogram </p>"
      }
    }, 
    "FileDirEntryArr": {
      "doc": "<p> Array of direntries. This struct is used in various, different contexts. In Filebrowser UI, it stores the total number of available entries, the number of visible (filtered) entries, and a subset of those in 'entries' {@link ListBase} , from idx_start (included) to idx_end (excluded). In AssetEngine context (i.e. outside of 'browsing' context), entries contain all needed data, there is no filtering, so nbr_entries_filtered, entry_idx_start and entry_idx_end should all be set to -1. </p>", 
      "fields": {
        "root": "<p> FILE_MAX </p>"
      }
    }, 
    "vec2s": {
      "doc": "<p> types vector of two shorts. </p>"
    }, 
    "DriverVar": {
      "doc": "<p> Driver Variable (dvar)</p><p> A 'variable' for use as an input for the driver evaluation. Defines a way of accessing some channel to use, that can be referred to in the expression as a variable, thus simplifying expressions and also Depsgraph building. </p>", 
      "fields": {
        "num_targets": "<p> number of targets actually used by this variable </p>", 
        "flag": "<p> validation tags, etc. (eDriverVar_Flags) </p>", 
        "curval": "<p> result of previous evaluation </p>", 
        "name": "<p> name of the variable to use in py-expression (must be valid python identifier) - MAX_ID_NAME-2 </p>", 
        "type": "<p> type of driver variable (eDriverVar_Types) </p>", 
        "targets": "<p> MAX_DRIVER_TARGETS, target slots </p>"
      }
    }, 
    "bNodeTree": {
      "doc": "<p> the basis for a Node tree, all links and nodes reside internal here only re-usable node trees are in the library though, materials and textures allocate own tree struct </p>", 
      "fields": {
        "init": "<p> set init on fileread </p>", 
        "nodetype": "<p><p> specific node type this tree is used for </p>\n@deprecated\n Deprecatedspecific node type this tree is used for </p>", 
        "edit_quality": "<p> Quality setting when editing </p>", 
        "render_quality": "<p> Quality setting when rendering </p>", 
        "inputs": "<p> Lists of {@link bNodeSocket}  to hold default values and own_index. Warning! Don't make links to these sockets, input/output nodes are used for that. These sockets are used only for generating external interfaces. </p>", 
        "execdata": "<p> execution data XXX It would be preferable to completely move this data out of the underlying node tree, so node tree execution could finally run independent of the tree itself. This would allow node trees to be merely linked by other data (materials, textures, etc.), as {@link ID}  data is supposed to. Execution data is generated from the tree once at execution start and can then be used as long as necessary, even while the tree is being modified. </p>", 
        "idname": "<p> runtime type identifier </p>", 
        "stats_draw": "<p><h2>Warning</h2><p> may be called by different threads </p> may be called by different threads \n</p>", 
        "update": "<p> update flags </p>", 
        "cur_index": "<p> sockets in groups have unique identifiers, adding new sockets always will increase this counter </p>", 
        "done": "<p> generic temporary flag for recursion check (DFS/BFS) </p>", 
        "adt": "<p> animation data (must be immediately after id for utilities to use it) </p>", 
        "typeinfo": "<p> runtime type information </p>", 
        "view_center": "<p> node tree stores own offset for consistent editor view </p>", 
        "chunksize": "<p> tile size for compositor engine </p>", 
        "previews": "<p> Node preview hash table Only available in base node trees (e.g. scene->node_tree) </p>", 
        "progress": "<p> callbacks </p>", 
        "gpd": "<p> grease pencil data </p>", 
        "interface_type": "<p> runtime RNA type of the group interface </p>", 
        "active_viewer_key": "<p> Defines the node tree instance to use for the \"active\" context, in case multiple different editors are used and make context ambiguous. </p>", 
        "is_updating": "<p> flag to prevent reentrant update calls </p>"
      }
    }, 
    "LineStyleColorModifier_Curvature_3D": {
      "doc": "<p> 3D curvature modifiers </p>"
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "doc": "<p> Geometry modifiers </p>"
    }, 
    "Editing": {
      "fields": {
        "seqbasep": "<p> pointer to the current list of seq's being edited (can be within a meta strip) </p>", 
        "act_sounddir": "<p> 1024 = FILE_MAX </p>", 
        "act_seq": "<p> Context vars, used to be static </p>", 
        "proxy_dir": "<p> 1024 = FILE_MAX </p>", 
        "seqbase": "<p> pointer to the top-most seq's </p>", 
        "act_imagedir": "<p> 1024 = FILE_MAX </p>"
      }
    }, 
    "uiFontStyle": {
      "doc": "<p> this state defines appearance of text </p>", 
      "fields": {
        "word_wrap": "<p> enable word-wrap when drawing </p>", 
        "kerning": "<p> unfitted or default kerning value. </p>", 
        "shadowcolor": "<p> 1 value, typically white or black anyway </p>", 
        "shadow": "<p> value is amount of pixels blur </p>", 
        "shady": "<p> shadow offset in pixels </p>", 
        "bold": "<p> style hint </p>", 
        "uifont_id": "<p> saved in file, 0 is default </p>", 
        "align": "<p> text align hint </p>", 
        "shadowalpha": "<p> total alpha </p>", 
        "points": "<p> actual size depends on 'global' dpi </p>"
      }
    }, 
    "ImagePaintSettings": {
      "doc": "<p><hr/> \n {@link Image}  {@link Paint}  Texture/Image Editor </p>", 
      "fields": {
        "mode": "<p> mode used for texture painting </p>", 
        "canvas": "<p> canvas when the explicit system is used for painting </p>", 
        "seam_bleed": "<p> for projection painting only </p>", 
        "dither": "<p> dither amount used when painting on byte images </p>", 
        "clone": "<p> clone layer for image mode for projective texture painting </p>", 
        "screen_grab_size": "<p> capture size for re-projection </p>", 
        "paintcursor": "<p> wm handle </p>", 
        "stencil": "<p> workaround until we support true layer masks </p>"
      }
    }, 
    "GPUSSAOSettings": {
      "doc": "<p> properties for SSAO effect </p>", 
      "fields": {
        "samples": "<p> ray samples, we use presets here for easy control instead of </p>"
      }
    }, 
    "IDProperty": {
      "fields": {
        "data": "<p> note, alignment for 64 bits </p>", 
        "len": "<p> array length, also (this is important!) string length + 1. the idea is to be able to reuse array realloc functions on strings. </p>", 
        "saved": "<p> saved is used to indicate if this struct has been saved yet. seemed like a good idea as a pad var was needed anyway :) </p>", 
        "totallen": "<p> Strings and arrays are both buffered, though the buffer isn't saved. totallen is total length of allocated array/string, including a buffer. Note that the buffering is mild; the code comes from python's list implementation. </p>", 
        "name": "<p> MAX_IDPROP_NAME </p>"
      }
    }, 
    "bGPDlayer": {
      "doc": "<p> Grease-Pencil Annotations - 'Layer' </p>", 
      "fields": {
        "parent": "<p> parent object </p>", 
        "inverse": "<p> inverse matrix (only used if parented) </p>", 
        "flag": "<p> settings for layer </p>", 
        "frames": "<p> list of annotations to display for frames ({@link bGPDframe}  list) </p>", 
        "actframe": "<p> active frame (should be the frame that is currently being displayed) </p>", 
        "color": "<p> Color for strokes in layers (replaced by palettecolor). Only used for ruler (which uses GPencil internally) </p>", 
        "thickness": "<p> current thickness to apply to strokes </p>", 
        "gstep_next": "<p> Ghosts After: max number of ghost frames to show after active frame and the following it (0 = only the ghost itself) </p>", 
        "fill": "<p> Fill color for strokes in layers. Not used and replaced by palettecolor fill </p>", 
        "tintcolor": "<p> Color used to tint layer, alpha value is used as factor </p>", 
        "gstep": "<p> Ghosts Before: max number of ghost frames to show between active frame and the one before it (0 = only the ghost itself) </p>", 
        "gcolor_next": "<p> optional color for ghosts after the active frame </p>", 
        "gcolor_prev": "<p> optional color for ghosts before the active frame </p>", 
        "parsubstr": "<p> String describing subobject info, MAX_ID_NAME-2 </p>", 
        "opacity": "<p> Opacity of the layer </p>", 
        "info": "<p> optional reference info about this layer (i.e. \"director's comments, 12/3\") this is used for the name of the layer too and kept unique. </p>"
      }
    }, 
    "SpaceClip": {
      "doc": "<p> Motion Tracking ======================================== Clip Editor </p>", 
      "fields": {
        "cursor": "<p>{@link Mask}  editor 2d cursor </p>", 
        "loc": "<p> current stabilization data </p>", 
        "gpencil_src": "<p> grease pencil </p>", 
        "flag": "<p> flags </p>", 
        "regionbase": "<p> storage of regions for inactive spaces </p>", 
        "zoom": "<p> user defined zoom level </p>", 
        "mode": "<p> editor mode (editing context being displayed) </p>", 
        "yof": "<p> user defined offset, image is centered </p>", 
        "view": "<p> type of the clip editor view </p>", 
        "ylockof": "<p> user defined offset from locked position </p>", 
        "postproc_flag": "<p> movie postprocessing </p>", 
        "pad4": "<p> pivot point for transforms </p>", 
        "angle": "<p> pre-composed stabilization data </p>", 
        "unistabmat": "<p> current stabilization matrix and the same matrix in unified space, defined when drawing and used for mouse position calculation </p>", 
        "scopes": "<p> different scoped displayed in space panels </p>", 
        "path_length": "<p> length of displaying path, in frames </p>", 
        "user": "<p> user of clip </p>", 
        "clip": "<p> clip data </p>"
      }
    }, 
    "SkinModifierData": {
      "doc": "<p> Skin modifier </p>"
    }, 
    "bActionConstraint": {
      "doc": "<p> Action Constraint </p>", 
      "fields": {
        "subtarget": "<p> MAX_ID_NAME-2 </p>", 
        "type": "<p> what transform 'channel' drives the result </p>", 
        "local": "<p> was used in versions prior to the Constraints recode </p>"
      }
    }, 
    "SequenceModifierData": {
      "doc": "<p> ***************** {@link Sequence}  modifiers ****************** </p>", 
      "fields": {
        "mask_input_type": "<p> mask input, either sequence or mask {@link ID}  </p>", 
        "name": "<p> MAX_NAME </p>"
      }
    }, 
    "SDNA": {
      "fields": {
        "nr_structs": "<p> number of struct types </p>", 
        "nr_types": "<p> number of basic types + struct types </p>", 
        "nr_names": "<p> total number of struct members </p>", 
        "types": "<p> type names </p>", 
        "names": "<p> struct member names </p>", 
        "typelens": "<p> type lengths </p>", 
        "data": "<p> full copy of 'encoded' data (when data_alloc is set, otherwise borrowed). </p>", 
        "pointerlen": "<p> size of a pointer in bytes </p>", 
        "structs": "<p> sp = structs[a] is the address of a struct definition sp[0] is struct type number, sp[1] amount of members</p><p> (sp[2], sp[3]), (sp[4], sp[5]), .. are the member type and name numbers respectively </p>", 
        "structs_map": "<p> ghash for faster lookups, requires WITH_DNA_GHASH to be used for now </p>", 
        "datalen": "<p> length of data </p>"
      }
    }, 
    "bActionStrip": {
      "doc": "<p> #define ACTSTRIP_MOD_DEFORM 0 #define ACTSTRIP_MOD_NOISE 1 </p><p> NLA-Modifier Types (UNUSED) </p>", 
      "fields": {
        "stridechannel": "<p> Instead of stridelen, it uses an action channel </p>", 
        "actend": "<p> The range of frames taken from the action </p>", 
        "ipo": "<p> Blending ipo - was used for some old NAN era experiments. Non-functional currently. </p>", 
        "scale": "<p> The amount the action range is scaled by </p>", 
        "modifiers": "<p> modifier stack </p>", 
        "stride_axis": "<p> axis 0=x, 1=y, 2=z </p>", 
        "act": "<p> The action referenced by this strip </p>", 
        "actoffs": "<p> Offset within action, for cycles and striding </p>", 
        "stridelen": "<p> The stridelength (considered when flag & ACT_USESTRIDE) </p>", 
        "curmod": "<p> current modifier for buttons </p>", 
        "repeat": "<p> The number of times to repeat the action range </p>", 
        "blendout": "<p> The number of frames on either end of the strip's length to fade in/out </p>", 
        "end": "<p> The range of frames covered by this strip </p>", 
        "offs_bone": "<p> if repeat, use this bone/channel for defining offset </p>", 
        "object": "<p> For groups, the actual object being nla'ed </p>"
      }
    }, 
    "bTwoDFilterActuator": {
      "fields": {
        "flag": "<p> (flag == 0) means 2D filter is activate and (flag != 0) means 2D filter is inactive </p>", 
        "type": "<p> Tells what type of 2D Filter </p>", 
        "float_arg": "<p> a float argument </p>"
      }
    }, 
    "DupliObject": {
      "doc": "<p> runtime only, but include here for rna access </p>", 
      "fields": {
        "persistent_id": "<p> persistent identifier for a dupli object, for inter-frame matching of objects with motion blur, or inter-update matching for syncing 2*MAX_DUPLI_RECUR </p>", 
        "type": "<p> from Object.transflag </p>", 
        "particle_system": "<p> particle this dupli was generated from </p>"
      }
    }, 
    "GridPaintMask": {
      "fields": {
        "data": "<p> The data array contains gridsize*gridsize elements </p>", 
        "level": "<p> The maximum multires level associated with this grid </p>"
      }
    }, 
    "Lattice": {
      "fields": {
        "actbp": "<p> active element index, unset with LT_ACTBP_NONE </p>", 
        "vgroup": "<p> multiply the influence, MAX_VGROUP_NAME </p>", 
        "ipo": "<p><p> old animation system, deprecated for 2.5 </p>\n@deprecated\n Deprecatedold animation system, deprecated for 2.5 </p>"
      }
    }, 
    "ClothCollSettings": {
      "fields": {
        "epsilon": "<p> min distance for collisions. </p>", 
        "self_loop_count": "<p> How many iterations for the selfcollision loop </p>", 
        "loop_count": "<p> How many iterations for the collision loop. </p>", 
        "self_friction": "<p> Fiction/damping with self contact. </p>", 
        "selfepsilon": "<p> for selfcollision </p>", 
        "flags": "<p> collision flags defined in BKE_cloth.h </p>", 
        "collision_list": "<p> e.g. pointer to temp memory for collisions </p>", 
        "damping": "<p> Collision restitution on contact with other object. </p>", 
        "friction": "<p> Friction/damping applied on contact with other object. </p>", 
        "vgroup_selfcol": "<p> vgroup to paint which vertices are used for self collisions </p>", 
        "group": "<p> Only use colliders from this group of objects </p>"
      }
    }, 
    "MaskLayerShape": {
      "doc": "<p> one per frame </p>", 
      "fields": {
        "flag": "<p> animation flag </p>", 
        "data": "<p> u coordinate along spline segment and weight of this point </p>", 
        "tot_vert": "<p> to ensure no buffer overruns's: alloc size is (tot_vert * MASK_OBJECT_SHAPE_ELEM_SIZE) </p>", 
        "frame": "<p> different flags of this point </p>"
      }
    }, 
    "MultiresLevel": {
      "fields": {
        "verts": "<p> Kept for compatibility with even older files </p>"
      }
    }, 
    "WipeVars": {
      "doc": "<p> ************* {@link Effect}  Variable Structs ********* </p>"
    }, 
    "ArrayModifierData": {
      "fields": {
        "fit_type": "<p> determines how duplicate count is calculated; one of:<ul><li><p> MOD_ARR_FIXEDCOUNT -> fixed</p></li><li><p> MOD_ARR_FITLENGTH -> calculated to fit a set length</p></li><li><p> MOD_ARR_FITCURVE -> calculated to fit the length of a {@link Curve}  object </p></li></ul> \nMOD_ARR_FIXEDCOUNT -> fixedMOD_ARR_FITLENGTH -> calculated to fit a set lengthMOD_ARR_FITCURVE -> calculated to fit the length of a Curve object \n</p>", 
        "offset": "<p> a constant duplicate offset; 1 means the duplicates are 1 unit apart </p>", 
        "end_cap": "<p> the object with which to cap the end of the array </p>", 
        "offset_type": "<p> flags specifying how total offset is calculated; binary OR of:<ul><li><p> MOD_ARR_OFF_CONST -> total offset += offset</p></li><li><p> MOD_ARR_OFF_RELATIVE -> total offset += relative * object width</p></li><li><p> MOD_ARR_OFF_OBJ -> total offset += offset_ob's matrix total offset is the sum of the individual enabled offsets </p></li></ul> \nMOD_ARR_OFF_CONST -> total offset += offsetMOD_ARR_OFF_RELATIVE -> total offset += relative * object widthMOD_ARR_OFF_OBJ -> total offset += offset_ob's matrix total offset is the sum of the individual enabled offsets \n</p>", 
        "curve_ob": "<p> the curve object to use for MOD_ARR_FITCURVE </p>", 
        "length": "<p> the length over which to distribute the duplicates </p>", 
        "flags": "<p> general flags: MOD_ARR_MERGE -> merge vertices in adjacent duplicates </p>", 
        "count": "<p> the number of duplicates to generate for MOD_ARR_FIXEDCOUNT </p>", 
        "scale": "<p> a scaled factor for duplicate offsets; 1 means the duplicates are 1 object-width apart </p>", 
        "offset_ob": "<p> the object to use for object offset </p>", 
        "merge_dist": "<p> the limit below which to merge vertices in adjacent duplicates </p>", 
        "start_cap": "<p> the object with which to cap the start of the array </p>"
      }
    }, 
    "bNodePreview": {
      "fields": {
        "hash_entry": "<p> must be first </p>"
      }
    }
  }, 
  "module": "DNA", 
  "source": "Blender Source Code", 
  "version": "2.78"
}